
SBSFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000140  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text.SE_CORE_Bin 000031a1  08000200  08000200  00010200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .SE_IF_Code   000004e0  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00006ed8  08003c00  08003c00  00013c00  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .RamFunc      00000030  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00001330  0800ab08  0800ab08  0001ab08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0800be38  0800be38  000210a8  2**0
                  CONTENTS
  7 .ARM          00000008  0800be38  0800be38  0001be38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0800be40  0800be40  000210a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000008  0800be40  0800be40  0001be40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0800be48  0800be48  0001be48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000098  20001010  0800be50  00021010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000097c  200010a8  0800bee8  000210a8  2**3
                  ALLOC
 13 ._user_heap_stack 00003004  20001a24  0800bee8  00021a24  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000210a8  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002f7a7  00000000  00000000  000210d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006d8a  00000000  00000000  0005087f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001418  00000000  00000000  00057610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002160  00000000  00000000  00058a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c281  00000000  00000000  0005ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002979b  00000000  00000000  00086e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00104cfc  00000000  00000000  000b05a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  001b52a0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00003d50  00000000  00000000  001b52f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    0000f5ff  00000000  00000000  001b9044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text.SE_CORE_Bin:

08000200 <SE_CORE_Bin_start>:
 8000200:	00000000 	.word	0x00000000
 8000204:	b580b40c 	.word	0xb580b40c
 8000208:	af00b086 	.word	0xaf00b086
 800020c:	60396078 	.word	0x60396078
 8000210:	60fb4673 	.word	0x60fb4673
 8000214:	4a3368fb 	.word	0x4a3368fb
 8000218:	d2014293 	.word	0xd2014293
 800021c:	f962f002 	.word	0xf962f002
 8000220:	4a3168fb 	.word	0x4a3168fb
 8000224:	d9014293 	.word	0xd9014293
 8000228:	f95cf002 	.word	0xf95cf002
 800022c:	68382104 	.word	0x68382104
 8000230:	fe7cf000 	.word	0xfe7cf000
 8000234:	4a2d4603 	.word	0x4a2d4603
 8000238:	d0014293 	.word	0xd0014293
 800023c:	f952f002 	.word	0xf952f002
 8000240:	68382104 	.word	0x68382104
 8000244:	fea2f000 	.word	0xfea2f000
 8000248:	4a284603 	.word	0x4a284603
 800024c:	d1014293 	.word	0xd1014293
 8000250:	f948f002 	.word	0xf948f002
 8000254:	4a2368fb 	.word	0x4a2368fb
 8000258:	d2014293 	.word	0xd2014293
 800025c:	f942f002 	.word	0xf942f002
 8000260:	4a2168fb 	.word	0x4a2168fb
 8000264:	d9014293 	.word	0xd9014293
 8000268:	f93cf002 	.word	0xf93cf002
 800026c:	68382104 	.word	0x68382104
 8000270:	fe5cf000 	.word	0xfe5cf000
 8000274:	4a1d4603 	.word	0x4a1d4603
 8000278:	d0014293 	.word	0xd0014293
 800027c:	f932f002 	.word	0xf932f002
 8000280:	68382104 	.word	0x68382104
 8000284:	fe82f000 	.word	0xfe82f000
 8000288:	4a184603 	.word	0x4a184603
 800028c:	d1014293 	.word	0xd1014293
 8000290:	f928f002 	.word	0xf928f002
 8000294:	689b4b16 	.word	0x689b4b16
 8000298:	60134a16 	.word	0x60134a16
 800029c:	4a164b14 	.word	0x4a164b14
 80002a0:	683b609a 	.word	0x683b609a
 80002a4:	601a4a15 	.word	0x601a4a15
 80002a8:	0324f107 	.word	0x0324f107
 80002ac:	693a613b 	.word	0x693a613b
 80002b0:	68786839 	.word	0x68786839
 80002b4:	fe9ef001 	.word	0xfe9ef001
 80002b8:	202c6178 	.word	0x202c6178
 80002bc:	ff26f000 	.word	0xff26f000
 80002c0:	f000202d 	.word	0xf000202d
 80002c4:	f3bfff23 	.word	0xf3bfff23
 80002c8:	bf008f6f 	.word	0xbf008f6f
 80002cc:	4b094a08 	.word	0x4b094a08
 80002d0:	6093681b 	.word	0x6093681b
 80002d4:	4618697b 	.word	0x4618697b
 80002d8:	46bd3718 	.word	0x46bd3718
 80002dc:	4080e8bd 	.word	0x4080e8bd
 80002e0:	4770b002 	.word	0x4770b002
 80002e4:	08003600 	.word	0x08003600
 80002e8:	08003bff 	.word	0x08003bff
 80002ec:	0012310f 	.word	0x0012310f
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	20000600 	.word	0x20000600
 80002f8:	08003000 	.word	0x08003000
 80002fc:	0012e223 	.word	0x0012e223
	...
 8000400:	f244b43e 	.word	0xf244b43e
 8000404:	f6c5514f 	.word	0xf6c5514f
 8000408:	f244714d 	.word	0xf244714d
 800040c:	f6c5524b 	.word	0xf6c5524b
 8000410:	f6447259 	.word	0xf6447259
 8000414:	f2c57343 	.word	0xf2c57343
 8000418:	f644034d 	.word	0xf644034d
 800041c:	f2c36441 	.word	0xf2c36441
 8000420:	e8801459 	.word	0xe8801459
 8000424:	bc3e001e 	.word	0xbc3e001e
 8000428:	b43e4770 	.word	0xb43e4770
 800042c:	21baf24f 	.word	0x21baf24f
 8000430:	0197f6cf 	.word	0x0197f6cf
 8000434:	323ef24e 	.word	0x323ef24e
 8000438:	4207f6cd 	.word	0x4207f6cd
 800043c:	3316f24c 	.word	0x3316f24c
 8000440:	0371f6c7 	.word	0x0371f6c7
 8000444:	141df24f 	.word	0x141df24f
 8000448:	64b0f6c3 	.word	0x64b0f6c3
 800044c:	001ee880 	.word	0x001ee880
 8000450:	0010f100 	.word	0x0010f100
 8000454:	51f0f249 	.word	0x51f0f249
 8000458:	41b0f2c4 	.word	0x41b0f2c4
 800045c:	2254f241 	.word	0x2254f241
 8000460:	0281f6c4 	.word	0x0281f6c4
 8000464:	43fbf642 	.word	0x43fbf642
 8000468:	1366f6cb 	.word	0x1366f6cb
 800046c:	5454f643 	.word	0x5454f643
 8000470:	24a5f6c4 	.word	0x24a5f6c4
 8000474:	001ee880 	.word	0x001ee880
 8000478:	0010f100 	.word	0x0010f100
 800047c:	61e8f242 	.word	0x61e8f242
 8000480:	6104f2c7 	.word	0x6104f2c7
 8000484:	72b7f243 	.word	0x72b7f243
 8000488:	428bf6c3 	.word	0x428bf6c3
 800048c:	0346f64d 	.word	0x0346f64d
 8000490:	23fdf6c6 	.word	0x23fdf6c6
 8000494:	1463f246 	.word	0x1463f246
 8000498:	647cf2c4 	.word	0x647cf2c4
 800049c:	001ee880 	.word	0x001ee880
 80004a0:	0010f100 	.word	0x0010f100
 80004a4:	51c3f647 	.word	0x51c3f647
 80004a8:	61e9f2c4 	.word	0x61e9f2c4
 80004ac:	1244f243 	.word	0x1244f243
 80004b0:	726ef2cd 	.word	0x726ef2cd
 80004b4:	53e1f646 	.word	0x53e1f646
 80004b8:	03baf2c7 	.word	0x03baf2c7
 80004bc:	44edf244 	.word	0x44edf244
 80004c0:	24baf2c0 	.word	0x24baf2c0
 80004c4:	001ee880 	.word	0x001ee880
 80004c8:	4770bc3e 	.word	0x4770bc3e
	...
 8000500:	f000b508 	.word	0xf000b508
 8000504:	4801f8db 	.word	0x4801f8db
 8000508:	bf00bd08 	.word	0xbf00bd08
 800050c:	0012310f 	.word	0x0012310f
	...
 8000600:	4c05b510 	.word	0x4c05b510
 8000604:	b9337823 	.word	0xb9337823
 8000608:	b1134b04 	.word	0xb1134b04
 800060c:	f3af4804 	.word	0xf3af4804
 8000610:	23018000 	.word	0x23018000
 8000614:	bd107023 	.word	0xbd107023
 8000618:	2000041c 	.word	0x2000041c
 800061c:	00000000 	.word	0x00000000
 8000620:	08002f38 	.word	0x08002f38
 8000624:	4b03b508 	.word	0x4b03b508
 8000628:	4903b11b 	.word	0x4903b11b
 800062c:	f3af4803 	.word	0xf3af4803
 8000630:	bd088000 	.word	0xbd088000
 8000634:	00000000 	.word	0x00000000
 8000638:	20000420 	.word	0x20000420
 800063c:	08002f38 	.word	0x08002f38
 8000640:	4a0e4b0d 	.word	0x4a0e4b0d
 8000644:	1a9b480e 	.word	0x1a9b480e
 8000648:	bf48b082 	.word	0xbf48b082
 800064c:	109b3303 	.word	0x109b3303
 8000650:	23009300 	.word	0x23009300
 8000654:	99019301 	.word	0x99019301
 8000658:	42999b00 	.word	0x42999b00
 800065c:	b002d301 	.word	0xb002d301
 8000660:	99014770 	.word	0x99014770
 8000664:	f8509b01 	.word	0xf8509b01
 8000668:	f8421021 	.word	0xf8421021
 800066c:	9b011023 	.word	0x9b011023
 8000670:	93013301 	.word	0x93013301
 8000674:	bf00e7ef 	.word	0xbf00e7ef
 8000678:	20000408 	.word	0x20000408
 800067c:	20000400 	.word	0x20000400
 8000680:	08003388 	.word	0x08003388
 8000684:	4a0c4b0b 	.word	0x4a0c4b0b
 8000688:	b0821a9b 	.word	0xb0821a9b
 800068c:	3303bf48 	.word	0x3303bf48
 8000690:	9300109b 	.word	0x9300109b
 8000694:	93012300 	.word	0x93012300
 8000698:	99009801 	.word	0x99009801
 800069c:	d3014288 	.word	0xd3014288
 80006a0:	4770b002 	.word	0x4770b002
 80006a4:	f8429901 	.word	0xf8429901
 80006a8:	99013021 	.word	0x99013021
 80006ac:	91013101 	.word	0x91013101
 80006b0:	bf00e7f2 	.word	0xbf00e7f2
 80006b4:	20000604 	.word	0x20000604
 80006b8:	2000041c 	.word	0x2000041c
 80006bc:	f7ffb508 	.word	0xf7ffb508
 80006c0:	e8bdffe1 	.word	0xe8bdffe1
 80006c4:	f7ff4008 	.word	0xf7ff4008
 80006c8:	e7febfbb 	.word	0xe7febfbb
 80006cc:	bffdf7ff 	.word	0xbffdf7ff
 80006d0:	43b0f04f 	.word	0x43b0f04f
 80006d4:	f8d3b082 	.word	0xf8d3b082
 80006d8:	f4422150 	.word	0xf4422150
 80006dc:	f8c31280 	.word	0xf8c31280
 80006e0:	f8d32150 	.word	0xf8d32150
 80006e4:	f4033150 	.word	0xf4033150
 80006e8:	93011380 	.word	0x93011380
 80006ec:	4b0a9b01 	.word	0x4b0a9b01
 80006f0:	20d4f8d3 	.word	0x20d4f8d3
 80006f4:	7200f442 	.word	0x7200f442
 80006f8:	20d4f8c3 	.word	0x20d4f8c3
 80006fc:	f4426a1a 	.word	0xf4426a1a
 8000700:	621a7200 	.word	0x621a7200
 8000704:	bf20bf40 	.word	0xbf20bf40
 8000708:	68d34a04 	.word	0x68d34a04
 800070c:	4300f443 	.word	0x4300f443
 8000710:	b00260d3 	.word	0xb00260d3
 8000714:	bf004770 	.word	0xbf004770
 8000718:	58000800 	.word	0x58000800
 800071c:	58000400 	.word	0x58000400
 8000720:	43b0f04f 	.word	0x43b0f04f
 8000724:	6d1ab507 	.word	0x6d1ab507
 8000728:	1280f442 	.word	0x1280f442
 800072c:	6d1b651a 	.word	0x6d1b651a
 8000730:	1380f403 	.word	0x1380f403
 8000734:	9b019301 	.word	0x9b019301
 8000738:	681a4b08 	.word	0x681a4b08
 800073c:	0201f042 	.word	0x0201f042
 8000740:	681a601a 	.word	0x681a601a
 8000744:	3280f442 	.word	0x3280f442
 8000748:	202c601a 	.word	0x202c601a
 800074c:	fcd0f000 	.word	0xfcd0f000
 8000750:	b003202d 	.word	0xb003202d
 8000754:	eb04f85d 	.word	0xeb04f85d
 8000758:	bccaf000 	.word	0xbccaf000
 800075c:	58000c00 	.word	0x58000c00
 8000760:	68534a02 	.word	0x68534a02
 8000764:	0302f023 	.word	0x0302f023
 8000768:	47706053 	.word	0x47706053
 800076c:	58000c00 	.word	0x58000c00
 8000770:	f44f4b04 	.word	0xf44f4b04
 8000774:	609a3200 	.word	0x609a3200
 8000778:	f422685a 	.word	0xf422685a
 800077c:	605a3200 	.word	0x605a3200
 8000780:	bf004770 	.word	0xbf004770
 8000784:	58000c00 	.word	0x58000c00
 8000788:	68da4b1e 	.word	0x68da4b1e
 800078c:	0f02f012 	.word	0x0f02f012
 8000790:	461ab510 	.word	0x461ab510
 8000794:	6859d109 	.word	0x6859d109
 8000798:	d4060389 	.word	0xd4060389
 800079c:	f442685a 	.word	0xf442685a
 80007a0:	605a3200 	.word	0x605a3200
 80007a4:	f8d2f002 	.word	0xf8d2f002
 80007a8:	68d3bd10 	.word	0x68d3bd10
 80007ac:	d407079b 	.word	0xd407079b
 80007b0:	039c6853 	.word	0x039c6853
 80007b4:	6853d404 	.word	0x6853d404
 80007b8:	3300f443 	.word	0x3300f443
 80007bc:	e7f16053 	.word	0xe7f16053
 80007c0:	68e34c10 	.word	0x68e34c10
 80007c4:	0f08f013 	.word	0x0f08f013
 80007c8:	d10d4623 	.word	0xd10d4623
 80007cc:	03106862 	.word	0x03106862
 80007d0:	6863d40a 	.word	0x6863d40a
 80007d4:	2300f443 	.word	0x2300f443
 80007d8:	4b0b6063 	.word	0x4b0b6063
 80007dc:	4798681b 	.word	0x4798681b
 80007e0:	2300f44f 	.word	0x2300f44f
 80007e4:	e7df60a3 	.word	0xe7df60a3
 80007e8:	069168da 	.word	0x069168da
 80007ec:	685ad4dc 	.word	0x685ad4dc
 80007f0:	d4d90292 	.word	0xd4d90292
 80007f4:	f442685a 	.word	0xf442685a
 80007f8:	605a1200 	.word	0x605a1200
 80007fc:	f878f002 	.word	0xf878f002
 8000800:	bf00e7d2 	.word	0xbf00e7d2
 8000804:	58000c00 	.word	0x58000c00
 8000808:	20000438 	.word	0x20000438
 800080c:	4c12b538 	.word	0x4c12b538
 8000810:	f01369e3 	.word	0xf01369e3
 8000814:	46250f02 	.word	0x46250f02
 8000818:	6863d007 	.word	0x6863d007
 800081c:	d404079b 	.word	0xd404079b
 8000820:	f8a0f002 	.word	0xf8a0f002
 8000824:	60a32302 	.word	0x60a32302
 8000828:	69ebe009 	.word	0x69ebe009
 800082c:	d50707d8 	.word	0xd50707d8
 8000830:	07d9686b 	.word	0x07d9686b
 8000834:	f002d404 	.word	0xf002d404
 8000838:	2301f845 	.word	0x2301f845
 800083c:	bd3860ab 	.word	0xbd3860ab
 8000840:	69e34c05 	.word	0x69e34c05
 8000844:	d5fa071a 	.word	0xd5fa071a
 8000848:	071b6863 	.word	0x071b6863
 800084c:	f002d4f7 	.word	0xf002d4f7
 8000850:	2308f8c1 	.word	0x2308f8c1
 8000854:	bf00e7e7 	.word	0xbf00e7e7
 8000858:	58000c00 	.word	0x58000c00
 800085c:	43b0f04f 	.word	0x43b0f04f
 8000860:	6d1ab510 	.word	0x6d1ab510
 8000864:	f4424c1c 	.word	0xf4424c1c
 8000868:	651a1280 	.word	0x651a1280
 800086c:	b08a6d1b 	.word	0xb08a6d1b
 8000870:	1380f403 	.word	0x1380f403
 8000874:	9b019301 	.word	0x9b019301
 8000878:	223f4b18 	.word	0x223f4b18
 800087c:	619a609a 	.word	0x619a609a
 8000880:	f442685a 	.word	0xf442685a
 8000884:	605a127c 	.word	0x605a127c
 8000888:	f442695a 	.word	0xf442695a
 800088c:	615a127c 	.word	0x615a127c
 8000890:	f042685a 	.word	0xf042685a
 8000894:	605a023f 	.word	0x605a023f
 8000898:	f042695a 	.word	0xf042695a
 800089c:	615a023f 	.word	0x615a023f
 80008a0:	ffecf001 	.word	0xffecf001
 80008a4:	a9022000 	.word	0xa9022000
 80008a8:	90039402 	.word	0x90039402
 80008ac:	ff4cf001 	.word	0xff4cf001
 80008b0:	7386f504 	.word	0x7386f504
 80008b4:	a8049305 	.word	0xa8049305
 80008b8:	7386f44f 	.word	0x7386f44f
 80008bc:	7406f504 	.word	0x7406f504
 80008c0:	94069307 	.word	0x94069307
 80008c4:	f864f002 	.word	0xf864f002
 80008c8:	ffd6f001 	.word	0xffd6f001
 80008cc:	78134a04 	.word	0x78134a04
 80008d0:	d0fc2b01 	.word	0xd0fc2b01
 80008d4:	bd10b00a 	.word	0xbd10b00a
 80008d8:	200300d4 	.word	0x200300d4
 80008dc:	58000c00 	.word	0x58000c00
 80008e0:	20000400 	.word	0x20000400
 80008e4:	2000b508 	.word	0x2000b508
 80008e8:	feb8f001 	.word	0xfeb8f001
 80008ec:	f001b928 	.word	0xf001b928
 80008f0:	f44ffee9 	.word	0xf44ffee9
 80008f4:	f00160fa 	.word	0xf00160fa
 80008f8:	e8bdfea3 	.word	0xe8bdfea3
 80008fc:	f0014008 	.word	0xf0014008
 8000900:	0000befd 	.word	0x0000befd
 8000904:	22004b01 	.word	0x22004b01
 8000908:	4770701a 	.word	0x4770701a
 800090c:	20000400 	.word	0x20000400
 8000910:	22014b01 	.word	0x22014b01
 8000914:	4770701a 	.word	0x4770701a
 8000918:	2000043c 	.word	0x2000043c
 800091c:	781a4b03 	.word	0x781a4b03
 8000920:	d5fc07d2 	.word	0xd5fc07d2
 8000924:	701a2200 	.word	0x701a2200
 8000928:	bf004770 	.word	0xbf004770
 800092c:	2000043c 	.word	0x2000043c
 8000930:	4c3ab5f7 	.word	0x4c3ab5f7
 8000934:	f000202c 	.word	0xf000202c
 8000938:	202dfbdb 	.word	0x202dfbdb
 800093c:	fbd8f000 	.word	0xfbd8f000
 8000940:	4b376822 	.word	0x4b376822
 8000944:	4627429a 	.word	0x4627429a
 8000948:	2300d104 	.word	0x2300d104
 800094c:	48356063 	.word	0x48356063
 8000950:	bdf0b003 	.word	0xbdf0b003
 8000954:	4e346865 	.word	0x4e346865
 8000958:	6066b9f5 	.word	0x6066b9f5
 800095c:	f0014628 	.word	0xf0014628
 8000960:	28fffe7d 	.word	0x28fffe7d
 8000964:	4628d10b 	.word	0x4628d10b
 8000968:	fe78f001 	.word	0xfe78f001
 800096c:	f64a4c2f 	.word	0xf64a4c2f
 8000970:	f44f25aa 	.word	0xf44f25aa
 8000974:	f00160fa 	.word	0xf00160fa
 8000978:	6025fe63 	.word	0x6025fe63
 800097c:	f3bfe7f9 	.word	0xf3bfe7f9
 8000980:	492b8f4f 	.word	0x492b8f4f
 8000984:	68ca4b2b 	.word	0x68ca4b2b
 8000988:	62e0f402 	.word	0x62e0f402
 800098c:	60cb4313 	.word	0x60cb4313
 8000990:	8f4ff3bf 	.word	0x8f4ff3bf
 8000994:	e7fdbf00 	.word	0xe7fdbf00
 8000998:	d00242b5 	.word	0xd00242b5
 800099c:	429d4b26 	.word	0x429d4b26
 80009a0:	2000d12d 	.word	0x2000d12d
 80009a4:	fe5af001 	.word	0xfe5af001
 80009a8:	b1784601 	.word	0xb1784601
 80009ac:	d00828ff 	.word	0xd00828ff
 80009b0:	f64a4c1e 	.word	0xf64a4c1e
 80009b4:	f44f25aa 	.word	0xf44f25aa
 80009b8:	f00160fa 	.word	0xf00160fa
 80009bc:	6025fe41 	.word	0x6025fe41
 80009c0:	4b1ee7f9 	.word	0x4b1ee7f9
 80009c4:	23006063 	.word	0x23006063
 80009c8:	e7c0603b 	.word	0xe7c0603b
 80009cc:	4b1a6862 	.word	0x4b1a6862
 80009d0:	d11642b2 	.word	0xd11642b2
 80009d4:	f0016063 	.word	0xf0016063
 80009d8:	4c14fe52 	.word	0x4c14fe52
 80009dc:	25aaf64a 	.word	0x25aaf64a
 80009e0:	607af44f 	.word	0x607af44f
 80009e4:	fe2cf001 	.word	0xfe2cf001
 80009e8:	f10d6025 	.word	0xf10d6025
 80009ec:	f0010007 	.word	0xf0010007
 80009f0:	f89dfe35 	.word	0xf89dfe35
 80009f4:	2b003007 	.word	0x2b003007
 80009f8:	2300d0f2 	.word	0x2300d0f2
 80009fc:	4810603b 	.word	0x4810603b
 8000a00:	429ae7a6 	.word	0x429ae7a6
 8000a04:	f001d1f9 	.word	0xf001d1f9
 8000a08:	4c08fe5d 	.word	0x4c08fe5d
 8000a0c:	25aaf64a 	.word	0x25aaf64a
 8000a10:	60faf44f 	.word	0x60faf44f
 8000a14:	fe14f001 	.word	0xfe14f001
 8000a18:	e7f96025 	.word	0xe7f96025
 8000a1c:	20001000 	.word	0x20001000
 8000a20:	375aa32c 	.word	0x375aa32c
 8000a24:	0012310f 	.word	0x0012310f
 8000a28:	df23ac61 	.word	0xdf23ac61
 8000a2c:	40003000 	.word	0x40003000
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	05fa0004 	.word	0x05fa0004
 8000a38:	98fca513 	.word	0x98fca513
 8000a3c:	f234b97a 	.word	0xf234b97a
 8000a40:	00018799 	.word	0x00018799
 8000a44:	4604b5f8 	.word	0x4604b5f8
 8000a48:	4d24b910 	.word	0x4d24b910
 8000a4c:	bdf84628 	.word	0xbdf84628
 8000a50:	4b244d23 	.word	0x4b244d23
 8000a54:	4628602b 	.word	0x4628602b
 8000a58:	fd1df000 	.word	0xfd1df000
 8000a5c:	2800462b 	.word	0x2800462b
 8000a60:	2204d1f3 	.word	0x2204d1f3
 8000a64:	60a8606a 	.word	0x60a8606a
 8000a68:	21202201 	.word	0x21202201
 8000a6c:	f10560e8 	.word	0xf10560e8
 8000a70:	61690060 	.word	0x61690060
 8000a74:	62ea626a 	.word	0x62ea626a
 8000a78:	f1044621 	.word	0xf1044621
 8000a7c:	46050610 	.word	0x46050610
 8000a80:	2055f891 	.word	0x2055f891
 8000a84:	7054f891 	.word	0x7054f891
 8000a88:	ea420412 	.word	0xea420412
 8000a8c:	f8916207 	.word	0xf8916207
 8000a90:	433a7057 	.word	0x433a7057
 8000a94:	7056f891 	.word	0x7056f891
 8000a98:	ea423104 	.word	0xea423104
 8000a9c:	428e2207 	.word	0x428e2207
 8000aa0:	2b04f840 	.word	0x2b04f840
 8000aa4:	480ed1ec 	.word	0x480ed1ec
 8000aa8:	f000611d 	.word	0xf000611d
 8000aac:	4d0bfcd1 	.word	0x4d0bfcd1
 8000ab0:	490e4b0d 	.word	0x490e4b0d
 8000ab4:	bf082800 	.word	0xbf082800
 8000ab8:	2204461d 	.word	0x2204461d
 8000abc:	f0024620 	.word	0xf0024620
 8000ac0:	2800fa17 	.word	0x2800fa17
 8000ac4:	202cd1c2 	.word	0x202cd1c2
 8000ac8:	fb12f000 	.word	0xfb12f000
 8000acc:	f000202d 	.word	0xf000202d
 8000ad0:	2001fb0f 	.word	0x2001fb0f
 8000ad4:	fde7f001 	.word	0xfde7f001
 8000ad8:	bf00e7b8 	.word	0xbf00e7b8
 8000adc:	00018799 	.word	0x00018799
 8000ae0:	20000440 	.word	0x20000440
 8000ae4:	50060000 	.word	0x50060000
 8000ae8:	0012310f 	.word	0x0012310f
 8000aec:	08003270 	.word	0x08003270
 8000af0:	b191b507 	.word	0xb191b507
 8000af4:	480ab918 	.word	0x480ab918
 8000af8:	f85db003 	.word	0xf85db003
 8000afc:	2a00fb04 	.word	0x2a00fb04
 8000b00:	2b00d0f9 	.word	0x2b00d0f9
 8000b04:	23ffd0f7 	.word	0x23ffd0f7
 8000b08:	46139300 	.word	0x46139300
 8000b0c:	4601b28a 	.word	0x4601b28a
 8000b10:	f0004804 	.word	0xf0004804
 8000b14:	2800ff15 	.word	0x2800ff15
 8000b18:	4803d1ed 	.word	0x4803d1ed
 8000b1c:	bf00e7ec 	.word	0xbf00e7ec
 8000b20:	00018799 	.word	0x00018799
 8000b24:	20000440 	.word	0x20000440
 8000b28:	0012310f 	.word	0x0012310f
 8000b2c:	b128b508 	.word	0xb128b508
 8000b30:	4803b121 	.word	0x4803b121
 8000b34:	fcaff000 	.word	0xfcaff000
 8000b38:	bd084802 	.word	0xbd084802
 8000b3c:	e7fc4802 	.word	0xe7fc4802
 8000b40:	20000440 	.word	0x20000440
 8000b44:	0012310f 	.word	0x0012310f
 8000b48:	00018799 	.word	0x00018799
 8000b4c:	b5084808 	.word	0xb5084808
 8000b50:	67832320 	.word	0x67832320
 8000b54:	f8802300 	.word	0xf8802300
 8000b58:	30703074 	.word	0x30703074
 8000b5c:	f908f002 	.word	0xf908f002
 8000b60:	4b054a04 	.word	0x4b054a04
 8000b64:	bf0c2800 	.word	0xbf0c2800
 8000b68:	46184610 	.word	0x46184610
 8000b6c:	bf00bd08 	.word	0xbf00bd08
 8000b70:	20000440 	.word	0x20000440
 8000b74:	0012310f 	.word	0x0012310f
 8000b78:	00018799 	.word	0x00018799
 8000b7c:	460ab508 	.word	0x460ab508
 8000b80:	48054601 	.word	0x48054601
 8000b84:	f8b8f002 	.word	0xf8b8f002
 8000b88:	4b054a04 	.word	0x4b054a04
 8000b8c:	bf0c2800 	.word	0xbf0c2800
 8000b90:	46184610 	.word	0x46184610
 8000b94:	bf00bd08 	.word	0xbf00bd08
 8000b98:	200004b0 	.word	0x200004b0
 8000b9c:	0012310f 	.word	0x0012310f
 8000ba0:	00018799 	.word	0x00018799
 8000ba4:	460ab508 	.word	0x460ab508
 8000ba8:	48054601 	.word	0x48054601
 8000bac:	f97af002 	.word	0xf97af002
 8000bb0:	4b054a04 	.word	0x4b054a04
 8000bb4:	bf0c2800 	.word	0xbf0c2800
 8000bb8:	46184610 	.word	0x46184610
 8000bbc:	bf00bd08 	.word	0xbf00bd08
 8000bc0:	200004b0 	.word	0x200004b0
 8000bc4:	0012310f 	.word	0x0012310f
 8000bc8:	00018799 	.word	0x00018799
 8000bcc:	43f0e92d 	.word	0x43f0e92d
 8000bd0:	4604b0b5 	.word	0x4604b0b5
 8000bd4:	21002234 	.word	0x21002234
 8000bd8:	f002a80a 	.word	0xf002a80a
 8000bdc:	2300f9a5 	.word	0x2300f9a5
 8000be0:	2c009301 	.word	0x2c009301
 8000be4:	80a2f000 	.word	0x80a2f000
 8000be8:	22044951 	.word	0x22044951
 8000bec:	f0024620 	.word	0xf0024620
 8000bf0:	b910f97f 	.word	0xb910f97f
 8000bf4:	f7ff484f 	.word	0xf7ff484f
 8000bf8:	2300fc18 	.word	0x2300fc18
 8000bfc:	a8172620 	.word	0xa8172620
 8000c00:	f88d9619 	.word	0xf88d9619
 8000c04:	f0023060 	.word	0xf0023060
 8000c08:	f8dff8b3 	.word	0xf8dff8b3
 8000c0c:	28009128 	.word	0x28009128
 8000c10:	808af040 	.word	0x808af040
 8000c14:	46212280 	.word	0x46212280
 8000c18:	f002a817 	.word	0xf002a817
 8000c1c:	2800f86d 	.word	0x2800f86d
 8000c20:	8082f040 	.word	0x8082f040
 8000c24:	0808f10d 	.word	0x0808f10d
 8000c28:	4641aa01 	.word	0x4641aa01
 8000c2c:	f002a817 	.word	0xf002a817
 8000c30:	2800f939 	.word	0x2800f939
 8000c34:	f109d178 	.word	0xf109d178
 8000c38:	4b3f0740 	.word	0x4b3f0740
 8000c3c:	3040f8c9 	.word	0x3040f8c9
 8000c40:	f0014638 	.word	0xf0014638
 8000c44:	2800f849 	.word	0x2800f849
 8000c48:	2301d135 	.word	0x2301d135
 8000c4c:	4b3b930c 	.word	0x4b3b930c
 8000c50:	199a930d 	.word	0x199a930d
 8000c54:	f103920e 	.word	0xf103920e
 8000c58:	920f0240 	.word	0x920f0240
 8000c5c:	0260f103 	.word	0x0260f103
 8000c60:	93163380 	.word	0x93163380
 8000c64:	0306eb09 	.word	0x0306eb09
 8000c68:	f1049312 	.word	0xf1049312
 8000c6c:	92100380 	.word	0x92100380
 8000c70:	f44f9313 	.word	0xf44f9313
 8000c74:	f10452a0 	.word	0xf10452a0
 8000c78:	a90a03a0 	.word	0xa90a03a0
 8000c7c:	e9cd4638 	.word	0xe9cd4638
 8000c80:	e9cd660a 	.word	0xe9cd660a
 8000c84:	f8cd3814 	.word	0xf8cd3814
 8000c88:	f0019044 	.word	0xf0019044
 8000c8c:	4606f9a5 	.word	0x4606f9a5
 8000c90:	4638b988 	.word	0x4638b988
 8000c94:	f84af001 	.word	0xf84af001
 8000c98:	d10c2801 	.word	0xd10c2801
 8000c9c:	0040f8d9 	.word	0x0040f8d9
 8000ca0:	f88d9b0a 	.word	0xf88d9b0a
 8000ca4:	347f605c 	.word	0x347f605c
 8000ca8:	42984403 	.word	0x42984403
 8000cac:	f89dd12c 	.word	0xf89dd12c
 8000cb0:	2b55305c 	.word	0x2b55305c
 8000cb4:	4c22d036 	.word	0x4c22d036
 8000cb8:	f0014822 	.word	0xf0014822
 8000cbc:	4822f823 	.word	0x4822f823
 8000cc0:	68834922 	.word	0x68834922
 8000cc4:	72fff640 	.word	0x72fff640
 8000cc8:	f2f2fbb3 	.word	0xf2f2fbb3
 8000ccc:	3202ebc2 	.word	0x3202ebc2
 8000cd0:	440b1a9b 	.word	0x440b1a9b
 8000cd4:	f1034a17 	.word	0xf1034a17
 8000cd8:	f8530540 	.word	0xf8530540
 8000cdc:	f8426b04 	.word	0xf8426b04
 8000ce0:	42ab6b04 	.word	0x42ab6b04
 8000ce4:	6882d1f9 	.word	0x6882d1f9
 8000ce8:	f6404819 	.word	0xf6404819
 8000cec:	fbb273ff 	.word	0xfbb273ff
 8000cf0:	ebc3f3f3 	.word	0xebc3f3f3
 8000cf4:	1ad33303 	.word	0x1ad33303
 8000cf8:	22744419 	.word	0x22744419
 8000cfc:	f906f002 	.word	0xf906f002
 8000d00:	b0354620 	.word	0xb0354620
 8000d04:	83f0e8bd 	.word	0x83f0e8bd
 8000d08:	555bf893 	.word	0x555bf893
 8000d0c:	2f01f814 	.word	0x2f01f814
 8000d10:	105cf89d 	.word	0x105cf89d
 8000d14:	f082406a 	.word	0xf082406a
 8000d18:	430a0255 	.word	0x430a0255
 8000d1c:	205cf88d 	.word	0x205cf88d
 8000d20:	e7c23b01 	.word	0xe7c23b01
 8000d24:	e7c74c0b 	.word	0xe7c74c0b
 8000d28:	e7c84c05 	.word	0xe7c84c05
 8000d2c:	e7e74c04 	.word	0xe7e74c04
 8000d30:	08003270 	.word	0x08003270
 8000d34:	20000524 	.word	0x20000524
 8000d38:	58002000 	.word	0x58002000
 8000d3c:	08003140 	.word	0x08003140
 8000d40:	00018799 	.word	0x00018799
 8000d44:	20000564 	.word	0x20000564
 8000d48:	e000e010 	.word	0xe000e010
 8000d4c:	08000500 	.word	0x08000500
 8000d50:	200004b0 	.word	0x200004b0
 8000d54:	0012310f 	.word	0x0012310f
 8000d58:	202cb508 	.word	0x202cb508
 8000d5c:	f9c8f000 	.word	0xf9c8f000
 8000d60:	f000202d 	.word	0xf000202d
 8000d64:	2001f9c5 	.word	0x2001f9c5
 8000d68:	fcb9f001 	.word	0xfcb9f001
 8000d6c:	43b0f04f 	.word	0x43b0f04f
 8000d70:	f4426ada 	.word	0xf4426ada
 8000d74:	62da3280 	.word	0x62da3280
 8000d78:	f4226ada 	.word	0xf4226ada
 8000d7c:	62da3280 	.word	0x62da3280
 8000d80:	0000bd08 	.word	0x0000bd08
 8000d84:	8f4ff3bf 	.word	0x8f4ff3bf
 8000d88:	4b064905 	.word	0x4b064905
 8000d8c:	f40268ca 	.word	0xf40268ca
 8000d90:	431362e0 	.word	0x431362e0
 8000d94:	f3bf60cb 	.word	0xf3bf60cb
 8000d98:	bf008f4f 	.word	0xbf008f4f
 8000d9c:	bf00e7fd 	.word	0xbf00e7fd
 8000da0:	e000ed00 	.word	0xe000ed00
 8000da4:	05fa0004 	.word	0x05fa0004
 8000da8:	4a084b07 	.word	0x4a084b07
 8000dac:	ea02881b 	.word	0xea02881b
 8000db0:	f1022283 	.word	0xf1022283
 8000db4:	f1006100 	.word	0xf1006100
 8000db8:	42814378 	.word	0x42814378
 8000dbc:	0b18bf8e 	.word	0x0b18bf8e
 8000dc0:	0b001a98 	.word	0x0b001a98
 8000dc4:	bf004770 	.word	0xbf004770
 8000dc8:	1fff75e0 	.word	0x1fff75e0
 8000dcc:	001ffc00 	.word	0x001ffc00
 8000dd0:	4a0a4809 	.word	0x4a0a4809
 8000dd4:	2300b508 	.word	0x2300b508
 8000dd8:	3305e9c0 	.word	0x3305e9c0
 8000ddc:	23038083 	.word	0x23038083
 8000de0:	62036002 	.word	0x62036002
 8000de4:	f9a8f000 	.word	0xf9a8f000
 8000de8:	4b064a05 	.word	0x4b064a05
 8000dec:	bf142800 	.word	0xbf142800
 8000df0:	46184610 	.word	0x46184610
 8000df4:	bf00bd08 	.word	0xbf00bd08
 8000df8:	20000570 	.word	0x20000570
 8000dfc:	40023000 	.word	0x40023000
 8000e00:	00018799 	.word	0x00018799
 8000e04:	0012310f 	.word	0x0012310f
 8000e08:	2300b57f 	.word	0x2300b57f
 8000e0c:	460c4606 	.word	0x460c4606
 8000e10:	f0009300 	.word	0xf0009300
 8000e14:	b9d8fe65 	.word	0xb9d8fe65
 8000e18:	46302302 	.word	0x46302302
 8000e1c:	f7ff9301 	.word	0xf7ff9301
 8000e20:	3c01ffc3 	.word	0x3c01ffc3
 8000e24:	90024605 	.word	0x90024605
 8000e28:	f7ff1930 	.word	0xf7ff1930
 8000e2c:	1c43ffbd 	.word	0x1c43ffbd
 8000e30:	46691b5b 	.word	0x46691b5b
 8000e34:	9303a801 	.word	0x9303a801
 8000e38:	fee6f000 	.word	0xfee6f000
 8000e3c:	4b064c05 	.word	0x4b064c05
 8000e40:	bf082800 	.word	0xbf082800
 8000e44:	f000461c 	.word	0xf000461c
 8000e48:	4620fe5d 	.word	0x4620fe5d
 8000e4c:	bd70b004 	.word	0xbd70b004
 8000e50:	e7fa4c00 	.word	0xe7fa4c00
 8000e54:	00018799 	.word	0x00018799
 8000e58:	0012310f 	.word	0x0012310f
 8000e5c:	4606b5f8 	.word	0x4606b5f8
 8000e60:	4617460d 	.word	0x4617460d
 8000e64:	4c11b912 	.word	0x4c11b912
 8000e68:	bdf84620 	.word	0xbdf84620
 8000e6c:	42834b10 	.word	0x42834b10
 8000e70:	1882d8f9 	.word	0x1882d8f9
 8000e74:	7300f503 	.word	0x7300f503
 8000e78:	d8f4429a 	.word	0xd8f4429a
 8000e7c:	fe30f000 	.word	0xfe30f000
 8000e80:	28004604 	.word	0x28004604
 8000e84:	3d08d1ef 	.word	0x3d08d1ef
 8000e88:	e9f5e007 	.word	0xe9f5e007
 8000e8c:	19312302 	.word	0x19312302
 8000e90:	f0002001 	.word	0xf0002001
 8000e94:	b930fe73 	.word	0xb930fe73
 8000e98:	42bc3408 	.word	0x42bc3408
 8000e9c:	4c05d3f5 	.word	0x4c05d3f5
 8000ea0:	fe30f000 	.word	0xfe30f000
 8000ea4:	4c01e7e0 	.word	0x4c01e7e0
 8000ea8:	bf00e7fa 	.word	0xbf00e7fa
 8000eac:	00018799 	.word	0x00018799
 8000eb0:	08018000 	.word	0x08018000
 8000eb4:	0012310f 	.word	0x0012310f
 8000eb8:	4c16b530 	.word	0x4c16b530
 8000ebc:	d822428c 	.word	0xd822428c
 8000ec0:	f504188b 	.word	0xf504188b
 8000ec4:	429c7400 	.word	0x429c7400
 8000ec8:	2300bf34 	.word	0x2300bf34
 8000ecc:	4c122301 	.word	0x4c122301
 8000ed0:	d20242a1 	.word	0xd20242a1
 8000ed4:	4811b92b 	.word	0x4811b92b
 8000ed8:	4d11e014 	.word	0x4d11e014
 8000edc:	42ac188c 	.word	0x42ac188c
 8000ee0:	4b10d8f8 	.word	0x4b10d8f8
 8000ee4:	625c2400 	.word	0x625c2400
 8000ee8:	44023901 	.word	0x44023901
 8000eec:	d0014282 	.word	0xd0014282
 8000ef0:	b1546a5c 	.word	0xb1546a5c
 8000ef4:	4a0c6a59 	.word	0x4a0c6a59
 8000ef8:	29004808 	.word	0x29004808
 8000efc:	4610bf08 	.word	0x4610bf08
 8000f00:	625a2200 	.word	0x625a2200
 8000f04:	2300bd30 	.word	0x2300bd30
 8000f08:	f811e7e1 	.word	0xf811e7e1
 8000f0c:	f8004f01 	.word	0xf8004f01
 8000f10:	e7eb4b01 	.word	0xe7eb4b01
 8000f14:	08018000 	.word	0x08018000
 8000f18:	0804c000 	.word	0x0804c000
 8000f1c:	00018799 	.word	0x00018799
 8000f20:	08080000 	.word	0x08080000
 8000f24:	20000570 	.word	0x20000570
 8000f28:	0012310f 	.word	0x0012310f
 8000f2c:	1e4bb508 	.word	0x1e4bb508
 8000f30:	b1414403 	.word	0xb1414403
 8000f34:	428a43c2 	.word	0x428a43c2
 8000f38:	4a05d305 	.word	0x4a05d305
 8000f3c:	d8024293 	.word	0xd8024293
 8000f40:	42834b04 	.word	0x42834b04
 8000f44:	f7ffd901 	.word	0xf7ffd901
 8000f48:	4803ff1d 	.word	0x4803ff1d
 8000f4c:	bf00bd08 	.word	0xbf00bd08
 8000f50:	2002ffff 	.word	0x2002ffff
 8000f54:	20001000 	.word	0x20001000
 8000f58:	0012310f 	.word	0x0012310f
 8000f5c:	1e4bb508 	.word	0x1e4bb508
 8000f60:	b1414403 	.word	0xb1414403
 8000f64:	428a43c2 	.word	0x428a43c2
 8000f68:	4a05d305 	.word	0x4a05d305
 8000f6c:	d8024293 	.word	0xd8024293
 8000f70:	42984b04 	.word	0x42984b04
 8000f74:	f7ffd201 	.word	0xf7ffd201
 8000f78:	4803ff05 	.word	0x4803ff05
 8000f7c:	bf00bd08 	.word	0xbf00bd08
 8000f80:	2002ffff 	.word	0x2002ffff
 8000f84:	20001010 	.word	0x20001010
 8000f88:	0012310f 	.word	0x0012310f
 8000f8c:	b181b508 	.word	0xb181b508
 8000f90:	1e4b4a09 	.word	0x1e4b4a09
 8000f94:	44034282 	.word	0x44034282
 8000f98:	429ad901 	.word	0x429ad901
 8000f9c:	4a07d804 	.word	0x4a07d804
 8000fa0:	d2044282 	.word	0xd2044282
 8000fa4:	d202429a 	.word	0xd202429a
 8000fa8:	428843c0 	.word	0x428843c0
 8000fac:	f7ffd201 	.word	0xf7ffd201
 8000fb0:	4803fee9 	.word	0x4803fee9
 8000fb4:	bf00bd08 	.word	0xbf00bd08
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000fff 	.word	0x20000fff
 8000fc0:	00018799 	.word	0x00018799
 8000fc4:	4b1bb508 	.word	0x4b1bb508
 8000fc8:	2b00699b 	.word	0x2b00699b
 8000fcc:	4a19da2e 	.word	0x4a19da2e
 8000fd0:	f0436993 	.word	0xf0436993
 8000fd4:	61934300 	.word	0x61934300
 8000fd8:	6a534a17 	.word	0x6a534a17
 8000fdc:	62533301 	.word	0x62533301
 8000fe0:	f0034673 	.word	0xf0034673
 8000fe4:	2b0d030f 	.word	0x2b0d030f
 8000fe8:	f3efd016 	.word	0xf3efd016
 8000fec:	69da8308 	.word	0x69da8308
 8000ff0:	7f80f012 	.word	0x7f80f012
 8000ff4:	699ad016 	.word	0x699ad016
 8000ff8:	0101f022 	.word	0x0101f022
 8000ffc:	f4018809 	.word	0xf4018809
 8001000:	f5b04068 	.word	0xf5b04068
 8001004:	d00a4f68 	.word	0xd00a4f68
 8001008:	4178f401 	.word	0x4178f401
 800100c:	4f70f5b1 	.word	0x4f70f5b1
 8001010:	3202d005 	.word	0x3202d005
 8001014:	e00b619a 	.word	0xe00b619a
 8001018:	8309f3ef 	.word	0x8309f3ef
 800101c:	3204e7e7 	.word	0x3204e7e7
 8001020:	e005619a 	.word	0xe005619a
 8001024:	3204699a 	.word	0x3204699a
 8001028:	e001619a 	.word	0xe001619a
 800102c:	fa6cf001 	.word	0xfa6cf001
 8001030:	bf00bd08 	.word	0xbf00bd08
 8001034:	58004000 	.word	0x58004000
 8001038:	20000570 	.word	0x20000570
 800103c:	ba64f001 	.word	0xba64f001
 8001040:	00004770 	.word	0x00004770
 8001044:	47704800 	.word	0x47704800
 8001048:	0012310f 	.word	0x0012310f
 800104c:	4b086802 	.word	0x4b086802
 8001050:	b082429a 	.word	0xb082429a
 8001054:	f04fd10a 	.word	0xf04fd10a
 8001058:	6cda43b0 	.word	0x6cda43b0
 800105c:	3280f442 	.word	0x3280f442
 8001060:	6cdb64da 	.word	0x6cdb64da
 8001064:	3380f403 	.word	0x3380f403
 8001068:	9b019301 	.word	0x9b019301
 800106c:	4770b002 	.word	0x4770b002
 8001070:	50060000 	.word	0x50060000
 8001074:	4b056802 	.word	0x4b056802
 8001078:	bf01429a 	.word	0xbf01429a
 800107c:	42b0f04f 	.word	0x42b0f04f
 8001080:	f4236cd3 	.word	0xf4236cd3
 8001084:	64d33380 	.word	0x64d33380
 8001088:	bf004770 	.word	0xbf004770
 800108c:	50060000 	.word	0x50060000
 8001090:	4b086802 	.word	0x4b086802
 8001094:	b082429a 	.word	0xb082429a
 8001098:	f04fd10a 	.word	0xf04fd10a
 800109c:	6d1a43b0 	.word	0x6d1a43b0
 80010a0:	3280f442 	.word	0x3280f442
 80010a4:	6d1b651a 	.word	0x6d1b651a
 80010a8:	3380f403 	.word	0x3380f403
 80010ac:	9b019301 	.word	0x9b019301
 80010b0:	4770b002 	.word	0x4770b002
 80010b4:	58002000 	.word	0x58002000
 80010b8:	4b096802 	.word	0x4b096802
 80010bc:	d10d429a 	.word	0xd10d429a
 80010c0:	43b0f04f 	.word	0x43b0f04f
 80010c4:	f4426b1a 	.word	0xf4426b1a
 80010c8:	631a3280 	.word	0x631a3280
 80010cc:	f4226b1a 	.word	0xf4226b1a
 80010d0:	631a3280 	.word	0x631a3280
 80010d4:	f4226d1a 	.word	0xf4226d1a
 80010d8:	651a3280 	.word	0x651a3280
 80010dc:	bf004770 	.word	0xbf004770
 80010e0:	58002000 	.word	0x58002000
 80010e4:	f7ff4770 	.word	0xf7ff4770
 80010e8:	f7ffbb4f 	.word	0xf7ffbb4f
 80010ec:	0000bb8f 	.word	0x0000bb8f
 80010f0:	db082800 	.word	0xdb082800
 80010f4:	23010942 	.word	0x23010942
 80010f8:	001ff000 	.word	0x001ff000
 80010fc:	f000fa03 	.word	0xf000fa03
 8001100:	f8434b01 	.word	0xf8434b01
 8001104:	47700022 	.word	0x47700022
 8001108:	e000e100 	.word	0xe000e100
 800110c:	db0d2800 	.word	0xdb0d2800
 8001110:	22010943 	.word	0x22010943
 8001114:	001ff000 	.word	0x001ff000
 8001118:	f000fa02 	.word	0xf000fa02
 800111c:	4a043320 	.word	0x4a043320
 8001120:	0023f842 	.word	0x0023f842
 8001124:	8f4ff3bf 	.word	0x8f4ff3bf
 8001128:	8f6ff3bf 	.word	0x8f6ff3bf
 800112c:	bf004770 	.word	0xbf004770
 8001130:	e000e100 	.word	0xe000e100
 8001134:	00004770 	.word	0x00004770
 8001138:	4604b510 	.word	0x4604b510
 800113c:	2001b908 	.word	0x2001b908
 8001140:	7f43bd10 	.word	0x7f43bd10
 8001144:	02fff003 	.word	0x02fff003
 8001148:	7702b913 	.word	0x7702b913
 800114c:	fff2f7ff 	.word	0xfff2f7ff
 8001150:	77632302 	.word	0x77632302
 8001154:	b9e37923 	.word	0xb9e37923
 8001158:	4a136823 	.word	0x4a136823
 800115c:	689a615a 	.word	0x689a615a
 8001160:	0218f022 	.word	0x0218f022
 8001164:	7962609a 	.word	0x7962609a
 8001168:	b9d26823 	.word	0xb9d26823
 800116c:	32fff04f 	.word	0x32fff04f
 8001170:	689a611a 	.word	0x689a611a
 8001174:	f0226961 	.word	0xf0226961
 8001178:	430a0260 	.word	0x430a0260
 800117c:	689a609a 	.word	0x689a609a
 8001180:	f02269a1 	.word	0xf02269a1
 8001184:	430a0280 	.word	0x430a0280
 8001188:	2301609a 	.word	0x2301609a
 800118c:	20007763 	.word	0x20007763
 8001190:	e9d4e7d6 	.word	0xe9d4e7d6
 8001194:	46201202 	.word	0x46201202
 8001198:	f808f000 	.word	0xf808f000
 800119c:	d0e22800 	.word	0xd0e22800
 80011a0:	6922e7cd 	.word	0x6922e7cd
 80011a4:	bf00e7e4 	.word	0xbf00e7e4
 80011a8:	04c11db7 	.word	0x04c11db7
 80011ac:	231fb510 	.word	0x231fb510
 80011b0:	d3063b01 	.word	0xd3063b01
 80011b4:	f403fa21 	.word	0xf403fa21
 80011b8:	d5f907e4 	.word	0xd5f907e4
 80011bc:	d0142a08 	.word	0xd0142a08
 80011c0:	b13ad802 	.word	0xb13ad802
 80011c4:	e00d2001 	.word	0xe00d2001
 80011c8:	d00c2a10 	.word	0xd00c2a10
 80011cc:	d1f92a18 	.word	0xd1f92a18
 80011d0:	d8f72b06 	.word	0xd8f72b06
 80011d4:	61416800 	.word	0x61416800
 80011d8:	f0236883 	.word	0xf0236883
 80011dc:	431a0318 	.word	0x431a0318
 80011e0:	20006082 	.word	0x20006082
 80011e4:	2b07bd10 	.word	0x2b07bd10
 80011e8:	2b0fe7f3 	.word	0x2b0fe7f3
 80011ec:	68c3e7f1 	.word	0x68c3e7f1
 80011f0:	b1a1b1a3 	.word	0xb1a1b1a3
 80011f4:	2f80f5b1 	.word	0x2f80f5b1
 80011f8:	6802d110 	.word	0x6802d110
 80011fc:	63d16819 	.word	0x63d16819
 8001200:	63916859 	.word	0x63916859
 8001204:	63516899 	.word	0x63516899
 8001208:	631168d9 	.word	0x631168d9
 800120c:	61d16919 	.word	0x61d16919
 8001210:	61916959 	.word	0x61916959
 8001214:	61516999 	.word	0x61516999
 8001218:	611369db 	.word	0x611369db
 800121c:	68024770 	.word	0x68024770
 8001220:	61d16819 	.word	0x61d16819
 8001224:	61916859 	.word	0x61916859
 8001228:	61516899 	.word	0x61516899
 800122c:	e7f468db 	.word	0xe7f468db
 8001230:	4606b570 	.word	0x4606b570
 8001234:	f001460c 	.word	0xf001460c
 8001238:	4605f9e1 	.word	0x4605f9e1
 800123c:	68536832 	.word	0x68536832
 8001240:	d50107db 	.word	0xd50107db
 8001244:	bd702000 	.word	0xbd702000
 8001248:	d0f81c61 	.word	0xd0f81c61
 800124c:	f9d6f001 	.word	0xf9d6f001
 8001250:	42a01b40 	.word	0x42a01b40
 8001254:	2c00d801 	.word	0x2c00d801
 8001258:	2001d1f0 	.word	0x2001d1f0
 800125c:	0000e7f3 	.word	0x0000e7f3
 8001260:	41f0e92d 	.word	0x41f0e92d
 8001264:	46044e79 	.word	0x46044e79
 8001268:	ce0f460f 	.word	0xce0f460f
 800126c:	466db08c 	.word	0x466db08c
 8001270:	ce0fc50f 	.word	0xce0fc50f
 8001274:	e896c50f 	.word	0xe896c50f
 8001278:	e885000f 	.word	0xe885000f
 800127c:	6aa3000f 	.word	0x6aa3000f
 8001280:	b90369e5 	.word	0xb90369e5
 8001284:	682300ad 	.word	0x682300ad
 8001288:	2d00681a 	.word	0x2d00681a
 800128c:	80cdf000 	.word	0x80cdf000
 8001290:	42c0f422 	.word	0x42c0f422
 8001294:	5200f442 	.word	0x5200f442
 8001298:	681a601a 	.word	0x681a601a
 800129c:	060ff015 	.word	0x060ff015
 80012a0:	0201f042 	.word	0x0201f042
 80012a4:	d01f601a 	.word	0xd01f601a
 80012a8:	1815ea4f 	.word	0x1815ea4f
 80012ac:	0888ea4f 	.word	0x0888ea4f
 80012b0:	45b02600 	.word	0x45b02600
 80012b4:	d85e6823 	.word	0xd85e6823
 80012b8:	0281f3c5 	.word	0x0281f3c5
 80012bc:	428a2100 	.word	0x428a2100
 80012c0:	808bf040 	.word	0x808bf040
 80012c4:	0503f015 	.word	0x0503f015
 80012c8:	8093f040 	.word	0x8093f040
 80012cc:	29043101 	.word	0x29043101
 80012d0:	d1fb609d 	.word	0xd1fb609d
 80012d4:	46204639 	.word	0x46204639
 80012d8:	ffaaf7ff 	.word	0xffaaf7ff
 80012dc:	28006823 	.word	0x28006823
 80012e0:	809ef000 	.word	0x809ef000
 80012e4:	e033681a 	.word	0xe033681a
 80012e8:	42b508ad 	.word	0x42b508ad
 80012ec:	2000d803 	.word	0x2000d803
 80012f0:	e8bdb00c 	.word	0xe8bdb00c
 80012f4:	8fa381f0 	.word	0x8fa381f0
 80012f8:	682269a1 	.word	0x682269a1
 80012fc:	4620b29b 	.word	0x4620b29b
 8001300:	3023f851 	.word	0x3023f851
 8001304:	8fa36093 	.word	0x8fa36093
 8001308:	b29b3301 	.word	0xb29b3301
 800130c:	8fa387a3 	.word	0x8fa387a3
 8001310:	f851b29b 	.word	0xf851b29b
 8001314:	60933023 	.word	0x60933023
 8001318:	33018fa3 	.word	0x33018fa3
 800131c:	87a3b29b 	.word	0x87a3b29b
 8001320:	b29b8fa3 	.word	0xb29b8fa3
 8001324:	3023f851 	.word	0x3023f851
 8001328:	8fa36093 	.word	0x8fa36093
 800132c:	b29b3301 	.word	0xb29b3301
 8001330:	8fa387a3 	.word	0x8fa387a3
 8001334:	f851b29b 	.word	0xf851b29b
 8001338:	60933023 	.word	0x60933023
 800133c:	33018fa3 	.word	0x33018fa3
 8001340:	87a3b29b 	.word	0x87a3b29b
 8001344:	f7ff4639 	.word	0xf7ff4639
 8001348:	6823ff73 	.word	0x6823ff73
 800134c:	b168681a 	.word	0xb168681a
 8001350:	0201f022 	.word	0x0201f022
 8001354:	6d63601a 	.word	0x6d63601a
 8001358:	0310f043 	.word	0x0310f043
 800135c:	20016563 	.word	0x20016563
 8001360:	f8842300 	.word	0xf8842300
 8001364:	f8840051 	.word	0xf8840051
 8001368:	e7c13050 	.word	0xe7c13050
 800136c:	0280f042 	.word	0x0280f042
 8001370:	3604601a 	.word	0x3604601a
 8001374:	8fa2e7b9 	.word	0x8fa2e7b9
 8001378:	b29269a1 	.word	0xb29269a1
 800137c:	f8514620 	.word	0xf8514620
 8001380:	609a2022 	.word	0x609a2022
 8001384:	32018fa2 	.word	0x32018fa2
 8001388:	87a2b292 	.word	0x87a2b292
 800138c:	b2928fa2 	.word	0xb2928fa2
 8001390:	2022f851 	.word	0x2022f851
 8001394:	8fa2609a 	.word	0x8fa2609a
 8001398:	b2923201 	.word	0xb2923201
 800139c:	8fa287a2 	.word	0x8fa287a2
 80013a0:	f851b292 	.word	0xf851b292
 80013a4:	609a2022 	.word	0x609a2022
 80013a8:	32018fa2 	.word	0x32018fa2
 80013ac:	87a2b292 	.word	0x87a2b292
 80013b0:	b2928fa2 	.word	0xb2928fa2
 80013b4:	2022f851 	.word	0x2022f851
 80013b8:	8fa3609a 	.word	0x8fa3609a
 80013bc:	b29b3301 	.word	0xb29b3301
 80013c0:	463987a3 	.word	0x463987a3
 80013c4:	ff34f7ff 	.word	0xff34f7ff
 80013c8:	681a6823 	.word	0x681a6823
 80013cc:	d1bf2800 	.word	0xd1bf2800
 80013d0:	0280f042 	.word	0x0280f042
 80013d4:	3604601a 	.word	0x3604601a
 80013d8:	8fa0e76b 	.word	0x8fa0e76b
 80013dc:	b28069a6 	.word	0xb28069a6
 80013e0:	f8563101 	.word	0xf8563101
 80013e4:	60980020 	.word	0x60980020
 80013e8:	30018fa0 	.word	0x30018fa0
 80013ec:	87a0b280 	.word	0x87a0b280
 80013f0:	8fa1e765 	.word	0x8fa1e765
 80013f4:	b28969a0 	.word	0xb28969a0
 80013f8:	f8503201 	.word	0xf8503201
 80013fc:	68601021 	.word	0x68601021
 8001400:	0540eb05 	.word	0x0540eb05
 8001404:	eb00a80c 	.word	0xeb00a80c
 8001408:	f8550585 	.word	0xf8550585
 800140c:	40010c30 	.word	0x40010c30
 8001410:	21006099 	.word	0x21006099
 8001414:	f43f2a04 	.word	0xf43f2a04
 8001418:	6099af5d 	.word	0x6099af5d
 800141c:	e7f93201 	.word	0xe7f93201
 8001420:	f042681a 	.word	0xf042681a
 8001424:	601a0280 	.word	0x601a0280
 8001428:	6861e762 	.word	0x6861e762
 800142c:	0206f022 	.word	0x0206f022
 8001430:	601a430a 	.word	0x601a430a
 8001434:	f422681a 	.word	0xf422681a
 8001438:	f44242c0 	.word	0xf44242c0
 800143c:	601a5200 	.word	0x601a5200
 8001440:	f042681a 	.word	0xf042681a
 8001444:	601a0201 	.word	0x601a0201
 8001448:	e7514628 	.word	0xe7514628
 800144c:	08003240 	.word	0x08003240
 8001450:	4604b510 	.word	0x4604b510
 8001454:	f890b1e8 	.word	0xf890b1e8
 8001458:	f0033051 	.word	0xf0033051
 800145c:	b91b02ff 	.word	0xb91b02ff
 8001460:	2050f880 	.word	0x2050f880
 8001464:	fdf2f7ff 	.word	0xfdf2f7ff
 8001468:	3001e9d4 	.word	0x3001e9d4
 800146c:	680a6821 	.word	0x680a6821
 8001470:	69604303 	.word	0x69604303
 8001474:	22a0f422 	.word	0x22a0f422
 8001478:	f0224303 	.word	0xf0224303
 800147c:	43130266 	.word	0x43130266
 8001480:	2000600b 	.word	0x2000600b
 8001484:	65602301 	.word	0x65602301
 8001488:	f88465a0 	.word	0xf88465a0
 800148c:	64633051 	.word	0x64633051
 8001490:	2001bd10 	.word	0x2001bd10
 8001494:	b538e7fc 	.word	0xb538e7fc
 8001498:	24014605 	.word	0x24014605
 800149c:	6802b180 	.word	0x6802b180
 80014a0:	24006444 	.word	0x24006444
 80014a4:	f8a087c4 	.word	0xf8a087c4
 80014a8:	87844040 	.word	0x87844040
 80014ac:	f0236813 	.word	0xf0236813
 80014b0:	60130301 	.word	0x60130301
 80014b4:	fddef7ff 	.word	0xfddef7ff
 80014b8:	4051f885 	.word	0x4051f885
 80014bc:	4050f885 	.word	0x4050f885
 80014c0:	bd384620 	.word	0xbd384620
 80014c4:	8fc34770 	.word	0x8fc34770
 80014c8:	b5306802 	.word	0xb5306802
 80014cc:	6b45b29b 	.word	0x6b45b29b
 80014d0:	3023f855 	.word	0x3023f855
 80014d4:	8fc36093 	.word	0x8fc36093
 80014d8:	b29b3301 	.word	0xb29b3301
 80014dc:	8fc387c3 	.word	0x8fc387c3
 80014e0:	b085b29b 	.word	0xb085b29b
 80014e4:	3023f855 	.word	0x3023f855
 80014e8:	8fc36093 	.word	0x8fc36093
 80014ec:	b29b3301 	.word	0xb29b3301
 80014f0:	8fc387c3 	.word	0x8fc387c3
 80014f4:	4604b29b 	.word	0x4604b29b
 80014f8:	3023f855 	.word	0x3023f855
 80014fc:	8fc36093 	.word	0x8fc36093
 8001500:	b29b3301 	.word	0xb29b3301
 8001504:	8fc387c3 	.word	0x8fc387c3
 8001508:	f855b29b 	.word	0xf855b29b
 800150c:	60933023 	.word	0x60933023
 8001510:	33018fc3 	.word	0x33018fc3
 8001514:	87c3b29b 	.word	0x87c3b29b
 8001518:	fe8af7ff 	.word	0xfe8af7ff
 800151c:	6822b188 	.word	0x6822b188
 8001520:	f0236813 	.word	0xf0236813
 8001524:	60130301 	.word	0x60130301
 8001528:	f0436d63 	.word	0xf0436d63
 800152c:	65630310 	.word	0x65630310
 8001530:	f8842301 	.word	0xf8842301
 8001534:	23003051 	.word	0x23003051
 8001538:	3050f884 	.word	0x3050f884
 800153c:	f7ff4620 	.word	0xf7ff4620
 8001540:	6823ffc1 	.word	0x6823ffc1
 8001544:	f042681a 	.word	0xf042681a
 8001548:	601a0280 	.word	0x601a0280
 800154c:	920068da 	.word	0x920068da
 8001550:	920168da 	.word	0x920168da
 8001554:	68db68da 	.word	0x68db68da
 8001558:	f8b49303 	.word	0xf8b49303
 800155c:	92023042 	.word	0x92023042
 8001560:	089b3303 	.word	0x089b3303
 8001564:	f8b42100 	.word	0xf8b42100
 8001568:	b2922040 	.word	0xb2922040
 800156c:	d201429a 	.word	0xd201429a
 8001570:	d1012904 	.word	0xd1012904
 8001574:	bd30b005 	.word	0xbd30b005
 8001578:	2040f8b4 	.word	0x2040f8b4
 800157c:	f85d6ba0 	.word	0xf85d6ba0
 8001580:	b2925021 	.word	0xb2925021
 8001584:	f8403101 	.word	0xf8403101
 8001588:	f8b45022 	.word	0xf8b45022
 800158c:	32012040 	.word	0x32012040
 8001590:	f8a4b292 	.word	0xf8a4b292
 8001594:	e7e62040 	.word	0xe7e62040
 8001598:	6ac3b5f0 	.word	0x6ac3b5f0
 800159c:	5042f8b0 	.word	0x5042f8b0
 80015a0:	b0852b01 	.word	0xb0852b01
 80015a4:	460e4604 	.word	0x460e4604
 80015a8:	6d82d11f 	.word	0x6d82d11f
 80015ac:	d11b2a01 	.word	0xd11b2a01
 80015b0:	442b6dc3 	.word	0x442b6dc3
 80015b4:	f8b465c3 	.word	0xf8b465c3
 80015b8:	08ad3042 	.word	0x08ad3042
 80015bc:	bf180718 	.word	0xbf180718
 80015c0:	0503f025 	.word	0x0503f025
 80015c4:	f81af001 	.word	0xf81af001
 80015c8:	8fe24607 	.word	0x8fe24607
 80015cc:	3040f8b4 	.word	0x3040f8b4
 80015d0:	4295b292 	.word	0x4295b292
 80015d4:	d901b29b 	.word	0xd901b29b
 80015d8:	d849429d 	.word	0xd849429d
 80015dc:	3042f8b4 	.word	0x3042f8b4
 80015e0:	d162071a 	.word	0xd162071a
 80015e4:	e0272000 	.word	0xe0272000
 80015e8:	68226583 	.word	0x68226583
 80015ec:	65e568a1 	.word	0x65e568a1
 80015f0:	87a72700 	.word	0x87a72700
 80015f4:	f4236813 	.word	0xf4236813
 80015f8:	601343c0 	.word	0x601343c0
 80015fc:	f7ff4620 	.word	0xf7ff4620
 8001600:	6a22fdf6 	.word	0x6a22fdf6
 8001604:	68116823 	.word	0x68116823
 8001608:	685162d9 	.word	0x685162d9
 800160c:	68916299 	.word	0x68916299
 8001610:	68d26259 	.word	0x68d26259
 8001614:	681a621a 	.word	0x681a621a
 8001618:	0201f042 	.word	0x0201f042
 800161c:	4631601a 	.word	0x4631601a
 8001620:	fe06f7ff 	.word	0xfe06f7ff
 8001624:	6d63b150 	.word	0x6d63b150
 8001628:	7050f884 	.word	0x7050f884
 800162c:	0310f043 	.word	0x0310f043
 8001630:	65632001 	.word	0x65632001
 8001634:	0051f884 	.word	0x0051f884
 8001638:	bdf0b005 	.word	0xbdf0b005
 800163c:	68136822 	.word	0x68136822
 8001640:	0380f043 	.word	0x0380f043
 8001644:	46316013 	.word	0x46316013
 8001648:	f7ff4620 	.word	0xf7ff4620
 800164c:	2800fe09 	.word	0x2800fe09
 8001650:	8086f040 	.word	0x8086f040
 8001654:	23026822 	.word	0x23026822
 8001658:	68136463 	.word	0x68136463
 800165c:	43c0f423 	.word	0x43c0f423
 8001660:	4380f443 	.word	0x4380f443
 8001664:	68136013 	.word	0x68136013
 8001668:	0370f423 	.word	0x0370f423
 800166c:	e7a26013 	.word	0xe7a26013
 8001670:	46204631 	.word	0x46204631
 8001674:	ff27f7ff 	.word	0xff27f7ff
 8001678:	d0a61c71 	.word	0xd0a61c71
 800167c:	ffbef000 	.word	0xffbef000
 8001680:	42b01bc0 	.word	0x42b01bc0
 8001684:	2e00d801 	.word	0x2e00d801
 8001688:	6822d19f 	.word	0x6822d19f
 800168c:	f0236813 	.word	0xf0236813
 8001690:	60130301 	.word	0x60130301
 8001694:	f0436d63 	.word	0xf0436d63
 8001698:	65630310 	.word	0x65630310
 800169c:	23002001 	.word	0x23002001
 80016a0:	0051f884 	.word	0x0051f884
 80016a4:	3050f884 	.word	0x3050f884
 80016a8:	6821e7c6 	.word	0x6821e7c6
 80016ac:	f0006808 	.word	0xf0006808
 80016b0:	28100018 	.word	0x28100018
 80016b4:	6808bf08 	.word	0x6808bf08
 80016b8:	1213ea4f 	.word	0x1213ea4f
 80016bc:	0201f102 	.word	0x0201f102
 80016c0:	f420bf08 	.word	0xf420bf08
 80016c4:	ea4f0070 	.word	0xea4f0070
 80016c8:	f1031702 	.word	0xf1031702
 80016cc:	ebc30510 	.word	0xebc30510
 80016d0:	bf081202 	.word	0xbf081202
 80016d4:	5002ea40 	.word	0x5002ea40
 80016d8:	0507eba5 	.word	0x0507eba5
 80016dc:	6008bf08 	.word	0x6008bf08
 80016e0:	079308ad 	.word	0x079308ad
 80016e4:	3501bf18 	.word	0x3501bf18
 80016e8:	42aa2200 	.word	0x42aa2200
 80016ec:	462bd129 	.word	0x462bd129
 80016f0:	2b032200 	.word	0x2b032200
 80016f4:	4631d931 	.word	0x4631d931
 80016f8:	f7ff4620 	.word	0xf7ff4620
 80016fc:	2800fd99 	.word	0x2800fd99
 8001700:	6823d1c8 	.word	0x6823d1c8
 8001704:	f042681a 	.word	0xf042681a
 8001708:	601a0280 	.word	0x601a0280
 800170c:	920068da 	.word	0x920068da
 8001710:	920168da 	.word	0x920168da
 8001714:	68db68da 	.word	0x68db68da
 8001718:	93039202 	.word	0x93039202
 800171c:	f43f42a8 	.word	0xf43f42a8
 8001720:	f8b4af61 	.word	0xf8b4af61
 8001724:	6ba23040 	.word	0x6ba23040
 8001728:	1020f85d 	.word	0x1020f85d
 800172c:	3001b29b 	.word	0x3001b29b
 8001730:	1023f842 	.word	0x1023f842
 8001734:	3040f8b4 	.word	0x3040f8b4
 8001738:	b29b3301 	.word	0xb29b3301
 800173c:	3040f8a4 	.word	0x3040f8a4
 8001740:	8fe3e7ec 	.word	0x8fe3e7ec
 8001744:	b29b6b60 	.word	0xb29b6b60
 8001748:	f8503201 	.word	0xf8503201
 800174c:	608b3023 	.word	0x608b3023
 8001750:	33018fe3 	.word	0x33018fe3
 8001754:	87e3b29b 	.word	0x87e3b29b
 8001758:	608ae7c7 	.word	0x608ae7c7
 800175c:	e7c83301 	.word	0xe7c83301
 8001760:	e7692001 	.word	0xe7692001
 8001764:	6ac3b5f0 	.word	0x6ac3b5f0
 8001768:	5042f8b0 	.word	0x5042f8b0
 800176c:	b0852b01 	.word	0xb0852b01
 8001770:	460e4604 	.word	0x460e4604
 8001774:	6d82d11f 	.word	0x6d82d11f
 8001778:	d11b2a01 	.word	0xd11b2a01
 800177c:	442b6dc3 	.word	0x442b6dc3
 8001780:	f8b465c3 	.word	0xf8b465c3
 8001784:	08ad3042 	.word	0x08ad3042
 8001788:	bf180718 	.word	0xbf180718
 800178c:	0503f025 	.word	0x0503f025
 8001790:	ff34f000 	.word	0xff34f000
 8001794:	8fe24607 	.word	0x8fe24607
 8001798:	3040f8b4 	.word	0x3040f8b4
 800179c:	4295b292 	.word	0x4295b292
 80017a0:	d901b29b 	.word	0xd901b29b
 80017a4:	d849429d 	.word	0xd849429d
 80017a8:	3042f8b4 	.word	0x3042f8b4
 80017ac:	d162071a 	.word	0xd162071a
 80017b0:	e0272000 	.word	0xe0272000
 80017b4:	68226583 	.word	0x68226583
 80017b8:	65e568a1 	.word	0x65e568a1
 80017bc:	87a72700 	.word	0x87a72700
 80017c0:	f4236813 	.word	0xf4236813
 80017c4:	601343c0 	.word	0x601343c0
 80017c8:	f7ff4620 	.word	0xf7ff4620
 80017cc:	6922fd10 	.word	0x6922fd10
 80017d0:	68116823 	.word	0x68116823
 80017d4:	685162d9 	.word	0x685162d9
 80017d8:	68916299 	.word	0x68916299
 80017dc:	68d26259 	.word	0x68d26259
 80017e0:	681a621a 	.word	0x681a621a
 80017e4:	0201f042 	.word	0x0201f042
 80017e8:	4631601a 	.word	0x4631601a
 80017ec:	fd20f7ff 	.word	0xfd20f7ff
 80017f0:	6d63b150 	.word	0x6d63b150
 80017f4:	7050f884 	.word	0x7050f884
 80017f8:	0310f043 	.word	0x0310f043
 80017fc:	65632001 	.word	0x65632001
 8001800:	0051f884 	.word	0x0051f884
 8001804:	bdf0b005 	.word	0xbdf0b005
 8001808:	68136822 	.word	0x68136822
 800180c:	0380f043 	.word	0x0380f043
 8001810:	46316013 	.word	0x46316013
 8001814:	f7ff4620 	.word	0xf7ff4620
 8001818:	2800fd23 	.word	0x2800fd23
 800181c:	808ef040 	.word	0x808ef040
 8001820:	23026822 	.word	0x23026822
 8001824:	68136463 	.word	0x68136463
 8001828:	43c0f423 	.word	0x43c0f423
 800182c:	4380f443 	.word	0x4380f443
 8001830:	68136013 	.word	0x68136013
 8001834:	0370f423 	.word	0x0370f423
 8001838:	e7a26013 	.word	0xe7a26013
 800183c:	46204631 	.word	0x46204631
 8001840:	fe41f7ff 	.word	0xfe41f7ff
 8001844:	d0a61c71 	.word	0xd0a61c71
 8001848:	fed8f000 	.word	0xfed8f000
 800184c:	42b01bc0 	.word	0x42b01bc0
 8001850:	2e00d801 	.word	0x2e00d801
 8001854:	6822d19f 	.word	0x6822d19f
 8001858:	f0236813 	.word	0xf0236813
 800185c:	60130301 	.word	0x60130301
 8001860:	f0436d63 	.word	0xf0436d63
 8001864:	65630310 	.word	0x65630310
 8001868:	23002001 	.word	0x23002001
 800186c:	0051f884 	.word	0x0051f884
 8001870:	3050f884 	.word	0x3050f884
 8001874:	6821e7c6 	.word	0x6821e7c6
 8001878:	f0106808 	.word	0xf0106808
 800187c:	bf080f18 	.word	0xbf080f18
 8001880:	ea4f6808 	.word	0xea4f6808
 8001884:	f1021213 	.word	0xf1021213
 8001888:	bf080201 	.word	0xbf080201
 800188c:	0070f420 	.word	0x0070f420
 8001890:	1702ea4f 	.word	0x1702ea4f
 8001894:	0510f103 	.word	0x0510f103
 8001898:	1202ebc3 	.word	0x1202ebc3
 800189c:	ea40bf08 	.word	0xea40bf08
 80018a0:	eba55002 	.word	0xeba55002
 80018a4:	bf080507 	.word	0xbf080507
 80018a8:	08ad6008 	.word	0x08ad6008
 80018ac:	bf180793 	.word	0xbf180793
 80018b0:	22003501 	.word	0x22003501
 80018b4:	d13242aa 	.word	0xd13242aa
 80018b8:	2200462b 	.word	0x2200462b
 80018bc:	d93a2b03 	.word	0xd93a2b03
 80018c0:	46204631 	.word	0x46204631
 80018c4:	fcb4f7ff 	.word	0xfcb4f7ff
 80018c8:	2301b140 	.word	0x2301b140
 80018cc:	3051f884 	.word	0x3051f884
 80018d0:	f8842300 	.word	0xf8842300
 80018d4:	46203050 	.word	0x46203050
 80018d8:	fdf4f7ff 	.word	0xfdf4f7ff
 80018dc:	681a6823 	.word	0x681a6823
 80018e0:	0280f042 	.word	0x0280f042
 80018e4:	68da601a 	.word	0x68da601a
 80018e8:	68da9200 	.word	0x68da9200
 80018ec:	68da9201 	.word	0x68da9201
 80018f0:	920268db 	.word	0x920268db
 80018f4:	22009303 	.word	0x22009303
 80018f8:	f43f42aa 	.word	0xf43f42aa
 80018fc:	f8b4af59 	.word	0xf8b4af59
 8001900:	6ba13040 	.word	0x6ba13040
 8001904:	0022f85d 	.word	0x0022f85d
 8001908:	3201b29b 	.word	0x3201b29b
 800190c:	0023f841 	.word	0x0023f841
 8001910:	3040f8b4 	.word	0x3040f8b4
 8001914:	b29b3301 	.word	0xb29b3301
 8001918:	3040f8a4 	.word	0x3040f8a4
 800191c:	8fe3e7ec 	.word	0x8fe3e7ec
 8001920:	b29b6b60 	.word	0xb29b6b60
 8001924:	f8503201 	.word	0xf8503201
 8001928:	608b3023 	.word	0x608b3023
 800192c:	33018fe3 	.word	0x33018fe3
 8001930:	87e3b29b 	.word	0x87e3b29b
 8001934:	608ae7be 	.word	0x608ae7be
 8001938:	e7bf3301 	.word	0xe7bf3301
 800193c:	e7612001 	.word	0xe7612001
 8001940:	4604b5f8 	.word	0x4604b5f8
 8001944:	0051f890 	.word	0x0051f890
 8001948:	28019e06 	.word	0x28019e06
 800194c:	f040b2c5 	.word	0xf040b2c5
 8001950:	f89480ba 	.word	0xf89480ba
 8001954:	20027050 	.word	0x20027050
 8001958:	f8842f01 	.word	0xf8842f01
 800195c:	f0000051 	.word	0xf0000051
 8001960:	e9c480b8 	.word	0xe9c480b8
 8001964:	6a63130d 	.word	0x6a63130d
 8001968:	5050f884 	.word	0x5050f884
 800196c:	87e02000 	.word	0x87e02000
 8001970:	0040f8a4 	.word	0x0040f8a4
 8001974:	0092b90b 	.word	0x0092b90b
 8001978:	6823b292 	.word	0x6823b292
 800197c:	2042f8a4 	.word	0x2042f8a4
 8001980:	f022681a 	.word	0xf022681a
 8001984:	f0420218 	.word	0xf0420218
 8001988:	601a0210 	.word	0x601a0210
 800198c:	4a526819 	.word	0x4a526819
 8001990:	2a60400a 	.word	0x2a60400a
 8001994:	808ff000 	.word	0x808ff000
 8001998:	2a40d809 	.word	0x2a40d809
 800199c:	4a4fd00f 	.word	0x4a4fd00f
 80019a0:	b162400a 	.word	0xb162400a
 80019a4:	f0436d63 	.word	0xf0436d63
 80019a8:	65630320 	.word	0x65630320
 80019ac:	f5b2e036 	.word	0xf5b2e036
 80019b0:	d1f73f80 	.word	0xd1f73f80
 80019b4:	46204631 	.word	0x46204631
 80019b8:	fdeef7ff 	.word	0xfdeef7ff
 80019bc:	6ae2e07f 	.word	0x6ae2e07f
 80019c0:	d1032a01 	.word	0xd1032a01
 80019c4:	29016da1 	.word	0x29016da1
 80019c8:	65a2d03f 	.word	0x65a2d03f
 80019cc:	68a16962 	.word	0x68a16962
 80019d0:	d0672a40 	.word	0xd0672a40
 80019d4:	7030f894 	.word	0x7030f894
 80019d8:	d15a2f00 	.word	0xd15a2f00
 80019dc:	f022681a 	.word	0xf022681a
 80019e0:	f0420218 	.word	0xf0420218
 80019e4:	601a0208 	.word	0x601a0208
 80019e8:	f7ff4620 	.word	0xf7ff4620
 80019ec:	6822fc00 	.word	0x6822fc00
 80019f0:	f0436813 	.word	0xf0436813
 80019f4:	60130301 	.word	0x60130301
 80019f8:	f7ff4631 	.word	0xf7ff4631
 80019fc:	6823fc19 	.word	0x6823fc19
 8001a00:	b168681a 	.word	0xb168681a
 8001a04:	0201f022 	.word	0x0201f022
 8001a08:	6d63601a 	.word	0x6d63601a
 8001a0c:	7050f884 	.word	0x7050f884
 8001a10:	0310f043 	.word	0x0310f043
 8001a14:	23016563 	.word	0x23016563
 8001a18:	3051f884 	.word	0x3051f884
 8001a1c:	bdf84628 	.word	0xbdf84628
 8001a20:	0280f042 	.word	0x0280f042
 8001a24:	681a601a 	.word	0x681a601a
 8001a28:	0218f022 	.word	0x0218f022
 8001a2c:	0210f042 	.word	0x0210f042
 8001a30:	6963601a 	.word	0x6963601a
 8001a34:	6922b14b 	.word	0x6922b14b
 8001a38:	68116823 	.word	0x68116823
 8001a3c:	685162d9 	.word	0x685162d9
 8001a40:	68916299 	.word	0x68916299
 8001a44:	68d26259 	.word	0x68d26259
 8001a48:	6822621a 	.word	0x6822621a
 8001a4c:	64632302 	.word	0x64632302
 8001a50:	f0436813 	.word	0xf0436813
 8001a54:	60130301 	.word	0x60130301
 8001a58:	f8b48fe2 	.word	0xf8b48fe2
 8001a5c:	f8b41042 	.word	0xf8b41042
 8001a60:	b2923040 	.word	0xb2923040
 8001a64:	0f91ebb2 	.word	0x0f91ebb2
 8001a68:	ea4fb29b 	.word	0xea4fb29b
 8001a6c:	d2010091 	.word	0xd2010091
 8001a70:	d81b4298 	.word	0xd81b4298
 8001a74:	68136822 	.word	0x68136822
 8001a78:	0301f023 	.word	0x0301f023
 8001a7c:	23016013 	.word	0x23016013
 8001a80:	3051f884 	.word	0x3051f884
 8001a84:	25002301 	.word	0x25002301
 8001a88:	3051f884 	.word	0x3051f884
 8001a8c:	5050f884 	.word	0x5050f884
 8001a90:	4620e7c4 	.word	0x4620e7c4
 8001a94:	fbabf7ff 	.word	0xfbabf7ff
 8001a98:	68136822 	.word	0x68136822
 8001a9c:	0318f043 	.word	0x0318f043
 8001aa0:	e7c66013 	.word	0xe7c66013
 8001aa4:	f7ff4620 	.word	0xf7ff4620
 8001aa8:	e7c2fba2 	.word	0xe7c2fba2
 8001aac:	46204631 	.word	0x46204631
 8001ab0:	fd09f7ff 	.word	0xfd09f7ff
 8001ab4:	4631e7d0 	.word	0x4631e7d0
 8001ab8:	f7ff4620 	.word	0xf7ff4620
 8001abc:	4605fe53 	.word	0x4605fe53
 8001ac0:	d1ab2800 	.word	0xd1ab2800
 8001ac4:	6d63e7de 	.word	0x6d63e7de
 8001ac8:	0308f043 	.word	0x0308f043
 8001acc:	25016563 	.word	0x25016563
 8001ad0:	4605e7a4 	.word	0x4605e7a4
 8001ad4:	bf00e7a2 	.word	0xbf00e7a2
 8001ad8:	00010060 	.word	0x00010060
 8001adc:	00010040 	.word	0x00010040
 8001ae0:	695a4b06 	.word	0x695a4b06
 8001ae4:	bfbf2a00 	.word	0xbfbf2a00
 8001ae8:	609a4a05 	.word	0x609a4a05
 8001aec:	3288f102 	.word	0x3288f102
 8001af0:	bfba609a 	.word	0xbfba609a
 8001af4:	0fc06958 	.word	0x0fc06958
 8001af8:	47702000 	.word	0x47702000
 8001afc:	58004000 	.word	0x58004000
 8001b00:	45670123 	.word	0x45670123
 8001b04:	695a4b04 	.word	0x695a4b04
 8001b08:	4200f042 	.word	0x4200f042
 8001b0c:	6958615a 	.word	0x6958615a
 8001b10:	0fc043c0 	.word	0x0fc043c0
 8001b14:	bf004770 	.word	0xbf004770
 8001b18:	58004000 	.word	0x58004000
 8001b1c:	4605b570 	.word	0x4605b570
 8001b20:	fd6cf000 	.word	0xfd6cf000
 8001b24:	46044e13 	.word	0x46044e13
 8001b28:	03d96933 	.word	0x03d96933
 8001b2c:	6933d40f 	.word	0x6933d40f
 8001b30:	bf4407da 	.word	0xbf4407da
 8001b34:	61322201 	.word	0x61322201
 8001b38:	32faf24c 	.word	0x32faf24c
 8001b3c:	d10d4013 	.word	0xd10d4013
 8001b40:	69334e0c 	.word	0x69334e0c
 8001b44:	2380f413 	.word	0x2380f413
 8001b48:	4618d10e 	.word	0x4618d10e
 8001b4c:	f000e005 	.word	0xf000e005
 8001b50:	1b00fd55 	.word	0x1b00fd55
 8001b54:	d3e742a8 	.word	0xd3e742a8
 8001b58:	bd702003 	.word	0xbd702003
 8001b5c:	61134a05 	.word	0x61134a05
 8001b60:	20014a05 	.word	0x20014a05
 8001b64:	e7f86053 	.word	0xe7f86053
 8001b68:	fd48f000 	.word	0xfd48f000
 8001b6c:	42a81b00 	.word	0x42a81b00
 8001b70:	e7f1d3e7 	.word	0xe7f1d3e7
 8001b74:	58004000 	.word	0x58004000
 8001b78:	20000598 	.word	0x20000598
 8001b7c:	41f0e92d 	.word	0x41f0e92d
 8001b80:	46984c18 	.word	0x46984c18
 8001b84:	2b017823 	.word	0x2b017823
 8001b88:	460d4606 	.word	0x460d4606
 8001b8c:	d0264617 	.word	0xd0264617
 8001b90:	70232301 	.word	0x70232301
 8001b94:	707af44f 	.word	0x707af44f
 8001b98:	60632300 	.word	0x60632300
 8001b9c:	ffbef7ff 	.word	0xffbef7ff
 8001ba0:	2e01b9a0 	.word	0x2e01b9a0
 8001ba4:	4a10d116 	.word	0x4a10d116
 8001ba8:	f0436953 	.word	0xf0436953
 8001bac:	61530301 	.word	0x61530301
 8001bb0:	f3bf602f 	.word	0xf3bf602f
 8001bb4:	f8c58f6f 	.word	0xf8c58f6f
 8001bb8:	f44f8004 	.word	0xf44f8004
 8001bbc:	f7ff707a 	.word	0xf7ff707a
 8001bc0:	4a09ffad 	.word	0x4a09ffad
 8001bc4:	ea236953 	.word	0xea236953
 8001bc8:	61560606 	.word	0x61560606
 8001bcc:	70232300 	.word	0x70232300
 8001bd0:	81f0e8bd 	.word	0x81f0e8bd
 8001bd4:	46284639 	.word	0x46284639
 8001bd8:	f9baf001 	.word	0xf9baf001
 8001bdc:	2002e7ed 	.word	0x2002e7ed
 8001be0:	bf00e7f6 	.word	0xbf00e7f6
 8001be4:	20000598 	.word	0x20000598
 8001be8:	58004000 	.word	0x58004000
 8001bec:	69534a05 	.word	0x69534a05
 8001bf0:	63fff423 	.word	0x63fff423
 8001bf4:	00c0ea43 	.word	0x00c0ea43
 8001bf8:	3080f440 	.word	0x3080f440
 8001bfc:	0002f040 	.word	0x0002f040
 8001c00:	47706150 	.word	0x47706150
 8001c04:	58004000 	.word	0x58004000
 8001c08:	41f0e92d 	.word	0x41f0e92d
 8001c0c:	782b4d30 	.word	0x782b4d30
 8001c10:	46062b01 	.word	0x46062b01
 8001c14:	d0594688 	.word	0xd0594688
 8001c18:	702b2301 	.word	0x702b2301
 8001c1c:	707af44f 	.word	0x707af44f
 8001c20:	606b2300 	.word	0x606b2300
 8001c24:	ff7af7ff 	.word	0xff7af7ff
 8001c28:	28004604 	.word	0x28004604
 8001c2c:	6833d147 	.word	0x6833d147
 8001c30:	d11c2b02 	.word	0xd11c2b02
 8001c34:	33fff04f 	.word	0x33fff04f
 8001c38:	3000f8c8 	.word	0x3000f8c8
 8001c3c:	e9d66877 	.word	0xe9d66877
 8001c40:	44133201 	.word	0x44133201
 8001c44:	d90b42bb 	.word	0xd90b42bb
 8001c48:	f7ff4638 	.word	0xf7ff4638
 8001c4c:	f44fffcf 	.word	0xf44fffcf
 8001c50:	f7ff707a 	.word	0xf7ff707a
 8001c54:	2800ff63 	.word	0x2800ff63
 8001c58:	f8c8d036 	.word	0xf8c8d036
 8001c5c:	46047000 	.word	0x46047000
 8001c60:	69534a1c 	.word	0x69534a1c
 8001c64:	63fff423 	.word	0x63fff423
 8001c68:	0302f023 	.word	0x0302f023
 8001c6c:	4b196153 	.word	0x4b196153
 8001c70:	0591681a 	.word	0x0591681a
 8001c74:	681ad50f 	.word	0x681ad50f
 8001c78:	7200f422 	.word	0x7200f422
 8001c7c:	681a601a 	.word	0x681a601a
 8001c80:	6200f442 	.word	0x6200f442
 8001c84:	681a601a 	.word	0x681a601a
 8001c88:	6200f422 	.word	0x6200f422
 8001c8c:	681a601a 	.word	0x681a601a
 8001c90:	7200f442 	.word	0x7200f442
 8001c94:	4b0f601a 	.word	0x4b0f601a
 8001c98:	0552681a 	.word	0x0552681a
 8001c9c:	681ad50f 	.word	0x681ad50f
 8001ca0:	6280f422 	.word	0x6280f422
 8001ca4:	681a601a 	.word	0x681a601a
 8001ca8:	5280f442 	.word	0x5280f442
 8001cac:	681a601a 	.word	0x681a601a
 8001cb0:	5280f422 	.word	0x5280f422
 8001cb4:	681a601a 	.word	0x681a601a
 8001cb8:	6280f442 	.word	0x6280f442
 8001cbc:	2300601a 	.word	0x2300601a
 8001cc0:	4620702b 	.word	0x4620702b
 8001cc4:	81f0e8bd 	.word	0x81f0e8bd
 8001cc8:	e7b83701 	.word	0xe7b83701
 8001ccc:	e7f82402 	.word	0xe7f82402
 8001cd0:	20000598 	.word	0x20000598
 8001cd4:	58004000 	.word	0x58004000
 8001cd8:	4604b510 	.word	0x4604b510
 8001cdc:	7903b180 	.word	0x7903b180
 8001ce0:	f7ffb90b 	.word	0xf7ffb90b
 8001ce4:	2302f9d5 	.word	0x2302f9d5
 8001ce8:	68237123 	.word	0x68237123
 8001cec:	60192101 	.word	0x60192101
 8001cf0:	2000689a 	.word	0x2000689a
 8001cf4:	12d0f442 	.word	0x12d0f442
 8001cf8:	60a0609a 	.word	0x60a0609a
 8001cfc:	bd107121 	.word	0xbd107121
 8001d00:	e7fc2001 	.word	0xe7fc2001
 8001d04:	4605b538 	.word	0x4605b538
 8001d08:	2302b170 	.word	0x2302b170
 8001d0c:	68037103 	.word	0x68037103
 8001d10:	601c2400 	.word	0x601c2400
 8001d14:	f442689a 	.word	0xf442689a
 8001d18:	609a12d0 	.word	0x609a12d0
 8001d1c:	f9ccf7ff 	.word	0xf9ccf7ff
 8001d20:	462060ac 	.word	0x462060ac
 8001d24:	bd38712c 	.word	0xbd38712c
 8001d28:	e7fc2001 	.word	0xe7fc2001
 8001d2c:	f8d36803 	.word	0xf8d36803
 8001d30:	fab005b0 	.word	0xfab005b0
 8001d34:	0940f080 	.word	0x0940f080
 8001d38:	b5704770 	.word	0xb5704770
 8001d3c:	460c4605 	.word	0x460c4605
 8001d40:	682a4616 	.word	0x682a4616
 8001d44:	039b6853 	.word	0x039b6853
 8001d48:	2000d501 	.word	0x2000d501
 8001d4c:	1c61bd70 	.word	0x1c61bd70
 8001d50:	f000d0f8 	.word	0xf000d0f8
 8001d54:	1b80fc53 	.word	0x1b80fc53
 8001d58:	d80142a0 	.word	0xd80142a0
 8001d5c:	d1f02c00 	.word	0xd1f02c00
 8001d60:	e7f32003 	.word	0xe7f32003
 8001d64:	68586803 	.word	0x68586803
 8001d68:	f410685a 	.word	0xf410685a
 8001d6c:	bf182000 	.word	0xbf182000
 8001d70:	02d22002 	.word	0x02d22002
 8001d74:	f040bf48 	.word	0xf040bf48
 8001d78:	29240001 	.word	0x29240001
 8001d7c:	f8d3d104 	.word	0xf8d3d104
 8001d80:	b10b3ee8 	.word	0xb10b3ee8
 8001d84:	0008f040 	.word	0x0008f040
 8001d88:	fab14770 	.word	0xfab14770
 8001d8c:	ebc1f181 	.word	0xebc1f181
 8001d90:	301800c0 	.word	0x301800c0
 8001d94:	b5f04770 	.word	0xb5f04770
 8001d98:	b189b190 	.word	0xb189b190
 8001d9c:	0603f022 	.word	0x0603f022
 8001da0:	4607188d 	.word	0x4607188d
 8001da4:	eb060894 	.word	0xeb060894
 8001da8:	45670c00 	.word	0x45670c00
 8001dac:	f002d109 	.word	0xf002d109
 8001db0:	2b010303 	.word	0x2b010303
 8001db4:	3a01d117 	.word	0x3a01d117
 8001db8:	5c8b1b92 	.word	0x5c8b1b92
 8001dbc:	3024f840 	.word	0x3024f840
 8001dc0:	f815bdf0 	.word	0xf815bdf0
 8001dc4:	f8153c03 	.word	0xf8153c03
 8001dc8:	041bec02 	.word	0x041bec02
 8001dcc:	230eea43 	.word	0x230eea43
 8001dd0:	ec01f815 	.word	0xec01f815
 8001dd4:	030eea43 	.word	0x030eea43
 8001dd8:	ed04f815 	.word	0xed04f815
 8001ddc:	630eea43 	.word	0x630eea43
 8001de0:	3b04f847 	.word	0x3b04f847
 8001de4:	2b02e7e1 	.word	0x2b02e7e1
 8001de8:	1b92d108 	.word	0x1b92d108
 8001dec:	f8114411 	.word	0xf8114411
 8001df0:	f8112c02 	.word	0xf8112c02
 8001df4:	ea433c01 	.word	0xea433c01
 8001df8:	e7df2302 	.word	0xe7df2302
 8001dfc:	d1df2b03 	.word	0xd1df2b03
 8001e00:	440a1b92 	.word	0x440a1b92
 8001e04:	3c03f812 	.word	0x3c03f812
 8001e08:	1c02f812 	.word	0x1c02f812
 8001e0c:	2c01f812 	.word	0x2c01f812
 8001e10:	ea43041b 	.word	0xea43041b
 8001e14:	43132301 	.word	0x43132301
 8001e18:	b573e7d0 	.word	0xb573e7d0
 8001e1c:	2b017903 	.word	0x2b017903
 8001e20:	460d4604 	.word	0x460d4604
 8001e24:	2302d13a 	.word	0x2302d13a
 8001e28:	23007103 	.word	0x23007103
 8001e2c:	92016083 	.word	0x92016083
 8001e30:	fbe4f000 	.word	0xfbe4f000
 8001e34:	99016826 	.word	0x99016826
 8001e38:	f4236833 	.word	0xf4236833
 8001e3c:	f42313d1 	.word	0xf42313d1
 8001e40:	ea4353f8 	.word	0xea4353f8
 8001e44:	60332305 	.word	0x60332305
 8001e48:	f0436833 	.word	0xf0436833
 8001e4c:	46020302 	.word	0x46020302
 8001e50:	46206033 	.word	0x46206033
 8001e54:	ff71f7ff 	.word	0xff71f7ff
 8001e58:	6823b160 	.word	0x6823b160
 8001e5c:	f022681a 	.word	0xf022681a
 8001e60:	601a0201 	.word	0x601a0201
 8001e64:	f04268a2 	.word	0xf04268a2
 8001e68:	60a20204 	.word	0x60a20204
 8001e6c:	f042681a 	.word	0xf042681a
 8001e70:	601a0201 	.word	0x601a0201
 8001e74:	46204629 	.word	0x46204629
 8001e78:	ff74f7ff 	.word	0xff74f7ff
 8001e7c:	682268a3 	.word	0x682268a3
 8001e80:	60a04318 	.word	0x60a04318
 8001e84:	f4436893 	.word	0xf4436893
 8001e88:	609313d0 	.word	0x609313d0
 8001e8c:	71232301 	.word	0x71232301
 8001e90:	380068a0 	.word	0x380068a0
 8001e94:	2001bf18 	.word	0x2001bf18
 8001e98:	bd70b002 	.word	0xbd70b002
 8001e9c:	e7fb2001 	.word	0xe7fb2001
 8001ea0:	6b0ab570 	.word	0x6b0ab570
 8001ea4:	460c6803 	.word	0x460c6803
 8001ea8:	78114605 	.word	0x78114605
 8001eac:	f7ff6820 	.word	0xf7ff6820
 8001eb0:	6862ff6c 	.word	0x6862ff6c
 8001eb4:	f8c36921 	.word	0xf8c36921
 8001eb8:	78090404 	.word	0x78090404
 8001ebc:	f7ff4610 	.word	0xf7ff4610
 8001ec0:	68a1ff64 	.word	0x68a1ff64
 8001ec4:	04b4f8c3 	.word	0x04b4f8c3
 8001ec8:	145cf8c3 	.word	0x145cf8c3
 8001ecc:	608cf503 	.word	0x608cf503
 8001ed0:	f7ff68e1 	.word	0xf7ff68e1
 8001ed4:	6862ff60 	.word	0x6862ff60
 8001ed8:	69216828 	.word	0x69216828
 8001edc:	089b1cd3 	.word	0x089b1cd3
 8001ee0:	738cf503 	.word	0x738cf503
 8001ee4:	f8402600 	.word	0xf8402600
 8001ee8:	f5006023 	.word	0xf5006023
 8001eec:	f7ff6097 	.word	0xf7ff6097
 8001ef0:	6862ff52 	.word	0x6862ff52
 8001ef4:	69616828 	.word	0x69616828
 8001ef8:	089b1cd3 	.word	0x089b1cd3
 8001efc:	7397f503 	.word	0x7397f503
 8001f00:	6023f840 	.word	0x6023f840
 8001f04:	60bdf500 	.word	0x60bdf500
 8001f08:	ff45f7ff 	.word	0xff45f7ff
 8001f0c:	68286862 	.word	0x68286862
 8001f10:	1cd369a1 	.word	0x1cd369a1
 8001f14:	f503089b 	.word	0xf503089b
 8001f18:	f84073bd 	.word	0xf84073bd
 8001f1c:	f2006023 	.word	0xf2006023
 8001f20:	f7ff603c 	.word	0xf7ff603c
 8001f24:	6862ff38 	.word	0x6862ff38
 8001f28:	69e16828 	.word	0x69e16828
 8001f2c:	089b1cd3 	.word	0x089b1cd3
 8001f30:	138ff203 	.word	0x138ff203
 8001f34:	6023f840 	.word	0x6023f840
 8001f38:	6074f500 	.word	0x6074f500
 8001f3c:	ff2bf7ff 	.word	0xff2bf7ff
 8001f40:	68286862 	.word	0x68286862
 8001f44:	1cd36a21 	.word	0x1cd36a21
 8001f48:	f503089b 	.word	0xf503089b
 8001f4c:	f8407374 	.word	0xf8407374
 8001f50:	f6006023 	.word	0xf6006023
 8001f54:	f7ff7094 	.word	0xf7ff7094
 8001f58:	6863ff1e 	.word	0x6863ff1e
 8001f5c:	68226828 	.word	0x68226828
 8001f60:	33036a61 	.word	0x33036a61
 8001f64:	f203089b 	.word	0xf203089b
 8001f68:	f84033e5 	.word	0xf84033e5
 8001f6c:	f5006023 	.word	0xf5006023
 8001f70:	30185084 	.word	0x30185084
 8001f74:	ff0ff7ff 	.word	0xff0ff7ff
 8001f78:	68286822 	.word	0x68286822
 8001f7c:	1cd36aa1 	.word	0x1cd36aa1
 8001f80:	f203089b 	.word	0xf203089b
 8001f84:	f8404326 	.word	0xf8404326
 8001f88:	f6006023 	.word	0xf6006023
 8001f8c:	f7ff2044 	.word	0xf7ff2044
 8001f90:	6822ff02 	.word	0x6822ff02
 8001f94:	6ae16828 	.word	0x6ae16828
 8001f98:	089b1cd3 	.word	0x089b1cd3
 8001f9c:	2391f203 	.word	0x2391f203
 8001fa0:	6023f840 	.word	0x6023f840
 8001fa4:	70e8f600 	.word	0x70e8f600
 8001fa8:	fef5f7ff 	.word	0xfef5f7ff
 8001fac:	68286822 	.word	0x68286822
 8001fb0:	1cd36b21 	.word	0x1cd36b21
 8001fb4:	f203089b 	.word	0xf203089b
 8001fb8:	f84033fa 	.word	0xf84033fa
 8001fbc:	f6006023 	.word	0xf6006023
 8001fc0:	f7ff505c 	.word	0xf7ff505c
 8001fc4:	6823fee8 	.word	0x6823fee8
 8001fc8:	3303682a 	.word	0x3303682a
 8001fcc:	f203089b 	.word	0xf203089b
 8001fd0:	f8423357 	.word	0xf8423357
 8001fd4:	bd706023 	.word	0xbd706023
 8001fd8:	4604b513 	.word	0x4604b513
 8001fdc:	f7ff9201 	.word	0xf7ff9201
 8001fe0:	9a01ff5f 	.word	0x9a01ff5f
 8001fe4:	46202126 	.word	0x46202126
 8001fe8:	e8bdb002 	.word	0xe8bdb002
 8001fec:	f7ff4010 	.word	0xf7ff4010
 8001ff0:	0000bf14 	.word	0x0000bf14
 8001ff4:	e92d2810 	.word	0xe92d2810
 8001ff8:	460c4f73 	.word	0x460c4f73
 8001ffc:	4dbdd815 	.word	0x4dbdd815
 8002000:	d8212810 	.word	0xd8212810
 8002004:	f010e8df 	.word	0xf010e8df
 8002008:	0020003f 	.word	0x0020003f
 800200c:	00200020 	.word	0x00200020
 8002010:	007f004e 	.word	0x007f004e
 8002014:	00f800c6 	.word	0x00f800c6
 8002018:	01820125 	.word	0x01820125
 800201c:	00200020 	.word	0x00200020
 8002020:	00200020 	.word	0x00200020
 8002024:	00200020 	.word	0x00200020
 8002028:	289401b9 	.word	0x289401b9
 800202c:	821bf000 	.word	0x821bf000
 8002030:	2892d80c 	.word	0x2892d80c
 8002034:	82c4f8df 	.word	0x82c4f8df
 8002038:	81c7f000 	.word	0x81c7f000
 800203c:	f0002893 	.word	0xf0002893
 8002040:	282081eb 	.word	0x282081eb
 8002044:	8223f000 	.word	0x8223f000
 8002048:	fa4cf000 	.word	0xfa4cf000
 800204c:	7f90f5b0 	.word	0x7f90f5b0
 8002050:	8214f000 	.word	0x8214f000
 8002054:	5f80f5b0 	.word	0x5f80f5b0
 8002058:	f5b0d04d 	.word	0xf5b0d04d
 800205c:	d1f37f80 	.word	0xd1f37f80
 8002060:	4ea54da4 	.word	0x4ea54da4
 8002064:	fe78f7fe 	.word	0xfe78f7fe
 8002068:	42b3682b 	.word	0x42b3682b
 800206c:	f7fed101 	.word	0xf7fed101
 8002070:	f7fefc39 	.word	0xf7fefc39
 8002074:	602effe5 	.word	0x602effe5
 8002078:	ffe4f7fe 	.word	0xffe4f7fe
 800207c:	42984b9f 	.word	0x42984b9f
 8002080:	602ed139 	.word	0x602ed139
 8002084:	682be00b 	.word	0x682be00b
 8002088:	3f55f1b3 	.word	0x3f55f1b3
 800208c:	6810d1dc 	.word	0x6810d1dc
 8002090:	faaef000 	.word	0xfaaef000
 8002094:	fbe2f7fe 	.word	0xfbe2f7fe
 8002098:	48984b99 	.word	0x48984b99
 800209c:	b0026023 	.word	0xb0026023
 80020a0:	8f70e8bd 	.word	0x8f70e8bd
 80020a4:	f1b3682b 	.word	0xf1b3682b
 80020a8:	d1cd3f55 	.word	0xd1cd3f55
 80020ac:	8900e9d2 	.word	0x8900e9d2
 80020b0:	fe8ef7fe 	.word	0xfe8ef7fe
 80020b4:	42984b93 	.word	0x42984b93
 80020b8:	f44fd01d 	.word	0xf44fd01d
 80020bc:	464071a0 	.word	0x464071a0
 80020c0:	ff4cf7fe 	.word	0xff4cf7fe
 80020c4:	42984b8d 	.word	0x42984b8d
 80020c8:	d1144606 	.word	0xd1144606
 80020cc:	0f01f1b9 	.word	0x0f01f1b9
 80020d0:	682bd811 	.word	0x682bd811
 80020d4:	3f55f1b3 	.word	0x3f55f1b3
 80020d8:	f44fd1b6 	.word	0xf44fd1b6
 80020dc:	464071a0 	.word	0x464071a0
 80020e0:	ff3cf7fe 	.word	0xff3cf7fe
 80020e4:	d10642b0 	.word	0xd10642b0
 80020e8:	46404649 	.word	0x46404649
 80020ec:	fcaaf7fe 	.word	0xfcaaf7fe
 80020f0:	42984b84 	.word	0x42984b84
 80020f4:	4b82d1d3 	.word	0x4b82d1d3
 80020f8:	48826822 	.word	0x48826822
 80020fc:	bf04429a 	.word	0xbf04429a
 8002100:	60234b81 	.word	0x60234b81
 8002104:	682be7cb 	.word	0x682be7cb
 8002108:	3f55f1b3 	.word	0x3f55f1b3
 800210c:	e9d2d19c 	.word	0xe9d2d19c
 8002110:	e9d28600 	.word	0xe9d28600
 8002114:	f7fe9a02 	.word	0xf7fe9a02
 8002118:	4b7afe5b 	.word	0x4b7afe5b
 800211c:	d0ea4298 	.word	0xd0ea4298
 8002120:	dde82e00 	.word	0xdde82e00
 8002124:	46404631 	.word	0x46404631
 8002128:	ff18f7fe 	.word	0xff18f7fe
 800212c:	42904a73 	.word	0x42904a73
 8002130:	9001d1e1 	.word	0x9001d1e1
 8002134:	46502104 	.word	0x46502104
 8002138:	ff10f7fe 	.word	0xff10f7fe
 800213c:	42989b01 	.word	0x42989b01
 8002140:	d1d84683 	.word	0xd1d84683
 8002144:	46484631 	.word	0x46484631
 8002148:	ff08f7fe 	.word	0xff08f7fe
 800214c:	d1d24558 	.word	0xd1d24558
 8002150:	9001682a 	.word	0x9001682a
 8002154:	3f55f1b2 	.word	0x3f55f1b2
 8002158:	af76f47f 	.word	0xaf76f47f
 800215c:	46404631 	.word	0x46404631
 8002160:	fefcf7fe 	.word	0xfefcf7fe
 8002164:	42989b01 	.word	0x42989b01
 8002168:	d1c44683 	.word	0xd1c44683
 800216c:	46502104 	.word	0x46502104
 8002170:	fef4f7fe 	.word	0xfef4f7fe
 8002174:	46054558 	.word	0x46054558
 8002178:	4631d1bd 	.word	0x4631d1bd
 800217c:	f7fe4648 	.word	0xf7fe4648
 8002180:	42a8feed 	.word	0x42a8feed
 8002184:	4653d1b7 	.word	0x4653d1b7
 8002188:	4631464a 	.word	0x4631464a
 800218c:	f7fe4640 	.word	0xf7fe4640
 8002190:	e7adfcaf 	.word	0xe7adfcaf
 8002194:	f1b3682b 	.word	0xf1b3682b
 8002198:	f47f3f55 	.word	0xf47f3f55
 800219c:	e9d2af55 	.word	0xe9d2af55
 80021a0:	f7fe8900 	.word	0xf7fe8900
 80021a4:	4b57fe15 	.word	0x4b57fe15
 80021a8:	d0a44298 	.word	0xd0a44298
 80021ac:	46482104 	.word	0x46482104
 80021b0:	fed4f7fe 	.word	0xfed4f7fe
 80021b4:	42984b51 	.word	0x42984b51
 80021b8:	d19c4682 	.word	0xd19c4682
 80021bc:	46402110 	.word	0x46402110
 80021c0:	feccf7fe 	.word	0xfeccf7fe
 80021c4:	46064550 	.word	0x46064550
 80021c8:	682bd195 	.word	0x682bd195
 80021cc:	3f55f1b3 	.word	0x3f55f1b3
 80021d0:	af3af47f 	.word	0xaf3af47f
 80021d4:	46482104 	.word	0x46482104
 80021d8:	fec0f7fe 	.word	0xfec0f7fe
 80021dc:	460542b0 	.word	0x460542b0
 80021e0:	2110d189 	.word	0x2110d189
 80021e4:	f7fe4640 	.word	0xf7fe4640
 80021e8:	42a8feb9 	.word	0x42a8feb9
 80021ec:	4649d183 	.word	0x4649d183
 80021f0:	f7fe4640 	.word	0xf7fe4640
 80021f4:	e77bfc9b 	.word	0xe77bfc9b
 80021f8:	f1b3682b 	.word	0xf1b3682b
 80021fc:	f47f3f55 	.word	0xf47f3f55
 8002200:	e9d2af23 	.word	0xe9d2af23
 8002204:	f7fe8900 	.word	0xf7fe8900
 8002208:	4b3efde3 	.word	0x4b3efde3
 800220c:	f43f4298 	.word	0xf43f4298
 8002210:	f44faf72 	.word	0xf44faf72
 8002214:	464071a0 	.word	0x464071a0
 8002218:	fea0f7fe 	.word	0xfea0f7fe
 800221c:	42984b37 	.word	0x42984b37
 8002220:	f47f4606 	.word	0xf47f4606
 8002224:	f1b9af68 	.word	0xf1b9af68
 8002228:	f63f0f01 	.word	0xf63f0f01
 800222c:	682baf64 	.word	0x682baf64
 8002230:	3f55f1b3 	.word	0x3f55f1b3
 8002234:	af08f47f 	.word	0xaf08f47f
 8002238:	71a0f44f 	.word	0x71a0f44f
 800223c:	f7fe4640 	.word	0xf7fe4640
 8002240:	42b0fe8d 	.word	0x42b0fe8d
 8002244:	af57f47f 	.word	0xaf57f47f
 8002248:	46404649 	.word	0x46404649
 800224c:	fc7ef7fe 	.word	0xfc7ef7fe
 8002250:	682be74e 	.word	0x682be74e
 8002254:	3f55f1b3 	.word	0x3f55f1b3
 8002258:	aef6f47f 	.word	0xaef6f47f
 800225c:	8600e9d2 	.word	0x8600e9d2
 8002260:	9a02e9d2 	.word	0x9a02e9d2
 8002264:	fdb4f7fe 	.word	0xfdb4f7fe
 8002268:	42984b26 	.word	0x42984b26
 800226c:	af43f43f 	.word	0xaf43f43f
 8002270:	f77f2e00 	.word	0xf77f2e00
 8002274:	4631af40 	.word	0x4631af40
 8002278:	f7fe4640 	.word	0xf7fe4640
 800227c:	4a1ffe6f 	.word	0x4a1ffe6f
 8002280:	f47f4290 	.word	0xf47f4290
 8002284:	9001af38 	.word	0x9001af38
 8002288:	46502104 	.word	0x46502104
 800228c:	fe66f7fe 	.word	0xfe66f7fe
 8002290:	42989b01 	.word	0x42989b01
 8002294:	f47f4683 	.word	0xf47f4683
 8002298:	4631af2e 	.word	0x4631af2e
 800229c:	f7fe4648 	.word	0xf7fe4648
 80022a0:	4558fe5d 	.word	0x4558fe5d
 80022a4:	af27f47f 	.word	0xaf27f47f
 80022a8:	9001682a 	.word	0x9001682a
 80022ac:	3f55f1b2 	.word	0x3f55f1b2
 80022b0:	aecaf47f 	.word	0xaecaf47f
 80022b4:	46404631 	.word	0x46404631
 80022b8:	fe50f7fe 	.word	0xfe50f7fe
 80022bc:	42989b01 	.word	0x42989b01
 80022c0:	f47f4683 	.word	0xf47f4683
 80022c4:	2104af18 	.word	0x2104af18
 80022c8:	f7fe4650 	.word	0xf7fe4650
 80022cc:	4558fe47 	.word	0x4558fe47
 80022d0:	f47f4605 	.word	0xf47f4605
 80022d4:	4631af10 	.word	0x4631af10
 80022d8:	f7fe4648 	.word	0xf7fe4648
 80022dc:	42a8fe3f 	.word	0x42a8fe3f
 80022e0:	af09f47f 	.word	0xaf09f47f
 80022e4:	464a4653 	.word	0x464a4653
 80022e8:	46404631 	.word	0x46404631
 80022ec:	fc46f7fe 	.word	0xfc46f7fe
 80022f0:	bf00e6fe 	.word	0xbf00e6fe
 80022f4:	20000404 	.word	0x20000404
 80022f8:	7aaaaaaa 	.word	0x7aaaaaaa
 80022fc:	0012310f 	.word	0x0012310f
 8002300:	0012e223 	.word	0x0012e223
 8002304:	00018799 	.word	0x00018799
 8002308:	0013023d 	.word	0x0013023d
 800230c:	f1b3682b 	.word	0xf1b3682b
 8002310:	f47f3f55 	.word	0xf47f3f55
 8002314:	e9d2ae99 	.word	0xe9d2ae99
 8002318:	f7fe8900 	.word	0xf7fe8900
 800231c:	4b6efd59 	.word	0x4b6efd59
 8002320:	f43f4298 	.word	0xf43f4298
 8002324:	2104aee8 	.word	0x2104aee8
 8002328:	f7fe4648 	.word	0xf7fe4648
 800232c:	4b6bfe17 	.word	0x4b6bfe17
 8002330:	46824298 	.word	0x46824298
 8002334:	aedff47f 	.word	0xaedff47f
 8002338:	46402110 	.word	0x46402110
 800233c:	fe0ef7fe 	.word	0xfe0ef7fe
 8002340:	46064550 	.word	0x46064550
 8002344:	aed7f47f 	.word	0xaed7f47f
 8002348:	f1b3682b 	.word	0xf1b3682b
 800234c:	f47f3f55 	.word	0xf47f3f55
 8002350:	2104ae7b 	.word	0x2104ae7b
 8002354:	f7fe4648 	.word	0xf7fe4648
 8002358:	42b0fe01 	.word	0x42b0fe01
 800235c:	f47f4605 	.word	0xf47f4605
 8002360:	2110aeca 	.word	0x2110aeca
 8002364:	f7fe4640 	.word	0xf7fe4640
 8002368:	42a8fdf9 	.word	0x42a8fdf9
 800236c:	aec3f47f 	.word	0xaec3f47f
 8002370:	46404649 	.word	0x46404649
 8002374:	fc16f7fe 	.word	0xfc16f7fe
 8002378:	682be6ba 	.word	0x682be6ba
 800237c:	3f55f1b3 	.word	0x3f55f1b3
 8002380:	ae62f47f 	.word	0xae62f47f
 8002384:	8000f8d2 	.word	0x8000f8d2
 8002388:	fd22f7fe 	.word	0xfd22f7fe
 800238c:	42984b52 	.word	0x42984b52
 8002390:	aeb1f43f 	.word	0xaeb1f43f
 8002394:	71a0f44f 	.word	0x71a0f44f
 8002398:	f7fe4640 	.word	0xf7fe4640
 800239c:	4b4ffddf 	.word	0x4b4ffddf
 80023a0:	46064298 	.word	0x46064298
 80023a4:	aea7f47f 	.word	0xaea7f47f
 80023a8:	f1b3682b 	.word	0xf1b3682b
 80023ac:	f47f3f55 	.word	0xf47f3f55
 80023b0:	f44fae4b 	.word	0xf44fae4b
 80023b4:	464071a0 	.word	0x464071a0
 80023b8:	fdd0f7fe 	.word	0xfdd0f7fe
 80023bc:	f47f42b0 	.word	0xf47f42b0
 80023c0:	4640ae9a 	.word	0x4640ae9a
 80023c4:	fc02f7fe 	.word	0xfc02f7fe
 80023c8:	f8dfe692 	.word	0xf8dfe692
 80023cc:	f8dbb114 	.word	0xf8dbb114
 80023d0:	f1b33000 	.word	0xf1b33000
 80023d4:	f47f3f55 	.word	0xf47f3f55
 80023d8:	e9d2ae37 	.word	0xe9d2ae37
 80023dc:	f8d26900 	.word	0xf8d26900
 80023e0:	4630a008 	.word	0x4630a008
 80023e4:	f7fe4651 	.word	0xf7fe4651
 80023e8:	4540fdb9 	.word	0x4540fdb9
 80023ec:	f47f4605 	.word	0xf47f4605
 80023f0:	f8dbae82 	.word	0xf8dbae82
 80023f4:	f1b33000 	.word	0xf1b33000
 80023f8:	f47f3f55 	.word	0xf47f3f55
 80023fc:	4651ae25 	.word	0x4651ae25
 8002400:	f7fe4630 	.word	0xf7fe4630
 8002404:	42a8fdab 	.word	0x42a8fdab
 8002408:	ae75f47f 	.word	0xae75f47f
 800240c:	46494652 	.word	0x46494652
 8002410:	f0004630 	.word	0xf0004630
 8002414:	e66bf8a1 	.word	0xe66bf8a1
 8002418:	b0c4f8df 	.word	0xb0c4f8df
 800241c:	3000f8db 	.word	0x3000f8db
 8002420:	3f55f1b3 	.word	0x3f55f1b3
 8002424:	ae10f47f 	.word	0xae10f47f
 8002428:	9600e9d2 	.word	0x9600e9d2
 800242c:	a008f8d2 	.word	0xa008f8d2
 8002430:	46514630 	.word	0x46514630
 8002434:	fd92f7fe 	.word	0xfd92f7fe
 8002438:	46054540 	.word	0x46054540
 800243c:	ae5bf47f 	.word	0xae5bf47f
 8002440:	3000f8db 	.word	0x3000f8db
 8002444:	3f55f1b3 	.word	0x3f55f1b3
 8002448:	adfef47f 	.word	0xadfef47f
 800244c:	46304651 	.word	0x46304651
 8002450:	fd84f7fe 	.word	0xfd84f7fe
 8002454:	f47f42a8 	.word	0xf47f42a8
 8002458:	4652ae4e 	.word	0x4652ae4e
 800245c:	46484631 	.word	0x46484631
 8002460:	f864f000 	.word	0xf864f000
 8002464:	4b1ee644 	.word	0x4b1ee644
 8002468:	f1b3681b 	.word	0xf1b3681b
 800246c:	f47f3f55 	.word	0xf47f3f55
 8002470:	e9d2adeb 	.word	0xe9d2adeb
 8002474:	f0000100 	.word	0xf0000100
 8002478:	e639f885 	.word	0xe639f885
 800247c:	681b4b18 	.word	0x681b4b18
 8002480:	3f55f1b3 	.word	0x3f55f1b3
 8002484:	ade0f47f 	.word	0xade0f47f
 8002488:	fa52f7fe 	.word	0xfa52f7fe
 800248c:	e9d2e630 	.word	0xe9d2e630
 8002490:	21089500 	.word	0x21089500
 8002494:	f7fe4628 	.word	0xf7fe4628
 8002498:	4540fd49 	.word	0x4540fd49
 800249c:	f47f4606 	.word	0xf47f4606
 80024a0:	2108ae2a 	.word	0x2108ae2a
 80024a4:	f7fe4628 	.word	0xf7fe4628
 80024a8:	42b0fd71 	.word	0x42b0fd71
 80024ac:	ae23f43f 	.word	0xae23f43f
 80024b0:	46282108 	.word	0x46282108
 80024b4:	fd3af7fe 	.word	0xfd3af7fe
 80024b8:	468042b0 	.word	0x468042b0
 80024bc:	ae1bf47f 	.word	0xae1bf47f
 80024c0:	46282108 	.word	0x46282108
 80024c4:	fd62f7fe 	.word	0xfd62f7fe
 80024c8:	f43f4540 	.word	0xf43f4540
 80024cc:	4629ae14 	.word	0x4629ae14
 80024d0:	f0004648 	.word	0xf0004648
 80024d4:	e60bf86f 	.word	0xe60bf86f
 80024d8:	00018799 	.word	0x00018799
 80024dc:	0012310f 	.word	0x0012310f
 80024e0:	20000404 	.word	0x20000404
 80024e4:	8f4ff3bf 	.word	0x8f4ff3bf
 80024e8:	4b064905 	.word	0x4b064905
 80024ec:	f40268ca 	.word	0xf40268ca
 80024f0:	431362e0 	.word	0x431362e0
 80024f4:	f3bf60cb 	.word	0xf3bf60cb
 80024f8:	bf008f4f 	.word	0xbf008f4f
 80024fc:	bf00e7fd 	.word	0xbf00e7fd
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	05fa0004 	.word	0x05fa0004
 8002508:	8f4ff3bf 	.word	0x8f4ff3bf
 800250c:	4b064905 	.word	0x4b064905
 8002510:	f40268ca 	.word	0xf40268ca
 8002514:	431362e0 	.word	0x431362e0
 8002518:	f3bf60cb 	.word	0xf3bf60cb
 800251c:	bf008f4f 	.word	0xbf008f4f
 8002520:	bf00e7fd 	.word	0xbf00e7fd
 8002524:	e000ed00 	.word	0xe000ed00
 8002528:	05fa0004 	.word	0x05fa0004
 800252c:	4c08b430 	.word	0x4c08b430
 8002530:	1e536864 	.word	0x1e536864
 8002534:	44034284 	.word	0x44034284
 8002538:	f504d803 	.word	0xf504d803
 800253c:	429c7400 	.word	0x429c7400
 8002540:	4804d802 	.word	0x4804d802
 8002544:	4770bc30 	.word	0x4770bc30
 8002548:	f7febc30 	.word	0xf7febc30
 800254c:	bf00bc87 	.word	0xbf00bc87
 8002550:	08003220 	.word	0x08003220
 8002554:	00018799 	.word	0x00018799
 8002558:	4c08b430 	.word	0x4c08b430
 800255c:	1e536864 	.word	0x1e536864
 8002560:	440b428c 	.word	0x440b428c
 8002564:	f504d803 	.word	0xf504d803
 8002568:	429c7400 	.word	0x429c7400
 800256c:	4804d802 	.word	0x4804d802
 8002570:	4770bc30 	.word	0x4770bc30
 8002574:	f7febc30 	.word	0xf7febc30
 8002578:	bf00bc9f 	.word	0xbf00bc9f
 800257c:	08003220 	.word	0x08003220
 8002580:	00018799 	.word	0x00018799
 8002584:	68524a09 	.word	0x68524a09
 8002588:	42821e4b 	.word	0x42821e4b
 800258c:	4403b410 	.word	0x4403b410
 8002590:	f502d803 	.word	0xf502d803
 8002594:	429a7200 	.word	0x429a7200
 8002598:	4805d803 	.word	0x4805d803
 800259c:	4b04f85d 	.word	0x4b04f85d
 80025a0:	f85d4770 	.word	0xf85d4770
 80025a4:	f7fe4b04 	.word	0xf7fe4b04
 80025a8:	bf00bc2f 	.word	0xbf00bc2f
 80025ac:	08003220 	.word	0x08003220
 80025b0:	00018799 	.word	0x00018799
 80025b4:	460cb510 	.word	0x460cb510
 80025b8:	b199b0d0 	.word	0xb199b0d0
 80025bc:	d8112801 	.word	0xd8112801
 80025c0:	f44f4b09 	.word	0xf44f4b09
 80025c4:	f85372a0 	.word	0xf85372a0
 80025c8:	46681020 	.word	0x46681020
 80025cc:	fc74f7fe 	.word	0xfc74f7fe
 80025d0:	42984b06 	.word	0x42984b06
 80025d4:	f8bdd004 	.word	0xf8bdd004
 80025d8:	80233006 	.word	0x80233006
 80025dc:	60639b02 	.word	0x60639b02
 80025e0:	bd10b050 	.word	0xbd10b050
 80025e4:	e7fb4801 	.word	0xe7fb4801
 80025e8:	08003220 	.word	0x08003220
 80025ec:	00018799 	.word	0x00018799
 80025f0:	60184b01 	.word	0x60184b01
 80025f4:	bf004770 	.word	0xbf004770
 80025f8:	200005b0 	.word	0x200005b0
 80025fc:	490f4b0e 	.word	0x490f4b0e
 8002600:	e9d3b510 	.word	0xe9d3b510
 8002604:	68882401 	.word	0x68882401
 8002608:	bf384282 	.word	0xbf384282
 800260c:	44226849 	.word	0x44226849
 8002610:	1852bf38 	.word	0x1852bf38
 8002614:	68191a12 	.word	0x68191a12
 8002618:	f44f609a 	.word	0xf44f609a
 800261c:	fbb1747a 	.word	0xfbb1747a
 8002620:	4291f1f4 	.word	0x4291f1f4
 8002624:	68dad204 	.word	0x68dad204
 8002628:	32012100 	.word	0x32012100
 800262c:	60da6099 	.word	0x60da6099
 8002630:	68d86058 	.word	0x68d86058
 8002634:	bf00bd10 	.word	0xbf00bd10
 8002638:	200005b0 	.word	0x200005b0
 800263c:	e000e010 	.word	0xe000e010
 8002640:	4604b538 	.word	0x4604b538
 8002644:	ffdaf7ff 	.word	0xffdaf7ff
 8002648:	46051c63 	.word	0x46051c63
 800264c:	3401bf18 	.word	0x3401bf18
 8002650:	ffd4f7ff 	.word	0xffd4f7ff
 8002654:	42a31b43 	.word	0x42a31b43
 8002658:	bd38d3fa 	.word	0xbd38d3fa
 800265c:	2200b51f 	.word	0x2200b51f
 8002660:	466b4604 	.word	0x466b4604
 8002664:	f64f4611 	.word	0xf64f4611
 8002668:	f0004052 	.word	0xf0004052
 800266c:	b114f893 	.word	0xb114f893
 8002670:	300ff89d 	.word	0x300ff89d
 8002674:	f89d7023 	.word	0xf89d7023
 8002678:	b004000e 	.word	0xb004000e
 800267c:	b51fbd10 	.word	0xb51fbd10
 8002680:	9000b108 	.word	0x9000b108
 8002684:	b1112004 	.word	0xb1112004
 8002688:	91013004 	.word	0x91013004
 800268c:	466bb2c0 	.word	0x466bb2c0
 8002690:	461a4601 	.word	0x461a4601
 8002694:	4054f64f 	.word	0x4054f64f
 8002698:	f87cf000 	.word	0xf87cf000
 800269c:	000ef89d 	.word	0x000ef89d
 80026a0:	f85db005 	.word	0xf85db005
 80026a4:	b51ffb04 	.word	0xb51ffb04
 80026a8:	f88d466b 	.word	0xf88d466b
 80026ac:	461a0000 	.word	0x461a0000
 80026b0:	f64f2101 	.word	0xf64f2101
 80026b4:	f0004059 	.word	0xf0004059
 80026b8:	f89df86d 	.word	0xf89df86d
 80026bc:	b005000e 	.word	0xb005000e
 80026c0:	fb04f85d 	.word	0xfb04f85d
 80026c4:	2200b51f 	.word	0x2200b51f
 80026c8:	4611466b 	.word	0x4611466b
 80026cc:	405af64f 	.word	0x405af64f
 80026d0:	f860f000 	.word	0xf860f000
 80026d4:	000ef89d 	.word	0x000ef89d
 80026d8:	f85db005 	.word	0xf85db005
 80026dc:	b51ffb04 	.word	0xb51ffb04
 80026e0:	f88d466b 	.word	0xf88d466b
 80026e4:	461a0000 	.word	0x461a0000
 80026e8:	f64f2101 	.word	0xf64f2101
 80026ec:	f000405d 	.word	0xf000405d
 80026f0:	f89df851 	.word	0xf89df851
 80026f4:	b005000e 	.word	0xb005000e
 80026f8:	fb04f85d 	.word	0xfb04f85d
 80026fc:	2200b51f 	.word	0x2200b51f
 8002700:	4611466b 	.word	0x4611466b
 8002704:	406ff64f 	.word	0x406ff64f
 8002708:	f844f000 	.word	0xf844f000
 800270c:	000ef89d 	.word	0x000ef89d
 8002710:	f85db005 	.word	0xf85db005
 8002714:	0000fb04 	.word	0x0000fb04
 8002718:	4601b508 	.word	0x4601b508
 800271c:	f0004803 	.word	0xf0004803
 8002720:	e8bdf888 	.word	0xe8bdf888
 8002724:	48014008 	.word	0x48014008
 8002728:	b8ecf7fe 	.word	0xb8ecf7fe
 800272c:	20000408 	.word	0x20000408
 8002730:	20014b03 	.word	0x20014b03
 8002734:	4b037218 	.word	0x4b037218
 8002738:	b103681b 	.word	0xb103681b
 800273c:	47704718 	.word	0x47704718
 8002740:	20000408 	.word	0x20000408
 8002744:	200005c0 	.word	0x200005c0
 8002748:	4c0eb57f 	.word	0x4c0eb57f
 800274c:	6220684b 	.word	0x6220684b
 8002750:	1d20460d 	.word	0x1d20460d
 8002754:	f0006023 	.word	0xf0006023
 8002758:	682ef855 	.word	0x682ef855
 800275c:	46284d0a 	.word	0x46284d0a
 8002760:	f00060ee 	.word	0xf00060ee
 8002764:	f7fff859 	.word	0xf7fff859
 8002768:	2301ffe3 	.word	0x2301ffe3
 800276c:	6863742b 	.word	0x6863742b
 8002770:	4a06b133 	.word	0x4a06b133
 8002774:	4a069201 	.word	0x4a069201
 8002778:	92029603 	.word	0x92029603
 800277c:	4798a801 	.word	0x4798a801
 8002780:	bd70b004 	.word	0xbd70b004
 8002784:	200005c0 	.word	0x200005c0
 8002788:	20000408 	.word	0x20000408
 800278c:	080027f9 	.word	0x080027f9
 8002790:	08002719 	.word	0x08002719
 8002794:	43f7e92d 	.word	0x43f7e92d
 8002798:	461e4c15 	.word	0x461e4c15
 800279c:	460d6823 	.word	0x460d6823
 80027a0:	46114680 	.word	0x46114680
 80027a4:	2000b11b 	.word	0x2000b11b
 80027a8:	47989201 	.word	0x47989201
 80027ac:	4f119901 	.word	0x4f119901
 80027b0:	462a68f8 	.word	0x462a68f8
 80027b4:	0900f04f 	.word	0x0900f04f
 80027b8:	8009f8a0 	.word	0x8009f8a0
 80027bc:	300c72c5 	.word	0x300c72c5
 80027c0:	9008f887 	.word	0x9008f887
 80027c4:	fba2f000 	.word	0xfba2f000
 80027c8:	46496963 	.word	0x46496963
 80027cc:	47984648 	.word	0x47984648
 80027d0:	00e8f248 	.word	0x00e8f248
 80027d4:	f8a2f7fe 	.word	0xf8a2f7fe
 80027d8:	788a68f9 	.word	0x788a68f9
 80027dc:	0008f106 	.word	0x0008f106
 80027e0:	f0003203 	.word	0xf0003203
 80027e4:	b003fb93 	.word	0xb003fb93
 80027e8:	43f0e8bd 	.word	0x43f0e8bd
 80027ec:	bfa0f7ff 	.word	0xbfa0f7ff
 80027f0:	200005c0 	.word	0x200005c0
 80027f4:	20000408 	.word	0x20000408
 80027f8:	2000b508 	.word	0x2000b508
 80027fc:	f888f7fe 	.word	0xf888f7fe
 8002800:	0000bd08 	.word	0x0000bd08
 8002804:	60034b02 	.word	0x60034b02
 8002808:	61034b02 	.word	0x61034b02
 800280c:	bf004770 	.word	0xbf004770
 8002810:	080028fd 	.word	0x080028fd
 8002814:	08002931 	.word	0x08002931
 8002818:	60406000 	.word	0x60406000
 800281c:	f3ef4770 	.word	0xf3ef4770
 8002820:	b6728310 	.word	0xb6728310
 8002824:	1a826802 	.word	0x1a826802
 8002828:	41504250 	.word	0x41504250
 800282c:	8810f383 	.word	0x8810f383
 8002830:	f3ef4770 	.word	0xf3ef4770
 8002834:	b6728310 	.word	0xb6728310
 8002838:	68426008 	.word	0x68426008
 800283c:	6041604a 	.word	0x6041604a
 8002840:	6011684a 	.word	0x6011684a
 8002844:	8810f383 	.word	0x8810f383
 8002848:	f3ef4770 	.word	0xf3ef4770
 800284c:	b6728210 	.word	0xb6728210
 8002850:	68016843 	.word	0x68016843
 8002854:	68016019 	.word	0x68016019
 8002858:	f382604b 	.word	0xf382604b
 800285c:	47708810 	.word	0x47708810
 8002860:	f3efb510 	.word	0xf3efb510
 8002864:	b6728410 	.word	0xb6728410
 8002868:	600b6803 	.word	0x600b6803
 800286c:	f7ff6800 	.word	0xf7ff6800
 8002870:	f384ffec 	.word	0xf384ffec
 8002874:	bd108810 	.word	0xbd108810
 8002878:	bf2af7fd 	.word	0xbf2af7fd
 800287c:	4a104b0f 	.word	0x4a104b0f
 8002880:	0120f103 	.word	0x0120f103
 8002884:	60516013 	.word	0x60516013
 8002888:	0130f103 	.word	0x0130f103
 800288c:	f1036091 	.word	0xf1036091
 8002890:	6211013c 	.word	0x6211013c
 8002894:	0144f103 	.word	0x0144f103
 8002898:	f1036251 	.word	0xf1036251
 800289c:	60d1014c 	.word	0x60d1014c
 80028a0:	0154f103 	.word	0x0154f103
 80028a4:	f1036111 	.word	0xf1036111
 80028a8:	61510170 	.word	0x61510170
 80028ac:	0174f103 	.word	0x0174f103
 80028b0:	61913380 	.word	0x61913380
 80028b4:	f7fd61d3 	.word	0xf7fd61d3
 80028b8:	bf00bf33 	.word	0xbf00bf33
 80028bc:	20030028 	.word	0x20030028
 80028c0:	20030000 	.word	0x20030000
 80028c4:	4c08b537 	.word	0x4c08b537
 80028c8:	48074d08 	.word	0x48074d08
 80028cc:	ffa7f7ff 	.word	0xffa7f7ff
 80028d0:	b003b108 	.word	0xb003b108
 80028d4:	4620bd30 	.word	0x4620bd30
 80028d8:	f7ffa901 	.word	0xf7ffa901
 80028dc:	68abffc1 	.word	0x68abffc1
 80028e0:	47989801 	.word	0x47989801
 80028e4:	bf00e7f1 	.word	0xbf00e7f1
 80028e8:	200300b4 	.word	0x200300b4
 80028ec:	200005e8 	.word	0x200005e8
 80028f0:	68db4b01 	.word	0x68db4b01
 80028f4:	bf004718 	.word	0xbf004718
 80028f8:	200005e8 	.word	0x200005e8
 80028fc:	4d09b538 	.word	0x4d09b538
 8002900:	46284604 	.word	0x46284604
 8002904:	ff88f7ff 	.word	0xff88f7ff
 8002908:	68a24b07 	.word	0x68a24b07
 800290c:	e9c368db 	.word	0xe9c368db
 8002910:	f7fd2500 	.word	0xf7fd2500
 8002914:	4b05ff25 	.word	0x4b05ff25
 8002918:	611a6822 	.word	0x611a6822
 800291c:	615a6862 	.word	0x615a6862
 8002920:	bd382000 	.word	0xbd382000
 8002924:	200300bc 	.word	0x200300bc
 8002928:	20030000 	.word	0x20030000
 800292c:	200005e8 	.word	0x200005e8
 8002930:	4b05b508 	.word	0x4b05b508
 8002934:	68db68da 	.word	0x68db68da
 8002938:	21106812 	.word	0x21106812
 800293c:	f7fd7211 	.word	0xf7fd7211
 8002940:	2000ff17 	.word	0x2000ff17
 8002944:	bf00bd08 	.word	0xbf00bd08
 8002948:	20030000 	.word	0x20030000
 800294c:	68da4b03 	.word	0x68da4b03
 8002950:	4b0368da 	.word	0x4b0368da
 8002954:	691b6810 	.word	0x691b6810
 8002958:	bf004718 	.word	0xbf004718
 800295c:	20030000 	.word	0x20030000
 8002960:	200005e8 	.word	0x200005e8
 8002964:	4c08b537 	.word	0x4c08b537
 8002968:	48074d08 	.word	0x48074d08
 800296c:	ff57f7ff 	.word	0xff57f7ff
 8002970:	b003b108 	.word	0xb003b108
 8002974:	4620bd30 	.word	0x4620bd30
 8002978:	f7ffa901 	.word	0xf7ffa901
 800297c:	696bff71 	.word	0x696bff71
 8002980:	47989801 	.word	0x47989801
 8002984:	bf00e7f1 	.word	0xbf00e7f1
 8002988:	200300bc 	.word	0x200300bc
 800298c:	200005e8 	.word	0x200005e8
 8002990:	4d0cb538 	.word	0x4d0cb538
 8002994:	46284604 	.word	0x46284604
 8002998:	ff3ef7ff 	.word	0xff3ef7ff
 800299c:	f7ff480a 	.word	0xf7ff480a
 80029a0:	4b0aff3b 	.word	0x4b0aff3b
 80029a4:	691b68a2 	.word	0x691b68a2
 80029a8:	68e2609a 	.word	0x68e2609a
 80029ac:	2503e9c3 	.word	0x2503e9c3
 80029b0:	601a6822 	.word	0x601a6822
 80029b4:	605a6862 	.word	0x605a6862
 80029b8:	615a6922 	.word	0x615a6922
 80029bc:	619a6962 	.word	0x619a6962
 80029c0:	bf00bd38 	.word	0xbf00bd38
 80029c4:	200300c4 	.word	0x200300c4
 80029c8:	200005e8 	.word	0x200005e8
 80029cc:	20030000 	.word	0x20030000
 80029d0:	00004770 	.word	0x00004770
 80029d4:	4c07b513 	.word	0x4c07b513
 80029d8:	f7ff4806 	.word	0xf7ff4806
 80029dc:	b108ff20 	.word	0xb108ff20
 80029e0:	bd10b002 	.word	0xbd10b002
 80029e4:	a9014620 	.word	0xa9014620
 80029e8:	ff3af7ff 	.word	0xff3af7ff
 80029ec:	f7ff9801 	.word	0xf7ff9801
 80029f0:	e7f1ffef 	.word	0xe7f1ffef
 80029f4:	200300cc 	.word	0x200300cc
 80029f8:	4ff0e92d 	.word	0x4ff0e92d
 80029fc:	2300b0c5 	.word	0x2300b0c5
 8002a00:	680b9303 	.word	0x680b9303
 8002a04:	9304ba1b 	.word	0x9304ba1b
 8002a08:	ba1b684b 	.word	0xba1b684b
 8002a0c:	688b9305 	.word	0x688b9305
 8002a10:	9306ba1b 	.word	0x9306ba1b
 8002a14:	ba1b68cb 	.word	0xba1b68cb
 8002a18:	690b9307 	.word	0x690b9307
 8002a1c:	9308ba1b 	.word	0x9308ba1b
 8002a20:	ba1b694b 	.word	0xba1b694b
 8002a24:	698b9309 	.word	0x698b9309
 8002a28:	930aba1b 	.word	0x930aba1b
 8002a2c:	ba1b69cb 	.word	0xba1b69cb
 8002a30:	6a0b930b 	.word	0x6a0b930b
 8002a34:	930cba1b 	.word	0x930cba1b
 8002a38:	ba1b6a4b 	.word	0xba1b6a4b
 8002a3c:	6a8b930d 	.word	0x6a8b930d
 8002a40:	930eba1b 	.word	0x930eba1b
 8002a44:	ba1b6acb 	.word	0xba1b6acb
 8002a48:	6b0b930f 	.word	0x6b0b930f
 8002a4c:	9310ba1b 	.word	0x9310ba1b
 8002a50:	ba1b6b4b 	.word	0xba1b6b4b
 8002a54:	6b8b9311 	.word	0x6b8b9311
 8002a58:	9312ba1b 	.word	0x9312ba1b
 8002a5c:	ba1b6bcb 	.word	0xba1b6bcb
 8002a60:	ad349313 	.word	0xad349313
 8002a64:	6b9aab04 	.word	0x6b9aab04
 8002a68:	685c681e 	.word	0x685c681e
 8002a6c:	4172ea4f 	.word	0x4172ea4f
 8002a70:	41f2ea81 	.word	0x41f2ea81
 8002a74:	2192ea81 	.word	0x2192ea81
 8002a78:	44326a5a 	.word	0x44326a5a
 8002a7c:	ea4f4411 	.word	0xea4f4411
 8002a80:	ea8242b4 	.word	0xea8242b4
 8002a84:	ea8212f4 	.word	0xea8212f4
 8002a88:	441102d4 	.word	0x441102d4
 8002a8c:	6bd96419 	.word	0x6bd96419
 8002a90:	ea4f689e 	.word	0xea4f689e
 8002a94:	ea8242f1 	.word	0xea8242f1
 8002a98:	ea824271 	.word	0xea824271
 8002a9c:	6a992291 	.word	0x6a992291
 8002aa0:	ea4f440c 	.word	0xea4f440c
 8002aa4:	ea8141b6 	.word	0xea8141b6
 8002aa8:	442211f6 	.word	0x442211f6
 8002aac:	01d6ea81 	.word	0x01d6ea81
 8002ab0:	645a440a 	.word	0x645a440a
 8002ab4:	429d3308 	.word	0x429d3308
 8002ab8:	4b67d1d5 	.word	0x4b67d1d5
 8002abc:	69016805 	.word	0x69016805
 8002ac0:	e004f8d0 	.word	0xe004f8d0
 8002ac4:	f8d06944 	.word	0xf8d06944
 8002ac8:	f8d08008 	.word	0xf8d08008
 8002acc:	68c6c018 	.word	0x68c6c018
 8002ad0:	220169c7 	.word	0x220169c7
 8002ad4:	681b601a 	.word	0x681b601a
 8002ad8:	4b609303 	.word	0x4b609303
 8002adc:	9203681a 	.word	0x9203681a
 8002ae0:	32019a03 	.word	0x32019a03
 8002ae4:	8099f040 	.word	0x8099f040
 8002ae8:	601a9a03 	.word	0x601a9a03
 8002aec:	9303681b 	.word	0x9303681b
 8002af0:	b1db9b03 	.word	0xb1db9b03
 8002af4:	4e5a6903 	.word	0x4e5a6903
 8002af8:	f8d06807 	.word	0xf8d06807
 8002afc:	f8d0901c 	.word	0xf8d0901c
 8002b00:	68c1c018 	.word	0x68c1c018
 8002b04:	68426884 	.word	0x68426884
 8002b08:	405e4077 	.word	0x405e4077
 8002b0c:	60076943 	.word	0x60076943
 8002b10:	0e01ea8c 	.word	0x0e01ea8c
 8002b14:	ea866106 	.word	0xea866106
 8002b18:	ea830509 	.word	0xea830509
 8002b1c:	40790804 	.word	0x40790804
 8002b20:	ea894056 	.word	0xea894056
 8002b24:	ea8c0404 	.word	0xea8c0404
 8002b28:	405f0c02 	.word	0x405f0c02
 8002b2c:	0900f04f 	.word	0x0900f04f
 8002b30:	0b10f10d 	.word	0x0b10f10d
 8002b34:	f8594b4b 	.word	0xf8594b4b
 8002b38:	f8592003 	.word	0xf8592003
 8002b3c:	ea4f300b 	.word	0xea4f300b
 8002b40:	441a1ab1 	.word	0x441a1ab1
 8002b44:	2af1ea8a 	.word	0x2af1ea8a
 8002b48:	030cea84 	.word	0x030cea84
 8002b4c:	6a71ea8a 	.word	0x6a71ea8a
 8002b50:	4492400b 	.word	0x4492400b
 8002b54:	030cea83 	.word	0x030cea83
 8002b58:	441f4453 	.word	0x441f4453
 8002b5c:	020eea45 	.word	0x020eea45
 8002b60:	03b5ea4f 	.word	0x03b5ea4f
 8002b64:	0208ea02 	.word	0x0208ea02
 8002b68:	0a0eea05 	.word	0x0a0eea05
 8002b6c:	3375ea83 	.word	0x3375ea83
 8002b70:	020aea42 	.word	0x020aea42
 8002b74:	53b5ea83 	.word	0x53b5ea83
 8002b78:	4a3a4413 	.word	0x4a3a4413
 8002b7c:	0a06eb07 	.word	0x0a06eb07
 8002b80:	eb0b444a 	.word	0xeb0b444a
 8002b84:	68520609 	.word	0x68520609
 8002b88:	44326876 	.word	0x44326876
 8002b8c:	ea814494 	.word	0xea814494
 8002b90:	ea020204 	.word	0xea020204
 8002b94:	4062020a 	.word	0x4062020a
 8002b98:	ea4f4462 	.word	0xea4f4462
 8002b9c:	443b1cba 	.word	0x443b1cba
 8002ba0:	2cfaea8c 	.word	0x2cfaea8c
 8002ba4:	6c7aea8c 	.word	0x6c7aea8c
 8002ba8:	06b3ea4f 	.word	0x06b3ea4f
 8002bac:	0705ea43 	.word	0x0705ea43
 8002bb0:	ea864462 	.word	0xea864462
 8002bb4:	ea033673 	.word	0xea033673
 8002bb8:	ea070c05 	.word	0xea070c05
 8002bbc:	ea47070e 	.word	0xea47070e
 8002bc0:	ea86070c 	.word	0xea86070c
 8002bc4:	f10956b3 	.word	0xf10956b3
 8002bc8:	443e0908 	.word	0x443e0908
 8002bcc:	7f80f5b9 	.word	0x7f80f5b9
 8002bd0:	0708eb02 	.word	0x0708eb02
 8002bd4:	44329701 	.word	0x44329701
 8002bd8:	467646a8 	.word	0x467646a8
 8002bdc:	4627468c 	.word	0x4627468c
 8002be0:	6806d135 	.word	0x6806d135
 8002be4:	60024432 	.word	0x60024432
 8002be8:	44136842 	.word	0x44136842
 8002bec:	68836043 	.word	0x68836043
 8002bf0:	441d9a01 	.word	0x441d9a01
 8002bf4:	608568c3 	.word	0x608568c3
 8002bf8:	60c34473 	.word	0x60c34473
 8002bfc:	44136903 	.word	0x44136903
 8002c00:	69436103 	.word	0x69436103
 8002c04:	61434453 	.word	0x61434453
 8002c08:	44196983 	.word	0x44196983
 8002c0c:	618169c3 	.word	0x618169c3
 8002c10:	61c4441c 	.word	0x61c4441c
 8002c14:	e8bdb045 	.word	0xe8bdb045
 8002c18:	4b118ff0 	.word	0x4b118ff0
 8002c1c:	0906ea8c 	.word	0x0906ea8c
 8002c20:	0203ea85 	.word	0x0203ea85
 8002c24:	0a08ea84 	.word	0x0a08ea84
 8002c28:	ea88404b 	.word	0xea88404b
 8002c2c:	ea830807 	.word	0xea830807
 8002c30:	ea820507 	.word	0xea820507
 8002c34:	ea8c0106 	.word	0xea8c0106
 8002c38:	ea820c0e 	.word	0xea820c0e
 8002c3c:	ea830704 	.word	0xea830704
 8002c40:	4644060e 	.word	0x4644060e
 8002c44:	61036002 	.word	0x61036002
 8002c48:	46ce46d0 	.word	0x46ce46d0
 8002c4c:	4654e76e 	.word	0x4654e76e
 8002c50:	469e9901 	.word	0x469e9901
 8002c54:	e76d4615 	.word	0xe76d4615
 8002c58:	40023008 	.word	0x40023008
 8002c5c:	40023000 	.word	0x40023000
 8002c60:	a5a5f0f0 	.word	0xa5a5f0f0
 8002c64:	08003278 	.word	0x08003278
 8002c68:	43f8e92d 	.word	0x43f8e92d
 8002c6c:	46046cc3 	.word	0x46046cc3
 8002c70:	00d24617 	.word	0x00d24617
 8002c74:	00c5f3c3 	.word	0x00c5f3c3
 8002c78:	64e3189b 	.word	0x64e3189b
 8002c7c:	6d23bf22 	.word	0x6d23bf22
 8002c80:	65233301 	.word	0x65233301
 8002c84:	eb036d23 	.word	0xeb036d23
 8002c88:	65237357 	.word	0x65237357
 8002c8c:	2b3f19c3 	.word	0x2b3f19c3
 8002c90:	d92f460e 	.word	0xd92f460e
 8002c94:	0540f1c0 	.word	0x0540f1c0
 8002c98:	462a300c 	.word	0x462a300c
 8002c9c:	f1044420 	.word	0xf1044420
 8002ca0:	f1040854 	.word	0xf1040854
 8002ca4:	f000090c 	.word	0xf000090c
 8002ca8:	4649f931 	.word	0x4649f931
 8002cac:	f7ff4640 	.word	0xf7ff4640
 8002cb0:	f105fea3 	.word	0xf105fea3
 8002cb4:	429f033f 	.word	0x429f033f
 8002cb8:	0105eb06 	.word	0x0105eb06
 8002cbc:	2000d808 	.word	0x2000d808
 8002cc0:	1b7a300c 	.word	0x1b7a300c
 8002cc4:	44201971 	.word	0x44201971
 8002cc8:	43f8e8bd 	.word	0x43f8e8bd
 8002ccc:	b91ef000 	.word	0xb91ef000
 8002cd0:	d004078b 	.word	0xd004078b
 8002cd4:	f7ff4640 	.word	0xf7ff4640
 8002cd8:	3540fe8f 	.word	0x3540fe8f
 8002cdc:	464be7e9 	.word	0x464be7e9
 8002ce0:	0240f101 	.word	0x0240f101
 8002ce4:	0b04f851 	.word	0x0b04f851
 8002ce8:	0b04f843 	.word	0x0b04f843
 8002cec:	d1f94291 	.word	0xd1f94291
 8002cf0:	e7ef4649 	.word	0xe7ef4649
 8002cf4:	e7e32500 	.word	0xe7e32500
 8002cf8:	b150b538 	.word	0xb150b538
 8002cfc:	2a00b149 	.word	0x2a00b149
 8002d00:	7903db07 	.word	0x7903db07
 8002d04:	0404f013 	.word	0x0404f013
 8002d08:	f7ffd106 	.word	0xf7ffd106
 8002d0c:	4620ffad 	.word	0x4620ffad
 8002d10:	f640bd38 	.word	0xf640bd38
 8002d14:	e7fb70a3 	.word	0xe7fb70a3
 8002d18:	70a1f640 	.word	0x70a1f640
 8002d1c:	0000e7f8 	.word	0x0000e7f8
 8002d20:	4a0d4b0c 	.word	0x4a0d4b0c
 8002d24:	f8df490d 	.word	0xf8df490d
 8002d28:	e9c0c044 	.word	0xe9c0c044
 8002d2c:	4b0c2315 	.word	0x4b0c2315
 8002d30:	1317e9c0 	.word	0x1317e9c0
 8002d34:	e9c04b0b 	.word	0xe9c04b0b
 8002d38:	4b0bc319 	.word	0x4b0bc319
 8002d3c:	f10366c3 	.word	0xf10366c3
 8002d40:	f5a35374 	.word	0xf5a35374
 8002d44:	f6a30323 	.word	0xf6a30323
 8002d48:	67034392 	.word	0x67034392
 8002d4c:	e9c02300 	.word	0xe9c02300
 8002d50:	47703313 	.word	0x47703313
 8002d54:	bb67ae85 	.word	0xbb67ae85
 8002d58:	6a09e667 	.word	0x6a09e667
 8002d5c:	3c6ef372 	.word	0x3c6ef372
 8002d60:	a54ff53a 	.word	0xa54ff53a
 8002d64:	9b05688c 	.word	0x9b05688c
 8002d68:	1f83d9ab 	.word	0x1f83d9ab
 8002d6c:	510e527f 	.word	0x510e527f
 8002d70:	b138b508 	.word	0xb138b508
 8002d74:	f0237903 	.word	0xf0237903
 8002d78:	71030306 	.word	0x71030306
 8002d7c:	ffd0f7ff 	.word	0xffd0f7ff
 8002d80:	bd082000 	.word	0xbd082000
 8002d84:	70a3f640 	.word	0x70a3f640
 8002d88:	e92de7fb 	.word	0xe92de7fb
 8002d8c:	230041f3 	.word	0x230041f3
 8002d90:	460d4604 	.word	0x460d4604
 8002d94:	bfd42b03 	.word	0xbfd42b03
 8002d98:	2148214c 	.word	0x2148214c
 8002d9c:	43da4421 	.word	0x43da4421
 8002da0:	0203f002 	.word	0x0203f002
 8002da4:	00d26849 	.word	0x00d26849
 8002da8:	f202fa21 	.word	0xf202fa21
 8002dac:	2003f80d 	.word	0x2003f80d
 8002db0:	2b083301 	.word	0x2b083301
 8002db4:	e9d4d1ee 	.word	0xe9d4d1ee
 8002db8:	08c20113 	.word	0x08c20113
 8002dbc:	7241ea42 	.word	0x7241ea42
 8002dc0:	f0022100 	.word	0xf0022100
 8002dc4:	2900003f 	.word	0x2900003f
 8002dc8:	2838bf08 	.word	0x2838bf08
 8002dcc:	f0024420 	.word	0xf0024420
 8002dd0:	f04f023f 	.word	0xf04f023f
 8002dd4:	f1040180 	.word	0xf1040180
 8002dd8:	f102064c 	.word	0xf102064c
 8002ddc:	73010301 	.word	0x73010301
 8002de0:	2200d23b 	.word	0x2200d23b
 8002de4:	dd342b37 	.word	0xdd342b37
 8002de8:	0244f104 	.word	0x0244f104
 8002dec:	f81d2300 	.word	0xf81d2300
 8002df0:	f8021003 	.word	0xf8021003
 8002df4:	33011b01 	.word	0x33011b01
 8002df8:	d1f82b08 	.word	0xd1f82b08
 8002dfc:	010cf104 	.word	0x010cf104
 8002e00:	0054f104 	.word	0x0054f104
 8002e04:	fdf8f7ff 	.word	0xfdf8f7ff
 8002e08:	0354f104 	.word	0x0354f104
 8002e0c:	0174f104 	.word	0x0174f104
 8002e10:	681a461f 	.word	0x681a461f
 8002e14:	681a70ea 	.word	0x681a70ea
 8002e18:	70aa0a12 	.word	0x70aa0a12
 8002e1c:	2b04f853 	.word	0x2b04f853
 8002e20:	706a0c12 	.word	0x706a0c12
 8002e24:	2c01f813 	.word	0x2c01f813
 8002e28:	2b04f805 	.word	0x2b04f805
 8002e2c:	d1f04299 	.word	0xd1f04299
 8002e30:	21002240 	.word	0x21002240
 8002e34:	000cf104 	.word	0x000cf104
 8002e38:	f876f000 	.word	0xf876f000
 8002e3c:	21002220 	.word	0x21002220
 8002e40:	f0004638 	.word	0xf0004638
 8002e44:	2300f871 	.word	0x2300f871
 8002e48:	607364e3 	.word	0x607364e3
 8002e4c:	e8bdb002 	.word	0xe8bdb002
 8002e50:	18e181f0 	.word	0x18e181f0
 8002e54:	730a3301 	.word	0x730a3301
 8002e58:	320ce7c4 	.word	0x320ce7c4
 8002e5c:	f1044422 	.word	0xf1044422
 8002e60:	2100034b 	.word	0x2100034b
 8002e64:	d11a429a 	.word	0xd11a429a
 8002e68:	070cf104 	.word	0x070cf104
 8002e6c:	0854f104 	.word	0x0854f104
 8002e70:	46404639 	.word	0x46404639
 8002e74:	fdc0f7ff 	.word	0xfdc0f7ff
 8002e78:	f104463b 	.word	0xf104463b
 8002e7c:	21000244 	.word	0x21000244
 8002e80:	1b01f803 	.word	0x1b01f803
 8002e84:	d1fb4293 	.word	0xd1fb4293
 8002e88:	f81d2200 	.word	0xf81d2200
 8002e8c:	f8031002 	.word	0xf8031002
 8002e90:	32011b01 	.word	0x32011b01
 8002e94:	d1f82a08 	.word	0xd1f82a08
 8002e98:	46404639 	.word	0x46404639
 8002e9c:	f802e7b2 	.word	0xf802e7b2
 8002ea0:	e7df1f01 	.word	0xe7df1f01
 8002ea4:	460eb570 	.word	0x460eb570
 8002ea8:	4615b088 	.word	0x4615b088
 8002eac:	b1c84604 	.word	0xb1c84604
 8002eb0:	b1bab1c1 	.word	0xb1bab1c1
 8002eb4:	3b016883 	.word	0x3b016883
 8002eb8:	d8162b1f 	.word	0xd8162b1f
 8002ebc:	f0437903 	.word	0xf0437903
 8002ec0:	71030304 	.word	0x71030304
 8002ec4:	f7ff4669 	.word	0xf7ff4669
 8002ec8:	2300ff60 	.word	0x2300ff60
 8002ecc:	429368a2 	.word	0x429368a2
 8002ed0:	602adb03 	.word	0x602adb03
 8002ed4:	b0082000 	.word	0xb0082000
 8002ed8:	f81dbd70 	.word	0xf81dbd70
 8002edc:	54f22003 	.word	0x54f22003
 8002ee0:	e7f33301 	.word	0xe7f33301
 8002ee4:	70a3f640 	.word	0x70a3f640
 8002ee8:	f640e7f5 	.word	0xf640e7f5
 8002eec:	e7f270a2 	.word	0xe7f270a2
 8002ef0:	3901b530 	.word	0x3901b530
 8002ef4:	42a22400 	.word	0x42a22400
 8002ef8:	2000d101 	.word	0x2000d101
 8002efc:	5d03e005 	.word	0x5d03e005
 8002f00:	5d0d3401 	.word	0x5d0d3401
 8002f04:	d0f642ab 	.word	0xd0f642ab
 8002f08:	bd301b58 	.word	0xbd301b58
 8002f0c:	4291440a 	.word	0x4291440a
 8002f10:	33fff100 	.word	0x33fff100
 8002f14:	4770d100 	.word	0x4770d100
 8002f18:	f811b510 	.word	0xf811b510
 8002f1c:	f8034b01 	.word	0xf8034b01
 8002f20:	42914f01 	.word	0x42914f01
 8002f24:	bd10d1f9 	.word	0xbd10d1f9
 8002f28:	46034402 	.word	0x46034402
 8002f2c:	d1004293 	.word	0xd1004293
 8002f30:	f8034770 	.word	0xf8034770
 8002f34:	e7f91b01 	.word	0xe7f91b01
 8002f38:	bf00b5f8 	.word	0xbf00b5f8
 8002f3c:	bc08bcf8 	.word	0xbc08bcf8
 8002f40:	4770469e 	.word	0x4770469e
 8002f44:	bf00b5f8 	.word	0xbf00b5f8
 8002f48:	bc08bcf8 	.word	0xbc08bcf8
 8002f4c:	4770469e 	.word	0x4770469e
 8002f50:	695a4b0a 	.word	0x695a4b0a
 8002f54:	2280f442 	.word	0x2280f442
 8002f58:	615ab530 	.word	0x615ab530
 8002f5c:	8410f3ef 	.word	0x8410f3ef
 8002f60:	2200b672 	.word	0x2200b672
 8002f64:	5085588d 	.word	0x5085588d
 8002f68:	f5b23204 	.word	0xf5b23204
 8002f6c:	d1f97f00 	.word	0xd1f97f00
 8002f70:	03d2691a 	.word	0x03d2691a
 8002f74:	f384d4fc 	.word	0xf384d4fc
 8002f78:	bd308810 	.word	0xbd308810
 8002f7c:	58004000 	.word	0x58004000
	...
 8003004:	080006cb 	.word	0x080006cb
 8003008:	08000fc5 	.word	0x08000fc5
 800300c:	0800103d 	.word	0x0800103d
 8003010:	080006cd 	.word	0x080006cd
 8003014:	080006cd 	.word	0x080006cd
 8003018:	080006cd 	.word	0x080006cd
	...
 800302c:	080006cd 	.word	0x080006cd
 8003030:	080006cd 	.word	0x080006cd
 8003034:	00000000 	.word	0x00000000
 8003038:	080006cd 	.word	0x080006cd
 800303c:	080010e5 	.word	0x080010e5
 8003040:	080006cd 	.word	0x080006cd
 8003044:	080006cd 	.word	0x080006cd
 8003048:	080006cd 	.word	0x080006cd
 800304c:	080006cd 	.word	0x080006cd
 8003050:	080006cd 	.word	0x080006cd
 8003054:	080006cd 	.word	0x080006cd
 8003058:	080006cd 	.word	0x080006cd
 800305c:	080006cd 	.word	0x080006cd
 8003060:	080006cd 	.word	0x080006cd
 8003064:	080006cd 	.word	0x080006cd
 8003068:	080006cd 	.word	0x080006cd
 800306c:	080006cd 	.word	0x080006cd
 8003070:	080006cd 	.word	0x080006cd
 8003074:	080006cd 	.word	0x080006cd
 8003078:	080006cd 	.word	0x080006cd
 800307c:	080006cd 	.word	0x080006cd
 8003080:	080006cd 	.word	0x080006cd
 8003084:	080006cd 	.word	0x080006cd
 8003088:	080006cd 	.word	0x080006cd
 800308c:	080006cd 	.word	0x080006cd
 8003090:	080006cd 	.word	0x080006cd
 8003094:	080006cd 	.word	0x080006cd
 8003098:	080006cd 	.word	0x080006cd
 800309c:	080006cd 	.word	0x080006cd
 80030a0:	080006cd 	.word	0x080006cd
 80030a4:	080006cd 	.word	0x080006cd
 80030a8:	080006cd 	.word	0x080006cd
 80030ac:	080006cd 	.word	0x080006cd
 80030b0:	080006cd 	.word	0x080006cd
 80030b4:	080006cd 	.word	0x080006cd
 80030b8:	080006cd 	.word	0x080006cd
 80030bc:	080006cd 	.word	0x080006cd
 80030c0:	080006cd 	.word	0x080006cd
 80030c4:	080006cd 	.word	0x080006cd
 80030c8:	080006cd 	.word	0x080006cd
 80030cc:	080006cd 	.word	0x080006cd
 80030d0:	080006cd 	.word	0x080006cd
 80030d4:	080006cd 	.word	0x080006cd
 80030d8:	080006cd 	.word	0x080006cd
 80030dc:	080006cd 	.word	0x080006cd
 80030e0:	080006cd 	.word	0x080006cd
 80030e4:	080006cd 	.word	0x080006cd
 80030e8:	080006cd 	.word	0x080006cd
 80030ec:	080006cd 	.word	0x080006cd
 80030f0:	080010eb 	.word	0x080010eb
 80030f4:	080010e7 	.word	0x080010e7
 80030f8:	080006cd 	.word	0x080006cd
 80030fc:	080006cd 	.word	0x080006cd
 8003100:	080006cd 	.word	0x080006cd
 8003104:	080006cd 	.word	0x080006cd
 8003108:	080006cd 	.word	0x080006cd
 800310c:	080006cd 	.word	0x080006cd
 8003110:	080006cd 	.word	0x080006cd
 8003114:	080006cd 	.word	0x080006cd
 8003118:	080006cd 	.word	0x080006cd
 800311c:	080006cd 	.word	0x080006cd
 8003120:	080006cd 	.word	0x080006cd
 8003124:	080006cd 	.word	0x080006cd
 8003128:	080006cd 	.word	0x080006cd
 800312c:	080006cd 	.word	0x080006cd
 8003130:	080006cd 	.word	0x080006cd
 8003134:	080006cd 	.word	0x080006cd
 8003138:	080006cd 	.word	0x080006cd
	...
 800315c:	03000000 	.word	0x03000000
 8003160:	ffffffff 	.word	0xffffffff
 8003164:	01000000 	.word	0x01000000
	...
 8003174:	ffffffff 	.word	0xffffffff
 8003178:	ffffffff 	.word	0xffffffff
 800317c:	ffffffff 	.word	0xffffffff
 8003180:	f2d1176b 	.word	0xf2d1176b
 8003184:	47422ce1 	.word	0x47422ce1
 8003188:	e5e6bcf8 	.word	0xe5e6bcf8
 800318c:	f240a463 	.word	0xf240a463
 8003190:	817d0377 	.word	0x817d0377
 8003194:	a033eb2d 	.word	0xa033eb2d
 8003198:	4539a1f4 	.word	0x4539a1f4
 800319c:	96c298d8 	.word	0x96c298d8
 80031a0:	e242e34f 	.word	0xe242e34f
 80031a4:	9b7f1afe 	.word	0x9b7f1afe
 80031a8:	4aebe78e 	.word	0x4aebe78e
 80031ac:	169e0f7c 	.word	0x169e0f7c
 80031b0:	5733ce2b 	.word	0x5733ce2b
 80031b4:	ce5e316b 	.word	0xce5e316b
 80031b8:	6840b6cb 	.word	0x6840b6cb
 80031bc:	f551bf37 	.word	0xf551bf37
 80031c0:	ffffffff 	.word	0xffffffff
 80031c4:	00000000 	.word	0x00000000
 80031c8:	ffffffff 	.word	0xffffffff
 80031cc:	ffffffff 	.word	0xffffffff
 80031d0:	adfae6bc 	.word	0xadfae6bc
 80031d4:	849e17a7 	.word	0x849e17a7
 80031d8:	c2cab9f3 	.word	0xc2cab9f3
 80031dc:	512563fc 	.word	0x512563fc
 80031e0:	00000000 	.word	0x00000000
 80031e4:	0804bfff 	.word	0x0804bfff
	...
 80031f0:	0807ffff 	.word	0x0807ffff
	...
 80031fc:	08017fff 	.word	0x08017fff
 8003200:	00000000 	.word	0x00000000
 8003204:	08018000 	.word	0x08018000
	...
 8003210:	0804c000 	.word	0x0804c000
	...
 800321c:	08016000 	.word	0x08016000
 8003220:	00000000 	.word	0x00000000
 8003224:	08018000 	.word	0x08018000
	...
 8003230:	0804c000 	.word	0x0804c000
	...
 800323c:	08016000 	.word	0x08016000
 8003240:	00000000 	.word	0x00000000
 8003244:	ff000000 	.word	0xff000000
 8003248:	ffff0000 	.word	0xffff0000
 800324c:	ffffff00 	.word	0xffffff00
 8003250:	00000000 	.word	0x00000000
 8003254:	0000ff00 	.word	0x0000ff00
 8003258:	0000ffff 	.word	0x0000ffff
 800325c:	ff00ffff 	.word	0xff00ffff
 8003260:	00000000 	.word	0x00000000
 8003264:	000000ff 	.word	0x000000ff
 8003268:	0000ffff 	.word	0x0000ffff
 800326c:	00ffffff 	.word	0x00ffffff
 8003270:	31554653 	.word	0x31554653
 8003274:	00000000 	.word	0x00000000
 8003278:	428a2f98 	.word	0x428a2f98
 800327c:	71374491 	.word	0x71374491
 8003280:	b5c0fbcf 	.word	0xb5c0fbcf
 8003284:	e9b5dba5 	.word	0xe9b5dba5
 8003288:	3956c25b 	.word	0x3956c25b
 800328c:	59f111f1 	.word	0x59f111f1
 8003290:	923f82a4 	.word	0x923f82a4
 8003294:	ab1c5ed5 	.word	0xab1c5ed5
 8003298:	d807aa98 	.word	0xd807aa98
 800329c:	12835b01 	.word	0x12835b01
 80032a0:	243185be 	.word	0x243185be
 80032a4:	550c7dc3 	.word	0x550c7dc3
 80032a8:	72be5d74 	.word	0x72be5d74
 80032ac:	80deb1fe 	.word	0x80deb1fe
 80032b0:	9bdc06a7 	.word	0x9bdc06a7
 80032b4:	c19bf174 	.word	0xc19bf174
 80032b8:	e49b69c1 	.word	0xe49b69c1
 80032bc:	efbe4786 	.word	0xefbe4786
 80032c0:	0fc19dc6 	.word	0x0fc19dc6
 80032c4:	240ca1cc 	.word	0x240ca1cc
 80032c8:	2de92c6f 	.word	0x2de92c6f
 80032cc:	4a7484aa 	.word	0x4a7484aa
 80032d0:	5cb0a9dc 	.word	0x5cb0a9dc
 80032d4:	76f988da 	.word	0x76f988da
 80032d8:	983e5152 	.word	0x983e5152
 80032dc:	a831c66d 	.word	0xa831c66d
 80032e0:	b00327c8 	.word	0xb00327c8
 80032e4:	bf597fc7 	.word	0xbf597fc7
 80032e8:	c6e00bf3 	.word	0xc6e00bf3
 80032ec:	d5a79147 	.word	0xd5a79147
 80032f0:	06ca6351 	.word	0x06ca6351
 80032f4:	14292967 	.word	0x14292967
 80032f8:	27b70a85 	.word	0x27b70a85
 80032fc:	2e1b2138 	.word	0x2e1b2138
 8003300:	4d2c6dfc 	.word	0x4d2c6dfc
 8003304:	53380d13 	.word	0x53380d13
 8003308:	650a7354 	.word	0x650a7354
 800330c:	766a0abb 	.word	0x766a0abb
 8003310:	81c2c92e 	.word	0x81c2c92e
 8003314:	92722c85 	.word	0x92722c85
 8003318:	a2bfe8a1 	.word	0xa2bfe8a1
 800331c:	a81a664b 	.word	0xa81a664b
 8003320:	c24b8b70 	.word	0xc24b8b70
 8003324:	c76c51a3 	.word	0xc76c51a3
 8003328:	d192e819 	.word	0xd192e819
 800332c:	d6990624 	.word	0xd6990624
 8003330:	f40e3585 	.word	0xf40e3585
 8003334:	106aa070 	.word	0x106aa070
 8003338:	19a4c116 	.word	0x19a4c116
 800333c:	1e376c08 	.word	0x1e376c08
 8003340:	2748774c 	.word	0x2748774c
 8003344:	34b0bcb5 	.word	0x34b0bcb5
 8003348:	391c0cb3 	.word	0x391c0cb3
 800334c:	4ed8aa4a 	.word	0x4ed8aa4a
 8003350:	5b9cca4f 	.word	0x5b9cca4f
 8003354:	682e6ff3 	.word	0x682e6ff3
 8003358:	748f82ee 	.word	0x748f82ee
 800335c:	78a5636f 	.word	0x78a5636f
 8003360:	84c87814 	.word	0x84c87814
 8003364:	8cc70208 	.word	0x8cc70208
 8003368:	90befffa 	.word	0x90befffa
 800336c:	a4506ceb 	.word	0xa4506ceb
 8003370:	bef9a3f7 	.word	0xbef9a3f7
 8003374:	c67178f2 	.word	0xc67178f2
 8003378:	08000625 	.word	0x08000625
 800337c:	00000000 	.word	0x00000000
 8003380:	08000601 	.word	0x08000601
 8003384:	00000000 	.word	0x00000000
 8003388:	00000001 	.word	0x00000001
 800338c:	55555555 	.word	0x55555555
	...

Disassembly of section .SE_IF_Code:

08003600 <SE_APP_GetActiveFwInfo>:
  * @param pFwInfo Active Firmware Info structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
__root SE_ErrorStatus SE_APP_GetActiveFwInfo(SE_StatusTypeDef *peSE_Status, uint32_t SlotNumber,
                                             SE_APP_ActiveFwInfo_t *pFwInfo)
{
 8003600:	b530      	push	{r4, r5, lr}
 8003602:	b087      	sub	sp, #28
 8003604:	4615      	mov	r5, r2
 8003606:	4604      	mov	r4, r0

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /*Enter Secure Mode*/
    SE_EnterSecureMode(&primask_bit);
 8003608:	a805      	add	r0, sp, #20
{
 800360a:	9103      	str	r1, [sp, #12]
    SE_EnterSecureMode(&primask_bit);
 800360c:	f000 fa66 	bl	8003adc <SE_EnterSecureMode>

    /*Secure Engine Call*/
    e_ret_status = (*SE_CallGatePtr)(SE_APP_GET_ACTIVE_FW_INFO, peSE_Status, primask_bit, SlotNumber, pFwInfo);
 8003610:	4621      	mov	r1, r4
 8003612:	9b03      	ldr	r3, [sp, #12]
 8003614:	9a05      	ldr	r2, [sp, #20]
 8003616:	4c05      	ldr	r4, [pc, #20]	; (800362c <SE_APP_GetActiveFwInfo+0x2c>)
 8003618:	9500      	str	r5, [sp, #0]
 800361a:	2020      	movs	r0, #32
 800361c:	47a0      	blx	r4
 800361e:	4604      	mov	r4, r0

    /*Exit Secure Mode*/
    SE_ExitSecureMode(primask_bit);
 8003620:	9805      	ldr	r0, [sp, #20]
 8003622:	f000 fa5c 	bl	8003ade <SE_ExitSecureMode>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 8003626:	4620      	mov	r0, r4
 8003628:	b007      	add	sp, #28
 800362a:	bd30      	pop	{r4, r5, pc}
 800362c:	08000205 	.word	0x08000205

08003630 <SE_Init>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param uSystemCoreClock System clock value.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Init(SE_StatusTypeDef *peSE_Status, uint32_t uSystemCoreClock)
{
 8003630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003632:	4604      	mov	r4, r0
 8003634:	9101      	str	r1, [sp, #4]
}
#elif defined(__GNUC__)
static inline uint32_t __get_LR(void)
{
  register uint32_t result;
  __asm volatile("MOV %0, LR\n" : "=r"(result));
 8003636:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8003638:	4a0c      	ldr	r2, [pc, #48]	; (800366c <SE_Init+0x3c>)
 800363a:	4291      	cmp	r1, r2
 800363c:	d314      	bcc.n	8003668 <SE_Init+0x38>
 800363e:	4671      	mov	r1, lr
 8003640:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <SE_Init+0x40>)
 8003642:	4291      	cmp	r1, r2
 8003644:	d810      	bhi.n	8003668 <SE_Init+0x38>

  /* Check the pointers allocation */
  if (peSE_Status == NULL)
 8003646:	b178      	cbz	r0, 8003668 <SE_Init+0x38>

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /* Enter Secure Mode */
  SE_EnterSecureMode(&primask_bit);
 8003648:	a803      	add	r0, sp, #12
 800364a:	f000 fa47 	bl	8003adc <SE_EnterSecureMode>

  /* Secure Engine Call */
  e_ret_status = (*SE_CallGatePtr)(SE_INIT_ID, peSE_Status, primask_bit, uSystemCoreClock);
 800364e:	4621      	mov	r1, r4
 8003650:	9b01      	ldr	r3, [sp, #4]
 8003652:	4c08      	ldr	r4, [pc, #32]	; (8003674 <SE_Init+0x44>)
 8003654:	9a03      	ldr	r2, [sp, #12]
 8003656:	2000      	movs	r0, #0
 8003658:	47a0      	blx	r4
 800365a:	4604      	mov	r4, r0

  /* Exit Secure Mode */
  SE_ExitSecureMode(primask_bit);
 800365c:	9803      	ldr	r0, [sp, #12]
 800365e:	f000 fa3e 	bl	8003ade <SE_ExitSecureMode>


  return e_ret_status;
}
 8003662:	4620      	mov	r0, r4
 8003664:	b004      	add	sp, #16
 8003666:	bd10      	pop	{r4, pc}
  __IS_SFU_RESERVED();
 8003668:	4c03      	ldr	r4, [pc, #12]	; (8003678 <SE_Init+0x48>)
 800366a:	e7fa      	b.n	8003662 <SE_Init+0x32>
 800366c:	08003c00 	.word	0x08003c00
 8003670:	0800ffff 	.word	0x0800ffff
 8003674:	08000205 	.word	0x08000205
 8003678:	00018799 	.word	0x00018799

0800367c <SE_Startup>:
  *        This function must be called only one time so an internal check is executed.
  * @param None.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Startup(void)
{
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  static uint8_t b_startup_already_done = 0U;
  static SE_ErrorStatus(*SE_StartupPtr)(void);            /*!< Secure Engine STARTUP  pointer function*/

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <SE_Startup+0x30>)
 8003682:	429a      	cmp	r2, r3
 8003684:	d30e      	bcc.n	80036a4 <SE_Startup+0x28>
 8003686:	4672      	mov	r2, lr
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <SE_Startup+0x34>)
 800368a:	429a      	cmp	r2, r3
 800368c:	d80a      	bhi.n	80036a4 <SE_Startup+0x28>

  /* Need to be sure to execute this initialization only one time! */
  if (b_startup_already_done == 0U)
 800368e:	4d09      	ldr	r5, [pc, #36]	; (80036b4 <SE_Startup+0x38>)
 8003690:	4c09      	ldr	r4, [pc, #36]	; (80036b8 <SE_Startup+0x3c>)
 8003692:	782b      	ldrb	r3, [r5, #0]
 8003694:	b943      	cbnz	r3, 80036a8 <SE_Startup+0x2c>
  {
    /* Secure Core Initialization */
    SE_StartupPtr = (SE_ErrorStatus(*)(void))((uint32_t) SE_STARTUP_REGION_ROM_START + 1U);
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <SE_Startup+0x40>)
    e_ret_status = (*SE_StartupPtr)();
 8003698:	4798      	blx	r3
    if (e_ret_status == SE_SUCCESS)
 800369a:	42a0      	cmp	r0, r4
 800369c:	d101      	bne.n	80036a2 <SE_Startup+0x26>
    {
      b_startup_already_done = 1U;
 800369e:	2301      	movs	r3, #1
 80036a0:	702b      	strb	r3, [r5, #0]
    /* This function has been already successfully called */
    e_ret_status = SE_SUCCESS;
  }

  return e_ret_status;
}
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
  __IS_SFU_RESERVED();
 80036a4:	4806      	ldr	r0, [pc, #24]	; (80036c0 <SE_Startup+0x44>)
 80036a6:	e7fc      	b.n	80036a2 <SE_Startup+0x26>
    e_ret_status = SE_SUCCESS;
 80036a8:	4620      	mov	r0, r4
 80036aa:	e7fa      	b.n	80036a2 <SE_Startup+0x26>
 80036ac:	08003c00 	.word	0x08003c00
 80036b0:	0800ffff 	.word	0x0800ffff
 80036b4:	20001754 	.word	0x20001754
 80036b8:	0012310f 	.word	0x0012310f
 80036bc:	08000501 	.word	0x08000501
 80036c0:	00018799 	.word	0x00018799

080036c4 <SE_LockRestrictServices>:
  * @brief call by SFU to lock part of Secure Engine services
  * @param  pSE_Status Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_LockRestrictServices(SE_StatusTypeDef *pSE_Status)
{
 80036c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036c6:	9001      	str	r0, [sp, #4]
 80036c8:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <SE_LockRestrictServices+0x38>)
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d313      	bcc.n	80036f8 <SE_LockRestrictServices+0x34>
 80036d0:	4672      	mov	r2, lr
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <SE_LockRestrictServices+0x3c>)
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d80f      	bhi.n	80036f8 <SE_LockRestrictServices+0x34>
#endif /* SFU_ISOLATE_SE_WITH_MPU */

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    SE_EnterSecureMode(&primask_bit);
 80036d8:	a803      	add	r0, sp, #12
 80036da:	f000 f9ff 	bl	8003adc <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_LOCK_RESTRICT_SERVICES, pSE_Status, primask_bit);
 80036de:	9a03      	ldr	r2, [sp, #12]
 80036e0:	9901      	ldr	r1, [sp, #4]
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <SE_LockRestrictServices+0x40>)
 80036e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036e8:	4798      	blx	r3
 80036ea:	4604      	mov	r4, r0
    SE_ExitSecureMode(primask_bit);
 80036ec:	9803      	ldr	r0, [sp, #12]
 80036ee:	f000 f9f6 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 80036f2:	4620      	mov	r0, r4
 80036f4:	b004      	add	sp, #16
 80036f6:	bd10      	pop	{r4, pc}
  __IS_SFU_RESERVED();
 80036f8:	4c03      	ldr	r4, [pc, #12]	; (8003708 <SE_LockRestrictServices+0x44>)
 80036fa:	e7fa      	b.n	80036f2 <SE_LockRestrictServices+0x2e>
 80036fc:	08003c00 	.word	0x08003c00
 8003700:	0800ffff 	.word	0x0800ffff
 8003704:	08000205 	.word	0x08000205
 8003708:	00018799 	.word	0x00018799

0800370c <SE_CM0_Update>:
  * @brief call by SFU to trigg FUS or wireless stack update process managed by CM0
  * @param  pSE_Status Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CM0_Update(SE_StatusTypeDef *pSE_Status)
{
 800370c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800370e:	9001      	str	r0, [sp, #4]
 8003710:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8003712:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <SE_CM0_Update+0x38>)
 8003714:	429a      	cmp	r2, r3
 8003716:	d313      	bcc.n	8003740 <SE_CM0_Update+0x34>
 8003718:	4672      	mov	r2, lr
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <SE_CM0_Update+0x3c>)
 800371c:	429a      	cmp	r2, r3
 800371e:	d80f      	bhi.n	8003740 <SE_CM0_Update+0x34>
#endif /* SFU_ISOLATE_SE_WITH_MPU */

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    SE_EnterSecureMode(&primask_bit);
 8003720:	a803      	add	r0, sp, #12
 8003722:	f000 f9db 	bl	8003adc <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CM0_UPDATE, pSE_Status, primask_bit);
 8003726:	9a03      	ldr	r2, [sp, #12]
 8003728:	9901      	ldr	r1, [sp, #4]
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <SE_CM0_Update+0x40>)
 800372c:	f44f 7090 	mov.w	r0, #288	; 0x120
 8003730:	4798      	blx	r3
 8003732:	4604      	mov	r4, r0
    SE_ExitSecureMode(primask_bit);
 8003734:	9803      	ldr	r0, [sp, #12]
 8003736:	f000 f9d2 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 800373a:	4620      	mov	r0, r4
 800373c:	b004      	add	sp, #16
 800373e:	bd10      	pop	{r4, pc}
  __IS_SFU_RESERVED();
 8003740:	4c03      	ldr	r4, [pc, #12]	; (8003750 <SE_CM0_Update+0x44>)
 8003742:	e7fa      	b.n	800373a <SE_CM0_Update+0x2e>
 8003744:	08003c00 	.word	0x08003c00
 8003748:	0800ffff 	.word	0x0800ffff
 800374c:	08000205 	.word	0x08000205
 8003750:	00018799 	.word	0x00018799

08003754 <SE_ExtFlash_Decrypt_Init>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param pxSE_Metadata Metadata that will be used to fill the Crypto Init structure.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_ExtFlash_Decrypt_Init(SE_StatusTypeDef *pSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata)
{
 8003754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003756:	4604      	mov	r4, r0
 8003758:	9101      	str	r1, [sp, #4]
 800375a:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <SE_ExtFlash_Decrypt_Init+0x3c>)
 800375e:	4291      	cmp	r1, r2
 8003760:	d314      	bcc.n	800378c <SE_ExtFlash_Decrypt_Init+0x38>
 8003762:	4671      	mov	r1, lr
 8003764:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <SE_ExtFlash_Decrypt_Init+0x40>)
 8003766:	4291      	cmp	r1, r2
 8003768:	d810      	bhi.n	800378c <SE_ExtFlash_Decrypt_Init+0x38>
#endif /* SFU_ISOLATE_SE_WITH_MPU */

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    SE_EnterSecureMode(&primask_bit);
 800376a:	a803      	add	r0, sp, #12
 800376c:	f000 f9b6 	bl	8003adc <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_EXTFLASH_DECRYPT_INIT, pSE_Status, primask_bit, pxSE_Metadata);
 8003770:	4621      	mov	r1, r4
 8003772:	9b01      	ldr	r3, [sp, #4]
 8003774:	4c08      	ldr	r4, [pc, #32]	; (8003798 <SE_ExtFlash_Decrypt_Init+0x44>)
 8003776:	9a03      	ldr	r2, [sp, #12]
 8003778:	f44f 7088 	mov.w	r0, #272	; 0x110
 800377c:	47a0      	blx	r4
 800377e:	4604      	mov	r4, r0
    SE_ExitSecureMode(primask_bit);
 8003780:	9803      	ldr	r0, [sp, #12]
 8003782:	f000 f9ac 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 8003786:	4620      	mov	r0, r4
 8003788:	b004      	add	sp, #16
 800378a:	bd10      	pop	{r4, pc}
  __IS_SFU_RESERVED();
 800378c:	4c03      	ldr	r4, [pc, #12]	; (800379c <SE_ExtFlash_Decrypt_Init+0x48>)
 800378e:	e7fa      	b.n	8003786 <SE_ExtFlash_Decrypt_Init+0x32>
 8003790:	08003c00 	.word	0x08003c00
 8003794:	0800ffff 	.word	0x0800ffff
 8003798:	08000205 	.word	0x08000205
 800379c:	00018799 	.word	0x00018799

080037a0 <SE_SFU_IMG_Read>:
  * @param  Length: number of bytes to read from flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Read(SE_StatusTypeDef *pSE_Status, uint8_t *pDestination, const uint8_t *pSource,
                               uint32_t Length)
{
 80037a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a2:	4604      	mov	r4, r0
 80037a4:	b085      	sub	sp, #20
 80037a6:	460d      	mov	r5, r1
 80037a8:	4616      	mov	r6, r2
 80037aa:	461f      	mov	r7, r3
 80037ac:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <SE_SFU_IMG_Read+0x44>)
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d315      	bcc.n	80037e0 <SE_SFU_IMG_Read+0x40>
 80037b4:	4672      	mov	r2, lr
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <SE_SFU_IMG_Read+0x48>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d811      	bhi.n	80037e0 <SE_SFU_IMG_Read+0x40>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /* Enter Secure Mode */
    SE_EnterSecureMode(&primask_bit);
 80037bc:	a803      	add	r0, sp, #12
 80037be:	f000 f98d 	bl	8003adc <SE_EnterSecureMode>

    /* Secure Engine Call */
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_READ, pSE_Status, primask_bit, pDestination, pSource, Length);;
 80037c2:	4621      	mov	r1, r4
 80037c4:	e9cd 6700 	strd	r6, r7, [sp]
 80037c8:	4c08      	ldr	r4, [pc, #32]	; (80037ec <SE_SFU_IMG_Read+0x4c>)
 80037ca:	9a03      	ldr	r2, [sp, #12]
 80037cc:	462b      	mov	r3, r5
 80037ce:	2092      	movs	r0, #146	; 0x92
 80037d0:	47a0      	blx	r4
 80037d2:	4604      	mov	r4, r0

    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
 80037d4:	9803      	ldr	r0, [sp, #12]
 80037d6:	f000 f982 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 80037da:	4620      	mov	r0, r4
 80037dc:	b005      	add	sp, #20
 80037de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IS_SFU_RESERVED();
 80037e0:	4c03      	ldr	r4, [pc, #12]	; (80037f0 <SE_SFU_IMG_Read+0x50>)
 80037e2:	e7fa      	b.n	80037da <SE_SFU_IMG_Read+0x3a>
 80037e4:	08003c00 	.word	0x08003c00
 80037e8:	0800ffff 	.word	0x0800ffff
 80037ec:	08000205 	.word	0x08000205
 80037f0:	00018799 	.word	0x00018799

080037f4 <SE_SFU_IMG_Write>:
  * @param  Length: number of bytes to write to flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Write(SE_StatusTypeDef *pSE_Status, uint8_t *pDestination, const uint8_t *pSource,
                                uint32_t Length)
{
 80037f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f6:	4604      	mov	r4, r0
 80037f8:	b085      	sub	sp, #20
 80037fa:	460d      	mov	r5, r1
 80037fc:	4616      	mov	r6, r2
 80037fe:	461f      	mov	r7, r3
 8003800:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <SE_SFU_IMG_Write+0x44>)
 8003804:	429a      	cmp	r2, r3
 8003806:	d315      	bcc.n	8003834 <SE_SFU_IMG_Write+0x40>
 8003808:	4672      	mov	r2, lr
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <SE_SFU_IMG_Write+0x48>)
 800380c:	429a      	cmp	r2, r3
 800380e:	d811      	bhi.n	8003834 <SE_SFU_IMG_Write+0x40>
#endif /* SFU_ISOLATE_SE_WITH_MPU */

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    SE_EnterSecureMode(&primask_bit);
 8003810:	a803      	add	r0, sp, #12
 8003812:	f000 f963 	bl	8003adc <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_WRITE, pSE_Status, primask_bit, pDestination, pSource, Length);
 8003816:	4621      	mov	r1, r4
 8003818:	e9cd 6700 	strd	r6, r7, [sp]
 800381c:	4c08      	ldr	r4, [pc, #32]	; (8003840 <SE_SFU_IMG_Write+0x4c>)
 800381e:	9a03      	ldr	r2, [sp, #12]
 8003820:	462b      	mov	r3, r5
 8003822:	2093      	movs	r0, #147	; 0x93
 8003824:	47a0      	blx	r4
 8003826:	4604      	mov	r4, r0
    SE_ExitSecureMode(primask_bit);
 8003828:	9803      	ldr	r0, [sp, #12]
 800382a:	f000 f958 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 800382e:	4620      	mov	r0, r4
 8003830:	b005      	add	sp, #20
 8003832:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IS_SFU_RESERVED();
 8003834:	4c03      	ldr	r4, [pc, #12]	; (8003844 <SE_SFU_IMG_Write+0x50>)
 8003836:	e7fa      	b.n	800382e <SE_SFU_IMG_Write+0x3a>
 8003838:	08003c00 	.word	0x08003c00
 800383c:	0800ffff 	.word	0x0800ffff
 8003840:	08000205 	.word	0x08000205
 8003844:	00018799 	.word	0x00018799

08003848 <SE_SFU_IMG_Erase>:
  * @param  pDestination: pointer to flash area to erase.
  * @param  Length: number of bytes to erase in flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Erase(SE_StatusTypeDef *pSE_Status, uint8_t *pDestination, uint32_t Length)
{
 8003848:	b530      	push	{r4, r5, lr}
 800384a:	b087      	sub	sp, #28
 800384c:	4604      	mov	r4, r0
 800384e:	9103      	str	r1, [sp, #12]
 8003850:	4615      	mov	r5, r2
 8003852:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8003854:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <SE_SFU_IMG_Erase+0x40>)
 8003856:	4291      	cmp	r1, r2
 8003858:	d314      	bcc.n	8003884 <SE_SFU_IMG_Erase+0x3c>
 800385a:	4671      	mov	r1, lr
 800385c:	4a0b      	ldr	r2, [pc, #44]	; (800388c <SE_SFU_IMG_Erase+0x44>)
 800385e:	4291      	cmp	r1, r2
 8003860:	d810      	bhi.n	8003884 <SE_SFU_IMG_Erase+0x3c>
#endif /* SFU_ISOLATE_SE_WITH_MPU */

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    SE_EnterSecureMode(&primask_bit);
 8003862:	a805      	add	r0, sp, #20
 8003864:	f000 f93a 	bl	8003adc <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_ERASE, pSE_Status, primask_bit, pDestination, Length);
 8003868:	4621      	mov	r1, r4
 800386a:	9b03      	ldr	r3, [sp, #12]
 800386c:	4c08      	ldr	r4, [pc, #32]	; (8003890 <SE_SFU_IMG_Erase+0x48>)
 800386e:	9a05      	ldr	r2, [sp, #20]
 8003870:	9500      	str	r5, [sp, #0]
 8003872:	2094      	movs	r0, #148	; 0x94
 8003874:	47a0      	blx	r4
 8003876:	4604      	mov	r4, r0
    SE_ExitSecureMode(primask_bit);
 8003878:	9805      	ldr	r0, [sp, #20]
 800387a:	f000 f930 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 800387e:	4620      	mov	r0, r4
 8003880:	b007      	add	sp, #28
 8003882:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 8003884:	4c03      	ldr	r4, [pc, #12]	; (8003894 <SE_SFU_IMG_Erase+0x4c>)
 8003886:	e7fa      	b.n	800387e <SE_SFU_IMG_Erase+0x36>
 8003888:	08003c00 	.word	0x08003c00
 800388c:	0800ffff 	.word	0x0800ffff
 8003890:	08000205 	.word	0x08000205
 8003894:	00018799 	.word	0x00018799

08003898 <SE_Decrypt_Init>:
  * @param SE_FwType Type of Fw Image.
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Init(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata, uint32_t SE_FwType)
{
 8003898:	b530      	push	{r4, r5, lr}
 800389a:	b087      	sub	sp, #28
 800389c:	4605      	mov	r5, r0
 800389e:	9103      	str	r1, [sp, #12]
 80038a0:	4614      	mov	r4, r2
 80038a2:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80038a4:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <SE_Decrypt_Init+0x44>)
 80038a6:	4291      	cmp	r1, r2
 80038a8:	d316      	bcc.n	80038d8 <SE_Decrypt_Init+0x40>
 80038aa:	4671      	mov	r1, lr
 80038ac:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <SE_Decrypt_Init+0x48>)
 80038ae:	4291      	cmp	r1, r2
 80038b0:	d812      	bhi.n	80038d8 <SE_Decrypt_Init+0x40>

  /* Check the parameter */
  if ((SE_FwType != SE_FW_IMAGE_COMPLETE) && (SE_FwType != SE_FW_IMAGE_PARTIAL))
 80038b2:	2c01      	cmp	r4, #1
 80038b4:	d810      	bhi.n	80038d8 <SE_Decrypt_Init+0x40>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /* Enter Secure Mode */
    SE_EnterSecureMode(&primask_bit);
 80038b6:	a805      	add	r0, sp, #20
 80038b8:	f000 f910 	bl	8003adc <SE_EnterSecureMode>

    /* Secure Engine Call */
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_DECRYPT_INIT_ID, peSE_Status, primask_bit, pxSE_Metadata, SE_FwType);
 80038bc:	9400      	str	r4, [sp, #0]
 80038be:	9b03      	ldr	r3, [sp, #12]
 80038c0:	4c08      	ldr	r4, [pc, #32]	; (80038e4 <SE_Decrypt_Init+0x4c>)
 80038c2:	9a05      	ldr	r2, [sp, #20]
 80038c4:	4629      	mov	r1, r5
 80038c6:	2004      	movs	r0, #4
 80038c8:	47a0      	blx	r4
 80038ca:	4604      	mov	r4, r0

    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
 80038cc:	9805      	ldr	r0, [sp, #20]
 80038ce:	f000 f906 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 80038d2:	4620      	mov	r0, r4
 80038d4:	b007      	add	sp, #28
 80038d6:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 80038d8:	4c03      	ldr	r4, [pc, #12]	; (80038e8 <SE_Decrypt_Init+0x50>)
 80038da:	e7fa      	b.n	80038d2 <SE_Decrypt_Init+0x3a>
 80038dc:	08003c00 	.word	0x08003c00
 80038e0:	0800ffff 	.word	0x0800ffff
 80038e4:	08000205 	.word	0x08000205
 80038e8:	00018799 	.word	0x00018799

080038ec <SE_Decrypt_Append>:
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Append(SE_StatusTypeDef *peSE_Status, const uint8_t *pInputBuffer, int32_t InputSize,
                                 uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 80038ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ee:	4604      	mov	r4, r0
 80038f0:	b087      	sub	sp, #28
 80038f2:	460d      	mov	r5, r1
 80038f4:	4616      	mov	r6, r2
 80038f6:	461f      	mov	r7, r3
 80038f8:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <SE_Decrypt_Append+0x48>)
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d317      	bcc.n	8003930 <SE_Decrypt_Append+0x44>
 8003900:	4672      	mov	r2, lr
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <SE_Decrypt_Append+0x4c>)
 8003904:	429a      	cmp	r2, r3
 8003906:	d813      	bhi.n	8003930 <SE_Decrypt_Append+0x44>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /* Enter Secure Mode */
    SE_EnterSecureMode(&primask_bit);
 8003908:	a805      	add	r0, sp, #20
 800390a:	f000 f8e7 	bl	8003adc <SE_EnterSecureMode>

    /* Secure Engine Call */
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_DECRYPT_APPEND_ID, peSE_Status, primask_bit, pInputBuffer, InputSize,
 800390e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003910:	9a05      	ldr	r2, [sp, #20]
 8003912:	9600      	str	r6, [sp, #0]
 8003914:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8003918:	4621      	mov	r1, r4
 800391a:	462b      	mov	r3, r5
 800391c:	4c07      	ldr	r4, [pc, #28]	; (800393c <SE_Decrypt_Append+0x50>)
 800391e:	2005      	movs	r0, #5
 8003920:	47a0      	blx	r4
 8003922:	4604      	mov	r4, r0
                                     pOutputBuffer, pOutputSize);

    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
 8003924:	9805      	ldr	r0, [sp, #20]
 8003926:	f000 f8da 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 800392a:	4620      	mov	r0, r4
 800392c:	b007      	add	sp, #28
 800392e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IS_SFU_RESERVED();
 8003930:	4c03      	ldr	r4, [pc, #12]	; (8003940 <SE_Decrypt_Append+0x54>)
 8003932:	e7fa      	b.n	800392a <SE_Decrypt_Append+0x3e>
 8003934:	08003c00 	.word	0x08003c00
 8003938:	0800ffff 	.word	0x0800ffff
 800393c:	08000205 	.word	0x08000205
 8003940:	00018799 	.word	0x00018799

08003944 <SE_Decrypt_Finish>:
  * @param pOutputBuffer pointer to Output Buffer.
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Finish(SE_StatusTypeDef *peSE_Status, uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8003944:	b530      	push	{r4, r5, lr}
 8003946:	b087      	sub	sp, #28
 8003948:	4604      	mov	r4, r0
 800394a:	9103      	str	r1, [sp, #12]
 800394c:	4615      	mov	r5, r2
 800394e:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8003950:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <SE_Decrypt_Finish+0x40>)
 8003952:	4291      	cmp	r1, r2
 8003954:	d314      	bcc.n	8003980 <SE_Decrypt_Finish+0x3c>
 8003956:	4671      	mov	r1, lr
 8003958:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <SE_Decrypt_Finish+0x44>)
 800395a:	4291      	cmp	r1, r2
 800395c:	d810      	bhi.n	8003980 <SE_Decrypt_Finish+0x3c>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /* Enter Secure Mode */
    SE_EnterSecureMode(&primask_bit);
 800395e:	a805      	add	r0, sp, #20
 8003960:	f000 f8bc 	bl	8003adc <SE_EnterSecureMode>

    /* Secure Engine Call */
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_DECRYPT_FINISH_ID, peSE_Status, primask_bit, pOutputBuffer,
 8003964:	4621      	mov	r1, r4
 8003966:	9b03      	ldr	r3, [sp, #12]
 8003968:	4c08      	ldr	r4, [pc, #32]	; (800398c <SE_Decrypt_Finish+0x48>)
 800396a:	9a05      	ldr	r2, [sp, #20]
 800396c:	9500      	str	r5, [sp, #0]
 800396e:	2006      	movs	r0, #6
 8003970:	47a0      	blx	r4
 8003972:	4604      	mov	r4, r0
                                     pOutputSize);

    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
 8003974:	9805      	ldr	r0, [sp, #20]
 8003976:	f000 f8b2 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 800397a:	4620      	mov	r0, r4
 800397c:	b007      	add	sp, #28
 800397e:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 8003980:	4c03      	ldr	r4, [pc, #12]	; (8003990 <SE_Decrypt_Finish+0x4c>)
 8003982:	e7fa      	b.n	800397a <SE_Decrypt_Finish+0x36>
 8003984:	08003c00 	.word	0x08003c00
 8003988:	0800ffff 	.word	0x0800ffff
 800398c:	08000205 	.word	0x08000205
 8003990:	00018799 	.word	0x00018799

08003994 <SE_AuthenticateFW_Init>:
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Init(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata,
                                      uint32_t SE_FwType)
{
 8003994:	b530      	push	{r4, r5, lr}
 8003996:	b087      	sub	sp, #28
 8003998:	4605      	mov	r5, r0
 800399a:	9103      	str	r1, [sp, #12]
 800399c:	4614      	mov	r4, r2
 800399e:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <SE_AuthenticateFW_Init+0x44>)
 80039a2:	4291      	cmp	r1, r2
 80039a4:	d316      	bcc.n	80039d4 <SE_AuthenticateFW_Init+0x40>
 80039a6:	4671      	mov	r1, lr
 80039a8:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <SE_AuthenticateFW_Init+0x48>)
 80039aa:	4291      	cmp	r1, r2
 80039ac:	d812      	bhi.n	80039d4 <SE_AuthenticateFW_Init+0x40>

  /* Check the parameter */
  if ((SE_FwType != SE_FW_IMAGE_COMPLETE) && (SE_FwType != SE_FW_IMAGE_PARTIAL))
 80039ae:	2c01      	cmp	r4, #1
 80039b0:	d810      	bhi.n	80039d4 <SE_AuthenticateFW_Init+0x40>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /* Enter Secure Mode */
    SE_EnterSecureMode(&primask_bit);
 80039b2:	a805      	add	r0, sp, #20
 80039b4:	f000 f892 	bl	8003adc <SE_EnterSecureMode>

    /* Secure Engine Call */
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_AUTHENTICATE_FW_INIT_ID, peSE_Status, primask_bit, pxSE_Metadata,
 80039b8:	9400      	str	r4, [sp, #0]
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	4c08      	ldr	r4, [pc, #32]	; (80039e0 <SE_AuthenticateFW_Init+0x4c>)
 80039be:	9a05      	ldr	r2, [sp, #20]
 80039c0:	4629      	mov	r1, r5
 80039c2:	2007      	movs	r0, #7
 80039c4:	47a0      	blx	r4
 80039c6:	4604      	mov	r4, r0
                                     SE_FwType);

    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
 80039c8:	9805      	ldr	r0, [sp, #20]
 80039ca:	f000 f888 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
}
 80039ce:	4620      	mov	r0, r4
 80039d0:	b007      	add	sp, #28
 80039d2:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 80039d4:	4c03      	ldr	r4, [pc, #12]	; (80039e4 <SE_AuthenticateFW_Init+0x50>)
 80039d6:	e7fa      	b.n	80039ce <SE_AuthenticateFW_Init+0x3a>
 80039d8:	08003c00 	.word	0x08003c00
 80039dc:	0800ffff 	.word	0x0800ffff
 80039e0:	08000205 	.word	0x08000205
 80039e4:	00018799 	.word	0x00018799

080039e8 <SE_AuthenticateFW_Append>:
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Append(SE_StatusTypeDef *peSE_Status, const uint8_t *pInputBuffer, int32_t InputSize,
                                        uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 80039e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ea:	4604      	mov	r4, r0
 80039ec:	b087      	sub	sp, #28
 80039ee:	460d      	mov	r5, r1
 80039f0:	4616      	mov	r6, r2
 80039f2:	461f      	mov	r7, r3
 80039f4:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <SE_AuthenticateFW_Append+0x48>)
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d317      	bcc.n	8003a2c <SE_AuthenticateFW_Append+0x44>
 80039fc:	4672      	mov	r2, lr
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <SE_AuthenticateFW_Append+0x4c>)
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d813      	bhi.n	8003a2c <SE_AuthenticateFW_Append+0x44>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /* Enter Secure Mode */
    SE_EnterSecureMode(&primask_bit);
 8003a04:	a805      	add	r0, sp, #20
 8003a06:	f000 f869 	bl	8003adc <SE_EnterSecureMode>

    /* Secure Engine Call */
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_AUTHENTICATE_FW_APPEND_ID, peSE_Status, primask_bit, pInputBuffer,
 8003a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a0c:	9a05      	ldr	r2, [sp, #20]
 8003a0e:	9600      	str	r6, [sp, #0]
 8003a10:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8003a14:	4621      	mov	r1, r4
 8003a16:	462b      	mov	r3, r5
 8003a18:	4c07      	ldr	r4, [pc, #28]	; (8003a38 <SE_AuthenticateFW_Append+0x50>)
 8003a1a:	2008      	movs	r0, #8
 8003a1c:	47a0      	blx	r4
 8003a1e:	4604      	mov	r4, r0
                                     InputSize, pOutputBuffer, pOutputSize);

    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
 8003a20:	9805      	ldr	r0, [sp, #20]
 8003a22:	f000 f85c 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
}
 8003a26:	4620      	mov	r0, r4
 8003a28:	b007      	add	sp, #28
 8003a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IS_SFU_RESERVED();
 8003a2c:	4c03      	ldr	r4, [pc, #12]	; (8003a3c <SE_AuthenticateFW_Append+0x54>)
 8003a2e:	e7fa      	b.n	8003a26 <SE_AuthenticateFW_Append+0x3e>
 8003a30:	08003c00 	.word	0x08003c00
 8003a34:	0800ffff 	.word	0x0800ffff
 8003a38:	08000205 	.word	0x08000205
 8003a3c:	00018799 	.word	0x00018799

08003a40 <SE_AuthenticateFW_Finish>:
  * @param pOutputBuffer pointer to Output Buffer.
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Finish(SE_StatusTypeDef *peSE_Status, uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8003a40:	b530      	push	{r4, r5, lr}
 8003a42:	b087      	sub	sp, #28
 8003a44:	4604      	mov	r4, r0
 8003a46:	9103      	str	r1, [sp, #12]
 8003a48:	4615      	mov	r5, r2
 8003a4a:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8003a4c:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <SE_AuthenticateFW_Finish+0x40>)
 8003a4e:	4291      	cmp	r1, r2
 8003a50:	d314      	bcc.n	8003a7c <SE_AuthenticateFW_Finish+0x3c>
 8003a52:	4671      	mov	r1, lr
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <SE_AuthenticateFW_Finish+0x44>)
 8003a56:	4291      	cmp	r1, r2
 8003a58:	d810      	bhi.n	8003a7c <SE_AuthenticateFW_Finish+0x3c>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /* Enter Secure Mode */
    SE_EnterSecureMode(&primask_bit);
 8003a5a:	a805      	add	r0, sp, #20
 8003a5c:	f000 f83e 	bl	8003adc <SE_EnterSecureMode>

    /* Secure Engine Call */
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_AUTHENTICATE_FW_FINISH_ID, peSE_Status, primask_bit, pOutputBuffer,
 8003a60:	4621      	mov	r1, r4
 8003a62:	9b03      	ldr	r3, [sp, #12]
 8003a64:	4c08      	ldr	r4, [pc, #32]	; (8003a88 <SE_AuthenticateFW_Finish+0x48>)
 8003a66:	9a05      	ldr	r2, [sp, #20]
 8003a68:	9500      	str	r5, [sp, #0]
 8003a6a:	2009      	movs	r0, #9
 8003a6c:	47a0      	blx	r4
 8003a6e:	4604      	mov	r4, r0
                                     pOutputSize);

    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
 8003a70:	9805      	ldr	r0, [sp, #20]
 8003a72:	f000 f834 	bl	8003ade <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
}
 8003a76:	4620      	mov	r0, r4
 8003a78:	b007      	add	sp, #28
 8003a7a:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 8003a7c:	4c03      	ldr	r4, [pc, #12]	; (8003a8c <SE_AuthenticateFW_Finish+0x4c>)
 8003a7e:	e7fa      	b.n	8003a76 <SE_AuthenticateFW_Finish+0x36>
 8003a80:	08003c00 	.word	0x08003c00
 8003a84:	0800ffff 	.word	0x0800ffff
 8003a88:	08000205 	.word	0x08000205
 8003a8c:	00018799 	.word	0x00018799

08003a90 <SE_VerifyHeaderSignature>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param pxFwRawHeader pointer to RawHeader Buffer.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_VerifyHeaderSignature(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxFwRawHeader)
{
 8003a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a92:	4604      	mov	r4, r0
 8003a94:	9101      	str	r1, [sp, #4]
 8003a96:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8003a98:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <SE_VerifyHeaderSignature+0x3c>)
 8003a9a:	4291      	cmp	r1, r2
 8003a9c:	d313      	bcc.n	8003ac6 <SE_VerifyHeaderSignature+0x36>
 8003a9e:	4671      	mov	r1, lr
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <SE_VerifyHeaderSignature+0x40>)
 8003aa2:	4291      	cmp	r1, r2
 8003aa4:	d80f      	bhi.n	8003ac6 <SE_VerifyHeaderSignature+0x36>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /* Enter Secure Mode */
    SE_EnterSecureMode(&primask_bit);
 8003aa6:	a803      	add	r0, sp, #12
 8003aa8:	f000 f818 	bl	8003adc <SE_EnterSecureMode>

    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_HL_AUTHENTICATE_METADATA, peSE_Status, primask_bit, pxFwRawHeader);
 8003aac:	4621      	mov	r1, r4
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	4c08      	ldr	r4, [pc, #32]	; (8003ad4 <SE_VerifyHeaderSignature+0x44>)
 8003ab2:	9a03      	ldr	r2, [sp, #12]
 8003ab4:	2010      	movs	r0, #16
 8003ab6:	47a0      	blx	r4
 8003ab8:	4604      	mov	r4, r0

    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
 8003aba:	9803      	ldr	r0, [sp, #12]
 8003abc:	f000 f80f 	bl	8003ade <SE_ExitSecureMode>
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;

}
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bd10      	pop	{r4, pc}
  __IS_SFU_RESERVED();
 8003ac6:	4c04      	ldr	r4, [pc, #16]	; (8003ad8 <SE_VerifyHeaderSignature+0x48>)
 8003ac8:	e7fa      	b.n	8003ac0 <SE_VerifyHeaderSignature+0x30>
 8003aca:	bf00      	nop
 8003acc:	08003c00 	.word	0x08003c00
 8003ad0:	0800ffff 	.word	0x0800ffff
 8003ad4:	08000205 	.word	0x08000205
 8003ad8:	00018799 	.word	0x00018799

08003adc <SE_EnterSecureMode>:
#if !defined(CKS_ENABLED)
  /* Disable interrupts */
  *pPrimaskBit = __get_PRIMASK();
  __disable_irq();
#endif /* !CKS_ENABLED */
}
 8003adc:	4770      	bx	lr

08003ade <SE_ExitSecureMode>:
#if !defined(CKS_ENABLED)
  /* Re-enable the interrupts */
  __set_PRIMASK(PrimaskBit);
  __enable_irq();
#endif /* !CKS_ENABLED */
}
 8003ade:	4770      	bx	lr

Disassembly of section .text:

08003c00 <__do_global_dtors_aux>:
 8003c00:	b510      	push	{r4, lr}
 8003c02:	4c05      	ldr	r4, [pc, #20]	; (8003c18 <__do_global_dtors_aux+0x18>)
 8003c04:	7823      	ldrb	r3, [r4, #0]
 8003c06:	b933      	cbnz	r3, 8003c16 <__do_global_dtors_aux+0x16>
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <__do_global_dtors_aux+0x1c>)
 8003c0a:	b113      	cbz	r3, 8003c12 <__do_global_dtors_aux+0x12>
 8003c0c:	4804      	ldr	r0, [pc, #16]	; (8003c20 <__do_global_dtors_aux+0x20>)
 8003c0e:	f3af 8000 	nop.w
 8003c12:	2301      	movs	r3, #1
 8003c14:	7023      	strb	r3, [r4, #0]
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	200010a8 	.word	0x200010a8
 8003c1c:	00000000 	.word	0x00000000
 8003c20:	0800aac0 	.word	0x0800aac0

08003c24 <frame_dummy>:
 8003c24:	b508      	push	{r3, lr}
 8003c26:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <frame_dummy+0x10>)
 8003c28:	b11b      	cbz	r3, 8003c32 <frame_dummy+0xe>
 8003c2a:	4903      	ldr	r1, [pc, #12]	; (8003c38 <frame_dummy+0x14>)
 8003c2c:	4803      	ldr	r0, [pc, #12]	; (8003c3c <frame_dummy+0x18>)
 8003c2e:	f3af 8000 	nop.w
 8003c32:	bd08      	pop	{r3, pc}
 8003c34:	00000000 	.word	0x00000000
 8003c38:	200010ac 	.word	0x200010ac
 8003c3c:	0800aac0 	.word	0x0800aac0

08003c40 <memchr>:
 8003c40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003c44:	2a10      	cmp	r2, #16
 8003c46:	db2b      	blt.n	8003ca0 <memchr+0x60>
 8003c48:	f010 0f07 	tst.w	r0, #7
 8003c4c:	d008      	beq.n	8003c60 <memchr+0x20>
 8003c4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c52:	3a01      	subs	r2, #1
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d02d      	beq.n	8003cb4 <memchr+0x74>
 8003c58:	f010 0f07 	tst.w	r0, #7
 8003c5c:	b342      	cbz	r2, 8003cb0 <memchr+0x70>
 8003c5e:	d1f6      	bne.n	8003c4e <memchr+0xe>
 8003c60:	b4f0      	push	{r4, r5, r6, r7}
 8003c62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003c66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8003c6a:	f022 0407 	bic.w	r4, r2, #7
 8003c6e:	f07f 0700 	mvns.w	r7, #0
 8003c72:	2300      	movs	r3, #0
 8003c74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003c78:	3c08      	subs	r4, #8
 8003c7a:	ea85 0501 	eor.w	r5, r5, r1
 8003c7e:	ea86 0601 	eor.w	r6, r6, r1
 8003c82:	fa85 f547 	uadd8	r5, r5, r7
 8003c86:	faa3 f587 	sel	r5, r3, r7
 8003c8a:	fa86 f647 	uadd8	r6, r6, r7
 8003c8e:	faa5 f687 	sel	r6, r5, r7
 8003c92:	b98e      	cbnz	r6, 8003cb8 <memchr+0x78>
 8003c94:	d1ee      	bne.n	8003c74 <memchr+0x34>
 8003c96:	bcf0      	pop	{r4, r5, r6, r7}
 8003c98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003c9c:	f002 0207 	and.w	r2, r2, #7
 8003ca0:	b132      	cbz	r2, 8003cb0 <memchr+0x70>
 8003ca2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	ea83 0301 	eor.w	r3, r3, r1
 8003cac:	b113      	cbz	r3, 8003cb4 <memchr+0x74>
 8003cae:	d1f8      	bne.n	8003ca2 <memchr+0x62>
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	4770      	bx	lr
 8003cb4:	3801      	subs	r0, #1
 8003cb6:	4770      	bx	lr
 8003cb8:	2d00      	cmp	r5, #0
 8003cba:	bf06      	itte	eq
 8003cbc:	4635      	moveq	r5, r6
 8003cbe:	3803      	subeq	r0, #3
 8003cc0:	3807      	subne	r0, #7
 8003cc2:	f015 0f01 	tst.w	r5, #1
 8003cc6:	d107      	bne.n	8003cd8 <memchr+0x98>
 8003cc8:	3001      	adds	r0, #1
 8003cca:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003cce:	bf02      	ittt	eq
 8003cd0:	3001      	addeq	r0, #1
 8003cd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003cd6:	3001      	addeq	r0, #1
 8003cd8:	bcf0      	pop	{r4, r5, r6, r7}
 8003cda:	3801      	subs	r0, #1
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <__aeabi_uldivmod>:
 8003ce0:	b953      	cbnz	r3, 8003cf8 <__aeabi_uldivmod+0x18>
 8003ce2:	b94a      	cbnz	r2, 8003cf8 <__aeabi_uldivmod+0x18>
 8003ce4:	2900      	cmp	r1, #0
 8003ce6:	bf08      	it	eq
 8003ce8:	2800      	cmpeq	r0, #0
 8003cea:	bf1c      	itt	ne
 8003cec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8003cf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003cf4:	f000 b96e 	b.w	8003fd4 <__aeabi_idiv0>
 8003cf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8003cfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003d00:	f000 f806 	bl	8003d10 <__udivmoddi4>
 8003d04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d0c:	b004      	add	sp, #16
 8003d0e:	4770      	bx	lr

08003d10 <__udivmoddi4>:
 8003d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	9d08      	ldr	r5, [sp, #32]
 8003d16:	4604      	mov	r4, r0
 8003d18:	468c      	mov	ip, r1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f040 8083 	bne.w	8003e26 <__udivmoddi4+0x116>
 8003d20:	428a      	cmp	r2, r1
 8003d22:	4617      	mov	r7, r2
 8003d24:	d947      	bls.n	8003db6 <__udivmoddi4+0xa6>
 8003d26:	fab2 f282 	clz	r2, r2
 8003d2a:	b142      	cbz	r2, 8003d3e <__udivmoddi4+0x2e>
 8003d2c:	f1c2 0020 	rsb	r0, r2, #32
 8003d30:	fa24 f000 	lsr.w	r0, r4, r0
 8003d34:	4091      	lsls	r1, r2
 8003d36:	4097      	lsls	r7, r2
 8003d38:	ea40 0c01 	orr.w	ip, r0, r1
 8003d3c:	4094      	lsls	r4, r2
 8003d3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8003d42:	0c23      	lsrs	r3, r4, #16
 8003d44:	fbbc f6f8 	udiv	r6, ip, r8
 8003d48:	fa1f fe87 	uxth.w	lr, r7
 8003d4c:	fb08 c116 	mls	r1, r8, r6, ip
 8003d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003d54:	fb06 f10e 	mul.w	r1, r6, lr
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	d909      	bls.n	8003d70 <__udivmoddi4+0x60>
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8003d62:	f080 8119 	bcs.w	8003f98 <__udivmoddi4+0x288>
 8003d66:	4299      	cmp	r1, r3
 8003d68:	f240 8116 	bls.w	8003f98 <__udivmoddi4+0x288>
 8003d6c:	3e02      	subs	r6, #2
 8003d6e:	443b      	add	r3, r7
 8003d70:	1a5b      	subs	r3, r3, r1
 8003d72:	b2a4      	uxth	r4, r4
 8003d74:	fbb3 f0f8 	udiv	r0, r3, r8
 8003d78:	fb08 3310 	mls	r3, r8, r0, r3
 8003d7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003d80:	fb00 fe0e 	mul.w	lr, r0, lr
 8003d84:	45a6      	cmp	lr, r4
 8003d86:	d909      	bls.n	8003d9c <__udivmoddi4+0x8c>
 8003d88:	193c      	adds	r4, r7, r4
 8003d8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d8e:	f080 8105 	bcs.w	8003f9c <__udivmoddi4+0x28c>
 8003d92:	45a6      	cmp	lr, r4
 8003d94:	f240 8102 	bls.w	8003f9c <__udivmoddi4+0x28c>
 8003d98:	3802      	subs	r0, #2
 8003d9a:	443c      	add	r4, r7
 8003d9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003da0:	eba4 040e 	sub.w	r4, r4, lr
 8003da4:	2600      	movs	r6, #0
 8003da6:	b11d      	cbz	r5, 8003db0 <__udivmoddi4+0xa0>
 8003da8:	40d4      	lsrs	r4, r2
 8003daa:	2300      	movs	r3, #0
 8003dac:	e9c5 4300 	strd	r4, r3, [r5]
 8003db0:	4631      	mov	r1, r6
 8003db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db6:	b902      	cbnz	r2, 8003dba <__udivmoddi4+0xaa>
 8003db8:	deff      	udf	#255	; 0xff
 8003dba:	fab2 f282 	clz	r2, r2
 8003dbe:	2a00      	cmp	r2, #0
 8003dc0:	d150      	bne.n	8003e64 <__udivmoddi4+0x154>
 8003dc2:	1bcb      	subs	r3, r1, r7
 8003dc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8003dc8:	fa1f f887 	uxth.w	r8, r7
 8003dcc:	2601      	movs	r6, #1
 8003dce:	fbb3 fcfe 	udiv	ip, r3, lr
 8003dd2:	0c21      	lsrs	r1, r4, #16
 8003dd4:	fb0e 331c 	mls	r3, lr, ip, r3
 8003dd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003ddc:	fb08 f30c 	mul.w	r3, r8, ip
 8003de0:	428b      	cmp	r3, r1
 8003de2:	d907      	bls.n	8003df4 <__udivmoddi4+0xe4>
 8003de4:	1879      	adds	r1, r7, r1
 8003de6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8003dea:	d202      	bcs.n	8003df2 <__udivmoddi4+0xe2>
 8003dec:	428b      	cmp	r3, r1
 8003dee:	f200 80e9 	bhi.w	8003fc4 <__udivmoddi4+0x2b4>
 8003df2:	4684      	mov	ip, r0
 8003df4:	1ac9      	subs	r1, r1, r3
 8003df6:	b2a3      	uxth	r3, r4
 8003df8:	fbb1 f0fe 	udiv	r0, r1, lr
 8003dfc:	fb0e 1110 	mls	r1, lr, r0, r1
 8003e00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8003e04:	fb08 f800 	mul.w	r8, r8, r0
 8003e08:	45a0      	cmp	r8, r4
 8003e0a:	d907      	bls.n	8003e1c <__udivmoddi4+0x10c>
 8003e0c:	193c      	adds	r4, r7, r4
 8003e0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e12:	d202      	bcs.n	8003e1a <__udivmoddi4+0x10a>
 8003e14:	45a0      	cmp	r8, r4
 8003e16:	f200 80d9 	bhi.w	8003fcc <__udivmoddi4+0x2bc>
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	eba4 0408 	sub.w	r4, r4, r8
 8003e20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8003e24:	e7bf      	b.n	8003da6 <__udivmoddi4+0x96>
 8003e26:	428b      	cmp	r3, r1
 8003e28:	d909      	bls.n	8003e3e <__udivmoddi4+0x12e>
 8003e2a:	2d00      	cmp	r5, #0
 8003e2c:	f000 80b1 	beq.w	8003f92 <__udivmoddi4+0x282>
 8003e30:	2600      	movs	r6, #0
 8003e32:	e9c5 0100 	strd	r0, r1, [r5]
 8003e36:	4630      	mov	r0, r6
 8003e38:	4631      	mov	r1, r6
 8003e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e3e:	fab3 f683 	clz	r6, r3
 8003e42:	2e00      	cmp	r6, #0
 8003e44:	d14a      	bne.n	8003edc <__udivmoddi4+0x1cc>
 8003e46:	428b      	cmp	r3, r1
 8003e48:	d302      	bcc.n	8003e50 <__udivmoddi4+0x140>
 8003e4a:	4282      	cmp	r2, r0
 8003e4c:	f200 80b8 	bhi.w	8003fc0 <__udivmoddi4+0x2b0>
 8003e50:	1a84      	subs	r4, r0, r2
 8003e52:	eb61 0103 	sbc.w	r1, r1, r3
 8003e56:	2001      	movs	r0, #1
 8003e58:	468c      	mov	ip, r1
 8003e5a:	2d00      	cmp	r5, #0
 8003e5c:	d0a8      	beq.n	8003db0 <__udivmoddi4+0xa0>
 8003e5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8003e62:	e7a5      	b.n	8003db0 <__udivmoddi4+0xa0>
 8003e64:	f1c2 0320 	rsb	r3, r2, #32
 8003e68:	fa20 f603 	lsr.w	r6, r0, r3
 8003e6c:	4097      	lsls	r7, r2
 8003e6e:	fa01 f002 	lsl.w	r0, r1, r2
 8003e72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8003e76:	40d9      	lsrs	r1, r3
 8003e78:	4330      	orrs	r0, r6
 8003e7a:	0c03      	lsrs	r3, r0, #16
 8003e7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8003e80:	fa1f f887 	uxth.w	r8, r7
 8003e84:	fb0e 1116 	mls	r1, lr, r6, r1
 8003e88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003e8c:	fb06 f108 	mul.w	r1, r6, r8
 8003e90:	4299      	cmp	r1, r3
 8003e92:	fa04 f402 	lsl.w	r4, r4, r2
 8003e96:	d909      	bls.n	8003eac <__udivmoddi4+0x19c>
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8003e9e:	f080 808d 	bcs.w	8003fbc <__udivmoddi4+0x2ac>
 8003ea2:	4299      	cmp	r1, r3
 8003ea4:	f240 808a 	bls.w	8003fbc <__udivmoddi4+0x2ac>
 8003ea8:	3e02      	subs	r6, #2
 8003eaa:	443b      	add	r3, r7
 8003eac:	1a5b      	subs	r3, r3, r1
 8003eae:	b281      	uxth	r1, r0
 8003eb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8003eb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8003eb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003ebc:	fb00 f308 	mul.w	r3, r0, r8
 8003ec0:	428b      	cmp	r3, r1
 8003ec2:	d907      	bls.n	8003ed4 <__udivmoddi4+0x1c4>
 8003ec4:	1879      	adds	r1, r7, r1
 8003ec6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8003eca:	d273      	bcs.n	8003fb4 <__udivmoddi4+0x2a4>
 8003ecc:	428b      	cmp	r3, r1
 8003ece:	d971      	bls.n	8003fb4 <__udivmoddi4+0x2a4>
 8003ed0:	3802      	subs	r0, #2
 8003ed2:	4439      	add	r1, r7
 8003ed4:	1acb      	subs	r3, r1, r3
 8003ed6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8003eda:	e778      	b.n	8003dce <__udivmoddi4+0xbe>
 8003edc:	f1c6 0c20 	rsb	ip, r6, #32
 8003ee0:	fa03 f406 	lsl.w	r4, r3, r6
 8003ee4:	fa22 f30c 	lsr.w	r3, r2, ip
 8003ee8:	431c      	orrs	r4, r3
 8003eea:	fa20 f70c 	lsr.w	r7, r0, ip
 8003eee:	fa01 f306 	lsl.w	r3, r1, r6
 8003ef2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8003ef6:	fa21 f10c 	lsr.w	r1, r1, ip
 8003efa:	431f      	orrs	r7, r3
 8003efc:	0c3b      	lsrs	r3, r7, #16
 8003efe:	fbb1 f9fe 	udiv	r9, r1, lr
 8003f02:	fa1f f884 	uxth.w	r8, r4
 8003f06:	fb0e 1119 	mls	r1, lr, r9, r1
 8003f0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8003f0e:	fb09 fa08 	mul.w	sl, r9, r8
 8003f12:	458a      	cmp	sl, r1
 8003f14:	fa02 f206 	lsl.w	r2, r2, r6
 8003f18:	fa00 f306 	lsl.w	r3, r0, r6
 8003f1c:	d908      	bls.n	8003f30 <__udivmoddi4+0x220>
 8003f1e:	1861      	adds	r1, r4, r1
 8003f20:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8003f24:	d248      	bcs.n	8003fb8 <__udivmoddi4+0x2a8>
 8003f26:	458a      	cmp	sl, r1
 8003f28:	d946      	bls.n	8003fb8 <__udivmoddi4+0x2a8>
 8003f2a:	f1a9 0902 	sub.w	r9, r9, #2
 8003f2e:	4421      	add	r1, r4
 8003f30:	eba1 010a 	sub.w	r1, r1, sl
 8003f34:	b2bf      	uxth	r7, r7
 8003f36:	fbb1 f0fe 	udiv	r0, r1, lr
 8003f3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8003f3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8003f42:	fb00 f808 	mul.w	r8, r0, r8
 8003f46:	45b8      	cmp	r8, r7
 8003f48:	d907      	bls.n	8003f5a <__udivmoddi4+0x24a>
 8003f4a:	19e7      	adds	r7, r4, r7
 8003f4c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8003f50:	d22e      	bcs.n	8003fb0 <__udivmoddi4+0x2a0>
 8003f52:	45b8      	cmp	r8, r7
 8003f54:	d92c      	bls.n	8003fb0 <__udivmoddi4+0x2a0>
 8003f56:	3802      	subs	r0, #2
 8003f58:	4427      	add	r7, r4
 8003f5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003f5e:	eba7 0708 	sub.w	r7, r7, r8
 8003f62:	fba0 8902 	umull	r8, r9, r0, r2
 8003f66:	454f      	cmp	r7, r9
 8003f68:	46c6      	mov	lr, r8
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	d31a      	bcc.n	8003fa4 <__udivmoddi4+0x294>
 8003f6e:	d017      	beq.n	8003fa0 <__udivmoddi4+0x290>
 8003f70:	b15d      	cbz	r5, 8003f8a <__udivmoddi4+0x27a>
 8003f72:	ebb3 020e 	subs.w	r2, r3, lr
 8003f76:	eb67 0701 	sbc.w	r7, r7, r1
 8003f7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8003f7e:	40f2      	lsrs	r2, r6
 8003f80:	ea4c 0202 	orr.w	r2, ip, r2
 8003f84:	40f7      	lsrs	r7, r6
 8003f86:	e9c5 2700 	strd	r2, r7, [r5]
 8003f8a:	2600      	movs	r6, #0
 8003f8c:	4631      	mov	r1, r6
 8003f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f92:	462e      	mov	r6, r5
 8003f94:	4628      	mov	r0, r5
 8003f96:	e70b      	b.n	8003db0 <__udivmoddi4+0xa0>
 8003f98:	4606      	mov	r6, r0
 8003f9a:	e6e9      	b.n	8003d70 <__udivmoddi4+0x60>
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	e6fd      	b.n	8003d9c <__udivmoddi4+0x8c>
 8003fa0:	4543      	cmp	r3, r8
 8003fa2:	d2e5      	bcs.n	8003f70 <__udivmoddi4+0x260>
 8003fa4:	ebb8 0e02 	subs.w	lr, r8, r2
 8003fa8:	eb69 0104 	sbc.w	r1, r9, r4
 8003fac:	3801      	subs	r0, #1
 8003fae:	e7df      	b.n	8003f70 <__udivmoddi4+0x260>
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	e7d2      	b.n	8003f5a <__udivmoddi4+0x24a>
 8003fb4:	4660      	mov	r0, ip
 8003fb6:	e78d      	b.n	8003ed4 <__udivmoddi4+0x1c4>
 8003fb8:	4681      	mov	r9, r0
 8003fba:	e7b9      	b.n	8003f30 <__udivmoddi4+0x220>
 8003fbc:	4666      	mov	r6, ip
 8003fbe:	e775      	b.n	8003eac <__udivmoddi4+0x19c>
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	e74a      	b.n	8003e5a <__udivmoddi4+0x14a>
 8003fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8003fc8:	4439      	add	r1, r7
 8003fca:	e713      	b.n	8003df4 <__udivmoddi4+0xe4>
 8003fcc:	3802      	subs	r0, #2
 8003fce:	443c      	add	r4, r7
 8003fd0:	e724      	b.n	8003e1c <__udivmoddi4+0x10c>
 8003fd2:	bf00      	nop

08003fd4 <__aeabi_idiv0>:
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop

08003fd8 <SystemClock_Config>:
  *            PLL_Q                          = 4
  *            PLL_R                          = 2
  *            Flash Latency(WS)              = 3
  */
void SystemClock_Config(void)
{
 8003fd8:	b500      	push	{lr}
 8003fda:	b09b      	sub	sp, #108	; 0x6c
  RCC_ClkInitTypeDef RCC_ClkInitStruct ={0};
 8003fdc:	221c      	movs	r2, #28
 8003fde:	2100      	movs	r1, #0
 8003fe0:	a801      	add	r0, sp, #4
 8003fe2:	f005 fc6d 	bl	80098c0 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fe6:	2228      	movs	r2, #40	; 0x28
 8003fe8:	2100      	movs	r1, #0
 8003fea:	a809      	add	r0, sp, #36	; 0x24
 8003fec:	f005 fc68 	bl	80098c0 <memset>

  /* Activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003ff0:	2160      	movs	r1, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003ff2:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003ff4:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ff6:	2102      	movs	r1, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003ff8:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003ffa:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003ffe:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004000:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 32;
 8004002:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004006:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004008:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800400c:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800400e:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8004012:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004016:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8004018:	e9cd e317 	strd	lr, r3, [sp, #92]	; 0x5c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800401c:	f004 f9f8 	bl	8008410 <HAL_RCC_OscConfig>
 8004020:	b100      	cbz	r0, 8004024 <SystemClock_Config+0x4c>
  {
    /* Initialization Error */
    while (1);
 8004022:	e7fe      	b.n	8004022 <SystemClock_Config+0x4a>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8004024:	236f      	movs	r3, #111	; 0x6f
 8004026:	2103      	movs	r1, #3
 8004028:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800402c:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800402e:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004032:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004036:	9005      	str	r0, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004038:	a801      	add	r0, sp, #4
 800403a:	f004 fcbd 	bl	80089b8 <HAL_RCC_ClockConfig>
 800403e:	b100      	cbz	r0, 8004042 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while (1);
 8004040:	e7fe      	b.n	8004040 <SystemClock_Config+0x68>
  }
}
 8004042:	b01b      	add	sp, #108	; 0x6c
 8004044:	f85d fb04 	ldr.w	pc, [sp], #4

08004048 <main>:
{
 8004048:	b508      	push	{r3, lr}
  (void) HAL_Init();
 800404a:	f003 fb87 	bl	800775c <HAL_Init>
  SystemClock_Config();
 800404e:	f7ff ffc3 	bl	8003fd8 <SystemClock_Config>
  (void)SFU_BOOT_RunSecureBootService(); /* no need to take care of the returned value as we reboot in all cases */
 8004052:	f000 fa63 	bl	800451c <SFU_BOOT_RunSecureBootService>
  SFU_BOOT_ForceReboot();
 8004056:	f000 fa45 	bl	80044e4 <SFU_BOOT_ForceReboot>
}
 800405a:	2000      	movs	r0, #0
 800405c:	bd08      	pop	{r3, pc}

0800405e <HAL_MspInit>:
/* Functions Definition ------------------------------------------------------*/
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800405e:	b508      	push	{r3, lr}

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004060:	2003      	movs	r0, #3
 8004062:	f003 fbbf 	bl	80077e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0U, 0U);
 8004066:	2200      	movs	r2, #0
 8004068:	4611      	mov	r1, r2
 800406a:	f06f 000b 	mvn.w	r0, #11
 800406e:	f003 fbcb 	bl	8007808 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0U, 0U);
 8004072:	2200      	movs	r2, #0
 8004074:	4611      	mov	r1, r2
 8004076:	f06f 000a 	mvn.w	r0, #10
 800407a:	f003 fbc5 	bl	8007808 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0U, 0U);
 800407e:	2200      	movs	r2, #0
 8004080:	4611      	mov	r1, r2
 8004082:	f06f 0009 	mvn.w	r0, #9
 8004086:	f003 fbbf 	bl	8007808 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0U, 0U);
 800408a:	2200      	movs	r2, #0
 800408c:	4611      	mov	r1, r2
 800408e:	f06f 0003 	mvn.w	r0, #3
 8004092:	f003 fbb9 	bl	8007808 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0U, 0U);
 8004096:	2200      	movs	r2, #0

}
 8004098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0U, 0U);
 800409c:	4611      	mov	r1, r2
 800409e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a2:	f003 bbb1 	b.w	8007808 <HAL_NVIC_SetPriority>

080040a6 <HAL_RTC_MspInit>:
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
  SFU_LL_RTC_MspInit(hrtc);
 80040a6:	f002 bcdf 	b.w	8006a68 <SFU_LL_RTC_MspInit>

080040aa <HAL_UART_MspInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
  SFU_LL_UART_MspInit(huart);
 80040aa:	f002 bd15 	b.w	8006ad8 <SFU_LL_UART_MspInit>

080040ae <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80040ae:	e7fe      	b.n	80040ae <BusFault_Handler>

080040b0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <UsageFault_Handler>

080040b2 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80040b2:	4770      	bx	lr

080040b4 <DebugMon_Handler>:
 80040b4:	4770      	bx	lr

080040b6 <PendSV_Handler>:
 80040b6:	4770      	bx	lr

080040b8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80040b8:	f003 bb60 	b.w	800777c <HAL_IncTick>

080040bc <TAMP_STAMP_LSECSS_IRQHandler>:
  * @param  None
  * @retval None
  */
void TAMP_STAMP_LSECSS_IRQHandler()
{
  HAL_RTCEx_TamperTimeStampIRQHandler(&RtcHandle);
 80040bc:	4801      	ldr	r0, [pc, #4]	; (80040c4 <TAMP_STAMP_LSECSS_IRQHandler+0x8>)
 80040be:	f005 b887 	b.w	80091d0 <HAL_RTCEx_TamperTimeStampIRQHandler>
 80040c2:	bf00      	nop
 80040c4:	20001760 	.word	0x20001760

080040c8 <SFU_BOOT_SM_HandleCriticalFailure>:
  * @param  None
  * @note   After a Critical Failure a Reboot will be called.
  * @retval None
  */
static void SFU_BOOT_SM_HandleCriticalFailure(void)
{
 80040c8:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: HANDLE CRITICAL FAILURE");
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <SFU_BOOT_SM_HandleCriticalFailure+0x18>)
 80040cc:	f005 fc00 	bl	80098d0 <iprintf>

  /* It's not possible to continue without compromising the stability or the security of the solution.
     The State Machine needs to be aborted and a Reset must be triggered */
  SFU_SET_SM_IF_CURR_STATE(SFU_ERROR, SFU_STATE_REBOOT_STATE_MACHINE, SFU_STATE_REBOOT_STATE_MACHINE);
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <SFU_BOOT_SM_HandleCriticalFailure+0x1c>)
 80040d2:	785a      	ldrb	r2, [r3, #1]
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	220a      	movs	r2, #10
 80040da:	705a      	strb	r2, [r3, #1]
}
 80040dc:	bd08      	pop	{r3, pc}
 80040de:	bf00      	nop
 80040e0:	0800ae2c 	.word	0x0800ae2c
 80040e4:	200010c4 	.word	0x200010c4

080040e8 <SFU_BOOT_SM_RollbackInstallPrevUserFw>:
{
 80040e8:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: ROLLBACK NOT SUPPORTED");
 80040ea:	4805      	ldr	r0, [pc, #20]	; (8004100 <SFU_BOOT_SM_RollbackInstallPrevUserFw+0x18>)
 80040ec:	f005 fbf0 	bl	80098d0 <iprintf>
  SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <SFU_BOOT_SM_RollbackInstallPrevUserFw+0x1c>)
 80040f2:	785a      	ldrb	r2, [r3, #1]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	2209      	movs	r2, #9
 80040fa:	705a      	strb	r2, [r3, #1]
}
 80040fc:	bd08      	pop	{r3, pc}
 80040fe:	bf00      	nop
 8004100:	0800ae57 	.word	0x0800ae57
 8004104:	200010c4 	.word	0x200010c4

08004108 <SFU_BOOT_SM_CheckUserFwStatus>:
{
 8004108:	b538      	push	{r3, r4, r5, lr}
  if (initialDeviceStatusCheck == 1U)
 800410a:	4d43      	ldr	r5, [pc, #268]	; (8004218 <SFU_BOOT_SM_CheckUserFwStatus+0x110>)
 800410c:	782b      	ldrb	r3, [r5, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d102      	bne.n	8004118 <SFU_BOOT_SM_CheckUserFwStatus+0x10>
    TRACE("\r\n= [SBOOT] STATE: CHECK USER FW STATUS");
 8004112:	4842      	ldr	r0, [pc, #264]	; (800421c <SFU_BOOT_SM_CheckUserFwStatus+0x114>)
 8004114:	f005 fbdc 	bl	80098d0 <iprintf>
  e_PendingInstallStatus = SFU_IMG_CheckPendingInstallation(&m_DwlSlotToInstall, &m_ActiveSlotToResume,
 8004118:	4a41      	ldr	r2, [pc, #260]	; (8004220 <SFU_BOOT_SM_CheckUserFwStatus+0x118>)
 800411a:	4c42      	ldr	r4, [pc, #264]	; (8004224 <SFU_BOOT_SM_CheckUserFwStatus+0x11c>)
 800411c:	1d11      	adds	r1, r2, #4
 800411e:	f102 0008 	add.w	r0, r2, #8
 8004122:	f002 f80f 	bl	8006144 <SFU_IMG_CheckPendingInstallation>
  switch (e_PendingInstallStatus)
 8004126:	2803      	cmp	r0, #3
 8004128:	d83a      	bhi.n	80041a0 <SFU_BOOT_SM_CheckUserFwStatus+0x98>
 800412a:	e8df f000 	tbb	[pc, r0]
 800412e:	0f1a      	.short	0x0f1a
 8004130:	0224      	.short	0x0224
      m_DwlSlotToInstall = m_ActiveSlotToRollback - SLOT_ACTIVE_1 + SLOT_DWL_1;
 8004132:	6862      	ldr	r2, [r4, #4]
      TRACE("\r\n\t  Installation not validated: rollback procedure initiated (SLOT_ACTIVE_%d / SLOT_DWL_%d)",
 8004134:	483c      	ldr	r0, [pc, #240]	; (8004228 <SFU_BOOT_SM_CheckUserFwStatus+0x120>)
      m_DwlSlotToInstall = m_ActiveSlotToRollback - SLOT_ACTIVE_1 + SLOT_DWL_1;
 8004136:	1cd3      	adds	r3, r2, #3
      TRACE("\r\n\t  Installation not validated: rollback procedure initiated (SLOT_ACTIVE_%d / SLOT_DWL_%d)",
 8004138:	4611      	mov	r1, r2
      m_DwlSlotToInstall = m_ActiveSlotToRollback - SLOT_ACTIVE_1 + SLOT_DWL_1;
 800413a:	60e3      	str	r3, [r4, #12]
      TRACE("\r\n\t  Installation not validated: rollback procedure initiated (SLOT_ACTIVE_%d / SLOT_DWL_%d)",
 800413c:	f005 fbc8 	bl	80098d0 <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_ROLLBACK_PREV_USER_FW);
 8004140:	7863      	ldrb	r3, [r4, #1]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	7023      	strb	r3, [r4, #0]
 8004146:	2308      	movs	r3, #8
      SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8004148:	7063      	strb	r3, [r4, #1]
}
 800414a:	e028      	b.n	800419e <SFU_BOOT_SM_CheckUserFwStatus+0x96>
      TRACE("\r\n\t  Installation Failed: resume installation procedure initiated (SLOT_ACTIVE_%d / SLOT_DWL_%d)",
 800414c:	68e2      	ldr	r2, [r4, #12]
 800414e:	68a1      	ldr	r1, [r4, #8]
 8004150:	4836      	ldr	r0, [pc, #216]	; (800422c <SFU_BOOT_SM_CheckUserFwStatus+0x124>)
 8004152:	3a03      	subs	r2, #3
 8004154:	f005 fbbc 	bl	80098d0 <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_RESUME_INSTALL_NEW_USER_FW);
 8004158:	7863      	ldrb	r3, [r4, #1]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	7023      	strb	r3, [r4, #0]
 800415e:	2307      	movs	r3, #7
 8004160:	e7f2      	b.n	8004148 <SFU_BOOT_SM_CheckUserFwStatus+0x40>
      TRACE("\r\n\t  New Fw to be installed from slot SLOT_DWL_%d", m_DwlSlotToInstall - SLOT_DWL_1 + 1U);
 8004162:	68e1      	ldr	r1, [r4, #12]
 8004164:	4832      	ldr	r0, [pc, #200]	; (8004230 <SFU_BOOT_SM_CheckUserFwStatus+0x128>)
 8004166:	3903      	subs	r1, #3
 8004168:	f005 fbb2 	bl	80098d0 <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_INSTALL_NEW_USER_FW);
 800416c:	7863      	ldrb	r3, [r4, #1]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	7023      	strb	r3, [r4, #0]
 8004172:	2304      	movs	r3, #4
 8004174:	e7e8      	b.n	8004148 <SFU_BOOT_SM_CheckUserFwStatus+0x40>
      m_ActiveSlotToExecute = 0U;
 8004176:	2300      	movs	r3, #0
        if (SFU_SUCCESS == SFU_IMG_DetectFW(MASTER_SLOT))
 8004178:	2001      	movs	r0, #1
      m_ActiveSlotToExecute = 0U;
 800417a:	6123      	str	r3, [r4, #16]
        if (SFU_SUCCESS == SFU_IMG_DetectFW(MASTER_SLOT))
 800417c:	f001 f8fa 	bl	8005374 <SFU_IMG_DetectFW>
 8004180:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <SFU_BOOT_SM_CheckUserFwStatus+0x12c>)
 8004182:	4298      	cmp	r0, r3
 8004184:	d109      	bne.n	800419a <SFU_BOOT_SM_CheckUserFwStatus+0x92>
          m_ActiveSlotToExecute = MASTER_SLOT;
 8004186:	2101      	movs	r1, #1
          TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 8004188:	482b      	ldr	r0, [pc, #172]	; (8004238 <SFU_BOOT_SM_CheckUserFwStatus+0x130>)
          m_ActiveSlotToExecute = MASTER_SLOT;
 800418a:	6121      	str	r1, [r4, #16]
          TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 800418c:	f005 fba0 	bl	80098d0 <iprintf>
          SFU_SET_SM_CURR_STATE(SFU_STATE_VERIFY_USER_FW_SIGNATURE);
 8004190:	7863      	ldrb	r3, [r4, #1]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	7023      	strb	r3, [r4, #0]
 8004196:	2305      	movs	r3, #5
 8004198:	7063      	strb	r3, [r4, #1]
      if (m_ActiveSlotToExecute == 0U)
 800419a:	6923      	ldr	r3, [r4, #16]
 800419c:	b143      	cbz	r3, 80041b0 <SFU_BOOT_SM_CheckUserFwStatus+0xa8>
}
 800419e:	bd38      	pop	{r3, r4, r5, pc}
      TRACE("\r\n\t  Flash State Unknown, Critical failure");
 80041a0:	4826      	ldr	r0, [pc, #152]	; (800423c <SFU_BOOT_SM_CheckUserFwStatus+0x134>)
 80041a2:	f005 fb95 	bl	80098d0 <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 80041a6:	7863      	ldrb	r3, [r4, #1]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	7023      	strb	r3, [r4, #0]
 80041ac:	2309      	movs	r3, #9
 80041ae:	e7cb      	b.n	8004148 <SFU_BOOT_SM_CheckUserFwStatus+0x40>
          if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)         /* Slot configured ? */
 80041b0:	4b23      	ldr	r3, [pc, #140]	; (8004240 <SFU_BOOT_SM_CheckUserFwStatus+0x138>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	b1fb      	cbz	r3, 80041f6 <SFU_BOOT_SM_CheckUserFwStatus+0xee>
            if (SFU_SUCCESS == SFU_IMG_DetectFW(SLOT_ACTIVE_1 + i))
 80041b6:	2001      	movs	r0, #1
 80041b8:	f001 f8dc 	bl	8005374 <SFU_IMG_DetectFW>
 80041bc:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <SFU_BOOT_SM_CheckUserFwStatus+0x12c>)
 80041be:	4298      	cmp	r0, r3
 80041c0:	d109      	bne.n	80041d6 <SFU_BOOT_SM_CheckUserFwStatus+0xce>
              m_ActiveSlotToExecute = SLOT_ACTIVE_1 + i;
 80041c2:	2101      	movs	r1, #1
              TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 80041c4:	481c      	ldr	r0, [pc, #112]	; (8004238 <SFU_BOOT_SM_CheckUserFwStatus+0x130>)
              m_ActiveSlotToExecute = SLOT_ACTIVE_1 + i;
 80041c6:	6121      	str	r1, [r4, #16]
              TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 80041c8:	f005 fb82 	bl	80098d0 <iprintf>
              SFU_SET_SM_CURR_STATE(SFU_STATE_VERIFY_USER_FW_SIGNATURE);
 80041cc:	7863      	ldrb	r3, [r4, #1]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	7023      	strb	r3, [r4, #0]
 80041d2:	2305      	movs	r3, #5
 80041d4:	7063      	strb	r3, [r4, #1]
      if (m_ActiveSlotToExecute == 0U)
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e0      	bne.n	800419e <SFU_BOOT_SM_CheckUserFwStatus+0x96>
            if (SFU_IMG_VerifyEmptyActiveSlot(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 80041dc:	2001      	movs	r0, #1
 80041de:	f000 ffb7 	bl	8005150 <SFU_IMG_VerifyEmptyActiveSlot>
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <SFU_BOOT_SM_CheckUserFwStatus+0x12c>)
 80041e4:	4298      	cmp	r0, r3
 80041e6:	d006      	beq.n	80041f6 <SFU_BOOT_SM_CheckUserFwStatus+0xee>
              TRACE("\r\n\t  Slot SLOT_ACTIVE_%d not empty : erasing ...", SLOT_ACTIVE_1 + i);
 80041e8:	4816      	ldr	r0, [pc, #88]	; (8004244 <SFU_BOOT_SM_CheckUserFwStatus+0x13c>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	f005 fb70 	bl	80098d0 <iprintf>
              (void)SFU_IMG_InvalidateCurrentFirmware(SLOT_ACTIVE_1 + i); /* If this fails we continue anyhow */
 80041f0:	2001      	movs	r0, #1
 80041f2:	f000 ff75 	bl	80050e0 <SFU_IMG_InvalidateCurrentFirmware>
        if (1U == initialDeviceStatusCheck)
 80041f6:	782b      	ldrb	r3, [r5, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d107      	bne.n	800420c <SFU_BOOT_SM_CheckUserFwStatus+0x104>
          TRACE("\r\n\t  No valid FW found in the active slots nor new FW to be installed");
 80041fc:	4812      	ldr	r0, [pc, #72]	; (8004248 <SFU_BOOT_SM_CheckUserFwStatus+0x140>)
 80041fe:	f005 fb67 	bl	80098d0 <iprintf>
          TRACE("\r\n\t  Waiting for the local download to start... ");
 8004202:	4812      	ldr	r0, [pc, #72]	; (800424c <SFU_BOOT_SM_CheckUserFwStatus+0x144>)
 8004204:	f005 fb64 	bl	80098d0 <iprintf>
          initialDeviceStatusCheck = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	702b      	strb	r3, [r5, #0]
        SFU_SET_SM_CURR_STATE(SFU_STATE_CHECK_NEW_FW_TO_DOWNLOAD);
 800420c:	7863      	ldrb	r3, [r4, #1]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	7023      	strb	r3, [r4, #0]
 8004212:	2301      	movs	r3, #1
 8004214:	e798      	b.n	8004148 <SFU_BOOT_SM_CheckUserFwStatus+0x40>
 8004216:	bf00      	nop
 8004218:	20001784 	.word	0x20001784
 800421c:	0800ae81 	.word	0x0800ae81
 8004220:	200010c8 	.word	0x200010c8
 8004224:	200010c4 	.word	0x200010c4
 8004228:	0800aea9 	.word	0x0800aea9
 800422c:	0800af06 	.word	0x0800af06
 8004230:	0800af67 	.word	0x0800af67
 8004234:	00122f11 	.word	0x00122f11
 8004238:	0800af99 	.word	0x0800af99
 800423c:	0800b072 	.word	0x0800b072
 8004240:	0800ab9c 	.word	0x0800ab9c
 8004244:	0800afca 	.word	0x0800afca
 8004248:	0800affb 	.word	0x0800affb
 800424c:	0800b041 	.word	0x0800b041

08004250 <SFU_BOOT_SM_DownloadNewUserFw>:
{
 8004250:	b530      	push	{r4, r5, lr}
 8004252:	b085      	sub	sp, #20
  SFU_LOADER_StatusTypeDef  e_ret_status_app = SFU_LOADER_ERR_COM;
 8004254:	2301      	movs	r3, #1
 8004256:	f88d 3007 	strb.w	r3, [sp, #7]
  TRACE("\r\n= [SBOOT] STATE: DOWNLOAD NEW USER FIRMWARE");
 800425a:	4825      	ldr	r0, [pc, #148]	; (80042f0 <SFU_BOOT_SM_DownloadNewUserFw+0xa0>)
  if (e_ret_status == SFU_SUCCESS)
 800425c:	4d25      	ldr	r5, [pc, #148]	; (80042f4 <SFU_BOOT_SM_DownloadNewUserFw+0xa4>)
  uint32_t                  u_size = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	9303      	str	r3, [sp, #12]
  TRACE("\r\n= [SBOOT] STATE: DOWNLOAD NEW USER FIRMWARE");
 8004262:	f005 fb35 	bl	80098d0 <iprintf>
  e_ret_status = SFU_LOADER_DownloadNewUserFw(&e_ret_status_app, &dwl_slot, &u_size);
 8004266:	aa03      	add	r2, sp, #12
 8004268:	a902      	add	r1, sp, #8
 800426a:	f10d 0007 	add.w	r0, sp, #7
 800426e:	f002 f9df 	bl	8006630 <SFU_LOADER_DownloadNewUserFw>
  if (e_ret_status == SFU_SUCCESS)
 8004272:	42a8      	cmp	r0, r5
  e_ret_status = SFU_LOADER_DownloadNewUserFw(&e_ret_status_app, &dwl_slot, &u_size);
 8004274:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 8004276:	d11f      	bne.n	80042b8 <SFU_BOOT_SM_DownloadNewUserFw+0x68>
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, (uint8_t *) SlotStartAdd[dwl_slot],
 8004278:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <SFU_BOOT_SM_DownloadNewUserFw+0xa8>)
 800427a:	9902      	ldr	r1, [sp, #8]
 800427c:	481f      	ldr	r0, [pc, #124]	; (80042fc <SFU_BOOT_SM_DownloadNewUserFw+0xac>)
 800427e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004282:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004286:	f002 fc85 	bl	8006b94 <SFU_LL_FLASH_Read>
  if (e_ret_status == SFU_SUCCESS)
 800428a:	42a8      	cmp	r0, r5
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, (uint8_t *) SlotStartAdd[dwl_slot],
 800428c:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 800428e:	d113      	bne.n	80042b8 <SFU_BOOT_SM_DownloadNewUserFw+0x68>
    if (SFU_IMG_InstallAtNextReset((uint8_t *) &fw_image_header_validated) != SFU_SUCCESS)
 8004290:	481a      	ldr	r0, [pc, #104]	; (80042fc <SFU_BOOT_SM_DownloadNewUserFw+0xac>)
 8004292:	f002 fb07 	bl	80068a4 <SFU_IMG_InstallAtNextReset>
 8004296:	42a0      	cmp	r0, r4
 8004298:	d002      	beq.n	80042a0 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
      (void) SFU_IMG_EraseDownloadedImg(dwl_slot);
 800429a:	9802      	ldr	r0, [sp, #8]
 800429c:	f001 ff90 	bl	80061c0 <SFU_IMG_EraseDownloadedImg>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_REBOOT_STATE_MACHINE, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <SFU_BOOT_SM_DownloadNewUserFw+0xb0>)
 80042a2:	785a      	ldrb	r2, [r3, #1]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	4a12      	ldr	r2, [pc, #72]	; (80042f4 <SFU_BOOT_SM_DownloadNewUserFw+0xa4>)
 80042aa:	4294      	cmp	r4, r2
 80042ac:	bf0c      	ite	eq
 80042ae:	220a      	moveq	r2, #10
 80042b0:	2209      	movne	r2, #9
 80042b2:	705a      	strb	r2, [r3, #1]
}
 80042b4:	b005      	add	sp, #20
 80042b6:	bd30      	pop	{r4, r5, pc}
    (void) SFU_IMG_EraseDownloadedImg(dwl_slot);
 80042b8:	9802      	ldr	r0, [sp, #8]
 80042ba:	f001 ff81 	bl	80061c0 <SFU_IMG_EraseDownloadedImg>
    switch (e_ret_status_app)
 80042be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d8eb      	bhi.n	80042a0 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
 80042c8:	e8df f003 	tbb	[pc, r3]
 80042cc:	07090b03 	.word	0x07090b03
 80042d0:	0f0d      	.short	0x0f0d
        SFU_EXCPT_SetError(SFU_EXCPT_COM_ERR);
 80042d2:	2006      	movs	r0, #6
        SFU_EXCPT_SetError(SFU_EXCPT_DECRYPT_ERR);
 80042d4:	f000 fc98 	bl	8004c08 <SFU_EXCPT_SetError>
        break;
 80042d8:	e7e2      	b.n	80042a0 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
        SFU_EXCPT_SetError(SFU_EXCPT_VERSION_ERR);
 80042da:	2017      	movs	r0, #23
 80042dc:	e7fa      	b.n	80042d4 <SFU_BOOT_SM_DownloadNewUserFw+0x84>
        SFU_EXCPT_SetError(SFU_EXCPT_FW_TOO_BIG);
 80042de:	2005      	movs	r0, #5
 80042e0:	e7f8      	b.n	80042d4 <SFU_BOOT_SM_DownloadNewUserFw+0x84>
        SFU_EXCPT_SetError(SFU_EXCPT_HEADER_AUTH_ERR);
 80042e2:	2007      	movs	r0, #7
 80042e4:	e7f6      	b.n	80042d4 <SFU_BOOT_SM_DownloadNewUserFw+0x84>
        SFU_EXCPT_SetError(SFU_EXCPT_FLASH_ERR);
 80042e6:	200a      	movs	r0, #10
 80042e8:	e7f4      	b.n	80042d4 <SFU_BOOT_SM_DownloadNewUserFw+0x84>
        SFU_EXCPT_SetError(SFU_EXCPT_DECRYPT_ERR);
 80042ea:	2008      	movs	r0, #8
 80042ec:	e7f2      	b.n	80042d4 <SFU_BOOT_SM_DownloadNewUserFw+0x84>
 80042ee:	bf00      	nop
 80042f0:	0800b09d 	.word	0x0800b09d
 80042f4:	00122f11 	.word	0x00122f11
 80042f8:	0800ab9c 	.word	0x0800ab9c
 80042fc:	200018d0 	.word	0x200018d0
 8004300:	200010c4 	.word	0x200010c4

08004304 <SFU_BOOT_SM_CheckNewFwToDownload>:
{
 8004304:	b508      	push	{r3, lr}
  if (initialDeviceStatusCheck == 1U)
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <SFU_BOOT_SM_CheckNewFwToDownload+0x38>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d00b      	beq.n	8004326 <SFU_BOOT_SM_CheckNewFwToDownload+0x22>
    e_ret_status = SFU_SUCCESS;
 800430e:	490c      	ldr	r1, [pc, #48]	; (8004340 <SFU_BOOT_SM_CheckNewFwToDownload+0x3c>)
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_DOWNLOAD_NEW_USER_FW, SFU_STATE_VERIFY_USER_FW_STATUS);
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <SFU_BOOT_SM_CheckNewFwToDownload+0x40>)
 8004312:	785a      	ldrb	r2, [r3, #1]
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	4a09      	ldr	r2, [pc, #36]	; (8004340 <SFU_BOOT_SM_CheckNewFwToDownload+0x3c>)
 800431a:	4291      	cmp	r1, r2
 800431c:	bf0c      	ite	eq
 800431e:	2202      	moveq	r2, #2
 8004320:	2203      	movne	r2, #3
 8004322:	705a      	strb	r2, [r3, #1]
}
 8004324:	bd08      	pop	{r3, pc}
    TRACE("\r\n= [SBOOT] STATE: CHECK NEW FIRMWARE TO DOWNLOAD");
 8004326:	4808      	ldr	r0, [pc, #32]	; (8004348 <SFU_BOOT_SM_CheckNewFwToDownload+0x44>)
 8004328:	f005 fad2 	bl	80098d0 <iprintf>
    if (0U != BUTTON_PUSHED())
 800432c:	2000      	movs	r0, #0
 800432e:	f003 f9b1 	bl	8007694 <BSP_PB_GetState>
 8004332:	2800      	cmp	r0, #0
 8004334:	d0eb      	beq.n	800430e <SFU_BOOT_SM_CheckNewFwToDownload+0xa>
      e_ret_status = SFU_ERROR;
 8004336:	f641 71e1 	movw	r1, #8161	; 0x1fe1
 800433a:	e7e9      	b.n	8004310 <SFU_BOOT_SM_CheckNewFwToDownload+0xc>
 800433c:	20001784 	.word	0x20001784
 8004340:	00122f11 	.word	0x00122f11
 8004344:	200010c4 	.word	0x200010c4
 8004348:	0800b0cb 	.word	0x0800b0cb

0800434c <SFU_BOOT_SM_CheckStatusOnReset>:
{
 800434c:	b507      	push	{r0, r1, r2, lr}
  TRACE("\r\n= [SBOOT] STATE: CHECK STATUS ON RESET");
 800434e:	4817      	ldr	r0, [pc, #92]	; (80043ac <SFU_BOOT_SM_CheckStatusOnReset+0x60>)
 8004350:	f005 fabe 	bl	80098d0 <iprintf>
  * @param  None
  * @retval None
  */
static void SFU_BOOT_ManageResetSources(void)
{
  SFU_RESET_IdTypeDef e_wakeup_source_id = SFU_RESET_UNKNOWN;
 8004354:	2300      	movs	r3, #0

  /* Check the wakeup sources */
  SFU_LL_SECU_GetResetSources(&e_wakeup_source_id);
 8004356:	f10d 0007 	add.w	r0, sp, #7
  SFU_RESET_IdTypeDef e_wakeup_source_id = SFU_RESET_UNKNOWN;
 800435a:	f88d 3007 	strb.w	r3, [sp, #7]
  SFU_LL_SECU_GetResetSources(&e_wakeup_source_id);
 800435e:	f002 fe89 	bl	8007074 <SFU_LL_SECU_GetResetSources>
  switch (e_wakeup_source_id)
 8004362:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004366:	3b01      	subs	r3, #1
 8004368:	2b05      	cmp	r3, #5
 800436a:	d81c      	bhi.n	80043a6 <SFU_BOOT_SM_CheckStatusOnReset+0x5a>
 800436c:	e8df f003 	tbb	[pc, r3]
 8004370:	15131103 	.word	0x15131103
 8004374:	1917      	.short	0x1917
       * Please note that the example of reset causes handling below is only a basic example to illustrate the way the
       * RCC_CSR flags can be used to do so.
       */

    case SFU_RESET_WDG_RESET:
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by a Watchdog reset!");
 8004376:	480e      	ldr	r0, [pc, #56]	; (80043b0 <SFU_BOOT_SM_CheckStatusOnReset+0x64>)
         ...
      */
      break;

    default:
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Unknown reset source!");
 8004378:	f005 faaa 	bl	80098d0 <iprintf>
      */
      break;
  }

  /* Once the reset sources has been managed and a possible error has been set, clear the reset sources */
  SFU_LL_SECU_ClearResetSources();
 800437c:	f002 fea0 	bl	80070c0 <SFU_LL_SECU_ClearResetSources>
  SFU_SET_SM_CURR_STATE(SFU_STATE_CHECK_NEW_FW_TO_DOWNLOAD);
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <SFU_BOOT_SM_CheckStatusOnReset+0x68>)
 8004382:	785a      	ldrb	r2, [r3, #1]
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	2201      	movs	r2, #1
 800438a:	705a      	strb	r2, [r3, #1]
}
 800438c:	b003      	add	sp, #12
 800438e:	f85d fb04 	ldr.w	pc, [sp], #4
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a LowPower reset!");
 8004392:	4809      	ldr	r0, [pc, #36]	; (80043b8 <SFU_BOOT_SM_CheckStatusOnReset+0x6c>)
 8004394:	e7f0      	b.n	8004378 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a Hardware reset!");
 8004396:	4809      	ldr	r0, [pc, #36]	; (80043bc <SFU_BOOT_SM_CheckStatusOnReset+0x70>)
 8004398:	e7ee      	b.n	8004378 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a BOR reset!");
 800439a:	4809      	ldr	r0, [pc, #36]	; (80043c0 <SFU_BOOT_SM_CheckStatusOnReset+0x74>)
 800439c:	e7ec      	b.n	8004378 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a Software reset!");
 800439e:	4809      	ldr	r0, [pc, #36]	; (80043c4 <SFU_BOOT_SM_CheckStatusOnReset+0x78>)
 80043a0:	e7ea      	b.n	8004378 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Option Bytes reload!");
 80043a2:	4809      	ldr	r0, [pc, #36]	; (80043c8 <SFU_BOOT_SM_CheckStatusOnReset+0x7c>)
 80043a4:	e7e8      	b.n	8004378 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Unknown reset source!");
 80043a6:	4809      	ldr	r0, [pc, #36]	; (80043cc <SFU_BOOT_SM_CheckStatusOnReset+0x80>)
 80043a8:	e7e6      	b.n	8004378 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
 80043aa:	bf00      	nop
 80043ac:	0800b0fd 	.word	0x0800b0fd
 80043b0:	0800b126 	.word	0x0800b126
 80043b4:	200010c4 	.word	0x200010c4
 80043b8:	0800b165 	.word	0x0800b165
 80043bc:	0800b1a1 	.word	0x0800b1a1
 80043c0:	0800b1dd 	.word	0x0800b1dd
 80043c4:	0800b214 	.word	0x0800b214
 80043c8:	0800b250 	.word	0x0800b250
 80043cc:	0800b295 	.word	0x0800b295

080043d0 <SFU_BOOT_DeInit>:
{
 80043d0:	b538      	push	{r3, r4, r5, lr}
  if (SFU_EXCPT_DeInit() != SFU_SUCCESS)
 80043d2:	f000 fc6b 	bl	8004cac <SFU_EXCPT_DeInit>
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <SFU_BOOT_DeInit+0x28>)
 80043d8:	4298      	cmp	r0, r3
 80043da:	4605      	mov	r5, r0
 80043dc:	d108      	bne.n	80043f0 <SFU_BOOT_DeInit+0x20>
  if (SFU_LOADER_DeInit() != SFU_SUCCESS)
 80043de:	f002 f923 	bl	8006628 <SFU_LOADER_DeInit>
 80043e2:	42a8      	cmp	r0, r5
 80043e4:	4604      	mov	r4, r0
 80043e6:	d103      	bne.n	80043f0 <SFU_BOOT_DeInit+0x20>
  if (SFU_LL_DeInit() != SFU_SUCCESS)
 80043e8:	f002 fa96 	bl	8006918 <SFU_LL_DeInit>
 80043ec:	42a0      	cmp	r0, r4
 80043ee:	d001      	beq.n	80043f4 <SFU_BOOT_DeInit+0x24>
    return SFU_ERROR;
 80043f0:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 80043f4:	bd38      	pop	{r3, r4, r5, pc}
 80043f6:	bf00      	nop
 80043f8:	00122f11 	.word	0x00122f11

080043fc <SFU_BOOT_SM_VerifyUserFwSignature>:
{
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 80043fe:	4e33      	ldr	r6, [pc, #204]	; (80044cc <SFU_BOOT_SM_VerifyUserFwSignature+0xd0>)
  TRACE("\r\n= [SBOOT] STATE: VERIFY USER FW SIGNATURE");
 8004400:	4833      	ldr	r0, [pc, #204]	; (80044d0 <SFU_BOOT_SM_VerifyUserFwSignature+0xd4>)
 8004402:	f005 fa65 	bl	80098d0 <iprintf>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8004406:	6832      	ldr	r2, [r6, #0]
 8004408:	4b32      	ldr	r3, [pc, #200]	; (80044d4 <SFU_BOOT_SM_VerifyUserFwSignature+0xd8>)
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <SFU_BOOT_SM_VerifyUserFwSignature+0x16>
 800440e:	f000 fc2d 	bl	8004c6c <SFU_EXCPT_Security_Error>
  FLOW_CONTROL_INIT(uFlowProtectValue, FLOW_CTRL_INIT_VALUE);
 8004412:	f245 7376 	movw	r3, #22390	; 0x5776
 8004416:	6033      	str	r3, [r6, #0]
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 8004418:	f002 fd6c 	bl	8006ef4 <SFU_LL_SECU_CheckApplyStaticProtections>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 800441c:	6833      	ldr	r3, [r6, #0]
 800441e:	f5b3 5fff 	cmp.w	r3, #8160	; 0x1fe0
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 8004422:	4604      	mov	r4, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 8004424:	d001      	beq.n	800442a <SFU_BOOT_SM_VerifyUserFwSignature+0x2e>
 8004426:	f000 fc21 	bl	8004c6c <SFU_EXCPT_Security_Error>
  if (e_ret_status == SFU_SUCCESS)
 800442a:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <SFU_BOOT_SM_VerifyUserFwSignature+0xdc>)
 800442c:	429c      	cmp	r4, r3
 800442e:	d103      	bne.n	8004438 <SFU_BOOT_SM_VerifyUserFwSignature+0x3c>
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_THIRD_CONFIGURATION);
 8004430:	2002      	movs	r0, #2
 8004432:	f002 ffe5 	bl	8007400 <SFU_LL_SECU_CheckApplyRuntimeProtections>
 8004436:	4604      	mov	r4, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8004438:	6832      	ldr	r2, [r6, #0]
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <SFU_BOOT_SM_VerifyUserFwSignature+0xd8>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <SFU_BOOT_SM_VerifyUserFwSignature+0x48>
 8004440:	f000 fc14 	bl	8004c6c <SFU_EXCPT_Security_Error>
  if (e_ret_status != SFU_SUCCESS)
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <SFU_BOOT_SM_VerifyUserFwSignature+0xdc>)
 8004446:	4f25      	ldr	r7, [pc, #148]	; (80044dc <SFU_BOOT_SM_VerifyUserFwSignature+0xe0>)
 8004448:	429c      	cmp	r4, r3
 800444a:	d015      	beq.n	8004478 <SFU_BOOT_SM_VerifyUserFwSignature+0x7c>
    SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 800444c:	787b      	ldrb	r3, [r7, #1]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	703b      	strb	r3, [r7, #0]
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_EXECUTE_USER_FW, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8004452:	2309      	movs	r3, #9
 8004454:	e038      	b.n	80044c8 <SFU_BOOT_SM_VerifyUserFwSignature+0xcc>
          FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 8004456:	6872      	ldr	r2, [r6, #4]
 8004458:	f248 435a 	movw	r3, #33882	; 0x845a
 800445c:	429a      	cmp	r2, r3
 800445e:	d02c      	beq.n	80044ba <SFU_BOOT_SM_VerifyUserFwSignature+0xbe>
 8004460:	f000 fc04 	bl	8004c6c <SFU_EXCPT_Security_Error>
 8004464:	e029      	b.n	80044ba <SFU_BOOT_SM_VerifyUserFwSignature+0xbe>
        if (SFU_IMG_VerifyEmptyActiveSlot(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 8004466:	2001      	movs	r0, #1
 8004468:	f000 fe72 	bl	8005150 <SFU_IMG_VerifyEmptyActiveSlot>
 800446c:	42a0      	cmp	r0, r4
 800446e:	d024      	beq.n	80044ba <SFU_BOOT_SM_VerifyUserFwSignature+0xbe>
          (void)SFU_IMG_InvalidateCurrentFirmware(SLOT_ACTIVE_1 + i); /* If this fails we continue anyhow */
 8004470:	2001      	movs	r0, #1
 8004472:	f000 fe35 	bl	80050e0 <SFU_IMG_InvalidateCurrentFirmware>
 8004476:	e020      	b.n	80044ba <SFU_BOOT_SM_VerifyUserFwSignature+0xbe>
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 8004478:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <SFU_BOOT_SM_VerifyUserFwSignature+0xe4>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	b1eb      	cbz	r3, 80044ba <SFU_BOOT_SM_VerifyUserFwSignature+0xbe>
      if (SFU_SUCCESS == SFU_IMG_DetectFW(SLOT_ACTIVE_1 + i))
 800447e:	2001      	movs	r0, #1
 8004480:	f000 ff78 	bl	8005374 <SFU_IMG_DetectFW>
 8004484:	42a0      	cmp	r0, r4
 8004486:	d1ee      	bne.n	8004466 <SFU_BOOT_SM_VerifyUserFwSignature+0x6a>
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 8004488:	f245 7376 	movw	r3, #22390	; 0x5776
        e_ret_status = SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i);
 800448c:	2001      	movs	r0, #1
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 800448e:	6073      	str	r3, [r6, #4]
        e_ret_status = SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i);
 8004490:	f000 ff5a 	bl	8005348 <SFU_IMG_VerifyActiveImgMetadata>
        if (SFU_SUCCESS == e_ret_status)
 8004494:	42a0      	cmp	r0, r4
        e_ret_status = SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i);
 8004496:	4605      	mov	r5, r0
        if (SFU_SUCCESS == e_ret_status)
 8004498:	d10b      	bne.n	80044b2 <SFU_BOOT_SM_VerifyUserFwSignature+0xb6>
          e_ret_status = SFU_IMG_VerifyActiveImg(SLOT_ACTIVE_1 + i);
 800449a:	2001      	movs	r0, #1
 800449c:	f000 fe34 	bl	8005108 <SFU_IMG_VerifyActiveImg>
          if (SFU_SUCCESS == e_ret_status)
 80044a0:	42a0      	cmp	r0, r4
          e_ret_status = SFU_IMG_VerifyActiveImg(SLOT_ACTIVE_1 + i);
 80044a2:	4605      	mov	r5, r0
          if (SFU_SUCCESS == e_ret_status)
 80044a4:	d105      	bne.n	80044b2 <SFU_BOOT_SM_VerifyUserFwSignature+0xb6>
            e_ret_status = SFU_IMG_VerifyActiveSlot(SLOT_ACTIVE_1 + i);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f000 fe3e 	bl	8005128 <SFU_IMG_VerifyActiveSlot>
        if (SFU_SUCCESS != e_ret_status)
 80044ac:	42a0      	cmp	r0, r4
            e_ret_status = SFU_IMG_VerifyActiveSlot(SLOT_ACTIVE_1 + i);
 80044ae:	4605      	mov	r5, r0
        if (SFU_SUCCESS != e_ret_status)
 80044b0:	d0d1      	beq.n	8004456 <SFU_BOOT_SM_VerifyUserFwSignature+0x5a>
          (void)SFU_IMG_InvalidateCurrentFirmware(SLOT_ACTIVE_1 + i); /* If this fails we continue anyhow */
 80044b2:	2001      	movs	r0, #1
 80044b4:	f000 fe14 	bl	80050e0 <SFU_IMG_InvalidateCurrentFirmware>
 80044b8:	462c      	mov	r4, r5
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_EXECUTE_USER_FW, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 80044ba:	787b      	ldrb	r3, [r7, #1]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	703b      	strb	r3, [r7, #0]
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <SFU_BOOT_SM_VerifyUserFwSignature+0xdc>)
 80044c2:	429c      	cmp	r4, r3
 80044c4:	d1c5      	bne.n	8004452 <SFU_BOOT_SM_VerifyUserFwSignature+0x56>
 80044c6:	2306      	movs	r3, #6
 80044c8:	707b      	strb	r3, [r7, #1]
}
 80044ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044cc:	20001010 	.word	0x20001010
 80044d0:	0800b2db 	.word	0x0800b2db
 80044d4:	00014b55 	.word	0x00014b55
 80044d8:	00122f11 	.word	0x00122f11
 80044dc:	200010c4 	.word	0x200010c4
 80044e0:	0800ab9c 	.word	0x0800ab9c

080044e4 <SFU_BOOT_ForceReboot>:
{
 80044e4:	b508      	push	{r3, lr}
  TRACE("\r\n========= End of Execution ==========");
 80044e6:	4809      	ldr	r0, [pc, #36]	; (800450c <SFU_BOOT_ForceReboot+0x28>)
 80044e8:	f005 f9f2 	bl	80098d0 <iprintf>
  TRACE("\r\n\r\n\r\n");
 80044ec:	4808      	ldr	r0, [pc, #32]	; (8004510 <SFU_BOOT_ForceReboot+0x2c>)
 80044ee:	f005 fa8b 	bl	8009a08 <puts>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80044f2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80044f6:	4907      	ldr	r1, [pc, #28]	; (8004514 <SFU_BOOT_ForceReboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <SFU_BOOT_ForceReboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80044fa:	68ca      	ldr	r2, [r1, #12]
 80044fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004500:	4313      	orrs	r3, r2
 8004502:	60cb      	str	r3, [r1, #12]
 8004504:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004508:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800450a:	e7fd      	b.n	8004508 <SFU_BOOT_ForceReboot+0x24>
 800450c:	0800b307 	.word	0x0800b307
 8004510:	0800b32f 	.word	0x0800b32f
 8004514:	e000ed00 	.word	0xe000ed00
 8004518:	05fa0004 	.word	0x05fa0004

0800451c <SFU_BOOT_RunSecureBootService>:
{
 800451c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (SE_Startup() == SE_SUCCESS)
 800451e:	f7ff f8ad 	bl	800367c <SE_Startup>
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <SFU_BOOT_RunSecureBootService+0xf4>)
 8004524:	4298      	cmp	r0, r3
 8004526:	4604      	mov	r4, r0
 8004528:	d170      	bne.n	800460c <SFU_BOOT_RunSecureBootService+0xf0>
  (void) SFU_COM_Init();
 800452a:	f000 fb43 	bl	8004bb4 <SFU_COM_Init>
  if (SFU_LL_SECU_CheckApplyStaticProtections() == SFU_SUCCESS)
 800452e:	f002 fce1 	bl	8006ef4 <SFU_LL_SECU_CheckApplyStaticProtections>
 8004532:	4b38      	ldr	r3, [pc, #224]	; (8004614 <SFU_BOOT_RunSecureBootService+0xf8>)
 8004534:	4298      	cmp	r0, r3
 8004536:	4606      	mov	r6, r0
 8004538:	d005      	beq.n	8004546 <SFU_BOOT_RunSecureBootService+0x2a>
    TRACE("\r\n= [SBOOT] System Security Check failed! Rebooting...");
 800453a:	4837      	ldr	r0, [pc, #220]	; (8004618 <SFU_BOOT_RunSecureBootService+0xfc>)
 800453c:	f005 f9c8 	bl	80098d0 <iprintf>
      e_ret_code = SFU_BOOT_SECIPS_CFG_FAIL;
 8004540:	2001      	movs	r0, #1
}
 8004542:	b002      	add	sp, #8
 8004544:	bd70      	pop	{r4, r5, r6, pc}
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_INITIAL_CONFIGURATION);
 8004546:	2000      	movs	r0, #0
 8004548:	f002 ff5a 	bl	8007400 <SFU_LL_SECU_CheckApplyRuntimeProtections>
  if (SFU_BOOT_CheckApplySecurityProtections() != SFU_SUCCESS)
 800454c:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_INITIAL_CONFIGURATION);
 800454e:	4605      	mov	r5, r0
  if (SFU_BOOT_CheckApplySecurityProtections() != SFU_SUCCESS)
 8004550:	d1f3      	bne.n	800453a <SFU_BOOT_RunSecureBootService+0x1e>
    TRACE("\r\n= [SBOOT] System Security Check successfully passed. Starting...");
 8004552:	4832      	ldr	r0, [pc, #200]	; (800461c <SFU_BOOT_RunSecureBootService+0x100>)
 8004554:	f005 f9bc 	bl	80098d0 <iprintf>
  (void) BSP_LED_Init(SFU_STATUS_LED);
 8004558:	2001      	movs	r0, #1
 800455a:	f003 f80b 	bl	8007574 <BSP_LED_Init>
  BUTTON_INIT();
 800455e:	2100      	movs	r1, #0
 8004560:	4608      	mov	r0, r1
 8004562:	f003 f84b 	bl	80075fc <BSP_PB_Init>
  initialDeviceStatusCheck = 1U;
 8004566:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <SFU_BOOT_RunSecureBootService+0x104>)
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
  if (SFU_LL_Init() != SFU_SUCCESS)
 800456c:	f002 fa16 	bl	800699c <SFU_LL_Init>
 8004570:	42a8      	cmp	r0, r5
 8004572:	4606      	mov	r6, r0
 8004574:	d134      	bne.n	80045e0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_LL_FLASH_Init() != SFU_SUCCESS)
 8004576:	f002 faf1 	bl	8006b5c <SFU_LL_FLASH_Init>
 800457a:	42b0      	cmp	r0, r6
 800457c:	4605      	mov	r5, r0
 800457e:	d12f      	bne.n	80045e0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_COM_Init() != SFU_SUCCESS)
 8004580:	f000 fb18 	bl	8004bb4 <SFU_COM_Init>
 8004584:	42a8      	cmp	r0, r5
 8004586:	4606      	mov	r6, r0
 8004588:	d12a      	bne.n	80045e0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_LOADER_Init() != SFU_SUCCESS)
 800458a:	f002 f849 	bl	8006620 <SFU_LOADER_Init>
 800458e:	42b0      	cmp	r0, r6
 8004590:	4605      	mov	r5, r0
 8004592:	d125      	bne.n	80045e0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_EXCPT_Init() != SFU_SUCCESS)
 8004594:	f000 fb86 	bl	8004ca4 <SFU_EXCPT_Init>
 8004598:	42a8      	cmp	r0, r5
 800459a:	d121      	bne.n	80045e0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_IMG_InitImageHandling() != SFU_IMG_INIT_OK)
 800459c:	f000 fd46 	bl	800502c <SFU_IMG_InitImageHandling>
 80045a0:	b9f0      	cbnz	r0, 80045e0 <SFU_BOOT_RunSecureBootService+0xc4>
  TRACE("\r\n\r\n");
 80045a2:	4820      	ldr	r0, [pc, #128]	; (8004624 <SFU_BOOT_RunSecureBootService+0x108>)
 80045a4:	f005 fa30 	bl	8009a08 <puts>
  TRACE("\r\n======================================================================");
 80045a8:	481f      	ldr	r0, [pc, #124]	; (8004628 <SFU_BOOT_RunSecureBootService+0x10c>)
 80045aa:	f005 f991 	bl	80098d0 <iprintf>
  TRACE("\r\n=              (C) COPYRIGHT 2017 STMicroelectronics                 =");
 80045ae:	481f      	ldr	r0, [pc, #124]	; (800462c <SFU_BOOT_RunSecureBootService+0x110>)
 80045b0:	f005 f98e 	bl	80098d0 <iprintf>
  TRACE("\r\n=                                                                    =");
 80045b4:	481e      	ldr	r0, [pc, #120]	; (8004630 <SFU_BOOT_RunSecureBootService+0x114>)
 80045b6:	f005 f98b 	bl	80098d0 <iprintf>
  TRACE("\r\n=              Secure Boot and Secure Firmware Update                =");
 80045ba:	481e      	ldr	r0, [pc, #120]	; (8004634 <SFU_BOOT_RunSecureBootService+0x118>)
 80045bc:	f005 f988 	bl	80098d0 <iprintf>
  TRACE("\r\n======================================================================");
 80045c0:	4819      	ldr	r0, [pc, #100]	; (8004628 <SFU_BOOT_RunSecureBootService+0x10c>)
 80045c2:	f005 f985 	bl	80098d0 <iprintf>
  TRACE("\r\n\r\n");
 80045c6:	4817      	ldr	r0, [pc, #92]	; (8004624 <SFU_BOOT_RunSecureBootService+0x108>)
 80045c8:	f005 fa1e 	bl	8009a08 <puts>
  if (SE_Init(&e_se_status, SystemCoreClock) != SE_SUCCESS)
 80045cc:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <SFU_BOOT_RunSecureBootService+0x11c>)
 80045ce:	a801      	add	r0, sp, #4
 80045d0:	6819      	ldr	r1, [r3, #0]
 80045d2:	f7ff f82d 	bl	8003630 <SE_Init>
 80045d6:	42a0      	cmp	r0, r4
 80045d8:	d004      	beq.n	80045e4 <SFU_BOOT_RunSecureBootService+0xc8>
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION CRITICAL FAILURE!");
 80045da:	4818      	ldr	r0, [pc, #96]	; (800463c <SFU_BOOT_RunSecureBootService+0x120>)
 80045dc:	f005 f978 	bl	80098d0 <iprintf>
        e_ret_code = SFU_BOOT_INIT_FAIL;
 80045e0:	2002      	movs	r0, #2
 80045e2:	e7ae      	b.n	8004542 <SFU_BOOT_RunSecureBootService+0x26>
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION SUCCESSFUL");
 80045e4:	4816      	ldr	r0, [pc, #88]	; (8004640 <SFU_BOOT_RunSecureBootService+0x124>)
    if (SFU_BOOT_SecuritySafetyCheck() == SFU_SUCCESS)
 80045e6:	4c0b      	ldr	r4, [pc, #44]	; (8004614 <SFU_BOOT_RunSecureBootService+0xf8>)
      fnStateMachineFunction = fnStateMachineTable[(uint8_t)m_StateMachineContext.CurrState];
 80045e8:	4d16      	ldr	r5, [pc, #88]	; (8004644 <SFU_BOOT_RunSecureBootService+0x128>)
 80045ea:	4e17      	ldr	r6, [pc, #92]	; (8004648 <SFU_BOOT_RunSecureBootService+0x12c>)
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION SUCCESSFUL");
 80045ec:	f005 f970 	bl	80098d0 <iprintf>
  e_ret_status = SFU_LL_SECU_IWDG_Refresh();
 80045f0:	f002 fd70 	bl	80070d4 <SFU_LL_SECU_IWDG_Refresh>
    if (SFU_BOOT_SecuritySafetyCheck() == SFU_SUCCESS)
 80045f4:	42a0      	cmp	r0, r4
 80045f6:	d004      	beq.n	8004602 <SFU_BOOT_RunSecureBootService+0xe6>
  SFU_EXCPT_SetError(SFU_EXCPT_UNKNOWN);
 80045f8:	2019      	movs	r0, #25
 80045fa:	f000 fb05 	bl	8004c08 <SFU_EXCPT_SetError>
  SFU_BOOT_ForceReboot();
 80045fe:	f7ff ff71 	bl	80044e4 <SFU_BOOT_ForceReboot>
      fnStateMachineFunction = fnStateMachineTable[(uint8_t)m_StateMachineContext.CurrState];
 8004602:	786b      	ldrb	r3, [r5, #1]
      fnStateMachineFunction();
 8004604:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8004608:	4798      	blx	r3
 800460a:	e7f1      	b.n	80045f0 <SFU_BOOT_RunSecureBootService+0xd4>
    e_ret_code = SFU_BOOT_SECENG_INIT_FAIL;
 800460c:	2000      	movs	r0, #0
 800460e:	e798      	b.n	8004542 <SFU_BOOT_RunSecureBootService+0x26>
 8004610:	0012310f 	.word	0x0012310f
 8004614:	00122f11 	.word	0x00122f11
 8004618:	0800b335 	.word	0x0800b335
 800461c:	0800b36c 	.word	0x0800b36c
 8004620:	20001784 	.word	0x20001784
 8004624:	0800b331 	.word	0x0800b331
 8004628:	0800b3af 	.word	0x0800b3af
 800462c:	0800b3f8 	.word	0x0800b3f8
 8004630:	0800b441 	.word	0x0800b441
 8004634:	0800b48a 	.word	0x0800b48a
 8004638:	20001034 	.word	0x20001034
 800463c:	0800b4d3 	.word	0x0800b4d3
 8004640:	0800b50e 	.word	0x0800b50e
 8004644:	200010c4 	.word	0x200010c4
 8004648:	0800ab08 	.word	0x0800ab08

0800464c <SFU_BOOT_SM_RebootStateMachine>:
{
 800464c:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: REBOOT STATE MACHINE");
 800464e:	4803      	ldr	r0, [pc, #12]	; (800465c <SFU_BOOT_SM_RebootStateMachine+0x10>)
 8004650:	f005 f93e 	bl	80098d0 <iprintf>
  (void)SFU_BOOT_DeInit();
 8004654:	f7ff febc 	bl	80043d0 <SFU_BOOT_DeInit>
  SFU_BOOT_ForceReboot();
 8004658:	f7ff ff44 	bl	80044e4 <SFU_BOOT_ForceReboot>
 800465c:	0800b542 	.word	0x0800b542

08004660 <SFU_BOOT_SM_ResumeInstallNewUserFw>:
{
 8004660:	b510      	push	{r4, lr}
  e_ret_status = SFU_IMG_TriggerResumeInstallation(m_ActiveSlotToResume, m_DwlSlotToInstall);
 8004662:	4c09      	ldr	r4, [pc, #36]	; (8004688 <SFU_BOOT_SM_ResumeInstallNewUserFw+0x28>)
  TRACE("\r\n= [SBOOT] STATE: RESUME INSTALLATION OF NEW USER FIRMWARE");
 8004664:	4809      	ldr	r0, [pc, #36]	; (800468c <SFU_BOOT_SM_ResumeInstallNewUserFw+0x2c>)
 8004666:	f005 f933 	bl	80098d0 <iprintf>
  e_ret_status = SFU_IMG_TriggerResumeInstallation(m_ActiveSlotToResume, m_DwlSlotToInstall);
 800466a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800466e:	f001 fedb 	bl	8006428 <SFU_IMG_TriggerResumeInstallation>
  if (SFU_SUCCESS == e_ret_status)
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <SFU_BOOT_SM_ResumeInstallNewUserFw+0x30>)
 8004674:	4298      	cmp	r0, r3
 8004676:	d101      	bne.n	800467c <SFU_BOOT_SM_ResumeInstallNewUserFw+0x1c>
    SFU_BOOT_ForceReboot();
 8004678:	f7ff ff34 	bl	80044e4 <SFU_BOOT_ForceReboot>
    SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 800467c:	7863      	ldrb	r3, [r4, #1]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	7023      	strb	r3, [r4, #0]
 8004682:	2309      	movs	r3, #9
 8004684:	7063      	strb	r3, [r4, #1]
}
 8004686:	bd10      	pop	{r4, pc}
 8004688:	200010c4 	.word	0x200010c4
 800468c:	0800b56a 	.word	0x0800b56a
 8004690:	00122f11 	.word	0x00122f11

08004694 <SFU_BOOT_SM_ExecuteUserFw>:
{
 8004694:	b573      	push	{r0, r1, r4, r5, r6, lr}
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 8004696:	4c2f      	ldr	r4, [pc, #188]	; (8004754 <SFU_BOOT_SM_ExecuteUserFw+0xc0>)
  SE_StatusTypeDef e_se_status = SE_KO;
 8004698:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <SFU_BOOT_SM_ExecuteUserFw+0xc4>)
  TRACE("\r\n= [SBOOT] STATE: EXECUTE USER FIRMWARE");
 800469a:	4830      	ldr	r0, [pc, #192]	; (800475c <SFU_BOOT_SM_ExecuteUserFw+0xc8>)
  SE_StatusTypeDef e_se_status = SE_KO;
 800469c:	9301      	str	r3, [sp, #4]
  TRACE("\r\n= [SBOOT] STATE: EXECUTE USER FIRMWARE");
 800469e:	f005 f917 	bl	80098d0 <iprintf>
  (void) SFU_LL_SECU_IWDG_Refresh();
 80046a2:	f002 fd17 	bl	80070d4 <SFU_LL_SECU_IWDG_Refresh>
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	f248 435a 	movw	r3, #33882	; 0x845a
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <SFU_BOOT_SM_ExecuteUserFw+0x20>
 80046b0:	f000 fadc 	bl	8004c6c <SFU_EXCPT_Security_Error>
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 80046b4:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <SFU_BOOT_SM_ExecuteUserFw+0xcc>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b133      	cbz	r3, 80046c8 <SFU_BOOT_SM_ExecuteUserFw+0x34>
      if (SFU_SUCCESS == SFU_IMG_DetectFW(SLOT_ACTIVE_1 + i))
 80046ba:	2001      	movs	r0, #1
 80046bc:	f000 fe5a 	bl	8005374 <SFU_IMG_DetectFW>
 80046c0:	4b28      	ldr	r3, [pc, #160]	; (8004764 <SFU_BOOT_SM_ExecuteUserFw+0xd0>)
 80046c2:	4298      	cmp	r0, r3
 80046c4:	4605      	mov	r5, r0
 80046c6:	d024      	beq.n	8004712 <SFU_BOOT_SM_ExecuteUserFw+0x7e>
  e_ret_status = SFU_LL_FLASH_Config_Exe(m_ActiveSlotToExecute);
 80046c8:	4e27      	ldr	r6, [pc, #156]	; (8004768 <SFU_BOOT_SM_ExecuteUserFw+0xd4>)
 80046ca:	6930      	ldr	r0, [r6, #16]
 80046cc:	f002 fa70 	bl	8006bb0 <SFU_LL_FLASH_Config_Exe>
  if (e_ret_status != SFU_SUCCESS)
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <SFU_BOOT_SM_ExecuteUserFw+0xd0>)
 80046d2:	4298      	cmp	r0, r3
 80046d4:	d137      	bne.n	8004746 <SFU_BOOT_SM_ExecuteUserFw+0xb2>
    if (SE_LockRestrictServices(&e_se_status) == SE_SUCCESS)
 80046d6:	a801      	add	r0, sp, #4
 80046d8:	f7fe fff4 	bl	80036c4 <SE_LockRestrictServices>
 80046dc:	4b23      	ldr	r3, [pc, #140]	; (800476c <SFU_BOOT_SM_ExecuteUserFw+0xd8>)
 80046de:	4298      	cmp	r0, r3
 80046e0:	4605      	mov	r5, r0
 80046e2:	d135      	bne.n	8004750 <SFU_BOOT_SM_ExecuteUserFw+0xbc>
      if (SE_LockRestrictServices(&e_se_status) == SE_SUCCESS)
 80046e4:	a801      	add	r0, sp, #4
 80046e6:	f7fe ffed 	bl	80036c4 <SE_LockRestrictServices>
 80046ea:	42a8      	cmp	r0, r5
 80046ec:	d130      	bne.n	8004750 <SFU_BOOT_SM_ExecuteUserFw+0xbc>
        (void)SFU_BOOT_DeInit(); /* the return value is not checked, we will always try launching the UserApp */
 80046ee:	f7ff fe6f 	bl	80043d0 <SFU_BOOT_DeInit>
        FLOW_CONTROL_STEP(uFlowCryptoValue, FLOW_STEP_LOCK_SERVICE, FLOW_CTRL_LOCK_SERVICE);
 80046f2:	6862      	ldr	r2, [r4, #4]
 80046f4:	f482 4334 	eor.w	r3, r2, #46080	; 0xb400
 80046f8:	f083 03ab 	eor.w	r3, r3, #171	; 0xab
 80046fc:	6063      	str	r3, [r4, #4]
 80046fe:	f248 435a 	movw	r3, #33882	; 0x845a
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <SFU_BOOT_SM_ExecuteUserFw+0x76>
 8004706:	f000 fab1 	bl	8004c6c <SFU_EXCPT_Security_Error>
        e_ret_status = SFU_IMG_LaunchActiveImg(m_ActiveSlotToExecute);
 800470a:	6930      	ldr	r0, [r6, #16]
 800470c:	f000 fd52 	bl	80051b4 <SFU_IMG_LaunchActiveImg>
        while (1 == 1)
 8004710:	e7fe      	b.n	8004710 <SFU_BOOT_SM_ExecuteUserFw+0x7c>
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 8004712:	f245 7376 	movw	r3, #22390	; 0x5776
        if (SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 8004716:	2001      	movs	r0, #1
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 8004718:	6063      	str	r3, [r4, #4]
        if (SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 800471a:	f000 fe15 	bl	8005348 <SFU_IMG_VerifyActiveImgMetadata>
 800471e:	42a8      	cmp	r0, r5
 8004720:	d001      	beq.n	8004726 <SFU_BOOT_SM_ExecuteUserFw+0x92>
          SFU_EXCPT_Security_Error();
 8004722:	f000 faa3 	bl	8004c6c <SFU_EXCPT_Security_Error>
        if (SFU_IMG_ControlActiveImgTag(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 8004726:	2001      	movs	r0, #1
 8004728:	f000 fd24 	bl	8005174 <SFU_IMG_ControlActiveImgTag>
 800472c:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <SFU_BOOT_SM_ExecuteUserFw+0xd0>)
 800472e:	4298      	cmp	r0, r3
 8004730:	d001      	beq.n	8004736 <SFU_BOOT_SM_ExecuteUserFw+0xa2>
          SFU_EXCPT_Security_Error();
 8004732:	f000 fa9b 	bl	8004c6c <SFU_EXCPT_Security_Error>
        FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 8004736:	6862      	ldr	r2, [r4, #4]
 8004738:	f248 435a 	movw	r3, #33882	; 0x845a
 800473c:	429a      	cmp	r2, r3
 800473e:	d0c3      	beq.n	80046c8 <SFU_BOOT_SM_ExecuteUserFw+0x34>
 8004740:	f000 fa94 	bl	8004c6c <SFU_EXCPT_Security_Error>
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
 8004744:	e7c0      	b.n	80046c8 <SFU_BOOT_SM_ExecuteUserFw+0x34>
    SFU_EXCPT_SetError(SFU_EXCPT_FLASH_CFG_ERR);
 8004746:	200b      	movs	r0, #11
        SFU_EXCPT_SetError(SFU_EXCPT_LOCK_SE_SERVICES_ERR);
 8004748:	f000 fa5e 	bl	8004c08 <SFU_EXCPT_SetError>
        SFU_BOOT_ForceReboot();
 800474c:	f7ff feca 	bl	80044e4 <SFU_BOOT_ForceReboot>
        SFU_EXCPT_SetError(SFU_EXCPT_LOCK_SE_SERVICES_ERR);
 8004750:	2004      	movs	r0, #4
 8004752:	e7f9      	b.n	8004748 <SFU_BOOT_SM_ExecuteUserFw+0xb4>
 8004754:	20001010 	.word	0x20001010
 8004758:	0013023d 	.word	0x0013023d
 800475c:	0800b5a6 	.word	0x0800b5a6
 8004760:	0800ab9c 	.word	0x0800ab9c
 8004764:	00122f11 	.word	0x00122f11
 8004768:	200010c4 	.word	0x200010c4
 800476c:	0012310f 	.word	0x0012310f

08004770 <SFU_BOOT_SM_InstallNewUserFw>:
{
 8004770:	b538      	push	{r3, r4, r5, lr}
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8004772:	4c20      	ldr	r4, [pc, #128]	; (80047f4 <SFU_BOOT_SM_InstallNewUserFw+0x84>)
  TRACE("\r\n= [SBOOT] STATE: INSTALL NEW USER FIRMWARE ");
 8004774:	4820      	ldr	r0, [pc, #128]	; (80047f8 <SFU_BOOT_SM_InstallNewUserFw+0x88>)
 8004776:	f005 f8ab 	bl	80098d0 <iprintf>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <SFU_BOOT_SM_InstallNewUserFw+0x8c>)
 800477e:	429a      	cmp	r2, r3
 8004780:	d001      	beq.n	8004786 <SFU_BOOT_SM_InstallNewUserFw+0x16>
 8004782:	f000 fa73 	bl	8004c6c <SFU_EXCPT_Security_Error>
  FLOW_CONTROL_INIT(uFlowProtectValue, FLOW_CTRL_INIT_VALUE);
 8004786:	f245 7376 	movw	r3, #22390	; 0x5776
 800478a:	6023      	str	r3, [r4, #0]
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 800478c:	f002 fbb2 	bl	8006ef4 <SFU_LL_SECU_CheckApplyStaticProtections>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	f5b3 5fff 	cmp.w	r3, #8160	; 0x1fe0
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 8004796:	4605      	mov	r5, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 8004798:	d001      	beq.n	800479e <SFU_BOOT_SM_InstallNewUserFw+0x2e>
 800479a:	f000 fa67 	bl	8004c6c <SFU_EXCPT_Security_Error>
  if (e_ret_status == SFU_SUCCESS)
 800479e:	4b18      	ldr	r3, [pc, #96]	; (8004800 <SFU_BOOT_SM_InstallNewUserFw+0x90>)
 80047a0:	429d      	cmp	r5, r3
 80047a2:	d103      	bne.n	80047ac <SFU_BOOT_SM_InstallNewUserFw+0x3c>
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_SECOND_CONFIGURATION);
 80047a4:	2001      	movs	r0, #1
 80047a6:	f002 fe2b 	bl	8007400 <SFU_LL_SECU_CheckApplyRuntimeProtections>
 80047aa:	4605      	mov	r5, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <SFU_BOOT_SM_InstallNewUserFw+0x8c>)
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <SFU_BOOT_SM_InstallNewUserFw+0x48>
 80047b4:	f000 fa5a 	bl	8004c6c <SFU_EXCPT_Security_Error>
  if (e_ret_status != SFU_SUCCESS)
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <SFU_BOOT_SM_InstallNewUserFw+0x90>)
 80047ba:	4c12      	ldr	r4, [pc, #72]	; (8004804 <SFU_BOOT_SM_InstallNewUserFw+0x94>)
 80047bc:	429d      	cmp	r5, r3
 80047be:	d005      	beq.n	80047cc <SFU_BOOT_SM_InstallNewUserFw+0x5c>
    SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 80047c0:	7863      	ldrb	r3, [r4, #1]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	7023      	strb	r3, [r4, #0]
 80047c6:	2309      	movs	r3, #9
 80047c8:	7063      	strb	r3, [r4, #1]
}
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
  e_ret_status = SFU_IMG_CheckCandidateVersion(m_DwlSlotToInstall);
 80047cc:	68e0      	ldr	r0, [r4, #12]
 80047ce:	f000 fe0f 	bl	80053f0 <SFU_IMG_CheckCandidateVersion>
  if (SFU_SUCCESS != e_ret_status)
 80047d2:	42a8      	cmp	r0, r5
    (void) SFU_IMG_EraseDownloadedImg(m_DwlSlotToInstall);
 80047d4:	68e0      	ldr	r0, [r4, #12]
  if (SFU_SUCCESS != e_ret_status)
 80047d6:	d002      	beq.n	80047de <SFU_BOOT_SM_InstallNewUserFw+0x6e>
    (void) SFU_IMG_EraseDownloadedImg(m_DwlSlotToInstall);
 80047d8:	f001 fcf2 	bl	80061c0 <SFU_IMG_EraseDownloadedImg>
  if (SFU_SUCCESS == e_ret_status)
 80047dc:	e7f0      	b.n	80047c0 <SFU_BOOT_SM_InstallNewUserFw+0x50>
    e_ret_status = SFU_IMG_CheckCandidateVersion(m_DwlSlotToInstall);
 80047de:	f000 fe07 	bl	80053f0 <SFU_IMG_CheckCandidateVersion>
  if (SFU_SUCCESS == e_ret_status)
 80047e2:	42a8      	cmp	r0, r5
 80047e4:	d1ec      	bne.n	80047c0 <SFU_BOOT_SM_InstallNewUserFw+0x50>
    e_ret_status = SFU_IMG_TriggerImageInstallation(m_DwlSlotToInstall);
 80047e6:	68e0      	ldr	r0, [r4, #12]
 80047e8:	f001 fd3a 	bl	8006260 <SFU_IMG_TriggerImageInstallation>
  if (SFU_SUCCESS == e_ret_status)
 80047ec:	42a8      	cmp	r0, r5
 80047ee:	d1e7      	bne.n	80047c0 <SFU_BOOT_SM_InstallNewUserFw+0x50>
    SFU_BOOT_ForceReboot();
 80047f0:	f7ff fe78 	bl	80044e4 <SFU_BOOT_ForceReboot>
 80047f4:	20001010 	.word	0x20001010
 80047f8:	0800b5cf 	.word	0x0800b5cf
 80047fc:	00014b55 	.word	0x00014b55
 8004800:	00122f11 	.word	0x00122f11
 8004804:	200010c4 	.word	0x200010c4

08004808 <HAL_RTCEx_Tamper2EventCallback>:
  * @retval None
  */
void SFU_CALLBACK_ANTITAMPER(RTC_HandleTypeDef *hrtc)
{
  UNUSED(hrtc);
  SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_TAMPERING_FAULT);
 8004808:	2003      	movs	r0, #3
 800480a:	f000 ba0b 	b.w	8004c24 <SFU_EXCPT_IrqExceptionHandler>

0800480e <MemManage_Handler>:
  * @param  None
  * @retval None
  */
void SFU_CALLBACK_MEMORYFAULT(void)
{
  SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_MEMORY_FAULT);
 800480e:	2001      	movs	r0, #1
 8004810:	f000 ba08 	b.w	8004c24 <SFU_EXCPT_IrqExceptionHandler>

08004814 <SFU_COM_Serial_PutByte>:
  * @brief  Transmit a byte to the COM Port.
  * @param  uParam: The byte to be sent.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_Serial_PutByte(uint8_t uParam)
{
 8004814:	b507      	push	{r0, r1, r2, lr}
  return SFU_LL_UART_Transmit(&uParam, 1U, SFU_COM_LOADER_SERIAL_TIME_OUT);
 8004816:	2264      	movs	r2, #100	; 0x64
{
 8004818:	f88d 0007 	strb.w	r0, [sp, #7]
  return SFU_LL_UART_Transmit(&uParam, 1U, SFU_COM_LOADER_SERIAL_TIME_OUT);
 800481c:	2101      	movs	r1, #1
 800481e:	f10d 0007 	add.w	r0, sp, #7
 8004822:	f002 f8e9 	bl	80069f8 <SFU_LL_UART_Transmit>
}
 8004826:	b003      	add	sp, #12
 8004828:	f85d fb04 	ldr.w	pc, [sp], #4

0800482c <SFU_COM_YMODEM_Receive>:
{
 800482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004830:	b08b      	sub	sp, #44	; 0x2c
  if ((peCOMStatus == NULL) || (puSize == NULL))
 8004832:	4605      	mov	r5, r0
{
 8004834:	9102      	str	r1, [sp, #8]
  if ((peCOMStatus == NULL) || (puSize == NULL))
 8004836:	b920      	cbnz	r0, 8004842 <SFU_COM_YMODEM_Receive+0x16>
                      return SFU_ERROR;
 8004838:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 800483c:	b00b      	add	sp, #44	; 0x2c
 800483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((peCOMStatus == NULL) || (puSize == NULL))
 8004842:	9b02      	ldr	r3, [sp, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f7      	beq.n	8004838 <SFU_COM_YMODEM_Receive+0xc>
  *peCOMStatus = SFU_COM_YMODEM_OK;
 8004848:	2400      	movs	r4, #0
        break;
      default:
        status = HAL_ERROR;
        break;
    }
    *pData = char1;
 800484a:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8004aa8 <SFU_COM_YMODEM_Receive+0x27c>
  *peCOMStatus = SFU_COM_YMODEM_OK;
 800484e:	7004      	strb	r4, [r0, #0]
  uint32_t session_begin = 0U;
 8004850:	9401      	str	r4, [sp, #4]
  uint32_t errors = 0U;
 8004852:	4626      	mov	r6, r4
  if (eRetStatus == SFU_SUCCESS)
 8004854:	4f92      	ldr	r7, [pc, #584]	; (8004aa0 <SFU_COM_YMODEM_Receive+0x274>)
{
 8004856:	f04f 0900 	mov.w	r9, #0
 800485a:	e133      	b.n	8004ac4 <SFU_COM_YMODEM_Receive+0x298>
    switch (char1)
 800485c:	2b61      	cmp	r3, #97	; 0x61
 800485e:	d03b      	beq.n	80048d8 <SFU_COM_YMODEM_Receive+0xac>
 8004860:	2b72      	cmp	r3, #114	; 0x72
 8004862:	d01e      	beq.n	80048a2 <SFU_COM_YMODEM_Receive+0x76>
        status = HAL_BUSY;
 8004864:	2b41      	cmp	r3, #65	; 0x41
 8004866:	bf14      	ite	ne
 8004868:	f04f 0b01 	movne.w	fp, #1
 800486c:	f04f 0b02 	moveq.w	fp, #2
  uint32_t packet_size = 0U;
 8004870:	f04f 0a00 	mov.w	sl, #0
 8004874:	e149      	b.n	8004b0a <SFU_COM_YMODEM_Receive+0x2de>
        if ((SFU_LL_UART_Receive(&char1, 1U, uTimeout) == SFU_SUCCESS) && (char1 == SFU_COM_YMODEM_CA))
 8004876:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800487a:	2101      	movs	r1, #1
 800487c:	f10d 0013 	add.w	r0, sp, #19
 8004880:	f002 f8ce 	bl	8006a20 <SFU_LL_UART_Receive>
 8004884:	42b8      	cmp	r0, r7
 8004886:	d12a      	bne.n	80048de <SFU_COM_YMODEM_Receive+0xb2>
 8004888:	f89d 3013 	ldrb.w	r3, [sp, #19]
    status = HAL_OK;
 800488c:	2b18      	cmp	r3, #24
 800488e:	bf15      	itete	ne
 8004890:	f04f 0b01 	movne.w	fp, #1
 8004894:	f04f 0b00 	moveq.w	fp, #0
 8004898:	f04f 0a00 	movne.w	sl, #0
 800489c:	f04f 0a02 	moveq.w	sl, #2
 80048a0:	e133      	b.n	8004b0a <SFU_COM_YMODEM_Receive+0x2de>
        (void) SFU_LL_UART_Receive(&char1, 1U, uTimeout);             /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 80048a2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80048a6:	2101      	movs	r1, #1
 80048a8:	f10d 0013 	add.w	r0, sp, #19
 80048ac:	f002 f8b8 	bl	8006a20 <SFU_LL_UART_Receive>
        (void) SFU_LL_UART_Receive(&char1, 1U, uTimeout);
 80048b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80048b4:	2101      	movs	r1, #1
 80048b6:	f10d 0013 	add.w	r0, sp, #19
 80048ba:	f002 f8b1 	bl	8006a20 <SFU_LL_UART_Receive>
    status = HAL_OK;
 80048be:	f04f 0b00 	mov.w	fp, #0
        packet_size = 3U;
 80048c2:	f04f 0a03 	mov.w	sl, #3
        break;
 80048c6:	e120      	b.n	8004b0a <SFU_COM_YMODEM_Receive+0x2de>
    status = HAL_OK;
 80048c8:	f04f 0b00 	mov.w	fp, #0
        packet_size = SFU_COM_YMODEM_PACKET_1K_SIZE;
 80048cc:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80048d0:	e11b      	b.n	8004b0a <SFU_COM_YMODEM_Receive+0x2de>
    status = HAL_OK;
 80048d2:	f04f 0b00 	mov.w	fp, #0
 80048d6:	e7cb      	b.n	8004870 <SFU_COM_YMODEM_Receive+0x44>
        status = HAL_BUSY;
 80048d8:	f04f 0b02 	mov.w	fp, #2
 80048dc:	e7c8      	b.n	8004870 <SFU_COM_YMODEM_Receive+0x44>
          status = HAL_ERROR;
 80048de:	f04f 0b01 	mov.w	fp, #1
 80048e2:	e7c5      	b.n	8004870 <SFU_COM_YMODEM_Receive+0x44>
      switch (ReceivePacket(m_aPacketData, &packet_length, SFU_COM_YMODEM_DOWNLOAD_TIMEOUT))
 80048e4:	f1bb 0f00 	cmp.w	fp, #0
 80048e8:	d012      	beq.n	8004910 <SFU_COM_YMODEM_Receive+0xe4>
 80048ea:	f1bb 0f02 	cmp.w	fp, #2
 80048ee:	f000 80dd 	beq.w	8004aac <SFU_COM_YMODEM_Receive+0x280>
          if (session_begin > 0U)
 80048f2:	9b01      	ldr	r3, [sp, #4]
 80048f4:	b103      	cbz	r3, 80048f8 <SFU_COM_YMODEM_Receive+0xcc>
            errors ++;
 80048f6:	3601      	adds	r6, #1
          if (errors > SFU_COM_YMODEM_MAX_ERRORS)
 80048f8:	2e03      	cmp	r6, #3
 80048fa:	f240 814a 	bls.w	8004b92 <SFU_COM_YMODEM_Receive+0x366>
            (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 80048fe:	2018      	movs	r0, #24
 8004900:	f7ff ff88 	bl	8004814 <SFU_COM_Serial_PutByte>
            (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 8004904:	2018      	movs	r0, #24
 8004906:	f7ff ff85 	bl	8004814 <SFU_COM_Serial_PutByte>
            *peCOMStatus = SFU_COM_YMODEM_ABORT;
 800490a:	2302      	movs	r3, #2
 800490c:	702b      	strb	r3, [r5, #0]
 800490e:	e0d5      	b.n	8004abc <SFU_COM_YMODEM_Receive+0x290>
          switch (packet_length)
 8004910:	f1ba 0f02 	cmp.w	sl, #2
 8004914:	d010      	beq.n	8004938 <SFU_COM_YMODEM_Receive+0x10c>
 8004916:	f1ba 0f03 	cmp.w	sl, #3
 800491a:	d012      	beq.n	8004942 <SFU_COM_YMODEM_Receive+0x116>
 800491c:	f1ba 0f00 	cmp.w	sl, #0
 8004920:	f040 8124 	bne.w	8004b6c <SFU_COM_YMODEM_Receive+0x340>
              (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8004924:	2006      	movs	r0, #6
 8004926:	f7ff ff75 	bl	8004814 <SFU_COM_Serial_PutByte>
              *puSize = filesize;
 800492a:	9b02      	ldr	r3, [sp, #8]
 800492c:	4656      	mov	r6, sl
 800492e:	601c      	str	r4, [r3, #0]
  while ((session_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 8004930:	782b      	ldrb	r3, [r5, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d08e      	beq.n	8004854 <SFU_COM_YMODEM_Receive+0x28>
 8004936:	e099      	b.n	8004a6c <SFU_COM_YMODEM_Receive+0x240>
              (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8004938:	2006      	movs	r0, #6
 800493a:	f7ff ff6b 	bl	8004814 <SFU_COM_Serial_PutByte>
              *peCOMStatus = SFU_COM_YMODEM_ABORT;
 800493e:	f885 a000 	strb.w	sl, [r5]
              break;
 8004942:	465e      	mov	r6, fp
 8004944:	e0ba      	b.n	8004abc <SFU_COM_YMODEM_Receive+0x290>
                      i++;
 8004946:	3101      	adds	r1, #1
                    while ((*file_ptr != 0U) && (i < SFU_COM_YMODEM_FILE_NAME_LENGTH))
 8004948:	f812 3b01 	ldrb.w	r3, [r2], #1
 800494c:	b113      	cbz	r3, 8004954 <SFU_COM_YMODEM_Receive+0x128>
 800494e:	2940      	cmp	r1, #64	; 0x40
 8004950:	d1f9      	bne.n	8004946 <SFU_COM_YMODEM_Receive+0x11a>
 8004952:	2300      	movs	r3, #0
 8004954:	a805      	add	r0, sp, #20
 8004956:	e001      	b.n	800495c <SFU_COM_YMODEM_Receive+0x130>
                      file_size[i] = *file_ptr;
 8004958:	5419      	strb	r1, [r3, r0]
                      i++;
 800495a:	3301      	adds	r3, #1
                    while ((*file_ptr != (uint8_t) ' ') && (i < SFU_COM_YMODEM_FILE_SIZE_LENGTH))
 800495c:	5cd1      	ldrb	r1, [r2, r3]
 800495e:	2920      	cmp	r1, #32
 8004960:	d001      	beq.n	8004966 <SFU_COM_YMODEM_Receive+0x13a>
 8004962:	2b10      	cmp	r3, #16
 8004964:	d1f8      	bne.n	8004958 <SFU_COM_YMODEM_Receive+0x12c>
                    file_size[i] = (uint8_t) '\0';
 8004966:	aa0a      	add	r2, sp, #40	; 0x28
 8004968:	4413      	add	r3, r2
 800496a:	2600      	movs	r6, #0
 800496c:	f803 6c14 	strb.w	r6, [r3, #-20]
  if ((pInputStr[0] == (uint8_t)'0') && ((pInputStr[1] == (uint8_t)'x') || (pInputStr[1] == (uint8_t)'X')))
 8004970:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004974:	2b30      	cmp	r3, #48	; 0x30
 8004976:	d140      	bne.n	80049fa <SFU_COM_YMODEM_Receive+0x1ce>
 8004978:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800497c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004980:	2b58      	cmp	r3, #88	; 0x58
 8004982:	d13a      	bne.n	80049fa <SFU_COM_YMODEM_Receive+0x1ce>
 8004984:	2102      	movs	r1, #2
 8004986:	e00f      	b.n	80049a8 <SFU_COM_YMODEM_Receive+0x17c>
        digit = CONVERTHEX(pInputStr[i]);
 8004988:	2b09      	cmp	r3, #9
 800498a:	d908      	bls.n	800499e <SFU_COM_YMODEM_Receive+0x172>
 800498c:	f1ac 0341 	sub.w	r3, ip, #65	; 0x41
 8004990:	2b05      	cmp	r3, #5
 8004992:	bf94      	ite	ls
 8004994:	f1ac 0337 	subls.w	r3, ip, #55	; 0x37
 8004998:	f1ac 0357 	subhi.w	r3, ip, #87	; 0x57
 800499c:	b2db      	uxtb	r3, r3
      i++;
 800499e:	3101      	adds	r1, #1
    while ((i < 11U) && (pInputStr[i] != (uint8_t)'\0'))
 80049a0:	290b      	cmp	r1, #11
        val = (val << 4U) + digit;
 80049a2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    while ((i < 11U) && (pInputStr[i] != (uint8_t)'\0'))
 80049a6:	d00e      	beq.n	80049c6 <SFU_COM_YMODEM_Receive+0x19a>
 80049a8:	f811 c000 	ldrb.w	ip, [r1, r0]
 80049ac:	f1bc 0f00 	cmp.w	ip, #0
 80049b0:	d009      	beq.n	80049c6 <SFU_COM_YMODEM_Receive+0x19a>
      if (ISVALIDHEX(pInputStr[i]))
 80049b2:	f1ac 0230 	sub.w	r2, ip, #48	; 0x30
 80049b6:	b2d3      	uxtb	r3, r2
 80049b8:	f02c 0220 	bic.w	r2, ip, #32
 80049bc:	3a41      	subs	r2, #65	; 0x41
 80049be:	2a05      	cmp	r2, #5
 80049c0:	d9e2      	bls.n	8004988 <SFU_COM_YMODEM_Receive+0x15c>
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	d9eb      	bls.n	800499e <SFU_COM_YMODEM_Receive+0x172>
    if (pInputStr[i] == (uint8_t)'\0')
 80049c6:	ab0a      	add	r3, sp, #40	; 0x28
 80049c8:	4419      	add	r1, r3
 80049ca:	f811 3c14 	ldrb.w	r3, [r1, #-20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf08      	it	eq
 80049d2:	4634      	moveq	r4, r6
                    if (SFU_COM_YMODEM_HeaderPktRxCpltCallback((uint32_t) filesize) == SFU_SUCCESS)
 80049d4:	4620      	mov	r0, r4
 80049d6:	f001 fe79 	bl	80066cc <SFU_COM_YMODEM_HeaderPktRxCpltCallback>
 80049da:	42b8      	cmp	r0, r7
 80049dc:	d131      	bne.n	8004a42 <SFU_COM_YMODEM_Receive+0x216>
                      (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 80049de:	2006      	movs	r0, #6
 80049e0:	f7ff ff18 	bl	8004814 <SFU_COM_Serial_PutByte>
                      (void) SFU_LL_UART_Flush();
 80049e4:	f002 f830 	bl	8006a48 <SFU_LL_UART_Flush>
                      (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CRC16);
 80049e8:	2043      	movs	r0, #67	; 0x43
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 80049ea:	f7ff ff13 	bl	8004814 <SFU_COM_Serial_PutByte>
                session_begin = 1;
 80049ee:	2301      	movs	r3, #1
                packets_received ++;
 80049f0:	f109 0901 	add.w	r9, r9, #1
                session_begin = 1;
 80049f4:	9301      	str	r3, [sp, #4]
          errors = 0U;
 80049f6:	2600      	movs	r6, #0
    while ((file_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 80049f8:	e060      	b.n	8004abc <SFU_COM_YMODEM_Receive+0x290>
 80049fa:	2300      	movs	r3, #0
 80049fc:	4619      	mov	r1, r3
        val = (val * 10U) + digit;
 80049fe:	260a      	movs	r6, #10
      if (pInputStr[i] == (uint8_t)'\0')
 8004a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a04:	b12a      	cbz	r2, 8004a12 <SFU_COM_YMODEM_Receive+0x1e6>
      else if (((pInputStr[i] == (uint8_t)'k') || (pInputStr[i] == (uint8_t)'K')) && (i > 0U))
 8004a06:	2a6b      	cmp	r2, #107	; 0x6b
 8004a08:	d001      	beq.n	8004a0e <SFU_COM_YMODEM_Receive+0x1e2>
 8004a0a:	2a4b      	cmp	r2, #75	; 0x4b
 8004a0c:	d104      	bne.n	8004a18 <SFU_COM_YMODEM_Receive+0x1ec>
 8004a0e:	b159      	cbz	r1, 8004a28 <SFU_COM_YMODEM_Receive+0x1fc>
        val = val << 10U;
 8004a10:	029b      	lsls	r3, r3, #10
        res = 1U;
 8004a12:	461c      	mov	r4, r3
        res = 1U;
 8004a14:	2201      	movs	r2, #1
 8004a16:	e00e      	b.n	8004a36 <SFU_COM_YMODEM_Receive+0x20a>
      else if (((pInputStr[i] == (uint8_t)'m') || (pInputStr[i] == (uint8_t)'M')) && (i > 0U))
 8004a18:	f002 0cdf 	and.w	ip, r2, #223	; 0xdf
 8004a1c:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
 8004a20:	d102      	bne.n	8004a28 <SFU_COM_YMODEM_Receive+0x1fc>
 8004a22:	b109      	cbz	r1, 8004a28 <SFU_COM_YMODEM_Receive+0x1fc>
        val = val << 20U;
 8004a24:	051b      	lsls	r3, r3, #20
        res = 1U;
 8004a26:	e7f4      	b.n	8004a12 <SFU_COM_YMODEM_Receive+0x1e6>
      else if (ISVALIDDEC(pInputStr[i]))
 8004a28:	3a30      	subs	r2, #48	; 0x30
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	2a09      	cmp	r2, #9
 8004a2e:	d8d1      	bhi.n	80049d4 <SFU_COM_YMODEM_Receive+0x1a8>
        val = (val * 10U) + digit;
 8004a30:	fb06 2303 	mla	r3, r6, r3, r2
 8004a34:	2200      	movs	r2, #0
      i++;
 8004a36:	3101      	adds	r1, #1
    while ((i < 11U) && (res != 1U))
 8004a38:	290b      	cmp	r1, #11
 8004a3a:	d0cb      	beq.n	80049d4 <SFU_COM_YMODEM_Receive+0x1a8>
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	d0df      	beq.n	8004a00 <SFU_COM_YMODEM_Receive+0x1d4>
 8004a40:	e7c8      	b.n	80049d4 <SFU_COM_YMODEM_Receive+0x1a8>
                      tmp = SFU_COM_YMODEM_CA;
 8004a42:	2318      	movs	r3, #24
                      (void) SFU_LL_UART_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 8004a44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a48:	2101      	movs	r1, #1
 8004a4a:	f10d 0013 	add.w	r0, sp, #19
                      tmp = SFU_COM_YMODEM_CA;
 8004a4e:	f88d 3013 	strb.w	r3, [sp, #19]
                      (void) SFU_LL_UART_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 8004a52:	f001 ffd1 	bl	80069f8 <SFU_LL_UART_Transmit>
                      (void) SFU_LL_UART_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 8004a56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	f10d 0013 	add.w	r0, sp, #19
 8004a60:	f001 ffca 	bl	80069f8 <SFU_LL_UART_Transmit>
 8004a64:	e6e8      	b.n	8004838 <SFU_COM_YMODEM_Receive+0xc>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8004a66:	2006      	movs	r0, #6
 8004a68:	f7ff fed4 	bl	8004814 <SFU_COM_Serial_PutByte>
  (void) BSP_LED_Off(SFU_STATUS_LED);
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f002 fda9 	bl	80075c4 <BSP_LED_Off>
  if (*peCOMStatus == SFU_COM_YMODEM_OK)
 8004a72:	782b      	ldrb	r3, [r5, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f47f aedf 	bne.w	8004838 <SFU_COM_YMODEM_Receive+0xc>
    return SFU_SUCCESS;
 8004a7a:	4809      	ldr	r0, [pc, #36]	; (8004aa0 <SFU_COM_YMODEM_Receive+0x274>)
 8004a7c:	e6de      	b.n	800483c <SFU_COM_YMODEM_Receive+0x10>
                  if (SFU_COM_YMODEM_DataPktRxCpltCallback(&m_aPacketData[SFU_COM_YMODEM_PACKET_DATA_INDEX],
 8004a7e:	4809      	ldr	r0, [pc, #36]	; (8004aa4 <SFU_COM_YMODEM_Receive+0x278>)
 8004a80:	4651      	mov	r1, sl
 8004a82:	f001 fe39 	bl	80066f8 <SFU_COM_YMODEM_DataPktRxCpltCallback>
 8004a86:	42b8      	cmp	r0, r7
 8004a88:	d101      	bne.n	8004a8e <SFU_COM_YMODEM_Receive+0x262>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8004a8a:	2006      	movs	r0, #6
 8004a8c:	e7ad      	b.n	80049ea <SFU_COM_YMODEM_Receive+0x1be>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 8004a8e:	2018      	movs	r0, #24
 8004a90:	f7ff fec0 	bl	8004814 <SFU_COM_Serial_PutByte>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 8004a94:	2018      	movs	r0, #24
 8004a96:	f7ff febd 	bl	8004814 <SFU_COM_Serial_PutByte>
                    *peCOMStatus = SFU_COM_YMODEM_DATA;
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	702b      	strb	r3, [r5, #0]
 8004a9e:	e7a6      	b.n	80049ee <SFU_COM_YMODEM_Receive+0x1c2>
 8004aa0:	00122f11 	.word	0x00122f11
 8004aa4:	200010dc 	.word	0x200010dc
 8004aa8:	200010d8 	.word	0x200010d8
          (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 8004aac:	2018      	movs	r0, #24
 8004aae:	f7ff feb1 	bl	8004814 <SFU_COM_Serial_PutByte>
          (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 8004ab2:	2018      	movs	r0, #24
 8004ab4:	f7ff feae 	bl	8004814 <SFU_COM_Serial_PutByte>
          *peCOMStatus = SFU_COM_YMODEM_ABORT;
 8004ab8:	f885 b000 	strb.w	fp, [r5]
    while ((file_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 8004abc:	782b      	ldrb	r3, [r5, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f47f af36 	bne.w	8004930 <SFU_COM_YMODEM_Receive+0x104>
  (void) SFU_LL_SECU_IWDG_Refresh();
 8004ac4:	f002 fb06 	bl	80070d4 <SFU_LL_SECU_IWDG_Refresh>
  eRetStatus = SFU_LL_UART_Receive(&char1, 1, uTimeout);
 8004ac8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004acc:	2101      	movs	r1, #1
 8004ace:	f10d 0013 	add.w	r0, sp, #19
 8004ad2:	f001 ffa5 	bl	8006a20 <SFU_LL_UART_Receive>
  if (eRetStatus == SFU_SUCCESS)
 8004ad6:	42b8      	cmp	r0, r7
 8004ad8:	f47f af0b 	bne.w	80048f2 <SFU_COM_YMODEM_Receive+0xc6>
    switch (char1)
 8004adc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004ae0:	2b18      	cmp	r3, #24
 8004ae2:	f43f aec8 	beq.w	8004876 <SFU_COM_YMODEM_Receive+0x4a>
 8004ae6:	f63f aeb9 	bhi.w	800485c <SFU_COM_YMODEM_Receive+0x30>
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	f43f aeec 	beq.w	80048c8 <SFU_COM_YMODEM_Receive+0x9c>
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	f43f aeee 	beq.w	80048d2 <SFU_COM_YMODEM_Receive+0xa6>
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	bf15      	itete	ne
 8004afa:	f04f 0b01 	movne.w	fp, #1
 8004afe:	f04f 0b00 	moveq.w	fp, #0
 8004b02:	f04f 0a00 	movne.w	sl, #0
 8004b06:	f04f 0a80 	moveq.w	sl, #128	; 0x80
    *pData = char1;
 8004b0a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8004b0e:	f888 2000 	strb.w	r2, [r8]

    if (packet_size >= SFU_COM_YMODEM_PACKET_SIZE)
 8004b12:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
 8004b16:	f67f aee5 	bls.w	80048e4 <SFU_COM_YMODEM_Receive+0xb8>
    {

#ifndef MINICOM_YMODEM
      eRetStatus = SFU_LL_UART_Receive(&pData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX],
 8004b1a:	4823      	ldr	r0, [pc, #140]	; (8004ba8 <SFU_COM_YMODEM_Receive+0x37c>)
 8004b1c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004b20:	f10a 0104 	add.w	r1, sl, #4
 8004b24:	f001 ff7c 	bl	8006a20 <SFU_LL_UART_Receive>
        eRetStatus = SFU_SUCCESS;
      }
#endif /* MINICOM_YMODEM */

      /* Simple packet sanity check */
      if (eRetStatus == SFU_SUCCESS)
 8004b28:	42b8      	cmp	r0, r7
 8004b2a:	f47f aee2 	bne.w	80048f2 <SFU_COM_YMODEM_Receive+0xc6>
      {
        status = HAL_OK;

        if (pData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX] != ((pData[SFU_COM_YMODEM_PACKET_CNUMBER_INDEX]) ^
 8004b2e:	f898 2003 	ldrb.w	r2, [r8, #3]
 8004b32:	f898 1002 	ldrb.w	r1, [r8, #2]
 8004b36:	43d2      	mvns	r2, r2
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	4291      	cmp	r1, r2
 8004b3c:	f47f aed9 	bne.w	80048f2 <SFU_COM_YMODEM_Receive+0xc6>
          status = HAL_ERROR;
        }
        else
        {
          /* Check packet CRC*/
          crc = (((uint32_t)pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ]) << 8U) & 0x0000FF00U;
 8004b40:	eb08 020a 	add.w	r2, r8, sl
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];

          /*Configure CRC with 16-bit polynomial*/
          if (SFU_LL_CRC_Config(SFU_CRC_CONFIG_16BIT) == SFU_SUCCESS)
 8004b44:	2002      	movs	r0, #2
          crc = (((uint32_t)pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ]) << 8U) & 0x0000FF00U;
 8004b46:	7913      	ldrb	r3, [r2, #4]
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];
 8004b48:	f892 b005 	ldrb.w	fp, [r2, #5]
          crc = (((uint32_t)pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ]) << 8U) & 0x0000FF00U;
 8004b4c:	9303      	str	r3, [sp, #12]
          if (SFU_LL_CRC_Config(SFU_CRC_CONFIG_16BIT) == SFU_SUCCESS)
 8004b4e:	f001 fee7 	bl	8006920 <SFU_LL_CRC_Config>
 8004b52:	42b8      	cmp	r0, r7
 8004b54:	f47f aecd 	bne.w	80048f2 <SFU_COM_YMODEM_Receive+0xc6>
          {
            if (SFU_LL_CRC_Calculate((uint32_t *)(uint32_t)&pData[SFU_COM_YMODEM_PACKET_DATA_INDEX], packet_size) != crc)
 8004b58:	4814      	ldr	r0, [pc, #80]	; (8004bac <SFU_COM_YMODEM_Receive+0x380>)
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	f001 ff20 	bl	80069a0 <SFU_LL_CRC_Calculate>
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	eb0b 2b03 	add.w	fp, fp, r3, lsl #8
            if (SFU_LL_CRC_Calculate((uint32_t *)(uint32_t)&pData[SFU_COM_YMODEM_PACKET_DATA_INDEX], packet_size) != crc)
 8004b66:	4583      	cmp	fp, r0
 8004b68:	f47f aec3 	bne.w	80048f2 <SFU_COM_YMODEM_Receive+0xc6>
              if (m_aPacketData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX] != (packets_received & 0x000000FFU))
 8004b6c:	f898 1002 	ldrb.w	r1, [r8, #2]
 8004b70:	fa5f f289 	uxtb.w	r2, r9
 8004b74:	4291      	cmp	r1, r2
 8004b76:	f47f af3e 	bne.w	80049f6 <SFU_COM_YMODEM_Receive+0x1ca>
                if (packets_received == 0U)
 8004b7a:	f1b9 0f00 	cmp.w	r9, #0
 8004b7e:	f47f af7e 	bne.w	8004a7e <SFU_COM_YMODEM_Receive+0x252>
                  if (m_aPacketData[SFU_COM_YMODEM_PACKET_DATA_INDEX] != 0U)
 8004b82:	f898 3004 	ldrb.w	r3, [r8, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f43f af6d 	beq.w	8004a66 <SFU_COM_YMODEM_Receive+0x23a>
                    file_ptr = m_aPacketData + SFU_COM_YMODEM_PACKET_DATA_INDEX;
 8004b8c:	4a07      	ldr	r2, [pc, #28]	; (8004bac <SFU_COM_YMODEM_Receive+0x380>)
                    i = 0U;
 8004b8e:	4649      	mov	r1, r9
 8004b90:	e6da      	b.n	8004948 <SFU_COM_YMODEM_Receive+0x11c>
            (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CRC16); /* Ask for a packet */
 8004b92:	2043      	movs	r0, #67	; 0x43
 8004b94:	f7ff fe3e 	bl	8004814 <SFU_COM_Serial_PutByte>
            TRACE("\b.");                                 /* Replace C char by . on display console */
 8004b98:	4805      	ldr	r0, [pc, #20]	; (8004bb0 <SFU_COM_YMODEM_Receive+0x384>)
 8004b9a:	f004 fe99 	bl	80098d0 <iprintf>
            (void) BSP_LED_Toggle(SFU_STATUS_LED);
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f002 fd1e 	bl	80075e0 <BSP_LED_Toggle>
 8004ba4:	e78a      	b.n	8004abc <SFU_COM_YMODEM_Receive+0x290>
 8004ba6:	bf00      	nop
 8004ba8:	200010da 	.word	0x200010da
 8004bac:	200010dc 	.word	0x200010dc
 8004bb0:	0800b5fd 	.word	0x0800b5fd

08004bb4 <SFU_COM_Init>:
  * @brief  SFU Com Init function.
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_Init(void)
{
 8004bb4:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <SFU_COM_Init+0x1c>)
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6880      	ldr	r0, [r0, #8]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f004 ff29 	bl	8009a18 <setvbuf>
#endif /* __GNUC__ */
  return SFU_LL_UART_Init();
}
 8004bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return SFU_LL_UART_Init();
 8004bca:	f001 bef1 	b.w	80069b0 <SFU_LL_UART_Init>
 8004bce:	bf00      	nop
 8004bd0:	20001040 	.word	0x20001040

08004bd4 <SFU_COM_Serial_PutString>:
SFU_ErrorStatus SFU_COM_Serial_PutString(uint8_t *pString)
{
  uint16_t length = 0U;

  /* Check the pointers allocation */
  if (pString == NULL)
 8004bd4:	b140      	cbz	r0, 8004be8 <SFU_COM_Serial_PutString+0x14>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	b299      	uxth	r1, r3
  {
    return SFU_ERROR;
  }

  while (pString[length] != (uint8_t)'\0')
 8004bda:	3301      	adds	r3, #1
 8004bdc:	5c42      	ldrb	r2, [r0, r1]
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d1fa      	bne.n	8004bd8 <SFU_COM_Serial_PutString+0x4>
  {
    length++;
  }

  return SFU_LL_UART_Transmit(pString, length, SFU_COM_TRACE_SERIAL_TIME_OUT);
 8004be2:	2264      	movs	r2, #100	; 0x64
 8004be4:	f001 bf08 	b.w	80069f8 <SFU_LL_UART_Transmit>

}
 8004be8:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8004bec:	4770      	bx	lr

08004bee <__io_putchar>:
  * @brief  Retargets the C library printf function to SFU UART.
  * @param  None
  * @retval ch
  */
PUTCHAR_PROTOTYPE
{
 8004bee:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  (void) SFU_LL_UART_Transmit((uint8_t *)&ch, 1U, 0xFFFFU);
 8004bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8004bf4:	9001      	str	r0, [sp, #4]
  (void) SFU_LL_UART_Transmit((uint8_t *)&ch, 1U, 0xFFFFU);
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	a801      	add	r0, sp, #4
 8004bfa:	f001 fefd 	bl	80069f8 <SFU_LL_UART_Transmit>

  return ch;
}
 8004bfe:	9801      	ldr	r0, [sp, #4]
 8004c00:	b003      	add	sp, #12
 8004c02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004c08 <SFU_EXCPT_SetError>:
  * @param  Error Error code.
  * @retval None
  */
void SFU_EXCPT_SetError(SFU_EXCPT_IdTypeDef eExceptionId)
{
  if (eExceptionId <= SFU_EXCPT_UNKNOWN)
 8004c08:	2819      	cmp	r0, #25
 8004c0a:	d805      	bhi.n	8004c18 <SFU_EXCPT_SetError+0x10>
  {
#ifdef SFU_DEBUG_MODE
    TRACE("\r\n\t%s",m_aErrorStrings[(uint32_t) eExceptionId]);
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <SFU_EXCPT_SetError+0x14>)
 8004c0e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8004c12:	4803      	ldr	r0, [pc, #12]	; (8004c20 <SFU_EXCPT_SetError+0x18>)
 8004c14:	f004 be5c 	b.w	80098d0 <iprintf>
#endif /* SFU_DEBUG_MODE */
  }
}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	0800ab34 	.word	0x0800ab34
 8004c20:	0800b600 	.word	0x0800b600

08004c24 <SFU_EXCPT_IrqExceptionHandler>:
  *         it's not possible to continue without compromising the stability or
  *         the security of the solution. A System Reset is forced at the end.
  * @retval None
  */
void SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_IdTypeDef eExceptionId)
{
 8004c24:	b510      	push	{r4, lr}
#ifdef SFU_DEBUG_MODE
  uint8_t message[150];
  uint32_t i = 0U;

  /* Avoid warning with cast frombetween char* and uint8_t* */
  while ((m_aErrorStrings[(uint32_t) eExceptionId][i] != 0u) && (i < 149U))
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <SFU_EXCPT_IrqExceptionHandler+0x40>)
{
 8004c28:	b0a6      	sub	sp, #152	; 0x98
 8004c2a:	466a      	mov	r2, sp
  while ((m_aErrorStrings[(uint32_t) eExceptionId][i] != 0u) && (i < 149U))
 8004c2c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004c30:	4614      	mov	r4, r2
  uint32_t i = 0U;
 8004c32:	2300      	movs	r3, #0
  while ((m_aErrorStrings[(uint32_t) eExceptionId][i] != 0u) && (i < 149U))
 8004c34:	5cc1      	ldrb	r1, [r0, r3]
 8004c36:	b109      	cbz	r1, 8004c3c <SFU_EXCPT_IrqExceptionHandler+0x18>
 8004c38:	2b95      	cmp	r3, #149	; 0x95
 8004c3a:	d10e      	bne.n	8004c5a <SFU_EXCPT_IrqExceptionHandler+0x36>
  {
    message[i] = m_aErrorStrings[(uint32_t) eExceptionId][i];
    i++;
  }
  message[i] = 0U;
 8004c3c:	aa26      	add	r2, sp, #152	; 0x98
 8004c3e:	4413      	add	r3, r2

  /* Print relevant error message */
  TRACE_IRQ((uint8_t *)"\r\n\t  ");
 8004c40:	4809      	ldr	r0, [pc, #36]	; (8004c68 <SFU_EXCPT_IrqExceptionHandler+0x44>)
  message[i] = 0U;
 8004c42:	2200      	movs	r2, #0
 8004c44:	f803 2c98 	strb.w	r2, [r3, #-152]
  TRACE_IRQ((uint8_t *)"\r\n\t  ");
 8004c48:	f7ff ffc4 	bl	8004bd4 <SFU_COM_Serial_PutString>
  TRACE_IRQ(message);
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f7ff ffc1 	bl	8004bd4 <SFU_COM_Serial_PutString>
  /* Try to take an action */
  SFU_EXCPT_RuntimeExceptionHandler(eExceptionId);

  /* It's not possible to continue without compromising the stability or the security of the solution.
  The State Machine needs to be aborted and a Reset must be triggered */
  SFU_BOOT_ForceReboot();
 8004c52:	f7ff fc47 	bl	80044e4 <SFU_BOOT_ForceReboot>
}
 8004c56:	b026      	add	sp, #152	; 0x98
 8004c58:	bd10      	pop	{r4, pc}
    message[i] = m_aErrorStrings[(uint32_t) eExceptionId][i];
 8004c5a:	f802 1b01 	strb.w	r1, [r2], #1
    i++;
 8004c5e:	3301      	adds	r3, #1
 8004c60:	e7e8      	b.n	8004c34 <SFU_EXCPT_IrqExceptionHandler+0x10>
 8004c62:	bf00      	nop
 8004c64:	0800ab34 	.word	0x0800ab34
 8004c68:	0800b606 	.word	0x0800b606

08004c6c <SFU_EXCPT_Security_Error>:
  *         This parameter can be a value of @ref SFU_EXCPT_ID_Structure_definition.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */

void SFU_EXCPT_Security_Error(void)
{
 8004c6c:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] Security issue : execution stopped !");
 8004c6e:	480a      	ldr	r0, [pc, #40]	; (8004c98 <SFU_EXCPT_Security_Error+0x2c>)
 8004c70:	f004 fe2e 	bl	80098d0 <iprintf>
  HAL_Delay(1000);
 8004c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c78:	f002 fd98 	bl	80077ac <HAL_Delay>
 8004c7c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c80:	4906      	ldr	r1, [pc, #24]	; (8004c9c <SFU_EXCPT_Security_Error+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c82:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <SFU_EXCPT_Security_Error+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c84:	68ca      	ldr	r2, [r1, #12]
 8004c86:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60cb      	str	r3, [r1, #12]
 8004c8e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004c92:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004c94:	e7fd      	b.n	8004c92 <SFU_EXCPT_Security_Error+0x26>
 8004c96:	bf00      	nop
 8004c98:	0800b60c 	.word	0x0800b60c
 8004c9c:	e000ed00 	.word	0xe000ed00
 8004ca0:	05fa0004 	.word	0x05fa0004

08004ca4 <SFU_EXCPT_Init>:
       ...
  */
  e_ret_status = SFU_SUCCESS;

  return e_ret_status;
}
 8004ca4:	4800      	ldr	r0, [pc, #0]	; (8004ca8 <SFU_EXCPT_Init+0x4>)
 8004ca6:	4770      	bx	lr
 8004ca8:	00122f11 	.word	0x00122f11

08004cac <SFU_EXCPT_DeInit>:
 8004cac:	4800      	ldr	r0, [pc, #0]	; (8004cb0 <SFU_EXCPT_DeInit+0x4>)
 8004cae:	4770      	bx	lr
 8004cb0:	00122f11 	.word	0x00122f11

08004cb4 <MemoryCompare>:
  * @param  pAdd2 Address of the second buffer to compare
  * @param  Size Size of the comparison
  * @retval SFU_ SUCCESS if equal, a SFU_error otherwise.
  */
SFU_ErrorStatus MemoryCompare(uint8_t *pAdd1, uint8_t *pAdd2, uint32_t Size)
{
 8004cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cb6:	4603      	mov	r3, r0
  /* Use of __IO to force recheck of these variables values */
  uint8_t __IO result = 0x00U;
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f88d 0003 	strb.w	r0, [sp, #3]
  uint32_t __IO i;
  uint32_t tmp;

  for (i = 0U; i < Size; i++)
 8004cbe:	9001      	str	r0, [sp, #4]
 8004cc0:	9801      	ldr	r0, [sp, #4]
 8004cc2:	4290      	cmp	r0, r2
 8004cc4:	d311      	bcc.n	8004cea <MemoryCompare+0x36>
    tmp = pAdd1[i];
    tmp ^= pAdd2[i];
    result |= tmp;
  }

  if ((result == 0x00U) && (i == Size)) /* Add check that loop exited normally without any fault injection */
 8004cc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004cca:	b9e3      	cbnz	r3, 8004d06 <MemoryCompare+0x52>
 8004ccc:	9b01      	ldr	r3, [sp, #4]
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d119      	bne.n	8004d06 <MemoryCompare+0x52>
  {
    return (((result != 0x00U) || (i != Size))? SFU_ERROR : SFU_SUCCESS);
 8004cd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004cd6:	b9b3      	cbnz	r3, 8004d06 <MemoryCompare+0x52>
 8004cd8:	9901      	ldr	r1, [sp, #4]
 8004cda:	480c      	ldr	r0, [pc, #48]	; (8004d0c <MemoryCompare+0x58>)
 8004cdc:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8004ce0:	4291      	cmp	r1, r2
 8004ce2:	bf18      	it	ne
 8004ce4:	4618      	movne	r0, r3
  }
  else
  {
    return SFU_ERROR;
  }
}
 8004ce6:	b003      	add	sp, #12
 8004ce8:	bd30      	pop	{r4, r5, pc}
    tmp = pAdd1[i];
 8004cea:	9c01      	ldr	r4, [sp, #4]
    tmp ^= pAdd2[i];
 8004cec:	9d01      	ldr	r5, [sp, #4]
    result |= tmp;
 8004cee:	5d1c      	ldrb	r4, [r3, r4]
 8004cf0:	5d4d      	ldrb	r5, [r1, r5]
 8004cf2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004cf6:	406c      	eors	r4, r5
 8004cf8:	4320      	orrs	r0, r4
 8004cfa:	f88d 0003 	strb.w	r0, [sp, #3]
  for (i = 0U; i < Size; i++)
 8004cfe:	9801      	ldr	r0, [sp, #4]
 8004d00:	3001      	adds	r0, #1
 8004d02:	9001      	str	r0, [sp, #4]
 8004d04:	e7dc      	b.n	8004cc0 <MemoryCompare+0xc>
    return SFU_ERROR;
 8004d06:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8004d0a:	e7ec      	b.n	8004ce6 <MemoryCompare+0x32>
 8004d0c:	00122f11 	.word	0x00122f11

08004d10 <VerifyFwSignatureScatter.part.0>:
  * @param pSE_Payload: pointer to Payload Buffer descriptor.
  * @param SE_FwType: Type of Fw Image.
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SFU_ErrorStatus VerifyFwSignatureScatter(SE_StatusTypeDef *pSeStatus, uint32_t SlotNumber,
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	f6ad 0d4c 	subw	sp, sp, #2124	; 0x84c
 8004d18:	4604      	mov	r4, r0
 8004d1a:	9107      	str	r1, [sp, #28]
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	f8dd 2870 	ldr.w	r2, [sp, #2160]	; 0x870
 8004d22:	461e      	mov	r6, r3
  {
    return SFU_ERROR;
  }

  /* Check the parameters value and set fw_size and fw_tag to check */
  if (SE_FwType == SE_FW_IMAGE_COMPLETE)
 8004d24:	2a00      	cmp	r2, #0
 8004d26:	f040 8094 	bne.w	8004e52 <VerifyFwSignatureScatter.part.0+0x142>
  {
    fw_size = pSE_Metadata->FwSize;
 8004d2a:	688b      	ldr	r3, [r1, #8]
 8004d2c:	9302      	str	r3, [sp, #8]
    fw_tag = pSE_Metadata->FwTag;
 8004d2e:	f101 0b14 	add.w	fp, r1, #20
  else
  {
    return SFU_ERROR;
  }

  if ((pSE_Payload->PayloadSize[0] + pSE_Payload->PayloadSize[1]) != fw_size)
 8004d32:	e9d6 3002 	ldrd	r3, r0, [r6, #8]
 8004d36:	9d02      	ldr	r5, [sp, #8]
 8004d38:	4403      	add	r3, r0
 8004d3a:	42ab      	cmp	r3, r5
 8004d3c:	f040 808b 	bne.w	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
  {
    scatter_nb = 2U;
  }
  else
  {
    scatter_nb = 1U;
 8004d40:	2800      	cmp	r0, #0
  }


  /* Encryption process*/
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 8004d42:	4620      	mov	r0, r4
    scatter_nb = 1U;
 8004d44:	bf14      	ite	ne
 8004d46:	2502      	movne	r5, #2
 8004d48:	2501      	moveq	r5, #1
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 8004d4a:	f7fe fe23 	bl	8003994 <SE_AuthenticateFW_Init>

  /* check for initialization errors */
  if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8004d4e:	4a66      	ldr	r2, [pc, #408]	; (8004ee8 <VerifyFwSignatureScatter.part.0+0x1d8>)
 8004d50:	9204      	str	r2, [sp, #16]
 8004d52:	4290      	cmp	r0, r2
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 8004d54:	4603      	mov	r3, r0
  if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8004d56:	d17e      	bne.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
 8004d58:	6821      	ldr	r1, [r4, #0]
 8004d5a:	4a64      	ldr	r2, [pc, #400]	; (8004eec <VerifyFwSignatureScatter.part.0+0x1dc>)
 8004d5c:	4291      	cmp	r1, r2
 8004d5e:	d17a      	bne.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
 8004d60:	eb06 0285 	add.w	r2, r6, r5, lsl #2
  SFU_ErrorStatus sfu_ret_status = SFU_SUCCESS;
 8004d64:	4d62      	ldr	r5, [pc, #392]	; (8004ef0 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8004d66:	9206      	str	r2, [sp, #24]
  uint32_t fw_verified_total_size = 0; /* number of bytes that have been processed during authentication check */
 8004d68:	f04f 0800 	mov.w	r8, #0
    for (j = 0; j < scatter_nb; j++)
    {
      payloadsize = pSE_Payload->PayloadSize[j];
      ppayload = pSE_Payload->pPayload[j];
      i = 0;
      fw_chunk_size = CHUNK_SIZE_SIGN_VERIFICATION;
 8004d6c:	af09      	add	r7, sp, #36	; 0x24
      payloadsize = pSE_Payload->PayloadSize[j];
 8004d6e:	68b2      	ldr	r2, [r6, #8]
 8004d70:	9203      	str	r2, [sp, #12]
      fw_chunk_size = CHUNK_SIZE_SIGN_VERIFICATION;
 8004d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d76:	603a      	str	r2, [r7, #0]

      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 8004d78:	9a03      	ldr	r2, [sp, #12]
      ppayload = pSE_Payload->pPayload[j];
 8004d7a:	f856 9b04 	ldr.w	r9, [r6], #4
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 8004d7e:	0a92      	lsrs	r2, r2, #10
 8004d80:	9205      	str	r2, [sp, #20]
      i = 0;
 8004d82:	f04f 0a00 	mov.w	sl, #0
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 8004d86:	9a05      	ldr	r2, [sp, #20]
 8004d88:	4592      	cmp	sl, r2
 8004d8a:	d006      	beq.n	8004d9a <VerifyFwSignatureScatter.part.0+0x8a>
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	4957      	ldr	r1, [pc, #348]	; (8004eec <VerifyFwSignatureScatter.part.0+0x1dc>)
 8004d90:	428a      	cmp	r2, r1
 8004d92:	d102      	bne.n	8004d9a <VerifyFwSignatureScatter.part.0+0x8a>
 8004d94:	4a56      	ldr	r2, [pc, #344]	; (8004ef0 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8004d96:	4295      	cmp	r5, r2
 8004d98:	d069      	beq.n	8004e6e <VerifyFwSignatureScatter.part.0+0x15e>
        ppayload += fw_chunk_size;
        fw_verified_total_size += fw_chunk_size;
        i++;
      }
      /* this the last path , size can be smaller */
      fw_chunk_size = pSE_Payload->pPayload[j] + pSE_Payload->PayloadSize[j] - ppayload;
 8004d9a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004d9e:	6871      	ldr	r1, [r6, #4]
 8004da0:	440a      	add	r2, r1
 8004da2:	eba2 0209 	sub.w	r2, r2, r9
 8004da6:	603a      	str	r2, [r7, #0]
      if ((fw_chunk_size != 0U) && (se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8004da8:	b1e2      	cbz	r2, 8004de4 <VerifyFwSignatureScatter.part.0+0xd4>
 8004daa:	9904      	ldr	r1, [sp, #16]
 8004dac:	428b      	cmp	r3, r1
 8004dae:	d119      	bne.n	8004de4 <VerifyFwSignatureScatter.part.0+0xd4>
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	494e      	ldr	r1, [pc, #312]	; (8004eec <VerifyFwSignatureScatter.part.0+0x1dc>)
 8004db4:	4288      	cmp	r0, r1
 8004db6:	d115      	bne.n	8004de4 <VerifyFwSignatureScatter.part.0+0xd4>
      {
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 8004db8:	4649      	mov	r1, r9
 8004dba:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 8004dbe:	f001 fee9 	bl	8006b94 <SFU_LL_FLASH_Read>
        if (sfu_ret_status == SFU_SUCCESS)
 8004dc2:	4b4b      	ldr	r3, [pc, #300]	; (8004ef0 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8004dc4:	4298      	cmp	r0, r3
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 8004dc6:	4605      	mov	r5, r0
        if (sfu_ret_status == SFU_SUCCESS)
 8004dc8:	d170      	bne.n	8004eac <VerifyFwSignatureScatter.part.0+0x19c>
        {

          se_ret_status = SE_AuthenticateFW_Append(pSeStatus, fw_image_chunk,
 8004dca:	9a03      	ldr	r2, [sp, #12]
 8004dcc:	9700      	str	r7, [sp, #0]
 8004dce:	ab12      	add	r3, sp, #72	; 0x48
 8004dd0:	eba2 228a 	sub.w	r2, r2, sl, lsl #10
 8004dd4:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7fe fe05 	bl	80039e8 <SE_AuthenticateFW_Append>
 8004dde:	4603      	mov	r3, r0
        {
          *pSeStatus = SE_ERR_FLASH_READ;
          se_ret_status = SE_ERROR;
          sfu_ret_status = SFU_ERROR;
        }
        fw_verified_total_size += fw_chunk_size;
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	4490      	add	r8, r2
    for (j = 0; j < scatter_nb; j++)
 8004de4:	9a06      	ldr	r2, [sp, #24]
 8004de6:	4296      	cmp	r6, r2
 8004de8:	d1c1      	bne.n	8004d6e <VerifyFwSignatureScatter.part.0+0x5e>
      }
    }
  }

  if ((sfu_ret_status == SFU_SUCCESS) && (se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8004dea:	4a41      	ldr	r2, [pc, #260]	; (8004ef0 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8004dec:	4295      	cmp	r5, r2
 8004dee:	d132      	bne.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
 8004df0:	9a04      	ldr	r2, [sp, #16]
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d12f      	bne.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
 8004df6:	6826      	ldr	r6, [r4, #0]
 8004df8:	4a3c      	ldr	r2, [pc, #240]	; (8004eec <VerifyFwSignatureScatter.part.0+0x1dc>)
 8004dfa:	4296      	cmp	r6, r2
 8004dfc:	d12b      	bne.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
  {
    if (fw_verified_total_size <= fw_size)
 8004dfe:	9a02      	ldr	r2, [sp, #8]
 8004e00:	4542      	cmp	r2, r8
 8004e02:	d328      	bcc.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
    {
      /* Do the Finalization, check the authentication TAG*/
      fw_tag_len = sizeof(fw_tag_output);
 8004e04:	2220      	movs	r2, #32
 8004e06:	9208      	str	r2, [sp, #32]
      se_ret_status =   SE_AuthenticateFW_Finish(pSeStatus, fw_tag_output, (int32_t *)&fw_tag_len);
 8004e08:	a90a      	add	r1, sp, #40	; 0x28
 8004e0a:	446a      	add	r2, sp
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	9302      	str	r3, [sp, #8]
 8004e10:	f7fe fe16 	bl	8003a40 <SE_AuthenticateFW_Finish>

      if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK) && (fw_tag_len == SE_TAG_LEN))
 8004e14:	9b02      	ldr	r3, [sp, #8]
 8004e16:	4298      	cmp	r0, r3
 8004e18:	d11d      	bne.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	42b3      	cmp	r3, r6
 8004e1e:	d11a      	bne.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
 8004e20:	9a08      	ldr	r2, [sp, #32]
 8004e22:	2a20      	cmp	r2, #32
 8004e24:	d117      	bne.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
      {
        /* Firmware tag verification */
        if (MemoryCompare(fw_tag_output, fw_tag, SE_TAG_LEN) != SFU_SUCCESS)
 8004e26:	4659      	mov	r1, fp
 8004e28:	a80a      	add	r0, sp, #40	; 0x28
 8004e2a:	f7ff ff43 	bl	8004cb4 <MemoryCompare>
 8004e2e:	9b07      	ldr	r3, [sp, #28]
 8004e30:	4602      	mov	r2, r0
 8004e32:	42aa      	cmp	r2, r5
 8004e34:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8004e38:	d03e      	beq.n	8004eb8 <VerifyFwSignatureScatter.part.0+0x1a8>
        {
          *pSeStatus = SE_SIGNATURE_ERR;
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <VerifyFwSignatureScatter.part.0+0x1e4>)
 8004e3c:	6023      	str	r3, [r4, #0]
          se_ret_status = SE_ERROR;
          sfu_ret_status = SFU_ERROR;

          /* Save result for active slot :
             to avoid single fault attack the signature will be double checked before UserApp execution */
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8004e3e:	2802      	cmp	r0, #2
 8004e40:	d809      	bhi.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
          {
            (void) memset(&fw_tag_validated[SlotNumber - SLOT_ACTIVE_1][0U], 0x00, SE_TAG_LEN);
 8004e42:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <VerifyFwSignatureScatter.part.0+0x1e8>)
 8004e44:	2220      	movs	r2, #32
 8004e46:	2100      	movs	r1, #0
 8004e48:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8004e4c:	f004 fd38 	bl	80098c0 <memset>
 8004e50:	e001      	b.n	8004e56 <VerifyFwSignatureScatter.part.0+0x146>
  else if (SE_FwType == SE_FW_IMAGE_PARTIAL)
 8004e52:	2a01      	cmp	r2, #1
 8004e54:	d006      	beq.n	8004e64 <VerifyFwSignatureScatter.part.0+0x154>
          sfu_ret_status = SFU_ERROR;
 8004e56:	f641 72e1 	movw	r2, #8161	; 0x1fe1
  else
  {
    sfu_ret_status = SFU_ERROR;
  }
  return sfu_ret_status;
}
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f60d 0d4c 	addw	sp, sp, #2124	; 0x84c
 8004e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fw_size = pSE_Metadata->PartialFwSize;
 8004e64:	690b      	ldr	r3, [r1, #16]
 8004e66:	9302      	str	r3, [sp, #8]
    fw_tag = pSE_Metadata->PartialFwTag;
 8004e68:	f101 0b34 	add.w	fp, r1, #52	; 0x34
 8004e6c:	e761      	b.n	8004d32 <VerifyFwSignatureScatter.part.0+0x22>
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	4649      	mov	r1, r9
 8004e72:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 8004e76:	f001 fe8d 	bl	8006b94 <SFU_LL_FLASH_Read>
        if (sfu_ret_status == SFU_SUCCESS)
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8004e7c:	4298      	cmp	r0, r3
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 8004e7e:	4605      	mov	r5, r0
        if (sfu_ret_status == SFU_SUCCESS)
 8004e80:	d10e      	bne.n	8004ea0 <VerifyFwSignatureScatter.part.0+0x190>
          se_ret_status = SE_AuthenticateFW_Append(pSeStatus, fw_image_chunk, (int32_t)fw_chunk_size,
 8004e82:	9700      	str	r7, [sp, #0]
 8004e84:	ab12      	add	r3, sp, #72	; 0x48
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f7fe fdab 	bl	80039e8 <SE_AuthenticateFW_Append>
 8004e92:	4603      	mov	r3, r0
        ppayload += fw_chunk_size;
 8004e94:	683a      	ldr	r2, [r7, #0]
        i++;
 8004e96:	f10a 0a01 	add.w	sl, sl, #1
        ppayload += fw_chunk_size;
 8004e9a:	4491      	add	r9, r2
        fw_verified_total_size += fw_chunk_size;
 8004e9c:	4490      	add	r8, r2
        i++;
 8004e9e:	e772      	b.n	8004d86 <VerifyFwSignatureScatter.part.0+0x76>
          *pSeStatus = SE_ERR_FLASH_READ;
 8004ea0:	4b16      	ldr	r3, [pc, #88]	; (8004efc <VerifyFwSignatureScatter.part.0+0x1ec>)
 8004ea2:	6023      	str	r3, [r4, #0]
          sfu_ret_status = SFU_ERROR;
 8004ea4:	f641 75e1 	movw	r5, #8161	; 0x1fe1
          se_ret_status = SE_ERROR;
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <VerifyFwSignatureScatter.part.0+0x1f0>)
 8004eaa:	e7f3      	b.n	8004e94 <VerifyFwSignatureScatter.part.0+0x184>
          *pSeStatus = SE_ERR_FLASH_READ;
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <VerifyFwSignatureScatter.part.0+0x1ec>)
 8004eae:	6023      	str	r3, [r4, #0]
          sfu_ret_status = SFU_ERROR;
 8004eb0:	f641 75e1 	movw	r5, #8161	; 0x1fe1
          se_ret_status = SE_ERROR;
 8004eb4:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <VerifyFwSignatureScatter.part.0+0x1f0>)
 8004eb6:	e793      	b.n	8004de0 <VerifyFwSignatureScatter.part.0+0xd0>
          FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 8004eb8:	4912      	ldr	r1, [pc, #72]	; (8004f04 <VerifyFwSignatureScatter.part.0+0x1f4>)
 8004eba:	680b      	ldr	r3, [r1, #0]
 8004ebc:	f483 432a 	eor.w	r3, r3, #43520	; 0xaa00
 8004ec0:	f083 03b5 	eor.w	r3, r3, #181	; 0xb5
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8004ec4:	2802      	cmp	r0, #2
          FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 8004ec6:	600b      	str	r3, [r1, #0]
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8004ec8:	d8c7      	bhi.n	8004e5a <VerifyFwSignatureScatter.part.0+0x14a>
            (void) memcpy(&fw_tag_validated[SlotNumber - SLOT_ACTIVE_1][0U], fw_tag_output, SE_TAG_LEN);
 8004eca:	4c0b      	ldr	r4, [pc, #44]	; (8004ef8 <VerifyFwSignatureScatter.part.0+0x1e8>)
 8004ecc:	ab0a      	add	r3, sp, #40	; 0x28
 8004ece:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 8004ed2:	ae12      	add	r6, sp, #72	; 0x48
 8004ed4:	461d      	mov	r5, r3
 8004ed6:	cd03      	ldmia	r5!, {r0, r1}
 8004ed8:	42b5      	cmp	r5, r6
 8004eda:	6020      	str	r0, [r4, #0]
 8004edc:	6061      	str	r1, [r4, #4]
 8004ede:	462b      	mov	r3, r5
 8004ee0:	f104 0408 	add.w	r4, r4, #8
 8004ee4:	d1f6      	bne.n	8004ed4 <VerifyFwSignatureScatter.part.0+0x1c4>
 8004ee6:	e7b8      	b.n	8004e5a <VerifyFwSignatureScatter.part.0+0x14a>
 8004ee8:	0012310f 	.word	0x0012310f
 8004eec:	0012e223 	.word	0x0012e223
 8004ef0:	00122f11 	.word	0x00122f11
 8004ef4:	00146ac1 	.word	0x00146ac1
 8004ef8:	200014de 	.word	0x200014de
 8004efc:	0014b817 	.word	0x0014b817
 8004f00:	00018799 	.word	0x00018799
 8004f04:	20001014 	.word	0x20001014

08004f08 <VerifyFwSignatureScatter>:
{
 8004f08:	b430      	push	{r4, r5}
 8004f0a:	9c02      	ldr	r4, [sp, #8]
  if ((pSeStatus == NULL) || (pSE_Metadata == NULL) || (pSE_Payload == NULL))
 8004f0c:	b158      	cbz	r0, 8004f26 <VerifyFwSignatureScatter+0x1e>
 8004f0e:	b152      	cbz	r2, 8004f26 <VerifyFwSignatureScatter+0x1e>
 8004f10:	b14b      	cbz	r3, 8004f26 <VerifyFwSignatureScatter+0x1e>
  if ((pSE_Payload->pPayload[0] == 0U) || ((pSE_Payload->pPayload[1] == 0U) && (pSE_Payload->PayloadSize[1] != 0U)))
 8004f12:	681d      	ldr	r5, [r3, #0]
 8004f14:	b13d      	cbz	r5, 8004f26 <VerifyFwSignatureScatter+0x1e>
 8004f16:	685d      	ldr	r5, [r3, #4]
 8004f18:	b90d      	cbnz	r5, 8004f1e <VerifyFwSignatureScatter+0x16>
 8004f1a:	68dd      	ldr	r5, [r3, #12]
 8004f1c:	b91d      	cbnz	r5, 8004f26 <VerifyFwSignatureScatter+0x1e>
 8004f1e:	9402      	str	r4, [sp, #8]
}
 8004f20:	bc30      	pop	{r4, r5}
 8004f22:	f7ff bef5 	b.w	8004d10 <VerifyFwSignatureScatter.part.0>
 8004f26:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8004f2a:	bc30      	pop	{r4, r5}
 8004f2c:	4770      	bx	lr
	...

08004f30 <ParseFWInfo>:
  * @param pBuffer
  * @param BufferSize
  * @retval SFU_SUCCESS if successful, a SFU_ERROR otherwise.
  */
SFU_ErrorStatus ParseFWInfo(SE_FwRawHeaderTypeDef *pFwHeader, uint8_t *pBuffer)
{
 8004f30:	b508      	push	{r3, lr}
  /* Check the pointers allocation */
  if ((pFwHeader == NULL) || (pBuffer == NULL))
 8004f32:	b130      	cbz	r0, 8004f42 <ParseFWInfo+0x12>
 8004f34:	b129      	cbz	r1, 8004f42 <ParseFWInfo+0x12>
  {
    return SFU_ERROR;
  }
  (void) memcpy(pFwHeader, pBuffer, sizeof(*pFwHeader));
 8004f36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f3a:	f004 fcb3 	bl	80098a4 <memcpy>
  return SFU_SUCCESS;
 8004f3e:	4802      	ldr	r0, [pc, #8]	; (8004f48 <ParseFWInfo+0x18>)
}
 8004f40:	bd08      	pop	{r3, pc}
    return SFU_ERROR;
 8004f42:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8004f46:	e7fb      	b.n	8004f40 <ParseFWInfo+0x10>
 8004f48:	00122f11 	.word	0x00122f11

08004f4c <VerifyFwSignature>:
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
SFU_ErrorStatus VerifyFwSignature(SE_StatusTypeDef  *pSeStatus, uint32_t SlotNumber,
                                  SE_FwRawHeaderTypeDef *pFwImageHeader,
                                  uint32_t SE_FwType)
{
 8004f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  SE_Ex_PayloadDescTypeDef  pse_payload;
  uint32_t fw_size;
  uint32_t fw_offset;

  /*  put it OK, to discriminate error in SFU FWIMG parts */
  *pSeStatus = SE_OK;
 8004f4e:	4c13      	ldr	r4, [pc, #76]	; (8004f9c <VerifyFwSignature+0x50>)
 8004f50:	6004      	str	r4, [r0, #0]
{
 8004f52:	b087      	sub	sp, #28

  /* Check the parameters value */
  if (pFwImageHeader == NULL)
 8004f54:	b1fa      	cbz	r2, 8004f96 <VerifyFwSignature+0x4a>
  {
    return SFU_ERROR;
  }
  if ((SE_FwType != SE_FW_IMAGE_PARTIAL) && (SE_FwType != SE_FW_IMAGE_COMPLETE))
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d81d      	bhi.n	8004f96 <VerifyFwSignature+0x4a>
  {
    return SFU_ERROR;
  }

  /* Check SE_FwType parameter, and fix size and offset accordingly */
  switch (SE_FwType)
 8004f5a:	d012      	beq.n	8004f82 <VerifyFwSignature+0x36>
  {
    case SE_FW_IMAGE_COMPLETE :
      fw_size = pFwImageHeader->FwSize;
 8004f5c:	6896      	ldr	r6, [r2, #8]
      fw_offset = 0U;
 8004f5e:	2500      	movs	r5, #0
      fw_size = 0U;
      fw_offset = 0U;
      break;
  }

  pse_payload.pPayload[0] = SlotStartAdd[SlotNumber] + fw_offset + SFU_IMG_IMAGE_OFFSET;
 8004f60:	4c0f      	ldr	r4, [pc, #60]	; (8004fa0 <VerifyFwSignature+0x54>)
  pse_payload.PayloadSize[0] = fw_size;
  pse_payload.pPayload[1] = 0U;
  pse_payload.PayloadSize[1] = 0U;

  return  VerifyFwSignatureScatter(pSeStatus, SlotNumber, pFwImageHeader, &pse_payload, SE_FwType);
 8004f62:	9300      	str	r3, [sp, #0]
  pse_payload.pPayload[0] = SlotStartAdd[SlotNumber] + fw_offset + SFU_IMG_IMAGE_OFFSET;
 8004f64:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
  pse_payload.PayloadSize[0] = fw_size;
 8004f68:	9604      	str	r6, [sp, #16]
  pse_payload.pPayload[0] = SlotStartAdd[SlotNumber] + fw_offset + SFU_IMG_IMAGE_OFFSET;
 8004f6a:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8004f6e:	442c      	add	r4, r5
 8004f70:	9402      	str	r4, [sp, #8]
  return  VerifyFwSignatureScatter(pSeStatus, SlotNumber, pFwImageHeader, &pse_payload, SE_FwType);
 8004f72:	ab02      	add	r3, sp, #8
  pse_payload.pPayload[1] = 0U;
 8004f74:	2400      	movs	r4, #0
 8004f76:	9403      	str	r4, [sp, #12]
  pse_payload.PayloadSize[1] = 0U;
 8004f78:	9405      	str	r4, [sp, #20]
  return  VerifyFwSignatureScatter(pSeStatus, SlotNumber, pFwImageHeader, &pse_payload, SE_FwType);
 8004f7a:	f7ff ffc5 	bl	8004f08 <VerifyFwSignatureScatter>
}
 8004f7e:	b007      	add	sp, #28
 8004f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
      fw_offset = pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP);
 8004f82:	4c08      	ldr	r4, [pc, #32]	; (8004fa4 <VerifyFwSignature+0x58>)
 8004f84:	4d08      	ldr	r5, [pc, #32]	; (8004fa8 <VerifyFwSignature+0x5c>)
 8004f86:	68d7      	ldr	r7, [r2, #12]
      fw_size = pFwImageHeader->PartialFwSize;
 8004f88:	6916      	ldr	r6, [r2, #16]
      fw_offset = pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP);
 8004f8a:	1b2d      	subs	r5, r5, r4
 8004f8c:	fbb7 f4f5 	udiv	r4, r7, r5
 8004f90:	fb05 7514 	mls	r5, r5, r4, r7
      break;
 8004f94:	e7e4      	b.n	8004f60 <VerifyFwSignature+0x14>
    return SFU_ERROR;
 8004f96:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8004f9a:	e7f0      	b.n	8004f7e <VerifyFwSignature+0x32>
 8004f9c:	0012e223 	.word	0x0012e223
 8004fa0:	0800ab9c 	.word	0x0800ab9c
 8004fa4:	08016000 	.word	0x08016000
 8004fa8:	08018000 	.word	0x08018000

08004fac <VerifySlot>:
  * @param uSlotSize Size of a slot.
  * @param uFwSize Size of the firmware image.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus VerifySlot(uint8_t *pSlotBegin, uint32_t uSlotSize, uint32_t uFwSize)
{
 8004fac:	b410      	push	{r4}
  uint32_t length;
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check is already clean */
  pdata = pSlotBegin + SFU_IMG_IMAGE_OFFSET + uFwSize;
  length = uSlotSize - SFU_IMG_IMAGE_OFFSET - uFwSize;
 8004fae:	f5a1 7300 	sub.w	r3, r1, #512	; 0x200
  pdata = pSlotBegin + SFU_IMG_IMAGE_OFFSET + uFwSize;
 8004fb2:	f502 7400 	add.w	r4, r2, #512	; 0x200
  e_ret_status = SFU_LL_FLASH_Compare(pdata, 0x00000000U, 0xFFFFFFFFU, length);
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	4420      	add	r0, r4
 8004fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

  return e_ret_status;
}
 8004fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
  e_ret_status = SFU_LL_FLASH_Compare(pdata, 0x00000000U, 0xFFFFFFFFU, length);
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	f001 bded 	b.w	8006ba2 <SFU_LL_FLASH_Compare>

08004fc8 <CleanUpSlot>:
  * @param  uSlotSize Size of a slot.
  * @param  uOffset Offset in the slot to start cleanup, until end of the slot.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus CleanUpSlot(uint8_t *pSlotBegin, uint32_t uSlotSize, uint32_t uOffset)
{
 8004fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fca:	2400      	movs	r4, #0
 8004fcc:	2500      	movs	r5, #0
 8004fce:	b087      	sub	sp, #28
  slot_begin = (uint32_t) pSlotBegin;
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
  {
    e_ret_status =  SFU_LL_FLASH_Read((uint8_t *) &value, (uint8_t *) pdata, sizeof(SFU_LL_FLASH_write_t));

    if (e_ret_status == SFU_SUCCESS)
 8004fd0:	4f15      	ldr	r7, [pc, #84]	; (8005028 <CleanUpSlot+0x60>)
 8004fd2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
 8004fd6:	1846      	adds	r6, r0, r1
 8004fd8:	1885      	adds	r5, r0, r2
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8004fda:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
 8004fde:	42ae      	cmp	r6, r5
 8004fe0:	d802      	bhi.n	8004fe8 <CleanUpSlot+0x20>
    {
      (void) SFU_LL_SECU_IWDG_Refresh();
    }
  }
  return e_ret_status;
}
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	b007      	add	sp, #28
 8004fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e_ret_status =  SFU_LL_FLASH_Read((uint8_t *) &value, (uint8_t *) pdata, sizeof(SFU_LL_FLASH_write_t));
 8004fe8:	2208      	movs	r2, #8
 8004fea:	4629      	mov	r1, r5
 8004fec:	a804      	add	r0, sp, #16
 8004fee:	f001 fdd1 	bl	8006b94 <SFU_LL_FLASH_Read>
    if (e_ret_status == SFU_SUCCESS)
 8004ff2:	42b8      	cmp	r0, r7
    e_ret_status =  SFU_LL_FLASH_Read((uint8_t *) &value, (uint8_t *) pdata, sizeof(SFU_LL_FLASH_write_t));
 8004ff4:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 8004ff6:	d106      	bne.n	8005006 <CleanUpSlot+0x3e>
      if (memcmp((void *) &value, (void *) &pattern, sizeof(SFU_LL_FLASH_write_t)) != 0)
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	eb0d 0102 	add.w	r1, sp, r2
 8004ffe:	a804      	add	r0, sp, #16
 8005000:	f004 fc42 	bl	8009888 <memcmp>
 8005004:	b140      	cbz	r0, 8005018 <CleanUpSlot+0x50>
      e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, (uint8_t *) pdata, (uint8_t *) &pattern,
 8005006:	2308      	movs	r3, #8
 8005008:	eb0d 0203 	add.w	r2, sp, r3
 800500c:	4629      	mov	r1, r5
 800500e:	f10d 0007 	add.w	r0, sp, #7
 8005012:	f001 fdb8 	bl	8006b86 <SFU_LL_FLASH_Write>
 8005016:	4604      	mov	r4, r0
    if ((pdata % 0x1000U) == 0U)
 8005018:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800501c:	b90b      	cbnz	r3, 8005022 <CleanUpSlot+0x5a>
      (void) SFU_LL_SECU_IWDG_Refresh();
 800501e:	f002 f859 	bl	80070d4 <SFU_LL_SECU_IWDG_Refresh>
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
 8005022:	3508      	adds	r5, #8
 8005024:	e7db      	b.n	8004fde <CleanUpSlot+0x16>
 8005026:	bf00      	nop
 8005028:	00122f11 	.word	0x00122f11

0800502c <SFU_IMG_InitImageHandling>:
  *        Must be called first (and once) before calling the other Image handling services.
  * @param  None.
  * @retval SFU_IMG_InitStatusTypeDef SFU_IMG_INIT_OK if successful, an error code otherwise.
  */
SFU_IMG_InitStatusTypeDef SFU_IMG_InitImageHandling(void)
{
 800502c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   * starting with 0s.
   * This causes an issue when calling CLEAN_TRAILER_MAGIC (because of this we added an erase that generated
   * side-effects).
   * To avoid all these problems we can initialize fw_image_header_validated with a non-0  value.
   */
  (void) memset((uint8_t *) &fw_image_header_validated, 0xFE, sizeof(fw_image_header_validated));
 800502e:	4821      	ldr	r0, [pc, #132]	; (80050b4 <SFU_IMG_InitImageHandling+0x88>)
   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 8005030:	4d21      	ldr	r5, [pc, #132]	; (80050b8 <SFU_IMG_InitImageHandling+0x8c>)
  (void) memset((uint8_t *) &fw_image_header_validated, 0xFE, sizeof(fw_image_header_validated));
 8005032:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005036:	21fe      	movs	r1, #254	; 0xfe
 8005038:	f004 fc42 	bl	80098c0 <memset>
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 800503c:	9500      	str	r5, [sp, #0]
    if (start_add != 0U)
 800503e:	9c00      	ldr	r4, [sp, #0]
 8005040:	b144      	cbz	r4, 8005054 <SFU_IMG_InitImageHandling+0x28>
#else
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if (!IS_ALIGNED(SlotStartAdd[SLOT_ACTIVE_1 + i]))
 8005042:	f3c5 040b 	ubfx	r4, r5, #0, #12
 8005046:	b12c      	cbz	r4, 8005054 <SFU_IMG_InitImageHandling+0x28>
      {
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
        TRACE("\r\n= [FWIMG] SLOT_ACTIVE_%d (%x) is not properly aligned\r\n",
 8005048:	481c      	ldr	r0, [pc, #112]	; (80050bc <SFU_IMG_InitImageHandling+0x90>)
 800504a:	462a      	mov	r2, r5
 800504c:	2101      	movs	r1, #1
 800504e:	f004 fc3f 	bl	80098d0 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 8005052:	2403      	movs	r4, #3

  for (i = 0U; i < SFU_NB_MAX_DWL_AREA; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_DWL_1 + i];
 8005054:	4e1a      	ldr	r6, [pc, #104]	; (80050c0 <SFU_IMG_InitImageHandling+0x94>)
 8005056:	9601      	str	r6, [sp, #4]
    if (start_add != 0U)
 8005058:	9b01      	ldr	r3, [sp, #4]
 800505a:	b143      	cbz	r3, 800506e <SFU_IMG_InitImageHandling+0x42>
#else
    if (SlotStartAdd[SLOT_DWL_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if (!IS_ALIGNED(SlotStartAdd[SLOT_DWL_1 + i]))
 800505c:	f3c6 030b 	ubfx	r3, r6, #0, #12
 8005060:	b12b      	cbz	r3, 800506e <SFU_IMG_InitImageHandling+0x42>
      {
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
        TRACE("\r\n= [FWIMG] SLOT_DWL_%d (%x) is not properly aligned\r\n",
 8005062:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <SFU_IMG_InitImageHandling+0x98>)
 8005064:	4818      	ldr	r0, [pc, #96]	; (80050c8 <SFU_IMG_InitImageHandling+0x9c>)
 8005066:	2101      	movs	r1, #1
 8005068:	f004 fc32 	bl	80098d0 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 800506c:	2403      	movs	r4, #3
   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 800506e:	9502      	str	r5, [sp, #8]
    if (start_add != 0U)
 8005070:	9b02      	ldr	r3, [sp, #8]
 8005072:	b153      	cbz	r3, 800508a <SFU_IMG_InitImageHandling+0x5e>
#else
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if (((SlotStartAdd[SLOT_ACTIVE_1 + i] - FLASH_BASE) / FLASH_PAGE_SIZE) <= SFU_PROTECT_WRP_PAGE_END_1)
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <SFU_IMG_InitImageHandling+0xa0>)
 8005076:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <SFU_IMG_InitImageHandling+0xa4>)
 8005078:	0b1b      	lsrs	r3, r3, #12
 800507a:	ebb3 3f12 	cmp.w	r3, r2, lsr #12
 800507e:	d304      	bcc.n	800508a <SFU_IMG_InitImageHandling+0x5e>
      {
        TRACE("\r\n= [FWIMG] SLOT_ACTIVE_%d overlaps SBSFU code area protected by WRP\r\n", i + 1U);
 8005080:	4814      	ldr	r0, [pc, #80]	; (80050d4 <SFU_IMG_InitImageHandling+0xa8>)
 8005082:	2101      	movs	r1, #1
 8005084:	f004 fc24 	bl	80098d0 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 8005088:	2403      	movs	r4, #3
   */
  for (i = 0U; i < SFU_NB_MAX_DWL_AREA; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_DWL_1 + i];
 800508a:	9603      	str	r6, [sp, #12]
    if (start_add != 0U)
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	b153      	cbz	r3, 80050a6 <SFU_IMG_InitImageHandling+0x7a>
#else /* (__GNUC__) */
    if (SlotStartAdd[SLOT_DWL_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if (((SlotStartAdd[SLOT_DWL_1 + i] - FLASH_BASE) / FLASH_PAGE_SIZE) <= SFU_PROTECT_WRP_PAGE_END_1)
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <SFU_IMG_InitImageHandling+0xa0>)
 8005092:	4a11      	ldr	r2, [pc, #68]	; (80050d8 <SFU_IMG_InitImageHandling+0xac>)
 8005094:	0b1b      	lsrs	r3, r3, #12
 8005096:	ebb3 3f12 	cmp.w	r3, r2, lsr #12
 800509a:	d304      	bcc.n	80050a6 <SFU_IMG_InitImageHandling+0x7a>
      {
        TRACE("\r\n= [FWIMG] SLOT_DWL_%d overlaps SBSFU code area protected by WRP\r\n", i + 1U);
 800509c:	480f      	ldr	r0, [pc, #60]	; (80050dc <SFU_IMG_InitImageHandling+0xb0>)
 800509e:	2101      	movs	r1, #1
 80050a0:	f004 fc16 	bl	80098d0 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 80050a4:	2403      	movs	r4, #3

#if  !defined(SFU_NO_SWAP)
  /*
   * Sanity check: specific swap process checks
   */
  e_swap_ret_status = SFU_IMG_CheckSwapImageHandling();
 80050a6:	f000 ffdd 	bl	8006064 <SFU_IMG_CheckSwapImageHandling>
  }
#endif /* defined(SFU_NO_SWAP) */


  return e_ret_status;
}
 80050aa:	2800      	cmp	r0, #0
 80050ac:	bf08      	it	eq
 80050ae:	4620      	moveq	r0, r4
 80050b0:	b004      	add	sp, #16
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	200018d0 	.word	0x200018d0
 80050b8:	08018000 	.word	0x08018000
 80050bc:	0800b88a 	.word	0x0800b88a
 80050c0:	0804c000 	.word	0x0804c000
 80050c4:	00000000 	.word	0x00000000
 80050c8:	0800b8c4 	.word	0x0800b8c4
 80050cc:	00014fff 	.word	0x00014fff
 80050d0:	00018000 	.word	0x00018000
 80050d4:	0800b8fb 	.word	0x0800b8fb
 80050d8:	0004c000 	.word	0x0004c000
 80050dc:	0800b942 	.word	0x0800b942

080050e0 <SFU_IMG_InvalidateCurrentFirmware>:
  *       running the procedure).
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_SUCCESS if successful,SFU_ERROR error otherwise.
  */
SFU_ErrorStatus SFU_IMG_InvalidateCurrentFirmware(uint32_t SlotNumber)
{
 80050e0:	b510      	push	{r4, lr}
 80050e2:	4604      	mov	r4, r0
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Reload Watchdog */
  (void) SFU_LL_SECU_IWDG_Refresh();
 80050e4:	f001 fff6 	bl	80070d4 <SFU_LL_SECU_IWDG_Refresh>

  /* erase active slot except Header (under SECoreBin protection) for the anti-rollback check during next Fw update */
  e_ret_status = CleanUpSlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), SFU_IMG_IMAGE_OFFSET);
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <SFU_IMG_InvalidateCurrentFirmware+0x24>)
 80050ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80050ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80050f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f6:	6a19      	ldr	r1, [r3, #32]
 80050f8:	3101      	adds	r1, #1

  return (e_ret_status);
}
 80050fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  e_ret_status = CleanUpSlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), SFU_IMG_IMAGE_OFFSET);
 80050fe:	1a09      	subs	r1, r1, r0
 8005100:	f7ff bf62 	b.w	8004fc8 <CleanUpSlot>
 8005104:	0800ab9c 	.word	0x0800ab9c

08005108 <SFU_IMG_VerifyActiveImg>:
  *       fw_image_header_validated.
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_VerifyActiveImg(uint32_t SlotNumber)
{
 8005108:	b507      	push	{r0, r1, r2, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  SE_StatusTypeDef e_se_status = SE_KO;
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <SFU_IMG_VerifyActiveImg+0x18>)
 800510c:	9301      	str	r3, [sp, #4]
{
 800510e:	4601      	mov	r1, r0

  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   */
  e_ret_status = VerifyFwSignature(&e_se_status, SlotNumber, &fw_image_header_validated, SE_FW_IMAGE_COMPLETE);
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <SFU_IMG_VerifyActiveImg+0x1c>)
 8005112:	2300      	movs	r3, #0
 8005114:	a801      	add	r0, sp, #4
 8005116:	f7ff ff19 	bl	8004f4c <VerifyFwSignature>
    TRACE("\r\n=         SFU_IMG_VerifyActiveImg failure with se_status=%d!", e_se_status);
  }
#endif /* SFU_VERBOSE_DEBUG_MODE */

  return (e_ret_status);
}
 800511a:	b003      	add	sp, #12
 800511c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005120:	0013023d 	.word	0x0013023d
 8005124:	200018d0 	.word	0x200018d0

08005128 <SFU_IMG_VerifyActiveSlot>:
SFU_ErrorStatus SFU_IMG_VerifyActiveSlot(uint32_t SlotNumber)
{
  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   */
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), fw_image_header_validated.FwSize));
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <SFU_IMG_VerifyActiveSlot+0x20>)
{
 800512a:	b410      	push	{r4}
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), fw_image_header_validated.FwSize));
 800512c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8005130:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005134:	4620      	mov	r0, r4
 8005136:	6a19      	ldr	r1, [r3, #32]
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <SFU_IMG_VerifyActiveSlot+0x24>)
 800513a:	3101      	adds	r1, #1
 800513c:	1b09      	subs	r1, r1, r4
 800513e:	689a      	ldr	r2, [r3, #8]
}
 8005140:	f85d 4b04 	ldr.w	r4, [sp], #4
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), fw_image_header_validated.FwSize));
 8005144:	f7ff bf32 	b.w	8004fac <VerifySlot>
 8005148:	0800ab9c 	.word	0x0800ab9c
 800514c:	200018d0 	.word	0x200018d0

08005150 <SFU_IMG_VerifyEmptyActiveSlot>:
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_VerifyEmptyActiveSlot(uint32_t SlotNumber)
{
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), 0U));
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <SFU_IMG_VerifyEmptyActiveSlot+0x20>)
{
 8005152:	b410      	push	{r4}
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), 0U));
 8005154:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8005158:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800515c:	2200      	movs	r2, #0
 800515e:	6a19      	ldr	r1, [r3, #32]
 8005160:	3101      	adds	r1, #1
 8005162:	1b09      	subs	r1, r1, r4
 8005164:	4620      	mov	r0, r4
}
 8005166:	f85d 4b04 	ldr.w	r4, [sp], #4
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), 0U));
 800516a:	f7ff bf1f 	b.w	8004fac <VerifySlot>
 800516e:	bf00      	nop
 8005170:	0800ab9c 	.word	0x0800ab9c

08005174 <SFU_IMG_ControlActiveImgTag>:
  * @note   This control will be done twice for security reasons (first control done in VerifyFwSignatureScatter)
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_SUCCESS if successful,SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_IMG_ControlActiveImgTag(uint32_t SlotNumber)
{
 8005174:	b508      	push	{r3, lr}
  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   */
  if (MemoryCompare(fw_tag_validated[SlotNumber - SLOT_ACTIVE_1], fw_image_header_validated.FwTag,
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <SFU_IMG_ControlActiveImgTag+0x30>)
 8005178:	490b      	ldr	r1, [pc, #44]	; (80051a8 <SFU_IMG_ControlActiveImgTag+0x34>)
 800517a:	3801      	subs	r0, #1
 800517c:	2220      	movs	r2, #32
 800517e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8005182:	f7ff fd97 	bl	8004cb4 <MemoryCompare>
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <SFU_IMG_ControlActiveImgTag+0x38>)
 8005188:	4298      	cmp	r0, r3
  {
    return SFU_ERROR;
  }
  else
  {
    FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 800518a:	bf01      	itttt	eq
 800518c:	4a08      	ldreq	r2, [pc, #32]	; (80051b0 <SFU_IMG_ControlActiveImgTag+0x3c>)
 800518e:	6813      	ldreq	r3, [r2, #0]
 8005190:	f483 432a 	eoreq.w	r3, r3, #43520	; 0xaa00
 8005194:	f083 03b5 	eoreq.w	r3, r3, #181	; 0xb5
 8005198:	bf0c      	ite	eq
 800519a:	6013      	streq	r3, [r2, #0]
    return SFU_ERROR;
 800519c:	f641 70e1 	movwne	r0, #8161	; 0x1fe1
    return SFU_SUCCESS;
  }

}
 80051a0:	bd08      	pop	{r3, pc}
 80051a2:	bf00      	nop
 80051a4:	200014de 	.word	0x200014de
 80051a8:	200018e4 	.word	0x200018e4
 80051ac:	00122f11 	.word	0x00122f11
 80051b0:	20001014 	.word	0x20001014

080051b4 <SFU_IMG_LaunchActiveImg>:
  *       function (as this needs to be done just before jumping into the user application).
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_ErrorStatus Does not return if successful, returns SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_IMG_LaunchActiveImg(uint32_t SlotNumber)
{
 80051b4:	b538      	push	{r3, r4, r5, lr}
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  /* Verify if authentication/integrity/lock SE service performed */
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_LOCK_SERVICE);
 80051b6:	4b16      	ldr	r3, [pc, #88]	; (8005210 <SFU_IMG_LaunchActiveImg+0x5c>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	f243 03f1 	movw	r3, #12529	; 0x30f1
 80051be:	429a      	cmp	r2, r3
{
 80051c0:	4605      	mov	r5, r0
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_LOCK_SERVICE);
 80051c2:	d001      	beq.n	80051c8 <SFU_IMG_LaunchActiveImg+0x14>
 80051c4:	f7ff fd52 	bl	8004c6c <SFU_EXCPT_Security_Error>
  typedef void (*Function_Pointer)(void);
  Function_Pointer  p_jump_to_function;

#if defined(SFU_MPU_PROTECT_ENABLE)
#if defined(SFU_MPU_USERAPP_ACTIVATION)
  e_ret_status = SFU_LL_SECU_SetProtectionMPU_UserApp();
 80051c8:	f001 ff94 	bl	80070f4 <SFU_LL_SECU_SetProtectionMPU_UserApp>
 80051cc:	4604      	mov	r4, r0
#endif /* SFU_MPU_USERAPP_ACTIVATION */
#endif /* SFU_MPU_PROTECT_ENABLE */

  /* Avoid systick interruption during UserApp start-up
     systick will be re-initialized by HAL_Init() during execution of main() from UserApp */
  HAL_SuspendTick();
 80051ce:	f002 fb01 	bl	80077d4 <HAL_SuspendTick>

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    /* Reset FPU context */
    SCB->CPACR &= ~((3UL << 10*2)|(3UL << 11*2));  /* reset CP10 and CP11 Full Access */
 80051d2:	4a10      	ldr	r2, [pc, #64]	; (8005214 <SFU_IMG_LaunchActiveImg+0x60>)
 80051d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80051d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    FPU->FPCCR &= ~FPU_FPCCR_LSPEN_Msk; /* Disable automatic lazy state preservation for floating-point context */
 80051e0:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <SFU_IMG_LaunchActiveImg+0x64>)
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80051e8:	605a      	str	r2, [r3, #4]
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk; /* Clear the lazy state preservation for floating-point context */
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	605a      	str	r2, [r3, #4]
#endif /* (__FPU_PRESENT == 1) && (__FPU_USED == 1) */

  /* Initialize address of user application to jump into */
  jump_address = *(__IO uint32_t *)((SlotStartAdd[SlotNumber] + SFU_IMG_IMAGE_OFFSET + 4));
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <SFU_IMG_LaunchActiveImg+0x68>)
 80051f4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80051f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
  p_jump_to_function = (Function_Pointer) jump_address;

  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t *)(SlotStartAdd[SlotNumber] + SFU_IMG_IMAGE_OFFSET));
 80051fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005200:	f383 8808 	msr	MSP, r3

  if (SFU_SUCCESS == e_ret_status)
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <SFU_IMG_LaunchActiveImg+0x6c>)
 8005206:	429c      	cmp	r4, r3
 8005208:	d100      	bne.n	800520c <SFU_IMG_LaunchActiveImg+0x58>
  {
    /* JUMP into User App */
    p_jump_to_function();
 800520a:	4790      	blx	r2
  }

  /* The point below should NOT be reached */
  return (e_ret_status);
}
 800520c:	4620      	mov	r0, r4
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	20001014 	.word	0x20001014
 8005214:	e000ed00 	.word	0xe000ed00
 8005218:	e000ef30 	.word	0xe000ef30
 800521c:	0800ab9c 	.word	0x0800ab9c
 8005220:	00122f11 	.word	0x00122f11

08005224 <SFU_IMG_Validation>:
{
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  SFU_FLASH_StatusTypeDef flash_if_status;

  /* Header writing: encrypted part with signature */
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber], (uint8_t *) pFWImageHeader,
 8005224:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <SFU_IMG_Validation+0x6c>)
{
 8005226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber], (uint8_t *) pFWImageHeader,
 8005228:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800522c:	460a      	mov	r2, r1
 800522e:	6c07      	ldr	r7, [r0, #64]	; 0x40
{
 8005230:	460d      	mov	r5, r1
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber], (uint8_t *) pFWImageHeader,
 8005232:	23c0      	movs	r3, #192	; 0xc0
 8005234:	4639      	mov	r1, r7
 8005236:	f10d 0007 	add.w	r0, sp, #7
 800523a:	f001 fca4 	bl	8006b86 <SFU_LL_FLASH_Write>
                                    SE_FW_AUTH_LEN + SE_FW_HEADER_SIGN_LEN);
  STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 800523e:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 8005242:	42b0      	cmp	r0, r6
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber], (uint8_t *) pFWImageHeader,
 8005244:	4604      	mov	r4, r0
  STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005246:	d10d      	bne.n	8005264 <SFU_IMG_Validation+0x40>
 8005248:	4b12      	ldr	r3, [pc, #72]	; (8005294 <SFU_IMG_Validation+0x70>)
 800524a:	2102      	movs	r1, #2
 800524c:	7019      	strb	r1, [r3, #0]
 800524e:	f240 329f 	movw	r2, #927	; 0x39f
  if (e_ret_status == SFU_SUCCESS)
  {
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *)(SlotHeaderAdd[SlotNumber] + SE_FW_HEADER_TOT_LEN -
                                                                    SE_FW_HEADER_FINGERPRINT_LEN),
                                      (uint8_t *) pFWImageHeader->PrevHeaderFingerprint, SE_FW_HEADER_FINGERPRINT_LEN);
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005252:	4b11      	ldr	r3, [pc, #68]	; (8005298 <SFU_IMG_Validation+0x74>)
 8005254:	4811      	ldr	r0, [pc, #68]	; (800529c <SFU_IMG_Validation+0x78>)
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <SFU_IMG_Validation+0x7c>)
 800525a:	f004 fb39 	bl	80098d0 <iprintf>
  }


  return e_ret_status;
}
 800525e:	4620      	mov	r0, r4
 8005260:	b003      	add	sp, #12
 8005262:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (e_ret_status == SFU_SUCCESS)
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <SFU_IMG_Validation+0x80>)
 8005266:	4298      	cmp	r0, r3
 8005268:	d1f9      	bne.n	800525e <SFU_IMG_Validation+0x3a>
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *)(SlotHeaderAdd[SlotNumber] + SE_FW_HEADER_TOT_LEN -
 800526a:	2320      	movs	r3, #32
 800526c:	f505 7290 	add.w	r2, r5, #288	; 0x120
 8005270:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8005274:	f10d 0007 	add.w	r0, sp, #7
 8005278:	f001 fc85 	bl	8006b86 <SFU_LL_FLASH_Write>
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 800527c:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *)(SlotHeaderAdd[SlotNumber] + SE_FW_HEADER_TOT_LEN -
 800527e:	4604      	mov	r4, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005280:	d1ed      	bne.n	800525e <SFU_IMG_Validation+0x3a>
 8005282:	4b04      	ldr	r3, [pc, #16]	; (8005294 <SFU_IMG_Validation+0x70>)
 8005284:	2102      	movs	r1, #2
 8005286:	7019      	strb	r1, [r3, #0]
 8005288:	f240 32a9 	movw	r2, #937	; 0x3a9
 800528c:	e7e1      	b.n	8005252 <SFU_IMG_Validation+0x2e>
 800528e:	bf00      	nop
 8005290:	0800ab9c 	.word	0x0800ab9c
 8005294:	200018cc 	.word	0x200018cc
 8005298:	200018c8 	.word	0x200018c8
 800529c:	0800ba17 	.word	0x0800ba17
 80052a0:	0800b986 	.word	0x0800b986
 80052a4:	00122f11 	.word	0x00122f11

080052a8 <SFU_IMG_GetFwImageSlot>:
  * @brief  Get firmware image ID from header.
  * @param  pFwImageHeader pointer to a structure to handle the header info
  * @retval Fw Id : SLOT_ACTIVE_1 / 2 /... / SFU_NB_MAX_ACTIVE_IMAGE
  */
uint32_t SFU_IMG_GetFwImageSlot(SE_FwRawHeaderTypeDef *pFwImageHeader)
{
 80052a8:	b508      	push	{r3, lr}
  uint32_t active_slot;

  if (memcmp(pFwImageHeader->SFUMagic, SFUM_1, strlen(SFUM_1)) == 0)
 80052aa:	4904      	ldr	r1, [pc, #16]	; (80052bc <SFU_IMG_GetFwImageSlot+0x14>)
 80052ac:	2204      	movs	r2, #4
 80052ae:	f004 faeb 	bl	8009888 <memcmp>
  {
    active_slot = SLOT_INACTIVE;
  }

  return active_slot;
}
 80052b2:	fab0 f080 	clz	r0, r0
 80052b6:	0940      	lsrs	r0, r0, #5
 80052b8:	bd08      	pop	{r3, pc}
 80052ba:	bf00      	nop
 80052bc:	0800ba51 	.word	0x0800ba51

080052c0 <VerifyHeaderSignature>:
{
 80052c0:	b513      	push	{r0, r1, r4, lr}
 80052c2:	4604      	mov	r4, r0
  if (SFU_IMG_GetFwImageSlot(pFwImageHeader) != SLOT_INACTIVE)
 80052c4:	f7ff fff0 	bl	80052a8 <SFU_IMG_GetFwImageSlot>
 80052c8:	b918      	cbnz	r0, 80052d2 <VerifyHeaderSignature+0x12>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 80052ca:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 80052ce:	b002      	add	sp, #8
 80052d0:	bd10      	pop	{r4, pc}
 80052d2:	f104 0264 	add.w	r2, r4, #100	; 0x64
 80052d6:	f104 0180 	add.w	r1, r4, #128	; 0x80
  uint8_t result = 0x00U;
 80052da:	2300      	movs	r3, #0
      result |= pFwImageHeader->Reserved[i] ^ 0x00U;
 80052dc:	f812 0b01 	ldrb.w	r0, [r2], #1
    for (i = 0U; i < sizeof(pFwImageHeader->Reserved); i++)
 80052e0:	428a      	cmp	r2, r1
      result |= pFwImageHeader->Reserved[i] ^ 0x00U;
 80052e2:	ea43 0300 	orr.w	r3, r3, r0
    for (i = 0U; i < sizeof(pFwImageHeader->Reserved); i++)
 80052e6:	d1f9      	bne.n	80052dc <VerifyHeaderSignature+0x1c>
    if (result == 0x00U)
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1ee      	bne.n	80052ca <VerifyHeaderSignature+0xa>
      if (SE_VerifyHeaderSignature(&se_status, pFwImageHeader) == SE_SUCCESS)
 80052ec:	4621      	mov	r1, r4
 80052ee:	a801      	add	r0, sp, #4
 80052f0:	f7fe fbce 	bl	8003a90 <SE_VerifyHeaderSignature>
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <VerifyHeaderSignature+0x4c>)
 80052f6:	4298      	cmp	r0, r3
 80052f8:	d1e7      	bne.n	80052ca <VerifyHeaderSignature+0xa>
        FLOW_STEP(uFlowCryptoValue, FLOW_STEP_AUTHENTICATE);
 80052fa:	4a05      	ldr	r2, [pc, #20]	; (8005310 <VerifyHeaderSignature+0x50>)
 80052fc:	4805      	ldr	r0, [pc, #20]	; (8005314 <VerifyHeaderSignature+0x54>)
 80052fe:	6813      	ldr	r3, [r2, #0]
 8005300:	f483 43f3 	eor.w	r3, r3, #31104	; 0x7980
 8005304:	f083 0319 	eor.w	r3, r3, #25
 8005308:	6013      	str	r3, [r2, #0]
  return e_ret_status;
 800530a:	e7e0      	b.n	80052ce <VerifyHeaderSignature+0xe>
 800530c:	0012310f 	.word	0x0012310f
 8005310:	20001014 	.word	0x20001014
 8005314:	00122f11 	.word	0x00122f11

08005318 <CheckAndGetFWHeader>:
  e_ret_status = SFU_LL_FLASH_Read((uint8_t *) pFwImageHeader, (uint8_t *) SlotHeaderAdd[SlotNumber],
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <CheckAndGetFWHeader+0x28>)
 800531a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800531e:	b510      	push	{r4, lr}
 8005320:	460c      	mov	r4, r1
  e_ret_status = SFU_LL_FLASH_Read((uint8_t *) pFwImageHeader, (uint8_t *) SlotHeaderAdd[SlotNumber],
 8005322:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005326:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005328:	4620      	mov	r0, r4
 800532a:	f001 fc33 	bl	8006b94 <SFU_LL_FLASH_Read>
  if (e_ret_status == SFU_SUCCESS)
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <CheckAndGetFWHeader+0x2c>)
 8005330:	4298      	cmp	r0, r3
 8005332:	d104      	bne.n	800533e <CheckAndGetFWHeader+0x26>
    e_ret_status = VerifyHeaderSignature(pFwImageHeader);
 8005334:	4620      	mov	r0, r4
}
 8005336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e_ret_status = VerifyHeaderSignature(pFwImageHeader);
 800533a:	f7ff bfc1 	b.w	80052c0 <VerifyHeaderSignature>
}
 800533e:	bd10      	pop	{r4, pc}
 8005340:	0800ab9c 	.word	0x0800ab9c
 8005344:	00122f11 	.word	0x00122f11

08005348 <SFU_IMG_VerifyActiveImgMetadata>:
  return (CheckAndGetFWHeader(SlotNumber, &fw_image_header_validated));
 8005348:	4901      	ldr	r1, [pc, #4]	; (8005350 <SFU_IMG_VerifyActiveImgMetadata+0x8>)
 800534a:	f7ff bfe5 	b.w	8005318 <CheckAndGetFWHeader>
 800534e:	bf00      	nop
 8005350:	200018d0 	.word	0x200018d0

08005354 <SFU_IMG_GetActiveFwVersion>:
{
 8005354:	b500      	push	{lr}
 8005356:	b0d1      	sub	sp, #324	; 0x144
  e_ret_status = CheckAndGetFWHeader(SlotNumber, &fw_image_header);
 8005358:	4669      	mov	r1, sp
 800535a:	f7ff ffdd 	bl	8005318 <CheckAndGetFWHeader>
  if (e_ret_status == SFU_SUCCESS)
 800535e:	4b04      	ldr	r3, [pc, #16]	; (8005370 <SFU_IMG_GetActiveFwVersion+0x1c>)
 8005360:	4298      	cmp	r0, r3
    version = fw_image_header.FwVersion;
 8005362:	bf0c      	ite	eq
 8005364:	f8bd 0006 	ldrheq.w	r0, [sp, #6]
  uint16_t version = 0;
 8005368:	2000      	movne	r0, #0
}
 800536a:	b051      	add	sp, #324	; 0x144
 800536c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005370:	00122f11 	.word	0x00122f11

08005374 <SFU_IMG_DetectFW>:
{
 8005374:	b570      	push	{r4, r5, r6, lr}
  pbuffer = (uint8_t *) SlotHeaderAdd[SlotNumber];
 8005376:	4e11      	ldr	r6, [pc, #68]	; (80053bc <SFU_IMG_DetectFW+0x48>)
 8005378:	eb06 0380 	add.w	r3, r6, r0, lsl #2
{
 800537c:	b0d0      	sub	sp, #320	; 0x140
  if (SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer)) == SFU_SUCCESS)
 800537e:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 8005380:	4605      	mov	r5, r0
  if (SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer)) == SFU_SUCCESS)
 8005382:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005386:	4668      	mov	r0, sp
 8005388:	f001 fc04 	bl	8006b94 <SFU_LL_FLASH_Read>
 800538c:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <SFU_IMG_DetectFW+0x4c>)
 800538e:	4298      	cmp	r0, r3
 8005390:	4604      	mov	r4, r0
 8005392:	d004      	beq.n	800539e <SFU_IMG_DetectFW+0x2a>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8005394:	f641 74e1 	movw	r4, #8161	; 0x1fe1
}
 8005398:	4620      	mov	r0, r4
 800539a:	b050      	add	sp, #320	; 0x140
 800539c:	bd70      	pop	{r4, r5, r6, pc}
    if (SFU_IMG_GetFwImageSlot(p_header) != SLOT_INACTIVE)
 800539e:	4668      	mov	r0, sp
 80053a0:	f7ff ff82 	bl	80052a8 <SFU_IMG_GetFwImageSlot>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d0f5      	beq.n	8005394 <SFU_IMG_DetectFW+0x20>
      if (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SFU_IMG_IMAGE_OFFSET + 0x20U, 0U) != SFU_SUCCESS)
 80053a8:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f44f 7108 	mov.w	r1, #544	; 0x220
 80053b2:	f7ff fdfb 	bl	8004fac <VerifySlot>
 80053b6:	42a0      	cmp	r0, r4
 80053b8:	d1ee      	bne.n	8005398 <SFU_IMG_DetectFW+0x24>
 80053ba:	e7eb      	b.n	8005394 <SFU_IMG_DetectFW+0x20>
 80053bc:	0800ab9c 	.word	0x0800ab9c
 80053c0:	00122f11 	.word	0x00122f11

080053c4 <SFU_IMG_CheckFwVersion>:
{
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  UNUSED(ActiveSlot);

  /* If the header of the active firmware is not valid, the CurrentVersion is 0 */
  if (CurrentVersion == 0U)
 80053c4:	b931      	cbnz	r1, 80053d4 <SFU_IMG_CheckFwVersion+0x10>
     * installation of a specific version identified by SFU_FW_VERSION_INIT_NUM.
     */
    if (CandidateVersion == SFU_FW_VERSION_INIT_NUM)
    {
      /* Candidate version is allowed */
      e_ret_status = SFU_SUCCESS;
 80053c6:	4809      	ldr	r0, [pc, #36]	; (80053ec <SFU_IMG_CheckFwVersion+0x28>)
 80053c8:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80053cc:	2a01      	cmp	r2, #1
 80053ce:	bf18      	it	ne
 80053d0:	4618      	movne	r0, r3
 80053d2:	4770      	bx	lr
    /*
     * It is not allowed to install a Firmware with a lower version than the active firmware.
     * But we authorize the re-installation of the current firmware version.
     * We also check that the candidate version is at least the min. allowed version for this device.
     */
    if ((CandidateVersion >= CurrentVersion) && (CandidateVersion >= SFU_FW_VERSION_START_NUM))
 80053d4:	4291      	cmp	r1, r2
 80053d6:	d806      	bhi.n	80053e6 <SFU_IMG_CheckFwVersion+0x22>
      e_ret_status = SFU_SUCCESS;
 80053d8:	4804      	ldr	r0, [pc, #16]	; (80053ec <SFU_IMG_CheckFwVersion+0x28>)
 80053da:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80053de:	2a00      	cmp	r2, #0
 80053e0:	bf08      	it	eq
 80053e2:	4618      	moveq	r0, r3
 80053e4:	4770      	bx	lr
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 80053e6:	f641 70e1 	movw	r0, #8161	; 0x1fe1
#endif /* SFU_VERBOSE_DEBUG_MODE */

  }

  return e_ret_status;
}
 80053ea:	4770      	bx	lr
 80053ec:	00122f11 	.word	0x00122f11

080053f0 <SFU_IMG_CheckCandidateVersion>:
#elif defined ( __GNUC__ )
__attribute__((optimize("O1")))
#endif /* __ICCARM__ */

SFU_ErrorStatus SFU_IMG_CheckCandidateVersion(uint32_t DwlSlot)
{
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	4605      	mov	r5, r0
   * - Check version is allowed
   *      SFU_IMG_GetActiveFwVersion() returns 0 if the header of active firmware is not valid
   */

  /* Header analysis to find slot based on number with magic tag */
  active_slot = SFU_IMG_GetFwImageSlot(&fw_image_header_to_test);
 80053f6:	4e1e      	ldr	r6, [pc, #120]	; (8005470 <SFU_IMG_CheckCandidateVersion+0x80>)
 80053f8:	4630      	mov	r0, r6
 80053fa:	f7ff ff55 	bl	80052a8 <SFU_IMG_GetFwImageSlot>
 80053fe:	4604      	mov	r4, r0

  /* Get the version of active_slot */
  cur_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 8005400:	f7ff ffa8 	bl	8005354 <SFU_IMG_GetActiveFwVersion>
 8005404:	4601      	mov	r1, r0

  if (SFU_IMG_CheckFwVersion(active_slot, cur_ver, fw_image_header_to_test.FwVersion) != SFU_SUCCESS)
 8005406:	88f2      	ldrh	r2, [r6, #6]
 8005408:	4620      	mov	r0, r4
 800540a:	f7ff ffdb 	bl	80053c4 <SFU_IMG_CheckFwVersion>
 800540e:	4b19      	ldr	r3, [pc, #100]	; (8005474 <SFU_IMG_CheckCandidateVersion+0x84>)
 8005410:	4298      	cmp	r0, r3
 8005412:	d021      	beq.n	8005458 <SFU_IMG_CheckCandidateVersion+0x68>
  {
    /* The installation is forbidden */
    /* Memorize this error as this will be handled as a critical failure */
    SFU_EXCPT_SetError(SFU_EXCPT_VERSION_ERR);
 8005414:	2017      	movs	r0, #23
 8005416:	f7ff fbf7 	bl	8004c08 <SFU_EXCPT_SetError>

    /* We would enter an infinite loop of installation attempts if we do not clean-up the dwl slot header */
    e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *)SlotStartAdd[DwlSlot], SFU_IMG_IMAGE_OFFSET);
 800541a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <SFU_IMG_CheckCandidateVersion+0x88>)
 8005420:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8005424:	f10d 0007 	add.w	r0, sp, #7
 8005428:	f001 fba6 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
 800542c:	4604      	mov	r4, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 800542e:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005432:	4298      	cmp	r0, r3
 8005434:	d004      	beq.n	8005440 <SFU_IMG_CheckCandidateVersion+0x50>

    /* leave now to handle the critical failure in the appropriate FSM state */
    e_ret_status = SFU_ERROR;
 8005436:	f641 74e1 	movw	r4, #8161	; 0x1fe1
    e_ret_status = SFU_IMG_CheckFwVersion(active_slot, verif_ver, fw_image_header_to_test.FwVersion);
  }

  /* Return the result */
  return (e_ret_status);
}
 800543a:	4620      	mov	r0, r4
 800543c:	b002      	add	sp, #8
 800543e:	bd70      	pop	{r4, r5, r6, pc}
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8005440:	2101      	movs	r1, #1
 8005442:	4b0e      	ldr	r3, [pc, #56]	; (800547c <SFU_IMG_CheckCandidateVersion+0x8c>)
 8005444:	7019      	strb	r1, [r3, #0]
 8005446:	f240 4241 	movw	r2, #1089	; 0x441
 800544a:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <SFU_IMG_CheckCandidateVersion+0x90>)
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <SFU_IMG_CheckCandidateVersion+0x94>)
 8005450:	480d      	ldr	r0, [pc, #52]	; (8005488 <SFU_IMG_CheckCandidateVersion+0x98>)
 8005452:	f004 fa3d 	bl	80098d0 <iprintf>
 8005456:	e7f0      	b.n	800543a <SFU_IMG_CheckCandidateVersion+0x4a>
    verif_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff ff7b 	bl	8005354 <SFU_IMG_GetActiveFwVersion>
 800545e:	4601      	mov	r1, r0
    e_ret_status = SFU_IMG_CheckFwVersion(active_slot, verif_ver, fw_image_header_to_test.FwVersion);
 8005460:	4b03      	ldr	r3, [pc, #12]	; (8005470 <SFU_IMG_CheckCandidateVersion+0x80>)
 8005462:	88da      	ldrh	r2, [r3, #6]
 8005464:	4620      	mov	r0, r4
 8005466:	f7ff ffad 	bl	80053c4 <SFU_IMG_CheckFwVersion>
 800546a:	4604      	mov	r4, r0
 800546c:	e7e5      	b.n	800543a <SFU_IMG_CheckCandidateVersion+0x4a>
 800546e:	bf00      	nop
 8005470:	20001788 	.word	0x20001788
 8005474:	00122f11 	.word	0x00122f11
 8005478:	0800ab9c 	.word	0x0800ab9c
 800547c:	200018cc 	.word	0x200018cc
 8005480:	200018c8 	.word	0x200018c8
 8005484:	0800b986 	.word	0x0800b986
 8005488:	0800ba17 	.word	0x0800ba17

0800548c <CleanMagicValue>:
  * @brief  Clean Magic value
  * @param  DwlSlot identification of the downloaded area
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
static SFU_ErrorStatus CleanMagicValue(uint32_t DwlSlot)
{
 800548c:	b530      	push	{r4, r5, lr}
 800548e:	b08b      	sub	sp, #44	; 0x2c
 8005490:	4604      	mov	r4, r0
  SFU_FLASH_StatusTypeDef flash_if_info;
  uint8_t clean_tag[MAGIC_LENGTH];

  /* set the clean tag into trailer */
  (void) memset(clean_tag, 0x55, MAGIC_LENGTH);
 8005492:	2220      	movs	r2, #32
 8005494:	2155      	movs	r1, #85	; 0x55
 8005496:	a802      	add	r0, sp, #8
 8005498:	f004 fa12 	bl	80098c0 <memset>
  return SFU_LL_FLASH_Write(&flash_if_info, TRAILER_CLEAN_ADDR(DwlSlot), clean_tag, MAGIC_LENGTH);
 800549c:	480d      	ldr	r0, [pc, #52]	; (80054d4 <CleanMagicValue+0x48>)
 800549e:	4a0e      	ldr	r2, [pc, #56]	; (80054d8 <CleanMagicValue+0x4c>)
 80054a0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80054a4:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80054a8:	69d2      	ldr	r2, [r2, #28]
 80054aa:	f203 25a1 	addw	r5, r3, #673	; 0x2a1
 80054ae:	3301      	adds	r3, #1
 80054b0:	1a5b      	subs	r3, r3, r1
 80054b2:	69c1      	ldr	r1, [r0, #28]
 80054b4:	3101      	adds	r1, #1
 80054b6:	1a89      	subs	r1, r1, r2
 80054b8:	fbb3 f1f1 	udiv	r1, r3, r1
 80054bc:	312c      	adds	r1, #44	; 0x2c
 80054be:	2320      	movs	r3, #32
 80054c0:	aa02      	add	r2, sp, #8
 80054c2:	eba5 1101 	sub.w	r1, r5, r1, lsl #4
 80054c6:	f10d 0007 	add.w	r0, sp, #7
 80054ca:	f001 fb5c 	bl	8006b86 <SFU_LL_FLASH_Write>
}
 80054ce:	b00b      	add	sp, #44	; 0x2c
 80054d0:	bd30      	pop	{r4, r5, pc}
 80054d2:	bf00      	nop
 80054d4:	0800abbc 	.word	0x0800abbc
 80054d8:	0800ab9c 	.word	0x0800ab9c

080054dc <EraseSlotIndex>:
  * @param  SlotNumber index of the slot in the list
  * @param  Index This is the number of "swap size" we jump from the slot start
  * @retval SFU_ SUCCESS if valid, a SFU_ErrorStatus error otherwise.
  */
static SFU_ErrorStatus EraseSlotIndex(uint32_t SlotNumber, uint32_t index)
{
 80054dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SFU_FLASH_StatusTypeDef flash_if_status;
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  uint32_t buffer;

  buffer = SlotStartAdd[SlotNumber];
 80054de:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <EraseSlotIndex+0x78>)
{
 80054e0:	460b      	mov	r3, r1
  buffer = buffer + (SLOT_SIZE(SLOT_SWAP) * index);
 80054e2:	491d      	ldr	r1, [pc, #116]	; (8005558 <EraseSlotIndex+0x7c>)
  buffer = SlotStartAdd[SlotNumber];
 80054e4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
  buffer = buffer + (SLOT_SIZE(SLOT_SWAP) * index);
 80054e8:	69cd      	ldr	r5, [r1, #28]
 80054ea:	69d2      	ldr	r2, [r2, #28]

  /* If this is an active slot and the index is 0 then header is concerned */
  if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber <= (SLOT_ACTIVE_1 + SFU_NB_MAX_ACTIVE_IMAGE)) && (index == 0U))
 80054ec:	1e44      	subs	r4, r0, #1
  buffer = buffer + (SLOT_SIZE(SLOT_SWAP) * index);
 80054ee:	1aad      	subs	r5, r5, r2
 80054f0:	fb05 3103 	mla	r1, r5, r3, r3
  if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber <= (SLOT_ACTIVE_1 + SFU_NB_MAX_ACTIVE_IMAGE)) && (index == 0U))
 80054f4:	2c01      	cmp	r4, #1
  buffer = buffer + (SLOT_SIZE(SLOT_SWAP) * index);
 80054f6:	f105 0201 	add.w	r2, r5, #1
 80054fa:	4431      	add	r1, r6
  if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber <= (SLOT_ACTIVE_1 + SFU_NB_MAX_ACTIVE_IMAGE)) && (index == 0U))
 80054fc:	d812      	bhi.n	8005524 <EraseSlotIndex+0x48>
 80054fe:	b98b      	cbnz	r3, 8005524 <EraseSlotIndex+0x48>
    /*
     *  As the header may not be contiguous with FW, this action is split in 2 actions :
     *    - HEADER : executed in secured environment
     *    - remaining part : done by SBSFU
     */
    e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber],
 8005500:	4b16      	ldr	r3, [pc, #88]	; (800555c <EraseSlotIndex+0x80>)
 8005502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005506:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800550a:	f10d 0007 	add.w	r0, sp, #7
 800550e:	f001 fb33 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
                                           SFU_IMG_IMAGE_OFFSET) ;
    if (e_ret_status == SFU_SUCCESS)
 8005512:	4b13      	ldr	r3, [pc, #76]	; (8005560 <EraseSlotIndex+0x84>)
 8005514:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber],
 8005516:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 8005518:	d109      	bne.n	800552e <EraseSlotIndex+0x52>
    {
      e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[SlotNumber] +
 800551a:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 800551e:	18ea      	adds	r2, r5, r3
 8005520:	f506 7100 	add.w	r1, r6, #512	; 0x200
                                             SFU_IMG_IMAGE_OFFSET, SLOT_SIZE(SLOT_SWAP) - SFU_IMG_IMAGE_OFFSET);
    }
  }
  else
  {
    e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *)buffer, SLOT_SIZE(SLOT_SWAP)) ;
 8005524:	f10d 0007 	add.w	r0, sp, #7
 8005528:	f001 fb26 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
 800552c:	4604      	mov	r4, r0
  }

  STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED)
 800552e:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005532:	429c      	cmp	r4, r3
 8005534:	d10a      	bne.n	800554c <EraseSlotIndex+0x70>
 8005536:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <EraseSlotIndex+0x88>)
 8005538:	480b      	ldr	r0, [pc, #44]	; (8005568 <EraseSlotIndex+0x8c>)
 800553a:	2101      	movs	r1, #1
 800553c:	7019      	strb	r1, [r3, #0]
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <EraseSlotIndex+0x90>)
 8005540:	f240 126b 	movw	r2, #363	; 0x16b
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <EraseSlotIndex+0x94>)
 8005548:	f004 f9c2 	bl	80098d0 <iprintf>
  return e_ret_status;
}
 800554c:	4620      	mov	r0, r4
 800554e:	b002      	add	sp, #8
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	bf00      	nop
 8005554:	0800ab9c 	.word	0x0800ab9c
 8005558:	0800abbc 	.word	0x0800abbc
 800555c:	0800abdc 	.word	0x0800abdc
 8005560:	00122f11 	.word	0x00122f11
 8005564:	200018cc 	.word	0x200018cc
 8005568:	0800ba17 	.word	0x0800ba17
 800556c:	200018c8 	.word	0x200018c8
 8005570:	0800ba56 	.word	0x0800ba56

08005574 <FirmwareToInstall.constprop.0>:
  * @brief  Check that there is an Image to Install
  * @param  DwlSlot identification of the downloaded area
  * @param  pFwImageHeader pointer to fw header to install
  * @retval SFU_SUCCESS if Image can be installed, a SFU_ERROR  otherwise.
  */
static SFU_ErrorStatus FirmwareToInstall(uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 8005574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  uint8_t *p_header_swap;
  uint8_t fw_header_dwl_slot[SE_FW_HEADER_TOT_LEN];
  uint32_t trailer_begin = (uint32_t) TRAILER_BEGIN(DwlSlot);
 8005578:	4a20      	ldr	r2, [pc, #128]	; (80055fc <FirmwareToInstall.constprop.0+0x88>)
     * The anti-rollback check is implemented at installation stage (SFU_IMG_InstallNewVersion)
     * to be able to handle a specific error cause.
     */

  /*  check swap header */
  e_ret_status = CheckAndGetFWHeader(SLOT_SWAP, pFwImageHeader);
 800557a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005608 <FirmwareToInstall.constprop.0+0x94>
  uint32_t trailer_begin = (uint32_t) TRAILER_BEGIN(DwlSlot);
 800557e:	4b20      	ldr	r3, [pc, #128]	; (8005600 <FirmwareToInstall.constprop.0+0x8c>)
 8005580:	6915      	ldr	r5, [r2, #16]
 8005582:	69d2      	ldr	r2, [r2, #28]
 8005584:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005588:	69df      	ldr	r7, [r3, #28]
  if (e_ret_status == SFU_SUCCESS)
 800558a:	4e1e      	ldr	r6, [pc, #120]	; (8005604 <FirmwareToInstall.constprop.0+0x90>)
static SFU_ErrorStatus FirmwareToInstall(uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 800558c:	b0d3      	sub	sp, #332	; 0x14c
  e_ret_status = CheckAndGetFWHeader(SLOT_SWAP, pFwImageHeader);
 800558e:	4649      	mov	r1, r9
 8005590:	2007      	movs	r0, #7
  uint32_t trailer_begin = (uint32_t) TRAILER_BEGIN(DwlSlot);
 8005592:	9201      	str	r2, [sp, #4]
  e_ret_status = CheckAndGetFWHeader(SLOT_SWAP, pFwImageHeader);
 8005594:	f7ff fec0 	bl	8005318 <CheckAndGetFWHeader>
  if (e_ret_status == SFU_SUCCESS)
 8005598:	42b0      	cmp	r0, r6
  e_ret_status = CheckAndGetFWHeader(SLOT_SWAP, pFwImageHeader);
 800559a:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 800559c:	d126      	bne.n	80055ec <FirmwareToInstall.constprop.0+0x78>
  {
    /*  compare the header in dwl slot with the header in swap */
    p_header_swap = (uint8_t *) pFwImageHeader;
    e_ret_status = SFU_LL_FLASH_Read(fw_header_dwl_slot, (uint8_t *) SlotStartAdd[DwlSlot],
 800559e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80055a2:	4641      	mov	r1, r8
 80055a4:	a802      	add	r0, sp, #8
 80055a6:	f001 faf5 	bl	8006b94 <SFU_LL_FLASH_Read>
                                     sizeof(fw_header_dwl_slot));
    if (e_ret_status == SFU_SUCCESS)
 80055aa:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_FLASH_Read(fw_header_dwl_slot, (uint8_t *) SlotStartAdd[DwlSlot],
 80055ac:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 80055ae:	d11d      	bne.n	80055ec <FirmwareToInstall.constprop.0+0x78>
  uint32_t trailer_begin = (uint32_t) TRAILER_BEGIN(DwlSlot);
 80055b0:	9e01      	ldr	r6, [sp, #4]
 80055b2:	f2a5 23bf 	subw	r3, r5, #703	; 0x2bf
 80055b6:	3601      	adds	r6, #1
 80055b8:	3501      	adds	r5, #1
 80055ba:	eba5 0508 	sub.w	r5, r5, r8
 80055be:	1bf7      	subs	r7, r6, r7
 80055c0:	fbb5 f5f7 	udiv	r5, r5, r7
 80055c4:	eba3 1505 	sub.w	r5, r3, r5, lsl #4
    {
      /* image header in dwl slot not consistent with swap header */
      end_of_test_image = (SlotStartAdd[DwlSlot] + pFwImageHeader->FwSize +
 80055c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80055cc:	4498      	add	r8, r3
 80055ce:	f508 7800 	add.w	r8, r8, #512	; 0x200

      /* the header in swap must be the same as the header in dwl slot */
      ret = memcmp(fw_header_dwl_slot, p_header_swap, SE_FW_HEADER_TOT_LEN);

      /* Check if there is enough room for the trailers */
      if ((trailer_begin < end_of_test_image) || (ret != 0))
 80055d2:	4545      	cmp	r5, r8
 80055d4:	d30e      	bcc.n	80055f4 <FirmwareToInstall.constprop.0+0x80>
      ret = memcmp(fw_header_dwl_slot, p_header_swap, SE_FW_HEADER_TOT_LEN);
 80055d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80055da:	4649      	mov	r1, r9
 80055dc:	a802      	add	r0, sp, #8
 80055de:	f004 f953 	bl	8009888 <memcmp>
        /*
          * These error causes are not memorized in the BootInfo area because there won't be any error handling
          * procedure.
          * If this function returns that no new firmware can be installed (as this may be a normal case).
          */
        e_ret_status = SFU_ERROR;
 80055e2:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80055e6:	2800      	cmp	r0, #0
 80055e8:	bf18      	it	ne
 80055ea:	461c      	movne	r4, r3
        e_ret_status = SFU_SUCCESS;
      }
    }
  }
  return e_ret_status;
}
 80055ec:	4620      	mov	r0, r4
 80055ee:	b053      	add	sp, #332	; 0x14c
 80055f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        e_ret_status = SFU_ERROR;
 80055f4:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 80055f8:	e7f8      	b.n	80055ec <FirmwareToInstall.constprop.0+0x78>
 80055fa:	bf00      	nop
 80055fc:	0800abbc 	.word	0x0800abbc
 8005600:	0800ab9c 	.word	0x0800ab9c
 8005604:	00122f11 	.word	0x00122f11
 8005608:	20001788 	.word	0x20001788

0800560c <DecryptImageInDwlSlot.constprop.0>:
static SFU_ErrorStatus DecryptImageInDwlSlot(uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 800560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t NumberOfChunkPerSwap = SLOT_SIZE(SLOT_SWAP) / SFU_IMG_CHUNK_SIZE;
 8005610:	4b8c      	ldr	r3, [pc, #560]	; (8005844 <DecryptImageInDwlSlot.constprop.0+0x238>)
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_PARTIAL);
 8005612:	498d      	ldr	r1, [pc, #564]	; (8005848 <DecryptImageInDwlSlot.constprop.0+0x23c>)
  uint32_t NumberOfChunkPerSwap = SLOT_SIZE(SLOT_SWAP) / SFU_IMG_CHUNK_SIZE;
 8005614:	69db      	ldr	r3, [r3, #28]
static SFU_ErrorStatus DecryptImageInDwlSlot(uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 8005616:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_PARTIAL);
 800561a:	2201      	movs	r2, #1
static SFU_ErrorStatus DecryptImageInDwlSlot(uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 800561c:	9005      	str	r0, [sp, #20]
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_PARTIAL);
 800561e:	a809      	add	r0, sp, #36	; 0x24
  uint32_t NumberOfChunkPerSwap = SLOT_SIZE(SLOT_SWAP) / SFU_IMG_CHUNK_SIZE;
 8005620:	9304      	str	r3, [sp, #16]
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_PARTIAL);
 8005622:	f7fe f939 	bl	8003898 <SE_Decrypt_Init>
  if ((se_ret_status == SE_SUCCESS) && (e_se_status == SE_OK))
 8005626:	4b89      	ldr	r3, [pc, #548]	; (800584c <DecryptImageInDwlSlot.constprop.0+0x240>)
 8005628:	9306      	str	r3, [sp, #24]
 800562a:	4298      	cmp	r0, r3
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_PARTIAL);
 800562c:	4680      	mov	r8, r0
  if ((se_ret_status == SE_SUCCESS) && (e_se_status == SE_OK))
 800562e:	f040 80be 	bne.w	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
 8005632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005634:	4a86      	ldr	r2, [pc, #536]	; (8005850 <DecryptImageInDwlSlot.constprop.0+0x244>)
 8005636:	4293      	cmp	r3, r2
 8005638:	f040 80b9 	bne.w	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
  uint32_t NumberOfChunkPerSwap = SLOT_SIZE(SLOT_SWAP) / SFU_IMG_CHUNK_SIZE;
 800563c:	4a85      	ldr	r2, [pc, #532]	; (8005854 <DecryptImageInDwlSlot.constprop.0+0x248>)
    while ((e_ret_status == SFU_SUCCESS) && (fw_decrypted_total_size < (pFwImageHeader->PartialFwSize)) &&
 800563e:	9307      	str	r3, [sp, #28]
  uint32_t NumberOfChunkPerSwap = SLOT_SIZE(SLOT_SWAP) / SFU_IMG_CHUNK_SIZE;
 8005640:	69d5      	ldr	r5, [r2, #28]
 8005642:	9a04      	ldr	r2, [sp, #16]
 8005644:	3501      	adds	r5, #1
  uint32_t fw_source_address = 0U;
 8005646:	2700      	movs	r7, #0
  uint32_t NumberOfChunkPerSwap = SLOT_SIZE(SLOT_SWAP) / SFU_IMG_CHUNK_SIZE;
 8005648:	1aad      	subs	r5, r5, r2
 800564a:	ea4f 2b55 	mov.w	fp, r5, lsr #9
  uint32_t erase_index = 0U;
 800564e:	9702      	str	r7, [sp, #8]
  uint32_t fw_dest_erase_address = 0U;
 8005650:	46b9      	mov	r9, r7
  uint32_t fw_dest_address_write = 0U;
 8005652:	46ba      	mov	sl, r7
  uint32_t fw_decrypted_total_size = 0U;
 8005654:	9703      	str	r7, [sp, #12]
  uint32_t pass_index = 0U;
 8005656:	463e      	mov	r6, r7
    while ((e_ret_status == SFU_SUCCESS) && (fw_decrypted_total_size < (pFwImageHeader->PartialFwSize)) &&
 8005658:	4b7b      	ldr	r3, [pc, #492]	; (8005848 <DecryptImageInDwlSlot.constprop.0+0x23c>)
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	9b03      	ldr	r3, [sp, #12]
 800565e:	429a      	cmp	r2, r3
 8005660:	f240 80bb 	bls.w	80057da <DecryptImageInDwlSlot.constprop.0+0x1ce>
 8005664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005666:	9907      	ldr	r1, [sp, #28]
 8005668:	428b      	cmp	r3, r1
 800566a:	f040 80a0 	bne.w	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
      if (pass_index == NumberOfChunkPerSwap)
 800566e:	45b3      	cmp	fp, r6
 8005670:	d106      	bne.n	8005680 <DecryptImageInDwlSlot.constprop.0+0x74>
        fw_dest_address_write = SlotStartAdd[DwlSlot];
 8005672:	4b74      	ldr	r3, [pc, #464]	; (8005844 <DecryptImageInDwlSlot.constprop.0+0x238>)
 8005674:	9905      	ldr	r1, [sp, #20]
 8005676:	f8cd b008 	str.w	fp, [sp, #8]
 800567a:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
        fw_dest_erase_address =  fw_dest_address_write;
 800567e:	46d1      	mov	r9, sl
      if (pass_index == 0U)
 8005680:	ab0a      	add	r3, sp, #40	; 0x28
 8005682:	2e00      	cmp	r6, #0
 8005684:	d177      	bne.n	8005776 <DecryptImageInDwlSlot.constprop.0+0x16a>
                            (pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP));
 8005686:	4970      	ldr	r1, [pc, #448]	; (8005848 <DecryptImageInDwlSlot.constprop.0+0x23c>)
        fw_source_address = SlotStartAdd[DwlSlot] + SFU_IMG_IMAGE_OFFSET +
 8005688:	9e05      	ldr	r6, [sp, #20]
                            (pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP));
 800568a:	68c9      	ldr	r1, [r1, #12]
        fw_source_address = SlotStartAdd[DwlSlot] + SFU_IMG_IMAGE_OFFSET +
 800568c:	4c6d      	ldr	r4, [pc, #436]	; (8005844 <DecryptImageInDwlSlot.constprop.0+0x238>)
                            (pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP));
 800568e:	fbb1 f0f5 	udiv	r0, r1, r5
        fw_source_address = SlotStartAdd[DwlSlot] + SFU_IMG_IMAGE_OFFSET +
 8005692:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
                            (pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP));
 8005696:	fb05 1110 	mls	r1, r5, r0, r1
 800569a:	f501 7000 	add.w	r0, r1, #512	; 0x200
        fw_source_address = SlotStartAdd[DwlSlot] + SFU_IMG_IMAGE_OFFSET +
 800569e:	4407      	add	r7, r0
                                                                                  SLOT_SIZE(SLOT_SWAP))) %
 80056a0:	fbb0 f6f5 	udiv	r6, r0, r5
                                  ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))) %
 80056a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
                                                                                  SLOT_SIZE(SLOT_SWAP))) %
 80056a8:	fb05 0616 	mls	r6, r5, r6, r0
        fw_dest_address_write = fw_dest_erase_address + ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset %
 80056ac:	9804      	ldr	r0, [sp, #16]
        fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk) -
 80056ae:	f5c1 7100 	rsb	r1, r1, #512	; 0x200
        fw_dest_address_write = fw_dest_erase_address + ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset %
 80056b2:	eb00 0a06 	add.w	sl, r0, r6
        fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk) -
 80056b6:	4291      	cmp	r1, r2
 80056b8:	bf94      	ite	ls
 80056ba:	6019      	strls	r1, [r3, #0]
 80056bc:	601a      	strhi	r2, [r3, #0]
        pass_index = (((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP)))
 80056be:	0a76      	lsrs	r6, r6, #9
        fw_dest_erase_address = SlotStartAdd[SLOT_SWAP];
 80056c0:	4681      	mov	r9, r0
      size = fw_decrypted_chunk_size;
 80056c2:	681c      	ldr	r4, [r3, #0]
      e_ret_status = SFU_LL_FLASH_Read(fw_encrypted_chunk, (uint8_t *) fw_source_address, size);
 80056c4:	4639      	mov	r1, r7
 80056c6:	4622      	mov	r2, r4
 80056c8:	a894      	add	r0, sp, #592	; 0x250
 80056ca:	f001 fa63 	bl	8006b94 <SFU_LL_FLASH_Read>
      if (e_ret_status != SFU_SUCCESS)
 80056ce:	4a62      	ldr	r2, [pc, #392]	; (8005858 <DecryptImageInDwlSlot.constprop.0+0x24c>)
 80056d0:	4290      	cmp	r0, r2
 80056d2:	d16c      	bne.n	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
      if (size != 0U)
 80056d4:	ab0a      	add	r3, sp, #40	; 0x28
 80056d6:	2c00      	cmp	r4, #0
 80056d8:	d05c      	beq.n	8005794 <DecryptImageInDwlSlot.constprop.0+0x188>
        se_ret_status = SE_Decrypt_Append(&e_se_status, (uint8_t *)fw_encrypted_chunk, (int32_t)size,
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	4622      	mov	r2, r4
 80056de:	ab14      	add	r3, sp, #80	; 0x50
 80056e0:	a994      	add	r1, sp, #592	; 0x250
 80056e2:	a809      	add	r0, sp, #36	; 0x24
 80056e4:	f7fe f902 	bl	80038ec <SE_Decrypt_Append>
 80056e8:	4680      	mov	r8, r0
      if ((se_ret_status == SE_SUCCESS) && (e_se_status == SE_OK) && (fw_decrypted_chunk_size == size))
 80056ea:	9b06      	ldr	r3, [sp, #24]
 80056ec:	4598      	cmp	r8, r3
 80056ee:	d1b3      	bne.n	8005658 <DecryptImageInDwlSlot.constprop.0+0x4c>
 80056f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f2:	9a07      	ldr	r2, [sp, #28]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d1af      	bne.n	8005658 <DecryptImageInDwlSlot.constprop.0+0x4c>
 80056f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d1ac      	bne.n	8005658 <DecryptImageInDwlSlot.constprop.0+0x4c>
        if ((pass_index == erase_index)
 80056fe:	9b02      	ldr	r3, [sp, #8]
 8005700:	429e      	cmp	r6, r3
 8005702:	d00a      	beq.n	800571a <DecryptImageInDwlSlot.constprop.0+0x10e>
            || (pass_index == ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))) /
 8005704:	4b50      	ldr	r3, [pc, #320]	; (8005848 <DecryptImageInDwlSlot.constprop.0+0x23c>)
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	fbb2 f3f5 	udiv	r3, r2, r5
 800570c:	fb05 2313 	mls	r3, r5, r3, r2
 8005710:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005714:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
 8005718:	d112      	bne.n	8005740 <DecryptImageInDwlSlot.constprop.0+0x134>
          (void) SFU_LL_SECU_IWDG_Refresh();
 800571a:	f001 fcdb 	bl	80070d4 <SFU_LL_SECU_IWDG_Refresh>
          e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *)fw_dest_erase_address,
 800571e:	462a      	mov	r2, r5
 8005720:	4649      	mov	r1, r9
 8005722:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 8005726:	f001 fa27 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
        STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 800572a:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 800572e:	4298      	cmp	r0, r3
 8005730:	d032      	beq.n	8005798 <DecryptImageInDwlSlot.constprop.0+0x18c>
        if (e_ret_status == SFU_SUCCESS)
 8005732:	4b49      	ldr	r3, [pc, #292]	; (8005858 <DecryptImageInDwlSlot.constprop.0+0x24c>)
 8005734:	4298      	cmp	r0, r3
 8005736:	d13a      	bne.n	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
          erase_index += NumberOfChunkPerSwap;
 8005738:	9b02      	ldr	r3, [sp, #8]
 800573a:	445b      	add	r3, fp
 800573c:	9302      	str	r3, [sp, #8]
          fw_dest_erase_address += SLOT_SIZE(SLOT_SWAP);
 800573e:	44a9      	add	r9, r5
          if ((size & ((uint32_t)sizeof(SFU_LL_FLASH_write_t) - 1U)) != 0U)
 8005740:	0763      	lsls	r3, r4, #29
 8005742:	d007      	beq.n	8005754 <DecryptImageInDwlSlot.constprop.0+0x148>
            size = size + ((uint32_t)sizeof(SFU_LL_FLASH_write_t) - (size % (uint32_t)sizeof(SFU_LL_FLASH_write_t)));
 8005744:	f024 0307 	bic.w	r3, r4, #7
 8005748:	3308      	adds	r3, #8
              fw_decrypted_chunk[oldsize] = 0xFF;
 800574a:	aa14      	add	r2, sp, #80	; 0x50
 800574c:	21ff      	movs	r1, #255	; 0xff
            while (oldsize < size)
 800574e:	42a3      	cmp	r3, r4
 8005750:	d830      	bhi.n	80057b4 <DecryptImageInDwlSlot.constprop.0+0x1a8>
 8005752:	461c      	mov	r4, r3
          e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *)fw_dest_address_write,  fw_decrypted_chunk,
 8005754:	4623      	mov	r3, r4
 8005756:	aa14      	add	r2, sp, #80	; 0x50
 8005758:	4651      	mov	r1, sl
 800575a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 800575e:	f001 fa12 	bl	8006b86 <SFU_LL_FLASH_Write>
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005762:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005766:	4298      	cmp	r0, r3
 8005768:	d127      	bne.n	80057ba <DecryptImageInDwlSlot.constprop.0+0x1ae>
 800576a:	4b3c      	ldr	r3, [pc, #240]	; (800585c <DecryptImageInDwlSlot.constprop.0+0x250>)
 800576c:	2102      	movs	r1, #2
 800576e:	7019      	strb	r1, [r3, #0]
 8005770:	f240 429c 	movw	r2, #1180	; 0x49c
 8005774:	e015      	b.n	80057a2 <DecryptImageInDwlSlot.constprop.0+0x196>
        if ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8005776:	9903      	ldr	r1, [sp, #12]
 8005778:	1a52      	subs	r2, r2, r1
 800577a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800577e:	d201      	bcs.n	8005784 <DecryptImageInDwlSlot.constprop.0+0x178>
          fw_decrypted_chunk_size = ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) / 32U) * 16U;
 8005780:	601a      	str	r2, [r3, #0]
          if ((fw_decrypted_chunk_size & ((uint32_t)sizeof(SFU_LL_FLASH_write_t) - 1U)) != 0U)
 8005782:	e79e      	b.n	80056c2 <DecryptImageInDwlSlot.constprop.0+0xb6>
        else if ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) < ((2U * fw_decrypted_chunk_size) - 16U))
 8005784:	f5b2 7f7c 	cmp.w	r2, #1008	; 0x3f0
          fw_decrypted_chunk_size = ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) / 32U) * 16U;
 8005788:	bf36      	itet	cc
 800578a:	0952      	lsrcc	r2, r2, #5
        fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk);
 800578c:	f44f 7200 	movcs.w	r2, #512	; 0x200
          fw_decrypted_chunk_size = ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) / 32U) * 16U;
 8005790:	0112      	lslcc	r2, r2, #4
 8005792:	e7f5      	b.n	8005780 <DecryptImageInDwlSlot.constprop.0+0x174>
        fw_decrypted_chunk_size = 0U;
 8005794:	601c      	str	r4, [r3, #0]
 8005796:	e7a8      	b.n	80056ea <DecryptImageInDwlSlot.constprop.0+0xde>
        STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8005798:	4b30      	ldr	r3, [pc, #192]	; (800585c <DecryptImageInDwlSlot.constprop.0+0x250>)
 800579a:	2101      	movs	r1, #1
 800579c:	7019      	strb	r1, [r3, #0]
 800579e:	f240 4281 	movw	r2, #1153	; 0x481
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 80057a2:	4b2f      	ldr	r3, [pc, #188]	; (8005860 <DecryptImageInDwlSlot.constprop.0+0x254>)
 80057a4:	482f      	ldr	r0, [pc, #188]	; (8005864 <DecryptImageInDwlSlot.constprop.0+0x258>)
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	4b2f      	ldr	r3, [pc, #188]	; (8005868 <DecryptImageInDwlSlot.constprop.0+0x25c>)
 80057aa:	f004 f891 	bl	80098d0 <iprintf>
    e_ret_status = SFU_ERROR;
 80057ae:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 80057b2:	e041      	b.n	8005838 <DecryptImageInDwlSlot.constprop.0+0x22c>
              fw_decrypted_chunk[oldsize] = 0xFF;
 80057b4:	54a1      	strb	r1, [r4, r2]
              oldsize++;
 80057b6:	3401      	adds	r4, #1
 80057b8:	e7c9      	b.n	800574e <DecryptImageInDwlSlot.constprop.0+0x142>
          if (e_ret_status == SFU_SUCCESS)
 80057ba:	4b27      	ldr	r3, [pc, #156]	; (8005858 <DecryptImageInDwlSlot.constprop.0+0x24c>)
 80057bc:	4298      	cmp	r0, r3
 80057be:	d1f6      	bne.n	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
            fw_decrypted_total_size += size;
 80057c0:	9b03      	ldr	r3, [sp, #12]
            (void) memset(fw_decrypted_chunk, 0xff, sizeof(fw_decrypted_chunk));
 80057c2:	f44f 7200 	mov.w	r2, #512	; 0x200
            fw_decrypted_total_size += size;
 80057c6:	4423      	add	r3, r4
            (void) memset(fw_decrypted_chunk, 0xff, sizeof(fw_decrypted_chunk));
 80057c8:	21ff      	movs	r1, #255	; 0xff
 80057ca:	a814      	add	r0, sp, #80	; 0x50
            fw_decrypted_total_size += size;
 80057cc:	9303      	str	r3, [sp, #12]
            fw_dest_address_write  += (size);
 80057ce:	44a2      	add	sl, r4
            (void) memset(fw_decrypted_chunk, 0xff, sizeof(fw_decrypted_chunk));
 80057d0:	f004 f876 	bl	80098c0 <memset>
            fw_source_address += size;
 80057d4:	4427      	add	r7, r4
            pass_index += 1U;
 80057d6:	3601      	adds	r6, #1
    while ((e_ret_status == SFU_SUCCESS) && (fw_decrypted_total_size < (pFwImageHeader->PartialFwSize)) &&
 80057d8:	e73e      	b.n	8005658 <DecryptImageInDwlSlot.constprop.0+0x4c>
  if ((se_ret_status == SE_SUCCESS) && (e_ret_status == SFU_SUCCESS) && (e_se_status == SE_OK))
 80057da:	9b06      	ldr	r3, [sp, #24]
 80057dc:	4598      	cmp	r8, r3
 80057de:	d1e6      	bne.n	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
 80057e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80057e2:	4b1b      	ldr	r3, [pc, #108]	; (8005850 <DecryptImageInDwlSlot.constprop.0+0x244>)
 80057e4:	429c      	cmp	r4, r3
 80057e6:	d1e2      	bne.n	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
    fw_tag_len = sizeof(fw_tag_output);
 80057e8:	2320      	movs	r3, #32
    se_ret_status = SE_Decrypt_Finish(&e_se_status, fw_tag_output, (int32_t *)&fw_tag_len);
 80057ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80057ec:	a90c      	add	r1, sp, #48	; 0x30
 80057ee:	a809      	add	r0, sp, #36	; 0x24
    fw_tag_len = sizeof(fw_tag_output);
 80057f0:	930b      	str	r3, [sp, #44]	; 0x2c
    se_ret_status = SE_Decrypt_Finish(&e_se_status, fw_tag_output, (int32_t *)&fw_tag_len);
 80057f2:	f7fe f8a7 	bl	8003944 <SE_Decrypt_Finish>
    if ((se_ret_status != SE_SUCCESS) || (e_se_status != SE_OK))
 80057f6:	4540      	cmp	r0, r8
 80057f8:	d1d9      	bne.n	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
 80057fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d1d6      	bne.n	80057ae <DecryptImageInDwlSlot.constprop.0+0x1a2>
      if (pass_index <= NumberOfChunkPerSwap)
 8005800:	45b3      	cmp	fp, r6
        fw_dest_erase_address = SlotStartAdd[DwlSlot];
 8005802:	bf22      	ittt	cs
 8005804:	4b0f      	ldrcs	r3, [pc, #60]	; (8005844 <DecryptImageInDwlSlot.constprop.0+0x238>)
 8005806:	9a05      	ldrcs	r2, [sp, #20]
 8005808:	f853 9022 	ldrcs.w	r9, [r3, r2, lsl #2]
      e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *)fw_dest_erase_address, SLOT_SIZE(SLOT_SWAP));
 800580c:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 8005810:	462a      	mov	r2, r5
 8005812:	4649      	mov	r1, r9
 8005814:	f001 f9b0 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
      STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8005818:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 800581c:	4298      	cmp	r0, r3
      e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *)fw_dest_erase_address, SLOT_SIZE(SLOT_SWAP));
 800581e:	4604      	mov	r4, r0
      STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8005820:	d10a      	bne.n	8005838 <DecryptImageInDwlSlot.constprop.0+0x22c>
 8005822:	4b0e      	ldr	r3, [pc, #56]	; (800585c <DecryptImageInDwlSlot.constprop.0+0x250>)
 8005824:	480f      	ldr	r0, [pc, #60]	; (8005864 <DecryptImageInDwlSlot.constprop.0+0x258>)
 8005826:	2101      	movs	r1, #1
 8005828:	7019      	strb	r1, [r3, #0]
 800582a:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <DecryptImageInDwlSlot.constprop.0+0x254>)
 800582c:	f240 42c9 	movw	r2, #1225	; 0x4c9
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <DecryptImageInDwlSlot.constprop.0+0x25c>)
 8005834:	f004 f84c 	bl	80098d0 <iprintf>
}
 8005838:	4620      	mov	r0, r4
 800583a:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
 800583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005842:	bf00      	nop
 8005844:	0800ab9c 	.word	0x0800ab9c
 8005848:	20001788 	.word	0x20001788
 800584c:	0012310f 	.word	0x0012310f
 8005850:	0012e223 	.word	0x0012e223
 8005854:	0800abbc 	.word	0x0800abbc
 8005858:	00122f11 	.word	0x00122f11
 800585c:	200018cc 	.word	0x200018cc
 8005860:	200018c8 	.word	0x200018c8
 8005864:	0800ba17 	.word	0x0800ba17
 8005868:	0800ba56 	.word	0x0800ba56

0800586c <FirmwareToResume.constprop.0>:
static SFU_ErrorStatus  FirmwareToResume(uint32_t ActiveSlot, uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pValidHeader,
 800586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
  (void) memset(erased_flash_pattern, 0xFF, MAGIC_LENGTH);
 8005874:	2220      	movs	r2, #32
 8005876:	21ff      	movs	r1, #255	; 0xff
 8005878:	a8a8      	add	r0, sp, #672	; 0x2a0
 800587a:	f004 f821 	bl	80098c0 <memset>
                        (uint8_t *)((uint32_t)TRAILER_HDR_VALID(DwlSlot) + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)),
 800587e:	487e      	ldr	r0, [pc, #504]	; (8005a78 <FirmwareToResume.constprop.0+0x20c>)
 8005880:	4a7e      	ldr	r2, [pc, #504]	; (8005a7c <FirmwareToResume.constprop.0+0x210>)
 8005882:	6905      	ldr	r5, [r0, #16]
 8005884:	6911      	ldr	r1, [r2, #16]
 8005886:	69d2      	ldr	r2, [r2, #28]
 8005888:	1c6b      	adds	r3, r5, #1
 800588a:	1a5b      	subs	r3, r3, r1
 800588c:	69c1      	ldr	r1, [r0, #28]
 800588e:	3101      	adds	r1, #1
 8005890:	1a89      	subs	r1, r1, r2
 8005892:	fbb3 f3f1 	udiv	r3, r3, r1
 8005896:	f2a5 212f 	subw	r1, r5, #559	; 0x22f
  if (SFU_LL_FLASH_Read(signature_valid,
 800589a:	eba1 1103 	sub.w	r1, r1, r3, lsl #4
 800589e:	2210      	movs	r2, #16
 80058a0:	4668      	mov	r0, sp
                        (uint8_t *)((uint32_t)TRAILER_HDR_VALID(DwlSlot) + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)),
 80058a2:	011e      	lsls	r6, r3, #4
  if (SFU_LL_FLASH_Read(signature_valid,
 80058a4:	f001 f976 	bl	8006b94 <SFU_LL_FLASH_Read>
 80058a8:	4b75      	ldr	r3, [pc, #468]	; (8005a80 <FirmwareToResume.constprop.0+0x214>)
 80058aa:	4298      	cmp	r0, r3
 80058ac:	4604      	mov	r4, r0
 80058ae:	d006      	beq.n	80058be <FirmwareToResume.constprop.0+0x52>
    return SFU_ERROR;
 80058b0:	f641 74e1 	movw	r4, #8161	; 0x1fe1
}
 80058b4:	4620      	mov	r0, r4
 80058b6:	f50d 7d78 	add.w	sp, sp, #992	; 0x3e0
 80058ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        (uint8_t *)((uint32_t) TRAILER_HDR_TEST(DwlSlot) + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)),
 80058be:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
 80058c2:	1bad      	subs	r5, r5, r6
  if (SFU_LL_FLASH_Read(signature_test,
 80058c4:	2210      	movs	r2, #16
 80058c6:	f205 11d1 	addw	r1, r5, #465	; 0x1d1
 80058ca:	eb0d 0002 	add.w	r0, sp, r2
 80058ce:	f001 f961 	bl	8006b94 <SFU_LL_FLASH_Read>
 80058d2:	42a0      	cmp	r0, r4
 80058d4:	4606      	mov	r6, r0
 80058d6:	d1eb      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
  if (SFU_LL_FLASH_Read(magic, TRAILER_SWAP_ADDR(DwlSlot), MAGIC_LENGTH) != SFU_SUCCESS)
 80058d8:	2220      	movs	r2, #32
 80058da:	f205 2181 	addw	r1, r5, #641	; 0x281
 80058de:	eb0d 0002 	add.w	r0, sp, r2
 80058e2:	f001 f957 	bl	8006b94 <SFU_LL_FLASH_Read>
 80058e6:	42b0      	cmp	r0, r6
 80058e8:	4604      	mov	r4, r0
 80058ea:	d1e1      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
  if (SFU_LL_FLASH_Read(clean, TRAILER_CLEAN_ADDR(DwlSlot), MAGIC_LENGTH) != SFU_SUCCESS)
 80058ec:	2220      	movs	r2, #32
 80058ee:	f205 21a1 	addw	r1, r5, #673	; 0x2a1
 80058f2:	a858      	add	r0, sp, #352	; 0x160
 80058f4:	f001 f94e 	bl	8006b94 <SFU_LL_FLASH_Read>
 80058f8:	42a0      	cmp	r0, r4
 80058fa:	4606      	mov	r6, r0
 80058fc:	d1d8      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
  if ((memcmp(magic, signature_valid, sizeof(signature_valid)) != 0)
 80058fe:	2210      	movs	r2, #16
 8005900:	4669      	mov	r1, sp
 8005902:	a808      	add	r0, sp, #32
 8005904:	f003 ffc0 	bl	8009888 <memcmp>
 8005908:	2800      	cmp	r0, #0
 800590a:	d1d1      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
      || (memcmp(&magic[MAGIC_LENGTH / 2U], signature_test, sizeof(signature_test)) != 0)
 800590c:	2210      	movs	r2, #16
 800590e:	eb0d 0102 	add.w	r1, sp, r2
 8005912:	a80c      	add	r0, sp, #48	; 0x30
 8005914:	f003 ffb8 	bl	8009888 <memcmp>
 8005918:	2800      	cmp	r0, #0
 800591a:	d1c9      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
      || (memcmp(magic, erased_flash_pattern, MAGIC_LENGTH) == 0)
 800591c:	2220      	movs	r2, #32
 800591e:	a9a8      	add	r1, sp, #672	; 0x2a0
 8005920:	eb0d 0002 	add.w	r0, sp, r2
 8005924:	f003 ffb0 	bl	8009888 <memcmp>
 8005928:	2800      	cmp	r0, #0
 800592a:	d0c1      	beq.n	80058b0 <FirmwareToResume.constprop.0+0x44>
      || (memcmp(clean, erased_flash_pattern, MAGIC_LENGTH) != 0))
 800592c:	2220      	movs	r2, #32
 800592e:	a9a8      	add	r1, sp, #672	; 0x2a0
 8005930:	a858      	add	r0, sp, #352	; 0x160
 8005932:	f003 ffa9 	bl	8009888 <memcmp>
 8005936:	2800      	cmp	r0, #0
 8005938:	d1ba      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
    e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_test, TRAILER_HDR_TEST(DwlSlot), sizeof(fw_header_trailer_test));
 800593a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800593e:	f205 1141 	addw	r1, r5, #321	; 0x141
 8005942:	a858      	add	r0, sp, #352	; 0x160
 8005944:	f001 f926 	bl	8006b94 <SFU_LL_FLASH_Read>
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005948:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 800594c:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_test, TRAILER_HDR_TEST(DwlSlot), sizeof(fw_header_trailer_test));
 800594e:	4604      	mov	r4, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005950:	d10b      	bne.n	800596a <FirmwareToResume.constprop.0+0xfe>
 8005952:	4b4c      	ldr	r3, [pc, #304]	; (8005a84 <FirmwareToResume.constprop.0+0x218>)
 8005954:	2103      	movs	r1, #3
 8005956:	7019      	strb	r1, [r3, #0]
 8005958:	f240 42f4 	movw	r2, #1268	; 0x4f4
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 800595c:	4b4a      	ldr	r3, [pc, #296]	; (8005a88 <FirmwareToResume.constprop.0+0x21c>)
 800595e:	484b      	ldr	r0, [pc, #300]	; (8005a8c <FirmwareToResume.constprop.0+0x220>)
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <FirmwareToResume.constprop.0+0x224>)
 8005964:	f003 ffb4 	bl	80098d0 <iprintf>
    if (e_ret_status == SFU_SUCCESS)
 8005968:	e7a4      	b.n	80058b4 <FirmwareToResume.constprop.0+0x48>
  if (e_ret_status == SFU_SUCCESS)
 800596a:	42b0      	cmp	r0, r6
 800596c:	d1a0      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
    e_ret_status = ParseFWInfo(pTestHeader, fw_header_trailer_test);
 800596e:	4849      	ldr	r0, [pc, #292]	; (8005a94 <FirmwareToResume.constprop.0+0x228>)
 8005970:	4f48      	ldr	r7, [pc, #288]	; (8005a94 <FirmwareToResume.constprop.0+0x228>)
 8005972:	a958      	add	r1, sp, #352	; 0x160
 8005974:	f7ff fadc 	bl	8004f30 <ParseFWInfo>
  if (e_ret_status == SFU_SUCCESS)
 8005978:	4b41      	ldr	r3, [pc, #260]	; (8005a80 <FirmwareToResume.constprop.0+0x214>)
 800597a:	4298      	cmp	r0, r3
    e_ret_status = ParseFWInfo(pTestHeader, fw_header_trailer_test);
 800597c:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 800597e:	d197      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
    if (ActiveSlot == SFU_IMG_GetFwImageSlot(pTestHeader))
 8005980:	4638      	mov	r0, r7
 8005982:	f7ff fc91 	bl	80052a8 <SFU_IMG_GetFwImageSlot>
 8005986:	2801      	cmp	r0, #1
 8005988:	d192      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
      e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_trailer_test);
 800598a:	a858      	add	r0, sp, #352	; 0x160
 800598c:	f7ff fc98 	bl	80052c0 <VerifyHeaderSignature>
  if (e_ret_status != SFU_SUCCESS)
 8005990:	42a0      	cmp	r0, r4
      e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_trailer_test);
 8005992:	4606      	mov	r6, r0
  if (e_ret_status != SFU_SUCCESS)
 8005994:	d18c      	bne.n	80058b0 <FirmwareToResume.constprop.0+0x44>
  e_ret_status = SFU_LL_FLASH_Read(fw_header_active_slot, (uint8_t *) SlotHeaderAdd[ActiveSlot],
 8005996:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <FirmwareToResume.constprop.0+0x22c>)
 8005998:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800599c:	6859      	ldr	r1, [r3, #4]
 800599e:	a8a8      	add	r0, sp, #672	; 0x2a0
 80059a0:	f001 f8f8 	bl	8006b94 <SFU_LL_FLASH_Read>
  STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 80059a4:	f641 78e1 	movw	r8, #8161	; 0x1fe1
 80059a8:	4540      	cmp	r0, r8
  e_ret_status = SFU_LL_FLASH_Read(fw_header_active_slot, (uint8_t *) SlotHeaderAdd[ActiveSlot],
 80059aa:	4604      	mov	r4, r0
  STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 80059ac:	d11b      	bne.n	80059e6 <FirmwareToResume.constprop.0+0x17a>
 80059ae:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <FirmwareToResume.constprop.0+0x218>)
 80059b0:	4836      	ldr	r0, [pc, #216]	; (8005a8c <FirmwareToResume.constprop.0+0x220>)
 80059b2:	2103      	movs	r1, #3
 80059b4:	7019      	strb	r1, [r3, #0]
 80059b6:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <FirmwareToResume.constprop.0+0x21c>)
 80059b8:	f240 5217 	movw	r2, #1303	; 0x517
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <FirmwareToResume.constprop.0+0x224>)
 80059c0:	f003 ff86 	bl	80098d0 <iprintf>
    e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_valid, TRAILER_HDR_VALID(DwlSlot),
 80059c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80059c8:	1c69      	adds	r1, r5, #1
 80059ca:	a808      	add	r0, sp, #32
 80059cc:	f001 f8e2 	bl	8006b94 <SFU_LL_FLASH_Read>
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 80059d0:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80059d4:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_valid, TRAILER_HDR_VALID(DwlSlot),
 80059d6:	4604      	mov	r4, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 80059d8:	d137      	bne.n	8005a4a <FirmwareToResume.constprop.0+0x1de>
 80059da:	4b2a      	ldr	r3, [pc, #168]	; (8005a84 <FirmwareToResume.constprop.0+0x218>)
 80059dc:	2103      	movs	r1, #3
 80059de:	7019      	strb	r1, [r3, #0]
 80059e0:	f240 5254 	movw	r2, #1364	; 0x554
 80059e4:	e7ba      	b.n	800595c <FirmwareToResume.constprop.0+0xf0>
  if (e_ret_status == SFU_SUCCESS)
 80059e6:	42b0      	cmp	r0, r6
 80059e8:	d1ec      	bne.n	80059c4 <FirmwareToResume.constprop.0+0x158>
    e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_active_slot);
 80059ea:	a8a8      	add	r0, sp, #672	; 0x2a0
 80059ec:	f7ff fc68 	bl	80052c0 <VerifyHeaderSignature>
  if (e_ret_status == SFU_SUCCESS)
 80059f0:	42a0      	cmp	r0, r4
    e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_active_slot);
 80059f2:	4606      	mov	r6, r0
  if (e_ret_status == SFU_SUCCESS)
 80059f4:	d1e6      	bne.n	80059c4 <FirmwareToResume.constprop.0+0x158>
    e_ret_status = ParseFWInfo(pValidHeader, fw_header_active_slot);
 80059f6:	4829      	ldr	r0, [pc, #164]	; (8005a9c <FirmwareToResume.constprop.0+0x230>)
 80059f8:	a9a8      	add	r1, sp, #672	; 0x2a0
 80059fa:	f7ff fa99 	bl	8004f30 <ParseFWInfo>
    if (e_ret_status == SFU_SUCCESS)
 80059fe:	42b0      	cmp	r0, r6
    e_ret_status = ParseFWInfo(pValidHeader, fw_header_active_slot);
 8005a00:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 8005a02:	f47f af57 	bne.w	80058b4 <FirmwareToResume.constprop.0+0x48>
      e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_valid, TRAILER_HDR_VALID(DwlSlot),
 8005a06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005a0a:	1c69      	adds	r1, r5, #1
 8005a0c:	a808      	add	r0, sp, #32
 8005a0e:	f001 f8c1 	bl	8006b94 <SFU_LL_FLASH_Read>
      STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005a12:	4540      	cmp	r0, r8
      e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_valid, TRAILER_HDR_VALID(DwlSlot),
 8005a14:	4604      	mov	r4, r0
      STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005a16:	d105      	bne.n	8005a24 <FirmwareToResume.constprop.0+0x1b8>
 8005a18:	4b1a      	ldr	r3, [pc, #104]	; (8005a84 <FirmwareToResume.constprop.0+0x218>)
 8005a1a:	2103      	movs	r1, #3
 8005a1c:	7019      	strb	r1, [r3, #0]
 8005a1e:	f240 522a 	movw	r2, #1322	; 0x52a
 8005a22:	e79b      	b.n	800595c <FirmwareToResume.constprop.0+0xf0>
    if (e_ret_status == SFU_SUCCESS)
 8005a24:	42b0      	cmp	r0, r6
 8005a26:	f47f af45 	bne.w	80058b4 <FirmwareToResume.constprop.0+0x48>
      if (memcmp(fw_header_active_slot, fw_header_trailer_valid, SE_FW_AUTH_LEN) != 0)
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	a908      	add	r1, sp, #32
 8005a2e:	a8a8      	add	r0, sp, #672	; 0x2a0
 8005a30:	f003 ff2a 	bl	8009888 <memcmp>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	f47f af3b 	bne.w	80058b0 <FirmwareToResume.constprop.0+0x44>
        e_ret_status = SFU_IMG_CheckFwVersion(ActiveSlot, pValidHeader->FwVersion, pTestHeader->FwVersion);
 8005a3a:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <FirmwareToResume.constprop.0+0x230>)
 8005a3c:	88fa      	ldrh	r2, [r7, #6]
 8005a3e:	88d9      	ldrh	r1, [r3, #6]
          e_ret_status = SFU_IMG_CheckFwVersion(ActiveSlot, pValidHeader->FwVersion, pTestHeader->FwVersion);
 8005a40:	2001      	movs	r0, #1
 8005a42:	f7ff fcbf 	bl	80053c4 <SFU_IMG_CheckFwVersion>
 8005a46:	4604      	mov	r4, r0
 8005a48:	e734      	b.n	80058b4 <FirmwareToResume.constprop.0+0x48>
    if (e_ret_status == SFU_SUCCESS)
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <FirmwareToResume.constprop.0+0x214>)
 8005a4c:	4298      	cmp	r0, r3
 8005a4e:	f47f af31 	bne.w	80058b4 <FirmwareToResume.constprop.0+0x48>
      e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_trailer_valid);
 8005a52:	a808      	add	r0, sp, #32
 8005a54:	f7ff fc34 	bl	80052c0 <VerifyHeaderSignature>
      if (e_ret_status == SFU_SUCCESS)
 8005a58:	42a0      	cmp	r0, r4
      e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_trailer_valid);
 8005a5a:	4605      	mov	r5, r0
      if (e_ret_status == SFU_SUCCESS)
 8005a5c:	f47f af2a 	bne.w	80058b4 <FirmwareToResume.constprop.0+0x48>
        e_ret_status = ParseFWInfo(pValidHeader, fw_header_trailer_valid);
 8005a60:	4e0e      	ldr	r6, [pc, #56]	; (8005a9c <FirmwareToResume.constprop.0+0x230>)
 8005a62:	a908      	add	r1, sp, #32
 8005a64:	4630      	mov	r0, r6
 8005a66:	f7ff fa63 	bl	8004f30 <ParseFWInfo>
        if (e_ret_status == SFU_SUCCESS)
 8005a6a:	42a8      	cmp	r0, r5
        e_ret_status = ParseFWInfo(pValidHeader, fw_header_trailer_valid);
 8005a6c:	4604      	mov	r4, r0
        if (e_ret_status == SFU_SUCCESS)
 8005a6e:	f47f af21 	bne.w	80058b4 <FirmwareToResume.constprop.0+0x48>
          e_ret_status = SFU_IMG_CheckFwVersion(ActiveSlot, pValidHeader->FwVersion, pTestHeader->FwVersion);
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	88f1      	ldrh	r1, [r6, #6]
 8005a76:	e7e3      	b.n	8005a40 <FirmwareToResume.constprop.0+0x1d4>
 8005a78:	0800abbc 	.word	0x0800abbc
 8005a7c:	0800ab9c 	.word	0x0800ab9c
 8005a80:	00122f11 	.word	0x00122f11
 8005a84:	200018cc 	.word	0x200018cc
 8005a88:	200018c8 	.word	0x200018c8
 8005a8c:	0800ba17 	.word	0x0800ba17
 8005a90:	0800ba56 	.word	0x0800ba56
 8005a94:	20001788 	.word	0x20001788
 8005a98:	0800abdc 	.word	0x0800abdc
 8005a9c:	200018d0 	.word	0x200018d0

08005aa0 <SwapFirmwareImages.constprop.0>:
static SFU_ErrorStatus SwapFirmwareImages(uint32_t ActiveSlot, uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	ed2d 8b02 	vpush	{d8}
  uint32_t number_of_index_active_slot = SLOT_SIZE(ActiveSlot) / SLOT_SIZE(SLOT_SWAP);
 8005aa8:	4bba      	ldr	r3, [pc, #744]	; (8005d94 <SwapFirmwareImages.constprop.0+0x2f4>)
static SFU_ErrorStatus SwapFirmwareImages(uint32_t ActiveSlot, uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 8005aaa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
  uint32_t number_of_index_active_slot = SLOT_SIZE(ActiveSlot) / SLOT_SIZE(SLOT_SWAP);
 8005aae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8005ab2:	9205      	str	r2, [sp, #20]
 8005ab4:	4ab8      	ldr	r2, [pc, #736]	; (8005d98 <SwapFirmwareImages.constprop.0+0x2f8>)
static SFU_ErrorStatus SwapFirmwareImages(uint32_t ActiveSlot, uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 8005ab6:	910f      	str	r1, [sp, #60]	; 0x3c
  uint32_t number_of_index_active_slot = SLOT_SIZE(ActiveSlot) / SLOT_SIZE(SLOT_SWAP);
 8005ab8:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8005abc:	9905      	ldr	r1, [sp, #20]
static SFU_ErrorStatus SwapFirmwareImages(uint32_t ActiveSlot, uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 8005abe:	9009      	str	r0, [sp, #36]	; 0x24
  uint32_t number_of_index_active_slot = SLOT_SIZE(ActiveSlot) / SLOT_SIZE(SLOT_SWAP);
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	1a76      	subs	r6, r6, r1
 8005ac4:	69d9      	ldr	r1, [r3, #28]
 8005ac6:	9106      	str	r1, [sp, #24]
 8005ac8:	69d1      	ldr	r1, [r2, #28]
 8005aca:	9806      	ldr	r0, [sp, #24]
 8005acc:	3101      	adds	r1, #1
 8005ace:	1a0d      	subs	r5, r1, r0
 8005ad0:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ad2:	fbb6 f1f5 	udiv	r1, r6, r5
 8005ad6:	9111      	str	r1, [sp, #68]	; 0x44
  uint32_t number_of_index_dwl_slot = SLOT_SIZE(DwlSlot) / SLOT_SIZE(SLOT_SWAP);
 8005ad8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  TRACE("\r\n\t  Image preparation done.\r\n\t  Swapping the firmware images");
 8005ada:	48b0      	ldr	r0, [pc, #704]	; (8005d9c <SwapFirmwareImages.constprop.0+0x2fc>)
  uint32_t number_of_index_dwl_slot = SLOT_SIZE(DwlSlot) / SLOT_SIZE(SLOT_SWAP);
 8005adc:	f852 9021 	ldr.w	r9, [r2, r1, lsl #2]
 8005ae0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ae6:	f109 0801 	add.w	r8, r9, #1
 8005aea:	eba8 0703 	sub.w	r7, r8, r3
 8005aee:	fbb7 f3f5 	udiv	r3, r7, r5
 8005af2:	9302      	str	r3, [sp, #8]
  TRACE("\r\n\t  Image preparation done.\r\n\t  Swapping the firmware images");
 8005af4:	f003 feec 	bl	80098d0 <iprintf>
  index_active_slot_partial_begin = (SFU_IMG_IMAGE_OFFSET + pFwImageHeader->PartialFwOffset) /
 8005af8:	49a9      	ldr	r1, [pc, #676]	; (8005da0 <SwapFirmwareImages.constprop.0+0x300>)
 8005afa:	68ca      	ldr	r2, [r1, #12]
 8005afc:	f502 7300 	add.w	r3, r2, #512	; 0x200
 8005b00:	fbb3 f0f5 	udiv	r0, r3, r5
  offset_block_partial_begin = (SFU_IMG_IMAGE_OFFSET + pFwImageHeader->PartialFwOffset) %
 8005b04:	fb05 3310 	mls	r3, r5, r0, r3
 8005b08:	9312      	str	r3, [sp, #72]	; 0x48
  if ((pFwImageHeader->FwSize == pFwImageHeader->PartialFwSize) && (SLOT_SIZE(DwlSlot) >= SLOT_SIZE(ActiveSlot)))
 8005b0a:	688b      	ldr	r3, [r1, #8]
 8005b0c:	6909      	ldr	r1, [r1, #16]
  index_active_slot_partial_begin = (SFU_IMG_IMAGE_OFFSET + pFwImageHeader->PartialFwOffset) /
 8005b0e:	900c      	str	r0, [sp, #48]	; 0x30
  if ((pFwImageHeader->FwSize == pFwImageHeader->PartialFwSize) && (SLOT_SIZE(DwlSlot) >= SLOT_SIZE(ActiveSlot)))
 8005b10:	428b      	cmp	r3, r1
  uint32_t number_of_chunk = SLOT_SIZE(SLOT_SWAP) / SFU_IMG_CHUNK_SIZE;
 8005b12:	ea4f 2455 	mov.w	r4, r5, lsr #9
  if ((pFwImageHeader->FwSize == pFwImageHeader->PartialFwSize) && (SLOT_SIZE(DwlSlot) >= SLOT_SIZE(ActiveSlot)))
 8005b16:	d121      	bne.n	8005b5c <SwapFirmwareImages.constprop.0+0xbc>
 8005b18:	42be      	cmp	r6, r7
 8005b1a:	d81f      	bhi.n	8005b5c <SwapFirmwareImages.constprop.0+0xbc>
    index_active_slot_partial_end = (SLOT_SIZE(ActiveSlot) - TRAILER_SIZE(DwlSlot)) / SLOT_SIZE(SLOT_SWAP);
 8005b1c:	9b02      	ldr	r3, [sp, #8]
 8005b1e:	332c      	adds	r3, #44	; 0x2c
 8005b20:	eba6 1603 	sub.w	r6, r6, r3, lsl #4
 8005b24:	fbb6 f7f5 	udiv	r7, r6, r5
    offset_block_partial_end = (SLOT_SIZE(ActiveSlot) - TRAILER_SIZE(DwlSlot)) % SLOT_SIZE(SLOT_SWAP);
 8005b28:	fb05 6317 	mls	r3, r5, r7, r6
 8005b2c:	9307      	str	r3, [sp, #28]
    index_dwl_slot_partial_end = ((SLOT_SIZE(ActiveSlot) - TRAILER_SIZE(DwlSlot)) / SLOT_SIZE(SLOT_SWAP)) - 1U;
 8005b2e:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
    offset_block_final_end = (SLOT_SIZE(ActiveSlot) - TRAILER_SIZE(DwlSlot)) % SLOT_SIZE(SLOT_SWAP);
 8005b32:	930a      	str	r3, [sp, #40]	; 0x28
    index_active_slot_final_end = (SLOT_SIZE(ActiveSlot) - TRAILER_SIZE(DwlSlot)) / SLOT_SIZE(SLOT_SWAP);
 8005b34:	9701      	str	r7, [sp, #4]
    index_active_slot_partial_end = (SLOT_SIZE(ActiveSlot) - TRAILER_SIZE(DwlSlot)) / SLOT_SIZE(SLOT_SWAP);
 8005b36:	9703      	str	r7, [sp, #12]
  if (offset_block_partial_end == 0)
 8005b38:	9b07      	ldr	r3, [sp, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d137      	bne.n	8005bae <SwapFirmwareImages.constprop.0+0x10e>
    index_active_slot--;
 8005b3e:	9b03      	ldr	r3, [sp, #12]
    index_dwl_slot_read--;
 8005b40:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    index_active_slot--;
 8005b44:	1e5e      	subs	r6, r3, #1
  if (index_dwl_slot_read >= index_dwl_slot_write)
 8005b46:	455f      	cmp	r7, fp
 8005b48:	dc33      	bgt.n	8005bb2 <SwapFirmwareImages.constprop.0+0x112>
    return SFU_ERROR;
 8005b4a:	f641 74e1 	movw	r4, #8161	; 0x1fe1
}
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005b54:	ecbd 8b02 	vpop	{d8}
 8005b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    index_active_slot_partial_end = (SFU_IMG_IMAGE_OFFSET + pFwImageHeader->PartialFwOffset +
 8005b5c:	1850      	adds	r0, r2, r1
 8005b5e:	f500 7000 	add.w	r0, r0, #512	; 0x200
                                     pFwImageHeader->PartialFwSize) / SLOT_SIZE(SLOT_SWAP);
 8005b62:	fbb0 f6f5 	udiv	r6, r0, r5
    offset_block_partial_end = (SFU_IMG_IMAGE_OFFSET + pFwImageHeader->PartialFwOffset +
 8005b66:	fb05 0016 	mls	r0, r5, r6, r0
 8005b6a:	9007      	str	r0, [sp, #28]
    index_dwl_slot_partial_end = (((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset %
 8005b6c:	fbb2 f0f5 	udiv	r0, r2, r5
 8005b70:	fb05 2210 	mls	r2, r5, r0, r2
 8005b74:	f502 7200 	add.w	r2, r2, #512	; 0x200
    index_active_slot_final_end = ((SFU_IMG_IMAGE_OFFSET + pFwImageHeader->FwSize) / SLOT_SIZE(SLOT_SWAP));
 8005b78:	f503 7300 	add.w	r3, r3, #512	; 0x200
                                                            SLOT_SIZE(SLOT_SWAP))) % SLOT_SIZE(SLOT_SWAP) +
 8005b7c:	fbb2 f0f5 	udiv	r0, r2, r5
 8005b80:	fb05 2210 	mls	r2, r5, r0, r2
 8005b84:	4411      	add	r1, r2
    index_active_slot_final_end = ((SFU_IMG_IMAGE_OFFSET + pFwImageHeader->FwSize) / SLOT_SIZE(SLOT_SWAP));
 8005b86:	fbb3 f2f5 	udiv	r2, r3, r5
    offset_block_final_end = (SFU_IMG_IMAGE_OFFSET + pFwImageHeader->FwSize) % SLOT_SIZE(SLOT_SWAP);
 8005b8a:	fb05 3312 	mls	r3, r5, r2, r3
 8005b8e:	930a      	str	r3, [sp, #40]	; 0x28
    if (index_active_slot_partial_end == (number_of_index_active_slot - 1))
 8005b90:	9b11      	ldr	r3, [sp, #68]	; 0x44
                                   pFwImageHeader->PartialFwSize) / SLOT_SIZE(SLOT_SWAP)) - 1U;
 8005b92:	fbb1 f1f5 	udiv	r1, r1, r5
    if (index_active_slot_partial_end == (number_of_index_active_slot - 1))
 8005b96:	3b01      	subs	r3, #1
 8005b98:	429e      	cmp	r6, r3
      index_dwl_slot_write = number_of_index_dwl_slot - 1;
 8005b9a:	9b02      	ldr	r3, [sp, #8]
                                     pFwImageHeader->PartialFwSize) / SLOT_SIZE(SLOT_SWAP);
 8005b9c:	9603      	str	r6, [sp, #12]
                                   pFwImageHeader->PartialFwSize) / SLOT_SIZE(SLOT_SWAP)) - 1U;
 8005b9e:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
    index_active_slot_final_end = ((SFU_IMG_IMAGE_OFFSET + pFwImageHeader->FwSize) / SLOT_SIZE(SLOT_SWAP));
 8005ba2:	9201      	str	r2, [sp, #4]
      index_dwl_slot_write = number_of_index_dwl_slot - 1;
 8005ba4:	bf0c      	ite	eq
 8005ba6:	f103 37ff 	addeq.w	r7, r3, #4294967295	; 0xffffffff
      index_dwl_slot_write = number_of_index_dwl_slot - 2;
 8005baa:	1e9f      	subne	r7, r3, #2
 8005bac:	e7c4      	b.n	8005b38 <SwapFirmwareImages.constprop.0+0x98>
  index_active_slot = index_active_slot_partial_end;
 8005bae:	9e03      	ldr	r6, [sp, #12]
 8005bb0:	e7c9      	b.n	8005b46 <SwapFirmwareImages.constprop.0+0xa6>
                                     TRAILER_CPY_TO_DWL_SLOT(DwlSlot, TRAILER_INDEX(DwlSlot) - 1 - index_active_slot),
 8005bb2:	9a02      	ldr	r2, [sp, #8]
 8005bb4:	9902      	ldr	r1, [sp, #8]
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	eba9 1202 	sub.w	r2, r9, r2, lsl #4
 8005bbc:	920d      	str	r2, [sp, #52]	; 0x34
 8005bbe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005bc2:	3201      	adds	r2, #1
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	9219      	str	r2, [sp, #100]	; 0x64
              write_len = TRAILER_BEGIN(DwlSlot) - CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk);
 8005bc8:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8005bcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
              CHUNK_0_ADDR(ActiveSlot, index_active_slot_final_end, 0) + offset_block_final_end)
 8005bce:	990a      	ldr	r1, [sp, #40]	; 0x28
              write_len = TRAILER_BEGIN(DwlSlot) - CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk);
 8005bd0:	eba8 0303 	sub.w	r3, r8, r3
 8005bd4:	3201      	adds	r2, #1
 8005bd6:	9318      	str	r3, [sp, #96]	; 0x60
 8005bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bda:	921c      	str	r2, [sp, #112]	; 0x70
              CHUNK_0_ADDR(ActiveSlot, index_active_slot_final_end, 0) + offset_block_final_end)
 8005bdc:	9a05      	ldr	r2, [sp, #20]
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 8005bde:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8005da4 <SwapFirmwareImages.constprop.0+0x304>
 8005be2:	fb05 3307 	mla	r3, r5, r7, r3
              CHUNK_0_ADDR(ActiveSlot, index_active_slot_final_end, 0) + offset_block_final_end)
 8005be6:	440a      	add	r2, r1
 8005be8:	9304      	str	r3, [sp, #16]
 8005bea:	9901      	ldr	r1, [sp, #4]
 8005bec:	0263      	lsls	r3, r4, #9
 8005bee:	9314      	str	r3, [sp, #80]	; 0x50
 8005bf0:	1e63      	subs	r3, r4, #1
 8005bf2:	fb05 2201 	mla	r2, r5, r1, r2
 8005bf6:	930e      	str	r3, [sp, #56]	; 0x38
 8005bf8:	025b      	lsls	r3, r3, #9
 8005bfa:	9216      	str	r2, [sp, #88]	; 0x58
 8005bfc:	931b      	str	r3, [sp, #108]	; 0x6c
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8005bfe:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  while (index_active_slot >= 0)
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	da13      	bge.n	8005c2e <SwapFirmwareImages.constprop.0+0x18e>
  if (offset_block_final_end == 0)
 8005c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c08:	b113      	cbz	r3, 8005c10 <SwapFirmwareImages.constprop.0+0x170>
    index_active_slot_empty_begin = index_active_slot_final_end + 1;
 8005c0a:	9b01      	ldr	r3, [sp, #4]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	9301      	str	r3, [sp, #4]
  index_active_slot = number_of_index_active_slot - 1;
 8005c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
    if (e_ret_status !=  SFU_SUCCESS)
 8005c12:	4e64      	ldr	r6, [pc, #400]	; (8005da4 <SwapFirmwareImages.constprop.0+0x304>)
  index_active_slot = number_of_index_active_slot - 1;
 8005c14:	1e5d      	subs	r5, r3, #1
  while (index_active_slot >= index_active_slot_empty_begin)
 8005c16:	9b01      	ldr	r3, [sp, #4]
 8005c18:	429d      	cmp	r5, r3
 8005c1a:	db98      	blt.n	8005b4e <SwapFirmwareImages.constprop.0+0xae>
    e_ret_status = EraseSlotIndex(ActiveSlot, index_active_slot);
 8005c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c1e:	4629      	mov	r1, r5
 8005c20:	f7ff fc5c 	bl	80054dc <EraseSlotIndex>
    if (e_ret_status !=  SFU_SUCCESS)
 8005c24:	42b0      	cmp	r0, r6
    e_ret_status = EraseSlotIndex(ActiveSlot, index_active_slot);
 8005c26:	4604      	mov	r4, r0
    if (e_ret_status !=  SFU_SUCCESS)
 8005c28:	d18f      	bne.n	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
    index_active_slot--;
 8005c2a:	3d01      	subs	r5, #1
 8005c2c:	e7f3      	b.n	8005c16 <SwapFirmwareImages.constprop.0+0x176>
    SFU_LL_SECU_IWDG_Refresh();
 8005c2e:	f001 fa51 	bl	80070d4 <SFU_LL_SECU_IWDG_Refresh>
    TRACE(".");
 8005c32:	202e      	movs	r0, #46	; 0x2e
 8005c34:	f003 fe64 	bl	8009900 <putchar>
    if ((index_dwl_slot_write < -1) || (index_dwl_slot_read < -1))
 8005c38:	1c78      	adds	r0, r7, #1
 8005c3a:	db86      	blt.n	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
 8005c3c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8005c40:	db83      	blt.n	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &trailer,
 8005c42:	9b02      	ldr	r3, [sp, #8]
 8005c44:	1e5c      	subs	r4, r3, #1
                                     TRAILER_CPY_TO_DWL_SLOT(DwlSlot, TRAILER_INDEX(DwlSlot) - 1 - index_active_slot),
 8005c46:	eba4 0a06 	sub.w	sl, r4, r6
 8005c4a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005c4e:	9308      	str	r3, [sp, #32]
 8005c50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c52:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &trailer,
 8005c56:	2208      	movs	r2, #8
 8005c58:	4619      	mov	r1, r3
 8005c5a:	a820      	add	r0, sp, #128	; 0x80
                                     TRAILER_CPY_TO_DWL_SLOT(DwlSlot, TRAILER_INDEX(DwlSlot) - 1 - index_active_slot),
 8005c5c:	ee08 3a10 	vmov	s16, r3
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &trailer,
 8005c60:	f000 ff98 	bl	8006b94 <SFU_LL_FLASH_Read>
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 8005c64:	4540      	cmp	r0, r8
 8005c66:	d051      	beq.n	8005d0c <SwapFirmwareImages.constprop.0+0x26c>
                                     TRAILER_CPY_TO_ACTIVE_SLOT(DwlSlot, TRAILER_INDEX(DwlSlot) - 1 -
 8005c68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005c6a:	9b08      	ldr	r3, [sp, #32]
 8005c6c:	4413      	add	r3, r2
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &trailer,
 8005c6e:	4619      	mov	r1, r3
 8005c70:	2208      	movs	r2, #8
 8005c72:	a820      	add	r0, sp, #128	; 0x80
                                     TRAILER_CPY_TO_ACTIVE_SLOT(DwlSlot, TRAILER_INDEX(DwlSlot) - 1 -
 8005c74:	ee08 3a10 	vmov	s16, r3
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &trailer,
 8005c78:	f000 ff8c 	bl	8006b94 <SFU_LL_FLASH_Read>
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 8005c7c:	4540      	cmp	r0, r8
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &trailer,
 8005c7e:	9013      	str	r0, [sp, #76]	; 0x4c
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 8005c80:	f040 81a3 	bne.w	8005fca <SwapFirmwareImages.constprop.0+0x52a>
 8005c84:	4948      	ldr	r1, [pc, #288]	; (8005da8 <SwapFirmwareImages.constprop.0+0x308>)
 8005c86:	2208      	movs	r2, #8
 8005c88:	a820      	add	r0, sp, #128	; 0x80
 8005c8a:	f003 fdfd 	bl	8009888 <memcmp>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f040 819b 	bne.w	8005fca <SwapFirmwareImages.constprop.0+0x52a>
      e_ret_status = EraseSlotIndex(ActiveSlot, index_active_slot);
 8005c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c96:	4631      	mov	r1, r6
 8005c98:	f7ff fc20 	bl	80054dc <EraseSlotIndex>
      if (e_ret_status !=  SFU_SUCCESS)
 8005c9c:	4540      	cmp	r0, r8
 8005c9e:	f47f af54 	bne.w	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 8005ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005ca6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8005caa:	fb05 330b 	mla	r3, r5, fp, r3
 8005cae:	931a      	str	r3, [sp, #104]	; 0x68
 8005cb0:	9b05      	ldr	r3, [sp, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	fb06 3305 	mla	r3, r6, r5, r3
 8005cb8:	9308      	str	r3, [sp, #32]
 8005cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cbc:	f5a3 7900 	sub.w	r9, r3, #512	; 0x200
 8005cc0:	9b04      	ldr	r3, [sp, #16]
 8005cc2:	4499      	add	r9, r3
            e_ret_status = SFU_LL_FLASH_Read(buffer + (offset_block_partial_end % SFU_IMG_CHUNK_SIZE),
 8005cc4:	9b07      	ldr	r3, [sp, #28]
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	9310      	str	r3, [sp, #64]	; 0x40
 8005ccc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cce:	ab22      	add	r3, sp, #136	; 0x88
 8005cd0:	4413      	add	r3, r2
 8005cd2:	ee08 3a90 	vmov	s17, r3
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 8005cd6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005cda:	f040 80c9 	bne.w	8005e70 <SwapFirmwareImages.constprop.0+0x3d0>
      if (index_active_slot != 0)
 8005cde:	2e00      	cmp	r6, #0
 8005ce0:	f000 8173 	beq.w	8005fca <SwapFirmwareImages.constprop.0+0x52a>
  return SFU_LL_FLASH_Write(&flash_if_info, pAddr, (uint8_t *)pValue, sizeof(SFU_LL_FLASH_write_t));
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	4a31      	ldr	r2, [pc, #196]	; (8005dac <SwapFirmwareImages.constprop.0+0x30c>)
 8005ce8:	ee18 1a10 	vmov	r1, s16
 8005cec:	f10d 007f 	add.w	r0, sp, #127	; 0x7f
 8005cf0:	f000 ff49 	bl	8006b86 <SFU_LL_FLASH_Write>
        STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005cf4:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005cf8:	4298      	cmp	r0, r3
  return SFU_LL_FLASH_Write(&flash_if_info, pAddr, (uint8_t *)pValue, sizeof(SFU_LL_FLASH_write_t));
 8005cfa:	4604      	mov	r4, r0
        STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005cfc:	f040 8162 	bne.w	8005fc4 <SwapFirmwareImages.constprop.0+0x524>
 8005d00:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <SwapFirmwareImages.constprop.0+0x310>)
 8005d02:	2102      	movs	r1, #2
 8005d04:	7019      	strb	r1, [r3, #0]
 8005d06:	f44f 7252 	mov.w	r2, #840	; 0x348
 8005d0a:	e03b      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 8005d0c:	4926      	ldr	r1, [pc, #152]	; (8005da8 <SwapFirmwareImages.constprop.0+0x308>)
 8005d0e:	2208      	movs	r2, #8
 8005d10:	a820      	add	r0, sp, #128	; 0x80
 8005d12:	f003 fdb9 	bl	8009888 <memcmp>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d1a6      	bne.n	8005c68 <SwapFirmwareImages.constprop.0+0x1c8>
      if (index_dwl_slot_write != (number_of_index_dwl_slot - 1))
 8005d1a:	42a7      	cmp	r7, r4
 8005d1c:	d120      	bne.n	8005d60 <SwapFirmwareImages.constprop.0+0x2c0>
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 8005d1e:	9b05      	ldr	r3, [sp, #20]
 8005d20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005d22:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005d26:	fb06 3305 	mla	r3, r6, r5, r3
 8005d2a:	9310      	str	r3, [sp, #64]	; 0x40
 8005d2c:	9b04      	ldr	r3, [sp, #16]
 8005d2e:	eb03 0a02 	add.w	sl, r3, r2
 8005d32:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005d36:	d14b      	bne.n	8005dd0 <SwapFirmwareImages.constprop.0+0x330>
  return SFU_LL_FLASH_Write(&flash_if_info, pAddr, (uint8_t *)pValue, sizeof(SFU_LL_FLASH_write_t));
 8005d38:	2308      	movs	r3, #8
 8005d3a:	4a1c      	ldr	r2, [pc, #112]	; (8005dac <SwapFirmwareImages.constprop.0+0x30c>)
 8005d3c:	ee18 1a10 	vmov	r1, s16
 8005d40:	f10d 007f 	add.w	r0, sp, #127	; 0x7f
 8005d44:	f000 ff1f 	bl	8006b86 <SFU_LL_FLASH_Write>
      STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005d48:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005d4c:	4298      	cmp	r0, r3
  return SFU_LL_FLASH_Write(&flash_if_info, pAddr, (uint8_t *)pValue, sizeof(SFU_LL_FLASH_write_t));
 8005d4e:	4604      	mov	r4, r0
      STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005d50:	f040 808a 	bne.w	8005e68 <SwapFirmwareImages.constprop.0+0x3c8>
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <SwapFirmwareImages.constprop.0+0x310>)
 8005d56:	2102      	movs	r1, #2
 8005d58:	7019      	strb	r1, [r3, #0]
 8005d5a:	f44f 7227 	mov.w	r2, #668	; 0x29c
 8005d5e:	e011      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
        if (index_dwl_slot_write == -1)
 8005d60:	1c79      	adds	r1, r7, #1
 8005d62:	d12d      	bne.n	8005dc0 <SwapFirmwareImages.constprop.0+0x320>
          e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[SLOT_SWAP],
 8005d64:	9906      	ldr	r1, [sp, #24]
 8005d66:	462a      	mov	r2, r5
 8005d68:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 8005d6c:	f000 ff04 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED)
 8005d70:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005d74:	4298      	cmp	r0, r3
          e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[SLOT_SWAP],
 8005d76:	4604      	mov	r4, r0
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED)
 8005d78:	d127      	bne.n	8005dca <SwapFirmwareImages.constprop.0+0x32a>
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <SwapFirmwareImages.constprop.0+0x310>)
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	7019      	strb	r1, [r3, #0]
 8005d80:	f240 2262 	movw	r2, #610	; 0x262
        STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <SwapFirmwareImages.constprop.0+0x314>)
 8005d86:	480c      	ldr	r0, [pc, #48]	; (8005db8 <SwapFirmwareImages.constprop.0+0x318>)
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <SwapFirmwareImages.constprop.0+0x31c>)
 8005d8c:	f003 fda0 	bl	80098d0 <iprintf>
        if (e_ret_status != SFU_SUCCESS)
 8005d90:	e6dd      	b.n	8005b4e <SwapFirmwareImages.constprop.0+0xae>
 8005d92:	bf00      	nop
 8005d94:	0800ab9c 	.word	0x0800ab9c
 8005d98:	0800abbc 	.word	0x0800abbc
 8005d9c:	0800bae5 	.word	0x0800bae5
 8005da0:	20001788 	.word	0x20001788
 8005da4:	00122f11 	.word	0x00122f11
 8005da8:	0800ac00 	.word	0x0800ac00
 8005dac:	0800ac08 	.word	0x0800ac08
 8005db0:	200018cc 	.word	0x200018cc
 8005db4:	200018c8 	.word	0x200018c8
 8005db8:	0800ba17 	.word	0x0800ba17
 8005dbc:	0800ba56 	.word	0x0800ba56
          e_ret_status = EraseSlotIndex(DwlSlot, index_dwl_slot_write);
 8005dc0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7ff fb8a 	bl	80054dc <EraseSlotIndex>
 8005dc8:	4604      	mov	r4, r0
        if (e_ret_status !=  SFU_SUCCESS)
 8005dca:	4544      	cmp	r4, r8
 8005dcc:	d0a7      	beq.n	8005d1e <SwapFirmwareImages.constprop.0+0x27e>
 8005dce:	e6bc      	b.n	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
        (void)SFU_LL_FLASH_Read(buffer, CHUNK_0_ADDR_HEADER(ActiveSlot, index_active_slot, chunk), sizeof(buffer));
 8005dd0:	ea56 0309 	orrs.w	r3, r6, r9
 8005dd4:	bf05      	ittet	eq
 8005dd6:	9a09      	ldreq	r2, [sp, #36]	; 0x24
 8005dd8:	4ba0      	ldreq	r3, [pc, #640]	; (800605c <SwapFirmwareImages.constprop.0+0x5bc>)
 8005dda:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 8005ddc:	f853 1022 	ldreq.w	r1, [r3, r2, lsl #2]
 8005de0:	bf18      	it	ne
 8005de2:	eb03 2149 	addne.w	r1, r3, r9, lsl #9
 8005de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dea:	a822      	add	r0, sp, #136	; 0x88
 8005dec:	f000 fed2 	bl	8006b94 <SFU_LL_FLASH_Read>
        if (index_dwl_slot_write == -1)
 8005df0:	1c7a      	adds	r2, r7, #1
 8005df2:	d114      	bne.n	8005e1e <SwapFirmwareImages.constprop.0+0x37e>
          e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_SWAP_ADDR(chunk), buffer, write_len);
 8005df4:	9906      	ldr	r1, [sp, #24]
 8005df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dfa:	aa22      	add	r2, sp, #136	; 0x88
 8005dfc:	eb01 2149 	add.w	r1, r1, r9, lsl #9
 8005e00:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 8005e04:	f000 febf 	bl	8006b86 <SFU_LL_FLASH_Write>
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005e08:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005e0c:	4298      	cmp	r0, r3
          e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_SWAP_ADDR(chunk), buffer, write_len);
 8005e0e:	4604      	mov	r4, r0
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005e10:	d122      	bne.n	8005e58 <SwapFirmwareImages.constprop.0+0x3b8>
 8005e12:	4b93      	ldr	r3, [pc, #588]	; (8006060 <SwapFirmwareImages.constprop.0+0x5c0>)
 8005e14:	2102      	movs	r1, #2
 8005e16:	7019      	strb	r1, [r3, #0]
 8005e18:	f240 2279 	movw	r2, #633	; 0x279
 8005e1c:	e7b2      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
          if (((uint32_t)CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk)) < (uint32_t)TRAILER_BEGIN(DwlSlot))
 8005e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e20:	f5aa 7100 	sub.w	r1, sl, #512	; 0x200
 8005e24:	f2a3 23bf 	subw	r3, r3, #703	; 0x2bf
 8005e28:	428b      	cmp	r3, r1
 8005e2a:	d918      	bls.n	8005e5e <SwapFirmwareImages.constprop.0+0x3be>
            if ((uint32_t)(CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk) + write_len) >
 8005e2c:	4553      	cmp	r3, sl
              write_len = TRAILER_BEGIN(DwlSlot) - CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk);
 8005e2e:	bf36      	itet	cc
 8005e30:	9b18      	ldrcc	r3, [sp, #96]	; 0x60
        write_len = sizeof(buffer);
 8005e32:	f44f 7300 	movcs.w	r3, #512	; 0x200
              write_len = TRAILER_BEGIN(DwlSlot) - CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk);
 8005e36:	1a5b      	subcc	r3, r3, r1
            e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk),
 8005e38:	aa22      	add	r2, sp, #136	; 0x88
 8005e3a:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 8005e3e:	f000 fea2 	bl	8006b86 <SFU_LL_FLASH_Write>
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005e42:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005e46:	4298      	cmp	r0, r3
            e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk),
 8005e48:	4604      	mov	r4, r0
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005e4a:	d105      	bne.n	8005e58 <SwapFirmwareImages.constprop.0+0x3b8>
 8005e4c:	4b84      	ldr	r3, [pc, #528]	; (8006060 <SwapFirmwareImages.constprop.0+0x5c0>)
 8005e4e:	2102      	movs	r1, #2
 8005e50:	7019      	strb	r1, [r3, #0]
 8005e52:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005e56:	e795      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
            if (e_ret_status != SFU_SUCCESS)
 8005e58:	4544      	cmp	r4, r8
 8005e5a:	f47f ae76 	bne.w	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 8005e5e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005e62:	f5aa 7a00 	sub.w	sl, sl, #512	; 0x200
 8005e66:	e764      	b.n	8005d32 <SwapFirmwareImages.constprop.0+0x292>
      if (e_ret_status != SFU_SUCCESS)
 8005e68:	4540      	cmp	r0, r8
 8005e6a:	f43f aefd 	beq.w	8005c68 <SwapFirmwareImages.constprop.0+0x1c8>
 8005e6e:	e66c      	b.n	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
        if (index_dwl_slot_read == -1)
 8005e70:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
          (void)SFU_LL_FLASH_Read(buffer, CHUNK_SWAP_ADDR(chunk), sizeof(buffer));
 8005e74:	bf0c      	ite	eq
 8005e76:	9b06      	ldreq	r3, [sp, #24]
          (void)SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_read, chunk), sizeof(buffer));
 8005e78:	9b1a      	ldrne	r3, [sp, #104]	; 0x68
 8005e7a:	ea4f 214a 	mov.w	r1, sl, lsl #9
 8005e7e:	4419      	add	r1, r3
          (void)SFU_LL_FLASH_Read(buffer, CHUNK_SWAP_ADDR(chunk), sizeof(buffer));
 8005e80:	f44f 7200 	mov.w	r2, #512	; 0x200
          (void)SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_read, chunk), sizeof(buffer));
 8005e84:	a822      	add	r0, sp, #136	; 0x88
 8005e86:	f000 fe85 	bl	8006b94 <SFU_LL_FLASH_Read>
        if (index_active_slot == index_active_slot_partial_end)
 8005e8a:	9b03      	ldr	r3, [sp, #12]
 8005e8c:	42b3      	cmp	r3, r6
 8005e8e:	d032      	beq.n	8005ef6 <SwapFirmwareImages.constprop.0+0x456>
        if (index_active_slot == index_active_slot_partial_begin)
 8005e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e92:	42b3      	cmp	r3, r6
 8005e94:	d174      	bne.n	8005f80 <SwapFirmwareImages.constprop.0+0x4e0>
          if (CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, (chunk + 1)) <=
 8005e96:	f509 7300 	add.w	r3, r9, #512	; 0x200
 8005e9a:	9a04      	ldr	r2, [sp, #16]
 8005e9c:	9315      	str	r3, [sp, #84]	; 0x54
 8005e9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ea0:	4413      	add	r3, r2
 8005ea2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d940      	bls.n	8005f2a <SwapFirmwareImages.constprop.0+0x48a>
          if ((CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk) <
 8005ea8:	4599      	cmp	r9, r3
 8005eaa:	d354      	bcc.n	8005f56 <SwapFirmwareImages.constprop.0+0x4b6>
        if (index_active_slot == index_active_slot_final_end)
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	429e      	cmp	r6, r3
 8005eb0:	d10a      	bne.n	8005ec8 <SwapFirmwareImages.constprop.0+0x428>
          if (CHUNK_0_ADDR(ActiveSlot, index_active_slot, chunk) >=
 8005eb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005eb4:	9a08      	ldr	r2, [sp, #32]
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	f200 809c 	bhi.w	8005ff4 <SwapFirmwareImages.constprop.0+0x554>
            memset(buffer, 0xFF, sizeof(buffer));
 8005ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec0:	21ff      	movs	r1, #255	; 0xff
 8005ec2:	a822      	add	r0, sp, #136	; 0x88
            memset(buffer + (offset_block_final_end % SFU_IMG_CHUNK_SIZE), 0xFF,
 8005ec4:	f003 fcfc 	bl	80098c0 <memset>
        if ((index_active_slot == 0) && (chunk == 0))
 8005ec8:	ea56 030a 	orrs.w	r3, r6, sl
 8005ecc:	f000 80bc 	beq.w	8006048 <SwapFirmwareImages.constprop.0+0x5a8>
        e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_0_ADDR_MODIFIED(ActiveSlot, index_active_slot, chunk),
 8005ed0:	9908      	ldr	r1, [sp, #32]
 8005ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed6:	aa22      	add	r2, sp, #136	; 0x88
 8005ed8:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 8005edc:	f000 fe53 	bl	8006b86 <SFU_LL_FLASH_Write>
        STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005ee0:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005ee4:	4298      	cmp	r0, r3
        e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_0_ADDR_MODIFIED(ActiveSlot, index_active_slot, chunk),
 8005ee6:	4604      	mov	r4, r0
        STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8005ee8:	d160      	bne.n	8005fac <SwapFirmwareImages.constprop.0+0x50c>
 8005eea:	4b5d      	ldr	r3, [pc, #372]	; (8006060 <SwapFirmwareImages.constprop.0+0x5c0>)
 8005eec:	2102      	movs	r1, #2
 8005eee:	7019      	strb	r1, [r3, #0]
 8005ef0:	f240 3236 	movw	r2, #822	; 0x336
 8005ef4:	e746      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
          if (CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk) >= (CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write,
 8005ef6:	9b07      	ldr	r3, [sp, #28]
 8005ef8:	9a04      	ldr	r2, [sp, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	4599      	cmp	r9, r3
 8005efe:	f0c0 8089 	bcc.w	8006014 <SwapFirmwareImages.constprop.0+0x574>
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk),
 8005f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f06:	4649      	mov	r1, r9
 8005f08:	a822      	add	r0, sp, #136	; 0x88
 8005f0a:	f000 fe43 	bl	8006b94 <SFU_LL_FLASH_Read>
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005f0e:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005f12:	4298      	cmp	r0, r3
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk),
 8005f14:	4604      	mov	r4, r0
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005f16:	d105      	bne.n	8005f24 <SwapFirmwareImages.constprop.0+0x484>
 8005f18:	4b51      	ldr	r3, [pc, #324]	; (8006060 <SwapFirmwareImages.constprop.0+0x5c0>)
 8005f1a:	2103      	movs	r1, #3
 8005f1c:	7019      	strb	r1, [r3, #0]
 8005f1e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8005f22:	e72f      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
            if (e_ret_status != SFU_SUCCESS)
 8005f24:	4544      	cmp	r4, r8
 8005f26:	d0b3      	beq.n	8005e90 <SwapFirmwareImages.constprop.0+0x3f0>
 8005f28:	e60f      	b.n	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk),
 8005f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f2e:	4649      	mov	r1, r9
 8005f30:	a822      	add	r0, sp, #136	; 0x88
 8005f32:	931d      	str	r3, [sp, #116]	; 0x74
 8005f34:	f000 fe2e 	bl	8006b94 <SFU_LL_FLASH_Read>
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005f38:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 8005f3c:	4290      	cmp	r0, r2
 8005f3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk),
 8005f40:	4604      	mov	r4, r0
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005f42:	d105      	bne.n	8005f50 <SwapFirmwareImages.constprop.0+0x4b0>
 8005f44:	4b46      	ldr	r3, [pc, #280]	; (8006060 <SwapFirmwareImages.constprop.0+0x5c0>)
 8005f46:	2103      	movs	r1, #3
 8005f48:	7019      	strb	r1, [r3, #0]
 8005f4a:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8005f4e:	e719      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
            if (e_ret_status != SFU_SUCCESS)
 8005f50:	4540      	cmp	r0, r8
 8005f52:	d0a9      	beq.n	8005ea8 <SwapFirmwareImages.constprop.0+0x408>
 8005f54:	e5f9      	b.n	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
               (CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, 0) + offset_block_partial_begin)) &&
 8005f56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d9a7      	bls.n	8005eac <SwapFirmwareImages.constprop.0+0x40c>
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk),
 8005f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f5e:	4649      	mov	r1, r9
 8005f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f64:	a822      	add	r0, sp, #136	; 0x88
 8005f66:	f000 fe15 	bl	8006b94 <SFU_LL_FLASH_Read>
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005f6a:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005f6e:	4298      	cmp	r0, r3
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk),
 8005f70:	4604      	mov	r4, r0
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005f72:	d118      	bne.n	8005fa6 <SwapFirmwareImages.constprop.0+0x506>
 8005f74:	4b3a      	ldr	r3, [pc, #232]	; (8006060 <SwapFirmwareImages.constprop.0+0x5c0>)
 8005f76:	2103      	movs	r1, #3
 8005f78:	7019      	strb	r1, [r3, #0]
 8005f7a:	f240 3205 	movw	r2, #773	; 0x305
 8005f7e:	e701      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
        else if (index_active_slot == 0)
 8005f80:	2e00      	cmp	r6, #0
 8005f82:	d165      	bne.n	8006050 <SwapFirmwareImages.constprop.0+0x5b0>
          e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk), sizeof(buffer));
 8005f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f88:	4649      	mov	r1, r9
 8005f8a:	a822      	add	r0, sp, #136	; 0x88
 8005f8c:	f000 fe02 	bl	8006b94 <SFU_LL_FLASH_Read>
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005f90:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8005f94:	4298      	cmp	r0, r3
          e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, chunk), sizeof(buffer));
 8005f96:	4604      	mov	r4, r0
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8005f98:	d105      	bne.n	8005fa6 <SwapFirmwareImages.constprop.0+0x506>
 8005f9a:	4b31      	ldr	r3, [pc, #196]	; (8006060 <SwapFirmwareImages.constprop.0+0x5c0>)
 8005f9c:	2103      	movs	r1, #3
 8005f9e:	7019      	strb	r1, [r3, #0]
 8005fa0:	f240 3211 	movw	r2, #785	; 0x311
 8005fa4:	e6ee      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
          if (e_ret_status != SFU_SUCCESS)
 8005fa6:	4544      	cmp	r4, r8
 8005fa8:	d080      	beq.n	8005eac <SwapFirmwareImages.constprop.0+0x40c>
 8005faa:	e5ce      	b.n	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
        if (e_ret_status != SFU_SUCCESS)
 8005fac:	9b08      	ldr	r3, [sp, #32]
 8005fae:	4540      	cmp	r0, r8
 8005fb0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8005fb4:	9308      	str	r3, [sp, #32]
 8005fb6:	f5a9 7900 	sub.w	r9, r9, #512	; 0x200
 8005fba:	f47f adc6 	bne.w	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 8005fbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fc2:	e688      	b.n	8005cd6 <SwapFirmwareImages.constprop.0+0x236>
        if (e_ret_status != SFU_SUCCESS)
 8005fc4:	4540      	cmp	r0, r8
 8005fc6:	f47f adc0 	bne.w	8005b4a <SwapFirmwareImages.constprop.0+0xaa>
    if ((index_active_slot < index_active_slot_partial_begin) && (index_active_slot >= 0))
 8005fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    index_active_slot--;
 8005fcc:	3e01      	subs	r6, #1
    if ((index_active_slot < index_active_slot_partial_begin) && (index_active_slot >= 0))
 8005fce:	42b3      	cmp	r3, r6
    index_dwl_slot_write--;
 8005fd0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    index_dwl_slot_read--;
 8005fd4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    if ((index_active_slot < index_active_slot_partial_begin) && (index_active_slot >= 0))
 8005fd8:	dd04      	ble.n	8005fe4 <SwapFirmwareImages.constprop.0+0x544>
 8005fda:	1c73      	adds	r3, r6, #1
      index_dwl_slot_read = -1;  /* force read from swap area, to avoid exiting dwl slot / swap index allowed range */
 8005fdc:	bf1c      	itt	ne
 8005fde:	f04f 3bff 	movne.w	fp, #4294967295	; 0xffffffff
      index_active_slot = 0;
 8005fe2:	2600      	movne	r6, #0
 8005fe4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fe6:	9b06      	ldr	r3, [sp, #24]
 8005fe8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	9a04      	ldr	r2, [sp, #16]
 8005fee:	441a      	add	r2, r3
 8005ff0:	9204      	str	r2, [sp, #16]
 8005ff2:	e606      	b.n	8005c02 <SwapFirmwareImages.constprop.0+0x162>
               (CHUNK_0_ADDR(ActiveSlot, index_active_slot_final_end, 0) + offset_block_final_end)) &&
 8005ff4:	9b08      	ldr	r3, [sp, #32]
 8005ff6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ff8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	f4bf af63 	bcs.w	8005ec8 <SwapFirmwareImages.constprop.0+0x428>
            memset(buffer + (offset_block_final_end % SFU_IMG_CHUNK_SIZE), 0xFF,
 8006002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006004:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006008:	ab22      	add	r3, sp, #136	; 0x88
 800600a:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
 800600e:	21ff      	movs	r1, #255	; 0xff
 8006010:	4418      	add	r0, r3
 8006012:	e757      	b.n	8005ec4 <SwapFirmwareImages.constprop.0+0x424>
              && ((CHUNK_1_ADDR(DwlSlot, index_dwl_slot_write, (chunk + 1))) >
 8006014:	f509 7200 	add.w	r2, r9, #512	; 0x200
 8006018:	4293      	cmp	r3, r2
 800601a:	f4bf af39 	bcs.w	8005e90 <SwapFirmwareImages.constprop.0+0x3f0>
            e_ret_status = SFU_LL_FLASH_Read(buffer + (offset_block_partial_end % SFU_IMG_CHUNK_SIZE),
 800601e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006020:	ee18 0a90 	vmov	r0, s17
 8006024:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8006028:	eb03 0109 	add.w	r1, r3, r9
 800602c:	f000 fdb2 	bl	8006b94 <SFU_LL_FLASH_Read>
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8006030:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8006034:	4298      	cmp	r0, r3
            e_ret_status = SFU_LL_FLASH_Read(buffer + (offset_block_partial_end % SFU_IMG_CHUNK_SIZE),
 8006036:	4604      	mov	r4, r0
            STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8006038:	f47f af74 	bne.w	8005f24 <SwapFirmwareImages.constprop.0+0x484>
 800603c:	4b08      	ldr	r3, [pc, #32]	; (8006060 <SwapFirmwareImages.constprop.0+0x5c0>)
 800603e:	2103      	movs	r1, #3
 8006040:	7019      	strb	r1, [r3, #0]
 8006042:	f240 22e2 	movw	r2, #738	; 0x2e2
 8006046:	e69d      	b.n	8005d84 <SwapFirmwareImages.constprop.0+0x2e4>
        e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_0_ADDR_MODIFIED(ActiveSlot, index_active_slot, chunk),
 8006048:	9a05      	ldr	r2, [sp, #20]
 800604a:	f502 7100 	add.w	r1, r2, #512	; 0x200
 800604e:	e742      	b.n	8005ed6 <SwapFirmwareImages.constprop.0+0x436>
        if (index_active_slot == index_active_slot_final_end)
 8006050:	9b01      	ldr	r3, [sp, #4]
 8006052:	429e      	cmp	r6, r3
 8006054:	f47f af3c 	bne.w	8005ed0 <SwapFirmwareImages.constprop.0+0x430>
 8006058:	e72b      	b.n	8005eb2 <SwapFirmwareImages.constprop.0+0x412>
 800605a:	bf00      	nop
 800605c:	0800abdc 	.word	0x0800abdc
 8006060:	200018cc 	.word	0x200018cc

08006064 <SFU_IMG_CheckSwapImageHandling>:
  *        Must be called first (and once) before calling the other Image handling services.
  * @param  None.
  * @retval SFU_IMG_InitStatusTypeDef SFU_IMG_INIT_OK if successful, an error code otherwise.
  */
SFU_IMG_InitStatusTypeDef SFU_IMG_CheckSwapImageHandling(void)
{
 8006064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006066:	4f2e      	ldr	r7, [pc, #184]	; (8006120 <SFU_IMG_CheckSwapImageHandling+0xbc>)
   * Sanity check: let's make sure the slot sizes are correct
   * to avoid discrepancies between linker definitions and constants in sfu_fwimg_regions.h
   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 8006068:	4e2e      	ldr	r6, [pc, #184]	; (8006124 <SFU_IMG_CheckSwapImageHandling+0xc0>)
 800606a:	69fc      	ldr	r4, [r7, #28]
 800606c:	69f5      	ldr	r5, [r6, #28]
 800606e:	6870      	ldr	r0, [r6, #4]
 8006070:	3401      	adds	r4, #1
 8006072:	1b64      	subs	r4, r4, r5
 8006074:	b168      	cbz	r0, 8006092 <SFU_IMG_CheckSwapImageHandling+0x2e>
    {
      if (!(SFU_IMG_REGION_IS_MULTIPLE(SLOT_SIZE(SLOT_ACTIVE_1 + i), SLOT_SIZE(SLOT_SWAP))))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3301      	adds	r3, #1
 800607a:	1a1a      	subs	r2, r3, r0
 800607c:	fbb2 f3f4 	udiv	r3, r2, r4
 8006080:	4363      	muls	r3, r4
 8006082:	429a      	cmp	r2, r3
 8006084:	d049      	beq.n	800611a <SFU_IMG_CheckSwapImageHandling+0xb6>
      {
        TRACE("\r\n= [FWIMG] SLOT_ACTIVE_%d size (%d) must be a multiple of swap size (%d)\r\n",
 8006086:	4828      	ldr	r0, [pc, #160]	; (8006128 <SFU_IMG_CheckSwapImageHandling+0xc4>)
 8006088:	4623      	mov	r3, r4
 800608a:	2101      	movs	r1, #1
 800608c:	f003 fc20 	bl	80098d0 <iprintf>
              SLOT_ACTIVE_1 + i, SLOT_SIZE(SLOT_ACTIVE_1 + i), SLOT_SIZE(SLOT_SWAP));
        e_ret_status = SFU_IMG_INIT_SLOTS_SIZE_ERROR;
 8006090:	2001      	movs	r0, #1
    }
  }

  for (i = 0U; i < SFU_NB_MAX_DWL_AREA; i++)
  {
    if (SlotStartAdd[SLOT_DWL_1 + i] != 0U)
 8006092:	6936      	ldr	r6, [r6, #16]
 8006094:	b1e6      	cbz	r6, 80060d0 <SFU_IMG_CheckSwapImageHandling+0x6c>
    {
      if (!(SFU_IMG_REGION_IS_MULTIPLE(SLOT_SIZE(SLOT_DWL_1 + i), SLOT_SIZE(SLOT_SWAP))))
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	3201      	adds	r2, #1
 800609a:	1b92      	subs	r2, r2, r6
 800609c:	fbb2 f3f4 	udiv	r3, r2, r4
 80060a0:	4363      	muls	r3, r4
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d005      	beq.n	80060b2 <SFU_IMG_CheckSwapImageHandling+0x4e>
      {
        TRACE("\r\n= [FWIMG] SLOT_DWL_%d size (%d) must be a multiple of swap size (%d)\r\n",
 80060a6:	4821      	ldr	r0, [pc, #132]	; (800612c <SFU_IMG_CheckSwapImageHandling+0xc8>)
 80060a8:	4623      	mov	r3, r4
 80060aa:	2101      	movs	r1, #1
 80060ac:	f003 fc10 	bl	80098d0 <iprintf>
              i + 1U, SLOT_SIZE(SLOT_DWL_1 + i), SLOT_SIZE(SLOT_SWAP));
        e_ret_status = SFU_IMG_INIT_SLOTS_SIZE_ERROR;
 80060b0:	2001      	movs	r0, #1
   */
  for (i = 0U; i < SFU_NB_MAX_DWL_AREA; i++)
  {
    if (SlotStartAdd[SLOT_DWL_1 + i] != 0U)
    {
      if (((int32_t)(SFU_IMG_CHUNK_SIZE - (TRAILER_INDEX(SLOT_DWL_1 + i) * sizeof(SFU_LL_FLASH_write_t)))) < 0)
 80060b2:	6939      	ldr	r1, [r7, #16]
 80060b4:	3101      	adds	r1, #1
 80060b6:	1b89      	subs	r1, r1, r6
 80060b8:	fbb1 f1f4 	udiv	r1, r1, r4
 80060bc:	f1c1 0340 	rsb	r3, r1, #64	; 0x40
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	d505      	bpl.n	80060d0 <SFU_IMG_CheckSwapImageHandling+0x6c>
      {
        e_ret_status = SFU_IMG_INIT_SWAP_SETTINGS_ERROR;
        TRACE("\r\n= [FWIMG] %d bytes required for the swap metadata of SLOT_DWL_%d is too much\r\n",
 80060c4:	481a      	ldr	r0, [pc, #104]	; (8006130 <SFU_IMG_CheckSwapImageHandling+0xcc>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	00c9      	lsls	r1, r1, #3
 80060ca:	f003 fc01 	bl	80098d0 <iprintf>
        e_ret_status = SFU_IMG_INIT_SWAP_SETTINGS_ERROR;
 80060ce:	2002      	movs	r0, #2
  /*
   * Sanity check: let's make sure the swap size is correct with regards to the swap procedure constraints.
   * The swap size must be a multiple of the chunks size used to do the swap.
   */
#if defined(__GNUC__)
  __IO uint32_t swap_size = SLOT_SIZE(SLOT_SWAP), swap_chunk = SFU_IMG_CHUNK_SIZE;
 80060d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060d4:	9400      	str	r4, [sp, #0]
 80060d6:	9101      	str	r1, [sp, #4]
  if (0U != ((uint32_t)(swap_size % swap_chunk)))
 80060d8:	9e00      	ldr	r6, [sp, #0]
 80060da:	9a01      	ldr	r2, [sp, #4]
 80060dc:	fbb6 f3f2 	udiv	r3, r6, r2
 80060e0:	fb02 6313 	mls	r3, r2, r3, r6
 80060e4:	b123      	cbz	r3, 80060f0 <SFU_IMG_CheckSwapImageHandling+0x8c>
#else
  if (0U != ((uint32_t)(SLOT_SIZE(SLOT_SWAP) % SFU_IMG_CHUNK_SIZE)))
#endif /* __GNUC__ */
  {
    e_ret_status = SFU_IMG_INIT_SWAP_SETTINGS_ERROR;
    TRACE("\r\n= [FWIMG] The swap procedure uses chunks of %d bytes but the swap size (%d) is not a multiple\r\n",
 80060e6:	4813      	ldr	r0, [pc, #76]	; (8006134 <SFU_IMG_CheckSwapImageHandling+0xd0>)
 80060e8:	4622      	mov	r2, r4
 80060ea:	f003 fbf1 	bl	80098d0 <iprintf>
    e_ret_status = SFU_IMG_INIT_SWAP_SETTINGS_ERROR;
 80060ee:	2002      	movs	r0, #2

  /*
   * Sanity check: let's make sure SWAP slot is properly aligned with regards to flash constraints
   */

  if (!IS_ALIGNED(SlotStartAdd[SLOT_SWAP]))
 80060f0:	f3c5 030b 	ubfx	r3, r5, #0, #12
 80060f4:	b123      	cbz	r3, 8006100 <SFU_IMG_CheckSwapImageHandling+0x9c>
  {
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
    TRACE("\r\n= [FWIMG] swap (%x) is not properly aligned\r\n",
 80060f6:	4810      	ldr	r0, [pc, #64]	; (8006138 <SFU_IMG_CheckSwapImageHandling+0xd4>)
 80060f8:	4629      	mov	r1, r5
 80060fa:	f003 fbe9 	bl	80098d0 <iprintf>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 80060fe:	2003      	movs	r0, #3
  } /* else swap is properly aligned */

  /*
   * Sanity check: let's make sure the swap area does not overlap SB code area protected by WRP)
   */
  if (((SlotStartAdd[SLOT_SWAP] - FLASH_BASE) / FLASH_PAGE_SIZE) <= SFU_PROTECT_WRP_PAGE_END_1)
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <SFU_IMG_CheckSwapImageHandling+0xd8>)
 8006102:	f105 4578 	add.w	r5, r5, #4160749568	; 0xf8000000
 8006106:	0b1b      	lsrs	r3, r3, #12
 8006108:	ebb3 3f15 	cmp.w	r3, r5, lsr #12
 800610c:	d303      	bcc.n	8006116 <SFU_IMG_CheckSwapImageHandling+0xb2>
  {
    TRACE("\r\n= [FWIMG] SWAP overlaps SBSFU code area protected by WRP\r\n");
 800610e:	480c      	ldr	r0, [pc, #48]	; (8006140 <SFU_IMG_CheckSwapImageHandling+0xdc>)
 8006110:	f003 fc7a 	bl	8009a08 <puts>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 8006114:	2003      	movs	r0, #3
  }


  /* FWIMG core initialization completed */
  return e_ret_status;
}
 8006116:	b003      	add	sp, #12
 8006118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611a:	2000      	movs	r0, #0
 800611c:	e7b9      	b.n	8006092 <SFU_IMG_CheckSwapImageHandling+0x2e>
 800611e:	bf00      	nop
 8006120:	0800abbc 	.word	0x0800abbc
 8006124:	0800ab9c 	.word	0x0800ab9c
 8006128:	0800bb23 	.word	0x0800bb23
 800612c:	0800bb6f 	.word	0x0800bb6f
 8006130:	0800bbb8 	.word	0x0800bbb8
 8006134:	0800bc09 	.word	0x0800bc09
 8006138:	0800bc6b 	.word	0x0800bc6b
 800613c:	00014fff 	.word	0x00014fff
 8006140:	0800bc9b 	.word	0x0800bc9b

08006144 <SFU_IMG_CheckPendingInstallation>:
  *         pending action)
  */
SFU_IMG_ImgInstallStateTypeDef SFU_IMG_CheckPendingInstallation(uint32_t *pDwlSlotToInstall, \
                                                                uint32_t *pActiveSlotToResume, \
                                                                uint32_t *pActiveSlotToRollback)
{
 8006144:	b538      	push	{r3, r4, r5, lr}
   *
   * B. Check if a Firmware image is waiting to be installed.
   */

  /* Init values */
  *pActiveSlotToResume = SLOT_INACTIVE;
 8006146:	2300      	movs	r3, #0
 8006148:	600b      	str	r3, [r1, #0]
  *pActiveSlotToRollback = SLOT_INACTIVE;
 800614a:	6013      	str	r3, [r2, #0]
  *pDwlSlotToInstall = SLOT_INACTIVE;
 800614c:	4a0f      	ldr	r2, [pc, #60]	; (800618c <SFU_IMG_CheckPendingInstallation+0x48>)
 800614e:	6003      	str	r3, [r0, #0]
  /* Check image installation stopped or installation to be done
     =========================================================== */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    /* Slot configured ? */
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 8006150:	6913      	ldr	r3, [r2, #16]
 8006152:	6852      	ldr	r2, [r2, #4]
{
 8006154:	4604      	mov	r4, r0
 8006156:	460d      	mov	r5, r1
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 8006158:	b162      	cbz	r2, 8006174 <SFU_IMG_CheckPendingInstallation+0x30>
      /* Check trailer valide : installation stopped ?
         ============================================= */
      for (j = 0U; j < SFU_NB_MAX_DWL_AREA; j++)
      {
        /* Slot configured ? */
        if (SlotStartAdd[SLOT_DWL_1 + j] != 0U)
 800615a:	b90b      	cbnz	r3, 8006160 <SFU_IMG_CheckPendingInstallation+0x1c>
        return SFU_IMG_FWIMAGE_TO_INSTALL;
      }
    }
  }

  return SFU_IMG_NO_FWUPDATE;
 800615c:	2002      	movs	r0, #2
}
 800615e:	bd38      	pop	{r3, r4, r5, pc}
          if (SFU_SUCCESS == FirmwareToResume(SLOT_ACTIVE_1 + i, SLOT_DWL_1 + j, &fw_image_header_validated,
 8006160:	f7ff fb84 	bl	800586c <FirmwareToResume.constprop.0>
 8006164:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <SFU_IMG_CheckPendingInstallation+0x4c>)
 8006166:	4298      	cmp	r0, r3
 8006168:	d106      	bne.n	8006178 <SFU_IMG_CheckPendingInstallation+0x34>
            *pActiveSlotToResume = SLOT_ACTIVE_1 + i;
 800616a:	2001      	movs	r0, #1
            *pDwlSlotToInstall = SLOT_DWL_1 + j;
 800616c:	2204      	movs	r2, #4
            *pActiveSlotToResume = SLOT_ACTIVE_1 + i;
 800616e:	6028      	str	r0, [r5, #0]
            *pDwlSlotToInstall = SLOT_DWL_1 + j;
 8006170:	6022      	str	r2, [r4, #0]
            return SFU_IMG_FWUPDATE_STOPPED;
 8006172:	e7f4      	b.n	800615e <SFU_IMG_CheckPendingInstallation+0x1a>
    if (SlotStartAdd[SLOT_DWL_1 + j] != 0U)
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f1      	beq.n	800615c <SFU_IMG_CheckPendingInstallation+0x18>
      if (SFU_SUCCESS == FirmwareToInstall(SLOT_DWL_1 + j, &fw_image_header_to_test))
 8006178:	f7ff f9fc 	bl	8005574 <FirmwareToInstall.constprop.0>
 800617c:	4b04      	ldr	r3, [pc, #16]	; (8006190 <SFU_IMG_CheckPendingInstallation+0x4c>)
 800617e:	4298      	cmp	r0, r3
 8006180:	d1ec      	bne.n	800615c <SFU_IMG_CheckPendingInstallation+0x18>
        *pDwlSlotToInstall = SLOT_DWL_1 + j;
 8006182:	2304      	movs	r3, #4
 8006184:	6023      	str	r3, [r4, #0]
        return SFU_IMG_FWIMAGE_TO_INSTALL;
 8006186:	2000      	movs	r0, #0
 8006188:	e7e9      	b.n	800615e <SFU_IMG_CheckPendingInstallation+0x1a>
 800618a:	bf00      	nop
 800618c:	0800ab9c 	.word	0x0800ab9c
 8006190:	00122f11 	.word	0x00122f11

08006194 <SFU_IMG_GetTrailerSize>:
  * @param  SlotNumber index of the slot in the list
  * @retval Size of the trailer.
  */
uint32_t SFU_IMG_GetTrailerSize(uint32_t SlotNumber)
{
  return TRAILER_SIZE(SlotNumber);
 8006194:	4908      	ldr	r1, [pc, #32]	; (80061b8 <SFU_IMG_GetTrailerSize+0x24>)
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <SFU_IMG_GetTrailerSize+0x28>)
 8006198:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800619c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80061a0:	69d2      	ldr	r2, [r2, #28]
 80061a2:	3301      	adds	r3, #1
 80061a4:	1a18      	subs	r0, r3, r0
 80061a6:	69cb      	ldr	r3, [r1, #28]
 80061a8:	3301      	adds	r3, #1
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80061b0:	302c      	adds	r0, #44	; 0x2c
}
 80061b2:	0100      	lsls	r0, r0, #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	0800abbc 	.word	0x0800abbc
 80061bc:	0800ab9c 	.word	0x0800ab9c

080061c0 <SFU_IMG_EraseDownloadedImg>:
  * @brief  Erase downloaded firmware in case of decryption/authentication/integrity error
  * @param  DwlSlot identification of the downloaded area
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
SFU_ErrorStatus SFU_IMG_EraseDownloadedImg(uint32_t DwlSlot)
{
 80061c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SFU_FLASH_StatusTypeDef flash_if_status;
  SFU_ErrorStatus e_ret_status_dwl = SFU_ERROR;
  SFU_ErrorStatus e_ret_status_swap = SFU_ERROR;

  e_ret_status_dwl = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[DwlSlot],
                                             SLOT_SIZE(DwlSlot));
 80061c2:	4c20      	ldr	r4, [pc, #128]	; (8006244 <SFU_IMG_EraseDownloadedImg+0x84>)
  e_ret_status_dwl = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[DwlSlot],
 80061c4:	4e20      	ldr	r6, [pc, #128]	; (8006248 <SFU_IMG_EraseDownloadedImg+0x88>)
 80061c6:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 80061ca:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80061ce:	3201      	adds	r2, #1
 80061d0:	1a52      	subs	r2, r2, r1
 80061d2:	f10d 0007 	add.w	r0, sp, #7
 80061d6:	f000 fccf 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
  STATUS_FWIMG(e_ret_status_dwl == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 80061da:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80061de:	4298      	cmp	r0, r3
  e_ret_status_dwl = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[DwlSlot],
 80061e0:	4605      	mov	r5, r0
  STATUS_FWIMG(e_ret_status_dwl == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 80061e2:	d10a      	bne.n	80061fa <SFU_IMG_EraseDownloadedImg+0x3a>
 80061e4:	4b19      	ldr	r3, [pc, #100]	; (800624c <SFU_IMG_EraseDownloadedImg+0x8c>)
 80061e6:	481a      	ldr	r0, [pc, #104]	; (8006250 <SFU_IMG_EraseDownloadedImg+0x90>)
 80061e8:	2101      	movs	r1, #1
 80061ea:	7019      	strb	r1, [r3, #0]
 80061ec:	4b19      	ldr	r3, [pc, #100]	; (8006254 <SFU_IMG_EraseDownloadedImg+0x94>)
 80061ee:	f640 02ff 	movw	r2, #2303	; 0x8ff
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	4b18      	ldr	r3, [pc, #96]	; (8006258 <SFU_IMG_EraseDownloadedImg+0x98>)
 80061f6:	f003 fb6b 	bl	80098d0 <iprintf>

  e_ret_status_swap = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[SLOT_SWAP],
 80061fa:	69e2      	ldr	r2, [r4, #28]
 80061fc:	69f1      	ldr	r1, [r6, #28]
 80061fe:	3201      	adds	r2, #1
 8006200:	1a52      	subs	r2, r2, r1
 8006202:	f10d 0007 	add.w	r0, sp, #7
 8006206:	f000 fcb7 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
                                              SLOT_SIZE(SLOT_SWAP));
  STATUS_FWIMG(e_ret_status_swap == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 800620a:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 800620e:	4298      	cmp	r0, r3
  e_ret_status_swap = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[SLOT_SWAP],
 8006210:	4604      	mov	r4, r0
  STATUS_FWIMG(e_ret_status_swap == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8006212:	d10d      	bne.n	8006230 <SFU_IMG_EraseDownloadedImg+0x70>
 8006214:	4b0d      	ldr	r3, [pc, #52]	; (800624c <SFU_IMG_EraseDownloadedImg+0x8c>)
 8006216:	480e      	ldr	r0, [pc, #56]	; (8006250 <SFU_IMG_EraseDownloadedImg+0x90>)
 8006218:	2101      	movs	r1, #1
 800621a:	7019      	strb	r1, [r3, #0]
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <SFU_IMG_EraseDownloadedImg+0x94>)
 800621e:	f640 1203 	movw	r2, #2307	; 0x903
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <SFU_IMG_EraseDownloadedImg+0x98>)
 8006226:	f003 fb53 	bl	80098d0 <iprintf>

  return (((e_ret_status_swap != SFU_SUCCESS) || (e_ret_status_dwl != SFU_SUCCESS)) ?  SFU_ERROR : SFU_SUCCESS);
}
 800622a:	4620      	mov	r0, r4
 800622c:	b002      	add	sp, #8
 800622e:	bd70      	pop	{r4, r5, r6, pc}
  return (((e_ret_status_swap != SFU_SUCCESS) || (e_ret_status_dwl != SFU_SUCCESS)) ?  SFU_ERROR : SFU_SUCCESS);
 8006230:	4a0a      	ldr	r2, [pc, #40]	; (800625c <SFU_IMG_EraseDownloadedImg+0x9c>)
 8006232:	4290      	cmp	r0, r2
 8006234:	d103      	bne.n	800623e <SFU_IMG_EraseDownloadedImg+0x7e>
 8006236:	4285      	cmp	r5, r0
 8006238:	bf18      	it	ne
 800623a:	461c      	movne	r4, r3
 800623c:	e7f5      	b.n	800622a <SFU_IMG_EraseDownloadedImg+0x6a>
 800623e:	461c      	mov	r4, r3
 8006240:	e7f3      	b.n	800622a <SFU_IMG_EraseDownloadedImg+0x6a>
 8006242:	bf00      	nop
 8006244:	0800abbc 	.word	0x0800abbc
 8006248:	0800ab9c 	.word	0x0800ab9c
 800624c:	200018cc 	.word	0x200018cc
 8006250:	0800ba17 	.word	0x0800ba17
 8006254:	200018c8 	.word	0x200018c8
 8006258:	0800ba56 	.word	0x0800ba56
 800625c:	00122f11 	.word	0x00122f11

08006260 <SFU_IMG_TriggerImageInstallation>:
{
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  e_ret_status = VerifySlot((uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot),
 8006264:	4b68      	ldr	r3, [pc, #416]	; (8006408 <SFU_IMG_TriggerImageInstallation+0x1a8>)
 8006266:	4a69      	ldr	r2, [pc, #420]	; (800640c <SFU_IMG_TriggerImageInstallation+0x1ac>)
 8006268:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
                            pFwImageHeader->PartialFwSize + (pFwImageHeader->PartialFwOffset %
 800626c:	4f68      	ldr	r7, [pc, #416]	; (8006410 <SFU_IMG_TriggerImageInstallation+0x1b0>)
 800626e:	69db      	ldr	r3, [r3, #28]
  e_ret_status = VerifySlot((uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot),
 8006270:	f852 b020 	ldr.w	fp, [r2, r0, lsl #2]
                                                             SLOT_SIZE(SLOT_SWAP)));
 8006274:	69d2      	ldr	r2, [r2, #28]
                            pFwImageHeader->PartialFwSize + (pFwImageHeader->PartialFwOffset %
 8006276:	68f9      	ldr	r1, [r7, #12]
{
 8006278:	b08f      	sub	sp, #60	; 0x3c
 800627a:	f103 0a01 	add.w	sl, r3, #1
                                                             SLOT_SIZE(SLOT_SWAP)));
 800627e:	ebaa 0502 	sub.w	r5, sl, r2
 8006282:	9203      	str	r2, [sp, #12]
  e_ret_status = VerifySlot((uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot),
 8006284:	f109 0801 	add.w	r8, r9, #1
                            pFwImageHeader->PartialFwSize + (pFwImageHeader->PartialFwOffset %
 8006288:	fbb1 f2f5 	udiv	r2, r1, r5
 800628c:	fb05 1212 	mls	r2, r5, r2, r1
  e_ret_status = VerifySlot((uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot),
 8006290:	6939      	ldr	r1, [r7, #16]
 8006292:	eba8 080b 	sub.w	r8, r8, fp
 8006296:	440a      	add	r2, r1
{
 8006298:	4606      	mov	r6, r0
  e_ret_status = VerifySlot((uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot),
 800629a:	4641      	mov	r1, r8
 800629c:	4658      	mov	r0, fp
 800629e:	f7fe fe85 	bl	8004fac <VerifySlot>
  if (e_ret_status != SFU_SUCCESS)
 80062a2:	4a5c      	ldr	r2, [pc, #368]	; (8006414 <SFU_IMG_TriggerImageInstallation+0x1b4>)
 80062a4:	4290      	cmp	r0, r2
  e_ret_status = VerifySlot((uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot),
 80062a6:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 80062a8:	d009      	beq.n	80062be <SFU_IMG_TriggerImageInstallation+0x5e>
    SFU_EXCPT_SetError(SFU_EXCPT_ADDITIONAL_CODE_ERR);
 80062aa:	200e      	movs	r0, #14
    SFU_EXCPT_SetError(SFU_EXCPT_FWIMG_MAGIC_ERR);
 80062ac:	f7fe fcac 	bl	8004c08 <SFU_EXCPT_SetError>
    (void) SFU_IMG_EraseDownloadedImg(DwlSlot);
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7ff ff85 	bl	80061c0 <SFU_IMG_EraseDownloadedImg>
}
 80062b6:	4620      	mov	r0, r4
 80062b8:	b00f      	add	sp, #60	; 0x3c
 80062ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  e_ret_status =  DecryptImageInDwlSlot(DwlSlot, pFwImageHeader);
 80062be:	4630      	mov	r0, r6
 80062c0:	f7ff f9a4 	bl	800560c <DecryptImageInDwlSlot.constprop.0>
  if (e_ret_status != SFU_SUCCESS)
 80062c4:	4a53      	ldr	r2, [pc, #332]	; (8006414 <SFU_IMG_TriggerImageInstallation+0x1b4>)
 80062c6:	4290      	cmp	r0, r2
  e_ret_status =  DecryptImageInDwlSlot(DwlSlot, pFwImageHeader);
 80062c8:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 80062ca:	d001      	beq.n	80062d0 <SFU_IMG_TriggerImageInstallation+0x70>
    SFU_EXCPT_SetError(SFU_EXCPT_DECRYPT_ERR);
 80062cc:	2008      	movs	r0, #8
 80062ce:	e7ed      	b.n	80062ac <SFU_IMG_TriggerImageInstallation+0x4c>
  fw_offset = (SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))) %
 80062d0:	e9d7 2103 	ldrd	r2, r1, [r7, #12]
 80062d4:	fbb2 f3f5 	udiv	r3, r2, r5
 80062d8:	fb05 2313 	mls	r3, r5, r3, r2
 80062dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80062e0:	fbb3 f2f5 	udiv	r2, r3, r5
 80062e4:	fb05 3312 	mls	r3, r5, r2, r3
  payload_desc.pPayload[0] = payload_desc.pPayload[0] + fw_offset;
 80062e8:	9a03      	ldr	r2, [sp, #12]
  payload_desc.pPayload[1] = SlotStartAdd[DwlSlot];
 80062ea:	f8cd b01c 	str.w	fp, [sp, #28]
  payload_desc.pPayload[0] = payload_desc.pPayload[0] + fw_offset;
 80062ee:	441a      	add	r2, r3
 80062f0:	9206      	str	r2, [sp, #24]
  payload_desc.PayloadSize[0] = payload_desc.PayloadSize[0] - fw_offset;
 80062f2:	1aea      	subs	r2, r5, r3
  if (fw_size <= payload_desc.PayloadSize[0])
 80062f4:	4291      	cmp	r1, r2
  payload_desc.PayloadSize[0] = payload_desc.PayloadSize[0] - fw_offset;
 80062f6:	9208      	str	r2, [sp, #32]
  if (fw_size <= payload_desc.PayloadSize[0])
 80062f8:	d82b      	bhi.n	8006352 <SFU_IMG_TriggerImageInstallation+0xf2>
    payload_desc.PayloadSize[1] = 0U;
 80062fa:	2300      	movs	r3, #0
    payload_desc.PayloadSize[0] = fw_size;
 80062fc:	9108      	str	r1, [sp, #32]
    payload_desc.PayloadSize[1] = 0U;
 80062fe:	9309      	str	r3, [sp, #36]	; 0x24
    payload_desc.pPayload[1] = 0U;
 8006300:	9307      	str	r3, [sp, #28]
  return VerifyFwSignatureScatter(pSeStatus, DwlSlot, pFwImageHeader, &payload_desc, SE_FW_IMAGE_PARTIAL);
 8006302:	2301      	movs	r3, #1
 8006304:	f10d 0a18 	add.w	sl, sp, #24
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	4a41      	ldr	r2, [pc, #260]	; (8006410 <SFU_IMG_TriggerImageInstallation+0x1b0>)
  if (e_ret_status != SFU_SUCCESS)
 800630c:	4f41      	ldr	r7, [pc, #260]	; (8006414 <SFU_IMG_TriggerImageInstallation+0x1b4>)
  return VerifyFwSignatureScatter(pSeStatus, DwlSlot, pFwImageHeader, &payload_desc, SE_FW_IMAGE_PARTIAL);
 800630e:	4653      	mov	r3, sl
 8006310:	4631      	mov	r1, r6
 8006312:	a805      	add	r0, sp, #20
 8006314:	f7fe fdf8 	bl	8004f08 <VerifyFwSignatureScatter>
  if (e_ret_status != SFU_SUCCESS)
 8006318:	42b8      	cmp	r0, r7
  return VerifyFwSignatureScatter(pSeStatus, DwlSlot, pFwImageHeader, &payload_desc, SE_FW_IMAGE_PARTIAL);
 800631a:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 800631c:	d11e      	bne.n	800635c <SFU_IMG_TriggerImageInstallation+0xfc>
    active_slot = SFU_IMG_GetFwImageSlot(&fw_image_header_to_test);
 800631e:	483c      	ldr	r0, [pc, #240]	; (8006410 <SFU_IMG_TriggerImageInstallation+0x1b0>)
 8006320:	f7fe ffc2 	bl	80052a8 <SFU_IMG_GetFwImageSlot>
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, pbuffer,
 8006324:	4b3c      	ldr	r3, [pc, #240]	; (8006418 <SFU_IMG_TriggerImageInstallation+0x1b8>)
    active_slot = SFU_IMG_GetFwImageSlot(&fw_image_header_to_test);
 8006326:	4683      	mov	fp, r0
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, pbuffer,
 8006328:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800632c:	483b      	ldr	r0, [pc, #236]	; (800641c <SFU_IMG_TriggerImageInstallation+0x1bc>)
 800632e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006332:	f000 fc2f 	bl	8006b94 <SFU_LL_FLASH_Read>
  if (SFU_SUCCESS == e_ret_status)
 8006336:	42b8      	cmp	r0, r7
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, pbuffer,
 8006338:	4604      	mov	r4, r0
  if (SFU_SUCCESS == e_ret_status)
 800633a:	d1b9      	bne.n	80062b0 <SFU_IMG_TriggerImageInstallation+0x50>
  e_ret_status = EraseSlotIndex(DwlSlot, (TRAILER_INDEX(DwlSlot) - 1U));
 800633c:	fbb8 f5f5 	udiv	r5, r8, r5
 8006340:	4630      	mov	r0, r6
 8006342:	1e69      	subs	r1, r5, #1
 8006344:	f7ff f8ca 	bl	80054dc <EraseSlotIndex>
  if (e_ret_status !=  SFU_SUCCESS)
 8006348:	42b8      	cmp	r0, r7
  e_ret_status = EraseSlotIndex(DwlSlot, (TRAILER_INDEX(DwlSlot) - 1U));
 800634a:	4604      	mov	r4, r0
  if (e_ret_status !=  SFU_SUCCESS)
 800634c:	d011      	beq.n	8006372 <SFU_IMG_TriggerImageInstallation+0x112>
    SFU_EXCPT_SetError(SFU_EXCPT_TRAILER_ERASING_ERR);
 800634e:	2014      	movs	r0, #20
 8006350:	e7ac      	b.n	80062ac <SFU_IMG_TriggerImageInstallation+0x4c>
    if ((payload_desc.pPayload[1] == 0U)
 8006352:	f1bb 0f00 	cmp.w	fp, #0
 8006356:	d103      	bne.n	8006360 <SFU_IMG_TriggerImageInstallation+0x100>
      return SFU_ERROR;
 8006358:	f641 74e1 	movw	r4, #8161	; 0x1fe1
    SFU_EXCPT_SetError(SFU_EXCPT_SIGNATURE_ERR);
 800635c:	2009      	movs	r0, #9
 800635e:	e7a5      	b.n	80062ac <SFU_IMG_TriggerImageInstallation+0x4c>
        || (payload_desc.PayloadSize[1] < (fw_size - payload_desc.PayloadSize[0])))
 8006360:	9a03      	ldr	r2, [sp, #12]
 8006362:	440a      	add	r2, r1
 8006364:	eba2 070a 	sub.w	r7, r2, sl
 8006368:	441f      	add	r7, r3
 800636a:	45b8      	cmp	r8, r7
 800636c:	d3f4      	bcc.n	8006358 <SFU_IMG_TriggerImageInstallation+0xf8>
    payload_desc.PayloadSize[1] = fw_size - payload_desc.PayloadSize[0];
 800636e:	9709      	str	r7, [sp, #36]	; 0x24
 8006370:	e7c7      	b.n	8006302 <SFU_IMG_TriggerImageInstallation+0xa2>
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_TEST(DwlSlot), (uint8_t *) pTestHeader,
 8006372:	352c      	adds	r5, #44	; 0x2c
 8006374:	eba9 1905 	sub.w	r9, r9, r5, lsl #4
 8006378:	4a25      	ldr	r2, [pc, #148]	; (8006410 <SFU_IMG_TriggerImageInstallation+0x1b0>)
 800637a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800637e:	f209 1141 	addw	r1, r9, #321	; 0x141
 8006382:	a805      	add	r0, sp, #20
 8006384:	f000 fbff 	bl	8006b86 <SFU_LL_FLASH_Write>
  if (e_ret_status == SFU_SUCCESS)
 8006388:	42b8      	cmp	r0, r7
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_TEST(DwlSlot), (uint8_t *) pTestHeader,
 800638a:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 800638c:	d11e      	bne.n	80063cc <SFU_IMG_TriggerImageInstallation+0x16c>
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_VALID(DwlSlot), (uint8_t *) pValidHeader,
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <SFU_IMG_TriggerImageInstallation+0x1bc>)
 8006390:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006394:	f109 0101 	add.w	r1, r9, #1
 8006398:	a805      	add	r0, sp, #20
 800639a:	f000 fbf4 	bl	8006b86 <SFU_LL_FLASH_Write>
  if (e_ret_status == SFU_SUCCESS)
 800639e:	42b8      	cmp	r0, r7
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_VALID(DwlSlot), (uint8_t *) pValidHeader,
 80063a0:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 80063a2:	d113      	bne.n	80063cc <SFU_IMG_TriggerImageInstallation+0x16c>
    (void) memcpy(&magic[0U], (uint8_t *)(buffer + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)), MAGIC_LENGTH / 2U);
 80063a4:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <SFU_IMG_TriggerImageInstallation+0x1c0>)
    (void) memcpy(&magic[MAGIC_LENGTH / 2U], (uint8_t *)(buffer + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)),
 80063a6:	4d1f      	ldr	r5, [pc, #124]	; (8006424 <SFU_IMG_TriggerImageInstallation+0x1c4>)
    (void) memcpy(&magic[0U], (uint8_t *)(buffer + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)), MAGIC_LENGTH / 2U);
 80063a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063aa:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
    (void) memcpy(&magic[MAGIC_LENGTH / 2U], (uint8_t *)(buffer + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)),
 80063ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80063b2:	ac0e      	add	r4, sp, #56	; 0x38
 80063b4:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_SWAP_ADDR(DwlSlot), magic, MAGIC_LENGTH);
 80063b8:	2320      	movs	r3, #32
 80063ba:	4652      	mov	r2, sl
 80063bc:	f209 2181 	addw	r1, r9, #641	; 0x281
 80063c0:	a805      	add	r0, sp, #20
 80063c2:	f000 fbe0 	bl	8006b86 <SFU_LL_FLASH_Write>
  if (e_ret_status != SFU_SUCCESS)
 80063c6:	42b8      	cmp	r0, r7
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_SWAP_ADDR(DwlSlot), magic, MAGIC_LENGTH);
 80063c8:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 80063ca:	d001      	beq.n	80063d0 <SFU_IMG_TriggerImageInstallation+0x170>
    SFU_EXCPT_SetError(SFU_EXCPT_TRAILER_UPDATE_ERR);
 80063cc:	2015      	movs	r0, #21
 80063ce:	e76d      	b.n	80062ac <SFU_IMG_TriggerImageInstallation+0x4c>
  e_ret_status = SwapFirmwareImages(ActiveSlot, DwlSlot, pTestHeader);
 80063d0:	4631      	mov	r1, r6
 80063d2:	4658      	mov	r0, fp
 80063d4:	f7ff fb64 	bl	8005aa0 <SwapFirmwareImages.constprop.0>
  if (e_ret_status != SFU_SUCCESS)
 80063d8:	42b8      	cmp	r0, r7
  e_ret_status = SwapFirmwareImages(ActiveSlot, DwlSlot, pTestHeader);
 80063da:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 80063dc:	d001      	beq.n	80063e2 <SFU_IMG_TriggerImageInstallation+0x182>
    SFU_EXCPT_SetError(SFU_EXCPT_FWIMG_SWAP_ERR);
 80063de:	200f      	movs	r0, #15
 80063e0:	e764      	b.n	80062ac <SFU_IMG_TriggerImageInstallation+0x4c>
  e_ret_status = SFU_IMG_Validation(ActiveSlot, pTestHeader);
 80063e2:	f1a5 0190 	sub.w	r1, r5, #144	; 0x90
 80063e6:	4658      	mov	r0, fp
 80063e8:	f7fe ff1c 	bl	8005224 <SFU_IMG_Validation>
  if (SFU_SUCCESS != e_ret_status)
 80063ec:	42b8      	cmp	r0, r7
  e_ret_status = SFU_IMG_Validation(ActiveSlot, pTestHeader);
 80063ee:	4604      	mov	r4, r0
  if (SFU_SUCCESS != e_ret_status)
 80063f0:	d001      	beq.n	80063f6 <SFU_IMG_TriggerImageInstallation+0x196>
    SFU_EXCPT_SetError(SFU_EXCPT_HEADER_VALIDATION_ERR);
 80063f2:	200d      	movs	r0, #13
 80063f4:	e75a      	b.n	80062ac <SFU_IMG_TriggerImageInstallation+0x4c>
  e_ret_status = CleanMagicValue(DwlSlot);
 80063f6:	4630      	mov	r0, r6
 80063f8:	f7ff f848 	bl	800548c <CleanMagicValue>
  if (e_ret_status != SFU_SUCCESS)
 80063fc:	42b8      	cmp	r0, r7
  e_ret_status = CleanMagicValue(DwlSlot);
 80063fe:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 8006400:	f43f af59 	beq.w	80062b6 <SFU_IMG_TriggerImageInstallation+0x56>
    SFU_EXCPT_SetError(SFU_EXCPT_FWIMG_MAGIC_ERR);
 8006404:	2016      	movs	r0, #22
 8006406:	e751      	b.n	80062ac <SFU_IMG_TriggerImageInstallation+0x4c>
 8006408:	0800abbc 	.word	0x0800abbc
 800640c:	0800ab9c 	.word	0x0800ab9c
 8006410:	20001788 	.word	0x20001788
 8006414:	00122f11 	.word	0x00122f11
 8006418:	0800abdc 	.word	0x0800abdc
 800641c:	200018d0 	.word	0x200018d0
 8006420:	20001960 	.word	0x20001960
 8006424:	20001818 	.word	0x20001818

08006428 <SFU_IMG_TriggerResumeInstallation>:
{
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	4607      	mov	r7, r0
 800642c:	460d      	mov	r5, r1
  e_ret_status = SwapFirmwareImages(ActiveSlot, DwlSlot, &fw_image_header_to_test);
 800642e:	f7ff fb37 	bl	8005aa0 <SwapFirmwareImages.constprop.0>
  if (e_ret_status != SFU_SUCCESS)
 8006432:	4e0e      	ldr	r6, [pc, #56]	; (800646c <SFU_IMG_TriggerResumeInstallation+0x44>)
 8006434:	42b0      	cmp	r0, r6
  e_ret_status = SwapFirmwareImages(ActiveSlot, DwlSlot, &fw_image_header_to_test);
 8006436:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 8006438:	d007      	beq.n	800644a <SFU_IMG_TriggerResumeInstallation+0x22>
    SFU_EXCPT_SetError(SFU_EXCPT_FWIMG_SWAP_ERR);
 800643a:	200f      	movs	r0, #15
      SFU_EXCPT_SetError(SFU_EXCPT_FWIMG_MAGIC_ERR);
 800643c:	f7fe fbe4 	bl	8004c08 <SFU_EXCPT_SetError>
    (void) SFU_IMG_EraseDownloadedImg(DwlSlot);
 8006440:	4628      	mov	r0, r5
 8006442:	f7ff febd 	bl	80061c0 <SFU_IMG_EraseDownloadedImg>
}
 8006446:	4620      	mov	r0, r4
 8006448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e_ret_status = SFU_IMG_Validation(ActiveSlot, &fw_image_header_to_test);
 800644a:	4909      	ldr	r1, [pc, #36]	; (8006470 <SFU_IMG_TriggerResumeInstallation+0x48>)
 800644c:	4638      	mov	r0, r7
 800644e:	f7fe fee9 	bl	8005224 <SFU_IMG_Validation>
    if (e_ret_status != SFU_SUCCESS)
 8006452:	42b0      	cmp	r0, r6
    e_ret_status = SFU_IMG_Validation(ActiveSlot, &fw_image_header_to_test);
 8006454:	4604      	mov	r4, r0
    if (e_ret_status != SFU_SUCCESS)
 8006456:	d001      	beq.n	800645c <SFU_IMG_TriggerResumeInstallation+0x34>
      SFU_EXCPT_SetError(SFU_EXCPT_HEADER_VALIDATION_ERR);
 8006458:	200d      	movs	r0, #13
 800645a:	e7ef      	b.n	800643c <SFU_IMG_TriggerResumeInstallation+0x14>
    e_ret_status = CleanMagicValue(DwlSlot);
 800645c:	4628      	mov	r0, r5
 800645e:	f7ff f815 	bl	800548c <CleanMagicValue>
    if (e_ret_status != SFU_SUCCESS)
 8006462:	42b0      	cmp	r0, r6
    e_ret_status = CleanMagicValue(DwlSlot);
 8006464:	4604      	mov	r4, r0
    if (e_ret_status != SFU_SUCCESS)
 8006466:	d0ee      	beq.n	8006446 <SFU_IMG_TriggerResumeInstallation+0x1e>
      SFU_EXCPT_SetError(SFU_EXCPT_FWIMG_MAGIC_ERR);
 8006468:	2016      	movs	r0, #22
 800646a:	e7e7      	b.n	800643c <SFU_IMG_TriggerResumeInstallation+0x14>
 800646c:	00122f11 	.word	0x00122f11
 8006470:	20001788 	.word	0x20001788

08006474 <SFU_LOADER_VerifyFwHeader>:
#elif defined ( __GNUC__ )
__attribute__((optimize("O0")))
#endif /* __ICCARM__ */

static SFU_ErrorStatus SFU_LOADER_VerifyFwHeader(uint8_t *pBuffer)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08c      	sub	sp, #48	; 0x30
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 800647c:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t                      cur_ver;
  uint16_t                      verif_ver;
  uint32_t                      active_slot;

  /*Parse the received buffer*/
  p_x_fw_raw_header = (SE_FwRawHeaderTypeDef *)(uint32_t)pBuffer;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28

  /*Check if the received header packet is authentic*/
  if (SE_VerifyHeaderSignature(&e_se_status, p_x_fw_raw_header) != SE_ERROR)
 8006486:	f107 031c 	add.w	r3, r7, #28
 800648a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648c:	4618      	mov	r0, r3
 800648e:	f7fd faff 	bl	8003a90 <SE_VerifyHeaderSignature>
 8006492:	4603      	mov	r3, r0
 8006494:	4a59      	ldr	r2, [pc, #356]	; (80065fc <SFU_LOADER_VerifyFwHeader+0x188>)
 8006496:	4293      	cmp	r3, r2
 8006498:	f000 80a8 	beq.w	80065ec <SFU_LOADER_VerifyFwHeader+0x178>
  {
    active_slot = SFU_IMG_GetFwImageSlot(p_x_fw_raw_header);
 800649c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800649e:	f7fe ff03 	bl	80052a8 <SFU_IMG_GetFwImageSlot>
 80064a2:	6278      	str	r0, [r7, #36]	; 0x24
     *   It will be based on SFU magic :
     *   - same number as active_slot if configured.
     *   - else : SLOT_DWL_1
     *    As example : Header magic is SFU2, active slot is SLOT_ACTIVE_2 and dwl slot will be SLOT_DWL2.
     */
    m_uDwlSlot = active_slot - SLOT_ACTIVE_1 + SLOT_DWL_1;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	3303      	adds	r3, #3
 80064a8:	4a55      	ldr	r2, [pc, #340]	; (8006600 <SFU_LOADER_VerifyFwHeader+0x18c>)
 80064aa:	6013      	str	r3, [r2, #0]
    if (SLOT_SIZE(m_uDwlSlot) == 1U)
 80064ac:	4b54      	ldr	r3, [pc, #336]	; (8006600 <SFU_LOADER_VerifyFwHeader+0x18c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a54      	ldr	r2, [pc, #336]	; (8006604 <SFU_LOADER_VerifyFwHeader+0x190>)
 80064b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80064b6:	4b52      	ldr	r3, [pc, #328]	; (8006600 <SFU_LOADER_VerifyFwHeader+0x18c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4953      	ldr	r1, [pc, #332]	; (8006608 <SFU_LOADER_VerifyFwHeader+0x194>)
 80064bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d102      	bne.n	80064ca <SFU_LOADER_VerifyFwHeader+0x56>
    {
      m_uDwlSlot = SLOT_DWL_1;
 80064c4:	4b4e      	ldr	r3, [pc, #312]	; (8006600 <SFU_LOADER_VerifyFwHeader+0x18c>)
 80064c6:	2204      	movs	r2, #4
 80064c8:	601a      	str	r2, [r3, #0]
    }
    SFU_IMG_GetDownloadAreaInfo(m_uDwlSlot, &fw_image_flash_data);
 80064ca:	4b4d      	ldr	r3, [pc, #308]	; (8006600 <SFU_LOADER_VerifyFwHeader+0x18c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f107 020c 	add.w	r2, r7, #12
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fa07 	bl	80068e8 <SFU_IMG_GetDownloadAreaInfo>

    /* Assign the download flash address to be used during the YMODEM process */
    m_uDwlAreaStart = fw_image_flash_data.DownloadAddr;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	4a4b      	ldr	r2, [pc, #300]	; (800660c <SFU_LOADER_VerifyFwHeader+0x198>)
 80064de:	6013      	str	r3, [r2, #0]
    m_uDwlAreaSize = fw_image_flash_data.MaxSizeInBytes;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a4b      	ldr	r2, [pc, #300]	; (8006610 <SFU_LOADER_VerifyFwHeader+0x19c>)
 80064e4:	6013      	str	r3, [r2, #0]

    /*
     * Check if the version is allowed
     * ==> SFU_IMG_GetActiveFwVersion() returns 0 if the header of active firmware is not valid
     */
    cur_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 80064e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064e8:	f7fe ff34 	bl	8005354 <SFU_IMG_GetActiveFwVersion>
 80064ec:	4603      	mov	r3, r0
 80064ee:	847b      	strh	r3, [r7, #34]	; 0x22
    if (SFU_IMG_CheckFwVersion(active_slot, cur_ver, p_x_fw_raw_header->FwVersion) == SFU_SUCCESS)
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	88da      	ldrh	r2, [r3, #6]
 80064f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064f6:	4619      	mov	r1, r3
 80064f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064fa:	f7fe ff63 	bl	80053c4 <SFU_IMG_CheckFwVersion>
 80064fe:	4603      	mov	r3, r0
 8006500:	4a44      	ldr	r2, [pc, #272]	; (8006614 <SFU_LOADER_VerifyFwHeader+0x1a0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d125      	bne.n	8006552 <SFU_LOADER_VerifyFwHeader+0xde>
       *      Nevertheless, we can still detect if the FW is too big to be downloaded (cannot be written in dwl slot).
       *      This will avoid download issues (but the installation itself can still be rejected) or overflows.
       *      The dwl slot must contain the HEADER and also the binary FW (encrypted).
       *      But there is an offset of FW_OFFSET_IMAGE bytes to respect.
       */
      if ((p_x_fw_raw_header->PartialFwSize + (p_x_fw_raw_header->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))) >
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	6919      	ldr	r1, [r3, #16]
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	4a3d      	ldr	r2, [pc, #244]	; (8006604 <SFU_LOADER_VerifyFwHeader+0x190>)
 8006510:	69d0      	ldr	r0, [r2, #28]
 8006512:	4a3d      	ldr	r2, [pc, #244]	; (8006608 <SFU_LOADER_VerifyFwHeader+0x194>)
 8006514:	69d2      	ldr	r2, [r2, #28]
 8006516:	1a82      	subs	r2, r0, r2
 8006518:	3201      	adds	r2, #1
 800651a:	fbb3 f0f2 	udiv	r0, r3, r2
 800651e:	fb02 f200 	mul.w	r2, r2, r0
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	18ca      	adds	r2, r1, r3
          (SLOT_SIZE(m_uDwlSlot) - SFU_IMG_IMAGE_OFFSET))
 8006526:	4b36      	ldr	r3, [pc, #216]	; (8006600 <SFU_LOADER_VerifyFwHeader+0x18c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4936      	ldr	r1, [pc, #216]	; (8006604 <SFU_LOADER_VerifyFwHeader+0x190>)
 800652c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006530:	4b33      	ldr	r3, [pc, #204]	; (8006600 <SFU_LOADER_VerifyFwHeader+0x18c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4834      	ldr	r0, [pc, #208]	; (8006608 <SFU_LOADER_VerifyFwHeader+0x194>)
 8006536:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800653a:	1acb      	subs	r3, r1, r3
 800653c:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
      if ((p_x_fw_raw_header->PartialFwSize + (p_x_fw_raw_header->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))) >
 8006540:	429a      	cmp	r2, r3
 8006542:	d903      	bls.n	800654c <SFU_LOADER_VerifyFwHeader+0xd8>
#endif /* SFU_NO_SWAP */
      {
        /* The firmware cannot be written in dwl slot */
        m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 8006544:	4b34      	ldr	r3, [pc, #208]	; (8006618 <SFU_LOADER_VerifyFwHeader+0x1a4>)
 8006546:	2203      	movs	r2, #3
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	e00d      	b.n	8006568 <SFU_LOADER_VerifyFwHeader+0xf4>
      }
      else
      {
        /* Installation authorized */
        e_ret_status = SFU_SUCCESS;
 800654c:	4b31      	ldr	r3, [pc, #196]	; (8006614 <SFU_LOADER_VerifyFwHeader+0x1a0>)
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006550:	e00a      	b.n	8006568 <SFU_LOADER_VerifyFwHeader+0xf4>
    }
    else
    {
      /* The installation is forbidden */
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
            p_x_fw_raw_header->FwVersion, cur_ver, SFU_FW_VERSION_START_NUM);
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	88db      	ldrh	r3, [r3, #6]
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
 8006556:	4619      	mov	r1, r3
 8006558:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800655a:	2301      	movs	r3, #1
 800655c:	482f      	ldr	r0, [pc, #188]	; (800661c <SFU_LOADER_VerifyFwHeader+0x1a8>)
 800655e:	f003 f9b7 	bl	80098d0 <iprintf>
      m_LoaderStatus = SFU_LOADER_ERR_FW_VERSION;
 8006562:	4b2d      	ldr	r3, [pc, #180]	; (8006618 <SFU_LOADER_VerifyFwHeader+0x1a4>)
 8006564:	2204      	movs	r2, #4
 8006566:	701a      	strb	r2, [r3, #0]
    /*
     * Control of version and length is done twice to avoid basic hardware attack
     * This more important for the 1 image configuration as the installation is done during the download procedure
     * For the 2 images configuration anti-rollback will be checked again during installation process
     */
    verif_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 8006568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800656a:	f7fe fef3 	bl	8005354 <SFU_IMG_GetActiveFwVersion>
 800656e:	4603      	mov	r3, r0
 8006570:	843b      	strh	r3, [r7, #32]
    if (SFU_IMG_CheckFwVersion(active_slot, verif_ver, p_x_fw_raw_header->FwVersion) == SFU_SUCCESS)
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	88da      	ldrh	r2, [r3, #6]
 8006576:	8c3b      	ldrh	r3, [r7, #32]
 8006578:	4619      	mov	r1, r3
 800657a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800657c:	f7fe ff22 	bl	80053c4 <SFU_IMG_CheckFwVersion>
 8006580:	4603      	mov	r3, r0
 8006582:	4a24      	ldr	r2, [pc, #144]	; (8006614 <SFU_LOADER_VerifyFwHeader+0x1a0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d125      	bne.n	80065d4 <SFU_LOADER_VerifyFwHeader+0x160>
       *      Nevertheless, we can still detect if the FW is too big to be downloaded (cannot be written in dwl slot).
       *      This will avoid download issues (but the installation itself can still be rejected) or overflows.
       *      The dwl slot must contain the HEADER and also the binary FW (encrypted).
       *      But there is an offset of FW_OFFSET_IMAGE bytes to respect.
       */
      if ((p_x_fw_raw_header->PartialFwSize + (p_x_fw_raw_header->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))) >
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	6919      	ldr	r1, [r3, #16]
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <SFU_LOADER_VerifyFwHeader+0x190>)
 8006592:	69d0      	ldr	r0, [r2, #28]
 8006594:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <SFU_LOADER_VerifyFwHeader+0x194>)
 8006596:	69d2      	ldr	r2, [r2, #28]
 8006598:	1a82      	subs	r2, r0, r2
 800659a:	3201      	adds	r2, #1
 800659c:	fbb3 f0f2 	udiv	r0, r3, r2
 80065a0:	fb02 f200 	mul.w	r2, r2, r0
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	18ca      	adds	r2, r1, r3
          (SLOT_SIZE(m_uDwlSlot) - SFU_IMG_IMAGE_OFFSET))
 80065a8:	4b15      	ldr	r3, [pc, #84]	; (8006600 <SFU_LOADER_VerifyFwHeader+0x18c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4915      	ldr	r1, [pc, #84]	; (8006604 <SFU_LOADER_VerifyFwHeader+0x190>)
 80065ae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80065b2:	4b13      	ldr	r3, [pc, #76]	; (8006600 <SFU_LOADER_VerifyFwHeader+0x18c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4814      	ldr	r0, [pc, #80]	; (8006608 <SFU_LOADER_VerifyFwHeader+0x194>)
 80065b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80065bc:	1acb      	subs	r3, r1, r3
 80065be:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
      if ((p_x_fw_raw_header->PartialFwSize + (p_x_fw_raw_header->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))) >
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d903      	bls.n	80065ce <SFU_LOADER_VerifyFwHeader+0x15a>
#endif /* SFU_NO_SWAP */
      {
        /* The firmware cannot be written in dwl slot */
        m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 80065c6:	4b14      	ldr	r3, [pc, #80]	; (8006618 <SFU_LOADER_VerifyFwHeader+0x1a4>)
 80065c8:	2203      	movs	r2, #3
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e011      	b.n	80065f2 <SFU_LOADER_VerifyFwHeader+0x17e>
      }
      else
      {
        /* Installation authorized */
        e_ret_status = SFU_SUCCESS;
 80065ce:	4b11      	ldr	r3, [pc, #68]	; (8006614 <SFU_LOADER_VerifyFwHeader+0x1a0>)
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d2:	e00e      	b.n	80065f2 <SFU_LOADER_VerifyFwHeader+0x17e>
    }
    else
    {
      /* The installation is forbidden */
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
            p_x_fw_raw_header->FwVersion, verif_ver, SFU_FW_VERSION_START_NUM);
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	88db      	ldrh	r3, [r3, #6]
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
 80065d8:	4619      	mov	r1, r3
 80065da:	8c3a      	ldrh	r2, [r7, #32]
 80065dc:	2301      	movs	r3, #1
 80065de:	480f      	ldr	r0, [pc, #60]	; (800661c <SFU_LOADER_VerifyFwHeader+0x1a8>)
 80065e0:	f003 f976 	bl	80098d0 <iprintf>
      m_LoaderStatus = SFU_LOADER_ERR_FW_VERSION;
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <SFU_LOADER_VerifyFwHeader+0x1a4>)
 80065e6:	2204      	movs	r2, #4
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	e002      	b.n	80065f2 <SFU_LOADER_VerifyFwHeader+0x17e>
    }
  }
  else
  {
    /* Header authentication failure */
    m_LoaderStatus = SFU_LOADER_ERR_AUTH_FAILED;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <SFU_LOADER_VerifyFwHeader+0x1a4>)
 80065ee:	2202      	movs	r2, #2
 80065f0:	701a      	strb	r2, [r3, #0]
  }

  return e_ret_status;
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3730      	adds	r7, #48	; 0x30
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	00018799 	.word	0x00018799
 8006600:	20001500 	.word	0x20001500
 8006604:	0800abbc 	.word	0x0800abbc
 8006608:	0800ab9c 	.word	0x0800ab9c
 800660c:	20001508 	.word	0x20001508
 8006610:	20001504 	.word	0x20001504
 8006614:	00122f11 	.word	0x00122f11
 8006618:	20001510 	.word	0x20001510
 800661c:	0800ac10 	.word	0x0800ac10

08006620 <SFU_LOADER_Init>:
}
 8006620:	4800      	ldr	r0, [pc, #0]	; (8006624 <SFU_LOADER_Init+0x4>)
 8006622:	4770      	bx	lr
 8006624:	00122f11 	.word	0x00122f11

08006628 <SFU_LOADER_DeInit>:
 8006628:	4800      	ldr	r0, [pc, #0]	; (800662c <SFU_LOADER_DeInit+0x4>)
 800662a:	4770      	bx	lr
 800662c:	00122f11 	.word	0x00122f11

08006630 <SFU_LOADER_DownloadNewUserFw>:
{
 8006630:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
  SFU_COM_YMODEM_StatusTypeDef e_com_status = SFU_COM_YMODEM_ERROR;
 8006634:	f04f 0b01 	mov.w	fp, #1
{
 8006638:	4689      	mov	r9, r1
 800663a:	4616      	mov	r6, r2
  SFU_COM_YMODEM_StatusTypeDef e_com_status = SFU_COM_YMODEM_ERROR;
 800663c:	f88d b007 	strb.w	fp, [sp, #7]
  if ((peSFU_LOADER_Status == NULL) || (pSize == NULL) || (pDwlSlot == NULL))
 8006640:	4680      	mov	r8, r0
 8006642:	b920      	cbnz	r0, 800664e <SFU_LOADER_DownloadNewUserFw+0x1e>
    return SFU_ERROR;
 8006644:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 8006648:	b002      	add	sp, #8
 800664a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  if ((peSFU_LOADER_Status == NULL) || (pSize == NULL) || (pDwlSlot == NULL))
 800664e:	2a00      	cmp	r2, #0
 8006650:	d0f8      	beq.n	8006644 <SFU_LOADER_DownloadNewUserFw+0x14>
 8006652:	2900      	cmp	r1, #0
 8006654:	d0f6      	beq.n	8006644 <SFU_LOADER_DownloadNewUserFw+0x14>
  (void) SFU_LL_SECU_IWDG_Refresh();
 8006656:	f000 fd3d 	bl	80070d4 <SFU_LL_SECU_IWDG_Refresh>
  TRACE("\r\n\t  File> Transfer> YMODEM> Send ");
 800665a:	4816      	ldr	r0, [pc, #88]	; (80066b4 <SFU_LOADER_DownloadNewUserFw+0x84>)
  m_uDwlAreaAddress = 0U;
 800665c:	4c16      	ldr	r4, [pc, #88]	; (80066b8 <SFU_LOADER_DownloadNewUserFw+0x88>)
  m_uDwlSlot = SLOT_DWL_1;
 800665e:	f8df a068 	ldr.w	sl, [pc, #104]	; 80066c8 <SFU_LOADER_DownloadNewUserFw+0x98>
  TRACE("\r\n\t  File> Transfer> YMODEM> Send ");
 8006662:	f003 f935 	bl	80098d0 <iprintf>
  m_uDwlAreaStart = 0U;
 8006666:	4b15      	ldr	r3, [pc, #84]	; (80066bc <SFU_LOADER_DownloadNewUserFw+0x8c>)
  m_LoaderStatus = SFU_LOADER_ERR_COM;
 8006668:	f884 b000 	strb.w	fp, [r4]
  m_uDwlAreaAddress = 0U;
 800666c:	2500      	movs	r5, #0
  m_uDwlAreaStart = 0U;
 800666e:	601d      	str	r5, [r3, #0]
  m_uDwlAreaSize = 0U;
 8006670:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <SFU_LOADER_DownloadNewUserFw+0x90>)
  m_uDwlAreaAddress = 0U;
 8006672:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
  m_uDwlAreaSize = 0U;
 8006676:	601d      	str	r5, [r3, #0]
  if (SFU_COM_YMODEM_Receive(&e_com_status, pSize) == SFU_SUCCESS)
 8006678:	4631      	mov	r1, r6
  m_uDwlSlot = SLOT_DWL_1;
 800667a:	2304      	movs	r3, #4
  if (SFU_COM_YMODEM_Receive(&e_com_status, pSize) == SFU_SUCCESS)
 800667c:	f10d 0007 	add.w	r0, sp, #7
  m_uDwlSlot = SLOT_DWL_1;
 8006680:	f8ca 3000 	str.w	r3, [sl]
  m_uNbrBlocksYmodem = 0U;
 8006684:	e9c4 5554 	strd	r5, r5, [r4, #336]	; 0x150
  m_uPacketsReceived = 0U;
 8006688:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if (SFU_COM_YMODEM_Receive(&e_com_status, pSize) == SFU_SUCCESS)
 800668c:	f7fe f8ce 	bl	800482c <SFU_COM_YMODEM_Receive>
 8006690:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <SFU_LOADER_DownloadNewUserFw+0x94>)
 8006692:	4298      	cmp	r0, r3
 8006694:	d102      	bne.n	800669c <SFU_LOADER_DownloadNewUserFw+0x6c>
    if (*pSize > 0U)
 8006696:	6833      	ldr	r3, [r6, #0]
 8006698:	b103      	cbz	r3, 800669c <SFU_LOADER_DownloadNewUserFw+0x6c>
      m_LoaderStatus = SFU_LOADER_OK;
 800669a:	7025      	strb	r5, [r4, #0]
  *pDwlSlot = m_uDwlSlot;
 800669c:	f8da 3000 	ldr.w	r3, [sl]
 80066a0:	f8c9 3000 	str.w	r3, [r9]
  *peSFU_LOADER_Status = m_LoaderStatus;
 80066a4:	7823      	ldrb	r3, [r4, #0]
 80066a6:	f888 3000 	strb.w	r3, [r8]
  if (m_LoaderStatus == SFU_LOADER_OK)
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1ca      	bne.n	8006644 <SFU_LOADER_DownloadNewUserFw+0x14>
    e_ret_status = SFU_SUCCESS;
 80066ae:	4805      	ldr	r0, [pc, #20]	; (80066c4 <SFU_LOADER_DownloadNewUserFw+0x94>)
 80066b0:	e7ca      	b.n	8006648 <SFU_LOADER_DownloadNewUserFw+0x18>
 80066b2:	bf00      	nop
 80066b4:	0800ac74 	.word	0x0800ac74
 80066b8:	20001510 	.word	0x20001510
 80066bc:	20001508 	.word	0x20001508
 80066c0:	20001504 	.word	0x20001504
 80066c4:	00122f11 	.word	0x00122f11
 80066c8:	20001500 	.word	0x20001500

080066cc <SFU_COM_YMODEM_HeaderPktRxCpltCallback>:
{
 80066cc:	b508      	push	{r3, lr}
  m_uPacketsReceived = 0U;
 80066ce:	4b08      	ldr	r3, [pc, #32]	; (80066f0 <SFU_COM_YMODEM_HeaderPktRxCpltCallback+0x24>)
  m_uFileSizeYmodem = uFileSize;
 80066d0:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (SFU_COM_YMODEM_PACKET_1K_SIZE - 1U)) / SFU_COM_YMODEM_PACKET_1K_SIZE;
 80066d4:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 80066d8:	0a80      	lsrs	r0, r0, #10
  m_uPacketsReceived = 0U;
 80066da:	2200      	movs	r2, #0
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (SFU_COM_YMODEM_PACKET_1K_SIZE - 1U)) / SFU_COM_YMODEM_PACKET_1K_SIZE;
 80066dc:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
  HAL_Delay(1000U);
 80066e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  m_uPacketsReceived = 0U;
 80066e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  HAL_Delay(1000U);
 80066e8:	f001 f860 	bl	80077ac <HAL_Delay>
}
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <SFU_COM_YMODEM_HeaderPktRxCpltCallback+0x28>)
 80066ee:	bd08      	pop	{r3, pc}
 80066f0:	20001510 	.word	0x20001510
 80066f4:	00122f11 	.word	0x00122f11

080066f8 <SFU_COM_YMODEM_DataPktRxCpltCallback>:
{
 80066f8:	e92d 4177 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r8, lr}
 80066fc:	460d      	mov	r5, r1
  if (p_data == NULL)
 80066fe:	4680      	mov	r8, r0
 8006700:	2800      	cmp	r0, #0
 8006702:	f000 80bb 	beq.w	800687c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x184>
  m_uPacketsReceived++;
 8006706:	4c5f      	ldr	r4, [pc, #380]	; (8006884 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x18c>)
 8006708:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 800670c:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
  m_uPacketsReceived++;
 8006710:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 8006712:	4293      	cmp	r3, r2
  m_uPacketsReceived++;
 8006714:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 8006718:	d107      	bne.n	800672a <SFU_COM_YMODEM_DataPktRxCpltCallback+0x32>
    if (0U == (m_uFileSizeYmodem % SFU_COM_YMODEM_PACKET_1K_SIZE))
 800671a:	f8d4 5150 	ldr.w	r5, [r4, #336]	; 0x150
 800671e:	f3c5 0509 	ubfx	r5, r5, #0, #10
      rx_size = SFU_COM_YMODEM_PACKET_1K_SIZE;
 8006722:	2d00      	cmp	r5, #0
 8006724:	bf08      	it	eq
 8006726:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if (m_uPacketsReceived == 1U)
 800672a:	2b01      	cmp	r3, #1
 800672c:	d14a      	bne.n	80067c4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xcc>
    (void) memcpy(fw_header, p_data, SE_FW_HEADER_TOT_LEN);
 800672e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006732:	4641      	mov	r1, r8
 8006734:	4854      	ldr	r0, [pc, #336]	; (8006888 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x190>)
 8006736:	f003 f8b5 	bl	80098a4 <memcpy>
    e_ret_status = SFU_LOADER_VerifyFwHeader(p_data);
 800673a:	4640      	mov	r0, r8
 800673c:	f7ff fe9a 	bl	8006474 <SFU_LOADER_VerifyFwHeader>
    if (e_ret_status == SFU_SUCCESS)
 8006740:	4b52      	ldr	r3, [pc, #328]	; (800688c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x194>)
 8006742:	4298      	cmp	r0, r3
    e_ret_status = SFU_LOADER_VerifyFwHeader(p_data);
 8006744:	4606      	mov	r6, r0
    if (e_ret_status == SFU_SUCCESS)
 8006746:	d129      	bne.n	800679c <SFU_COM_YMODEM_DataPktRxCpltCallback+0xa4>
                      (((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP)) +
 8006748:	4851      	ldr	r0, [pc, #324]	; (8006890 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x198>)
      m_uDwlAreaAddress = m_uDwlAreaStart;
 800674a:	4b52      	ldr	r3, [pc, #328]	; (8006894 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x19c>)
                      (((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP)) +
 800674c:	f8df c14c 	ldr.w	ip, [pc, #332]	; 800689c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a4>
      m_uDwlAreaAddress = m_uDwlAreaStart;
 8006750:	6819      	ldr	r1, [r3, #0]
                      (((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP)) +
 8006752:	69c3      	ldr	r3, [r0, #28]
 8006754:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8006758:	f8d4 e014 	ldr.w	lr, [r4, #20]
      m_uDwlAreaAddress = m_uDwlAreaStart;
 800675c:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
                      (((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP)) +
 8006760:	3301      	adds	r3, #1
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	fbbe f2f3 	udiv	r2, lr, r3
 8006768:	fb03 e312 	mls	r3, r3, r2, lr
 800676c:	69a2      	ldr	r2, [r4, #24]
 800676e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006772:	4413      	add	r3, r2
      m_uDwlImgSize = ((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->PartialFwSize +
 8006774:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
      if (SFU_LL_FLASH_Erase_Size(&x_flash_info, (uint8_t *) m_uDwlAreaAddress, SLOT_SIZE(m_uDwlSlot)) !=
 8006778:	4b47      	ldr	r3, [pc, #284]	; (8006898 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a0>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8006780:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8006784:	3301      	adds	r3, #1
 8006786:	1a9a      	subs	r2, r3, r2
 8006788:	f10d 0007 	add.w	r0, sp, #7
 800678c:	f000 f9f4 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
 8006790:	42b0      	cmp	r0, r6
 8006792:	d017      	beq.n	80067c4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xcc>
        m_LoaderStatus = SFU_LOADER_ERR_FLASH;
 8006794:	2305      	movs	r3, #5
 8006796:	7023      	strb	r3, [r4, #0]
        e_ret_status = SFU_ERROR;
 8006798:	f641 76e1 	movw	r6, #8161	; 0x1fe1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 800679c:	e9d4 3255 	ldrd	r3, r2, [r4, #340]	; 0x154
 80067a0:	429a      	cmp	r2, r3
    m_uPacketsReceived = 0U;
 80067a2:	bf04      	itt	eq
 80067a4:	2300      	moveq	r3, #0
 80067a6:	f8c4 3158 	streq.w	r3, [r4, #344]	; 0x158
  if (e_ret_status == SFU_ERROR)
 80067aa:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80067ae:	429e      	cmp	r6, r3
 80067b0:	d104      	bne.n	80067bc <SFU_COM_YMODEM_DataPktRxCpltCallback+0xc4>
    m_uFileSizeYmodem = 0U;
 80067b2:	2300      	movs	r3, #0
    m_uNbrBlocksYmodem = 0U;
 80067b4:	e9c4 3355 	strd	r3, r3, [r4, #340]	; 0x154
    m_uFileSizeYmodem = 0U;
 80067b8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
}
 80067bc:	4630      	mov	r0, r6
 80067be:	b003      	add	sp, #12
 80067c0:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
    if ((m_uDwlAreaAddress < (m_uDwlAreaStart + SFU_IMG_IMAGE_OFFSET)) &&
 80067c4:	4e33      	ldr	r6, [pc, #204]	; (8006894 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x19c>)
 80067c6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 80067ca:	6833      	ldr	r3, [r6, #0]
 80067cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80067d0:	428b      	cmp	r3, r1
 80067d2:	d922      	bls.n	800681a <SFU_COM_YMODEM_DataPktRxCpltCallback+0x122>
 80067d4:	194a      	adds	r2, r1, r5
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d81f      	bhi.n	800681a <SFU_COM_YMODEM_DataPktRxCpltCallback+0x122>
      if (SFU_LL_FLASH_Write(&x_flash_info, (uint8_t *)m_uDwlAreaAddress, p_data, uLength) == SFU_SUCCESS)
 80067da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067de:	4642      	mov	r2, r8
 80067e0:	f10d 0007 	add.w	r0, sp, #7
 80067e4:	f000 f9cf 	bl	8006b86 <SFU_LL_FLASH_Write>
 80067e8:	4b28      	ldr	r3, [pc, #160]	; (800688c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x194>)
 80067ea:	4298      	cmp	r0, r3
 80067ec:	d1d2      	bne.n	8006794 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x9c>
                                        SLOT_SIZE(SLOT_SWAP));
 80067ee:	4b28      	ldr	r3, [pc, #160]	; (8006890 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x198>)
 80067f0:	4a2a      	ldr	r2, [pc, #168]	; (800689c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a4>)
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	69d2      	ldr	r2, [r2, #28]
        m_uDwlAreaAddress += uLength + (((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->PartialFwOffset %
 80067f6:	6961      	ldr	r1, [r4, #20]
                                        SLOT_SIZE(SLOT_SWAP));
 80067f8:	3301      	adds	r3, #1
 80067fa:	1a9b      	subs	r3, r3, r2
        m_uDwlAreaAddress += uLength + (((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->PartialFwOffset %
 80067fc:	fbb1 f2f3 	udiv	r2, r1, r3
 8006800:	fb03 1312 	mls	r3, r3, r2, r1
 8006804:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8006808:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800680c:	4413      	add	r3, r2
 800680e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
        rx_size -= uLength;
 8006812:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
        p_data += uLength;
 8006816:	f508 7800 	add.w	r8, r8, #512	; 0x200
    if ((m_uDwlAreaAddress + rx_size) > (m_uDwlAreaStart + m_uDwlImgSize))
 800681a:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800681e:	6830      	ldr	r0, [r6, #0]
 8006820:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8006824:	194a      	adds	r2, r1, r5
 8006826:	4403      	add	r3, r0
 8006828:	429a      	cmp	r2, r3
 800682a:	d81e      	bhi.n	800686a <SFU_COM_YMODEM_DataPktRxCpltCallback+0x172>
    if ((rx_size % (uint32_t)sizeof(SFU_LL_FLASH_write_t)) != 0U)
 800682c:	076b      	lsls	r3, r5, #29
 800682e:	d006      	beq.n	800683e <SFU_COM_YMODEM_DataPktRxCpltCallback+0x146>
      rx_size = rx_size + ((uint32_t)sizeof(SFU_LL_FLASH_write_t) - (rx_size % (uint32_t)sizeof(SFU_LL_FLASH_write_t)));
 8006830:	f025 0307 	bic.w	r3, r5, #7
 8006834:	3308      	adds	r3, #8
        p_data[uOldSize] = 0xFF;
 8006836:	22ff      	movs	r2, #255	; 0xff
      while (uOldSize < rx_size)
 8006838:	429d      	cmp	r5, r3
 800683a:	d31b      	bcc.n	8006874 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x17c>
 800683c:	461d      	mov	r5, r3
    if ((m_uDwlAreaAddress + rx_size) > (m_uDwlAreaStart + m_uDwlAreaSize))
 800683e:	4b18      	ldr	r3, [pc, #96]	; (80068a0 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	194a      	adds	r2, r1, r5
 8006844:	4403      	add	r3, r0
 8006846:	429a      	cmp	r2, r3
 8006848:	d80f      	bhi.n	800686a <SFU_COM_YMODEM_DataPktRxCpltCallback+0x172>
    if (SFU_LL_FLASH_Write(&x_flash_info, (uint8_t *)m_uDwlAreaAddress, p_data, rx_size) == SFU_SUCCESS)
 800684a:	462b      	mov	r3, r5
 800684c:	4642      	mov	r2, r8
 800684e:	f10d 0007 	add.w	r0, sp, #7
 8006852:	f000 f998 	bl	8006b86 <SFU_LL_FLASH_Write>
 8006856:	4b0d      	ldr	r3, [pc, #52]	; (800688c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x194>)
 8006858:	4298      	cmp	r0, r3
 800685a:	4606      	mov	r6, r0
 800685c:	d19a      	bne.n	8006794 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x9c>
      m_uDwlAreaAddress += (rx_size);
 800685e:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 8006862:	4429      	add	r1, r5
 8006864:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
 8006868:	e798      	b.n	800679c <SFU_COM_YMODEM_DataPktRxCpltCallback+0xa4>
      m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 800686a:	2303      	movs	r3, #3
 800686c:	7023      	strb	r3, [r4, #0]
      e_ret_status = SFU_ERROR;
 800686e:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 8006872:	e793      	b.n	800679c <SFU_COM_YMODEM_DataPktRxCpltCallback+0xa4>
        p_data[uOldSize] = 0xFF;
 8006874:	f808 2005 	strb.w	r2, [r8, r5]
        uOldSize++;
 8006878:	3501      	adds	r5, #1
 800687a:	e7dd      	b.n	8006838 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x140>
    return SFU_ERROR;
 800687c:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 8006880:	e79c      	b.n	80067bc <SFU_COM_YMODEM_DataPktRxCpltCallback+0xc4>
 8006882:	bf00      	nop
 8006884:	20001510 	.word	0x20001510
 8006888:	20001518 	.word	0x20001518
 800688c:	00122f11 	.word	0x00122f11
 8006890:	0800abbc 	.word	0x0800abbc
 8006894:	20001508 	.word	0x20001508
 8006898:	20001500 	.word	0x20001500
 800689c:	0800ab9c 	.word	0x0800ab9c
 80068a0:	20001504 	.word	0x20001504

080068a4 <SFU_IMG_InstallAtNextReset>:
  *         This function is used by the local loader to request a Firmware installation (at next reboot).
  * @param  fw_header FW header of the FW to be installed
  * @retval SFU_SUCCESS if successful, otherwise SFU_ERROR
  */
SFU_ErrorStatus SFU_IMG_InstallAtNextReset(uint8_t *fw_header)
{
 80068a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if  !defined(SFU_NO_SWAP)
  if (fw_header == NULL)
 80068a6:	4605      	mov	r5, r0
 80068a8:	b1b0      	cbz	r0, 80068d8 <SFU_IMG_InstallAtNextReset+0x34>
  ret = SFU_LL_FLASH_Erase_Size(&flash_if_info, (uint8_t *) SlotStartAdd[SLOT_SWAP], SFU_IMG_IMAGE_OFFSET);
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <SFU_IMG_InstallAtNextReset+0x3c>)
 80068ac:	69de      	ldr	r6, [r3, #28]
 80068ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b2:	4631      	mov	r1, r6
 80068b4:	f10d 0007 	add.w	r0, sp, #7
 80068b8:	f000 f95e 	bl	8006b78 <SFU_LL_FLASH_Erase_Size>
  if (ret == SFU_SUCCESS)
 80068bc:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <SFU_IMG_InstallAtNextReset+0x40>)
 80068be:	4298      	cmp	r0, r3
  ret = SFU_LL_FLASH_Erase_Size(&flash_if_info, (uint8_t *) SlotStartAdd[SLOT_SWAP], SFU_IMG_IMAGE_OFFSET);
 80068c0:	4604      	mov	r4, r0
  if (ret == SFU_SUCCESS)
 80068c2:	d109      	bne.n	80068d8 <SFU_IMG_InstallAtNextReset+0x34>
    ret = SFU_LL_FLASH_Write(&flash_if_info, (uint8_t *)SlotStartAdd[SLOT_SWAP], pfw_header, SE_FW_HEADER_TOT_LEN);
 80068c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80068c8:	462a      	mov	r2, r5
 80068ca:	4631      	mov	r1, r6
 80068cc:	f10d 0007 	add.w	r0, sp, #7
 80068d0:	f000 f959 	bl	8006b86 <SFU_LL_FLASH_Write>
  {
    return SFU_ERROR;
  }
  if (WriteInstallHeader(fw_header) != SFU_SUCCESS)
 80068d4:	42a0      	cmp	r0, r4
 80068d6:	d001      	beq.n	80068dc <SFU_IMG_InstallAtNextReset+0x38>
  {
    return SFU_ERROR;
 80068d8:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  }
  return SFU_SUCCESS;
#else
  return SFU_SUCCESS;           /* Nothing to do */
#endif /* !SFU_NO_SWAP*/
}
 80068dc:	b002      	add	sp, #8
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	0800ab9c 	.word	0x0800ab9c
 80068e4:	00122f11 	.word	0x00122f11

080068e8 <SFU_IMG_GetDownloadAreaInfo>:
  * @param  pArea pointer to area descriptor
  * @retval none
  */
void SFU_IMG_GetDownloadAreaInfo(uint32_t DwlSlot, SFU_FwImageFlashTypeDef *pArea)
{
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 80068e8:	4a09      	ldr	r2, [pc, #36]	; (8006910 <SFU_IMG_GetDownloadAreaInfo+0x28>)
{
 80068ea:	b570      	push	{r4, r5, r6, lr}
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 80068ec:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
#if  !defined(SFU_NO_SWAP)
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot) - SFU_IMG_GetTrailerSize(DwlSlot);
 80068f0:	4a08      	ldr	r2, [pc, #32]	; (8006914 <SFU_IMG_GetDownloadAreaInfo+0x2c>)
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 80068f2:	604e      	str	r6, [r1, #4]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot) - SFU_IMG_GetTrailerSize(DwlSlot);
 80068f4:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
{
 80068f8:	460d      	mov	r5, r1
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot) - SFU_IMG_GetTrailerSize(DwlSlot);
 80068fa:	f7ff fc4b 	bl	8006194 <SFU_IMG_GetTrailerSize>
 80068fe:	3401      	adds	r4, #1
 8006900:	1ba4      	subs	r4, r4, r6
 8006902:	1a24      	subs	r4, r4, r0
#else
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
#endif /* !(SFU_NO_SWAP) */
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 8006904:	f44f 7300 	mov.w	r3, #512	; 0x200
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot) - SFU_IMG_GetTrailerSize(DwlSlot);
 8006908:	602c      	str	r4, [r5, #0]
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 800690a:	60ab      	str	r3, [r5, #8]
}
 800690c:	bd70      	pop	{r4, r5, r6, pc}
 800690e:	bf00      	nop
 8006910:	0800ab9c 	.word	0x0800ab9c
 8006914:	0800abbc 	.word	0x0800abbc

08006918 <SFU_LL_DeInit>:

  /* ADD SRC CODE HERE
       ...
  */
  return e_ret_status;
}
 8006918:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800691c:	4770      	bx	lr
	...

08006920 <SFU_LL_CRC_Config>:
  * @param  eCRCConfg: SFU_CRC_ConfigTypeDef.
  *         This parameter can be a value of @ref SFU_CRC_ConfigTypeDef.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_CRC_Config(SFU_CRC_ConfigTypeDef eCRCConfg)
{
 8006920:	b508      	push	{r3, lr}

  /* Check the parameters */
  assert_param(IS_SFU_CRC_CONF(eCRCConfg));

  /* Switch to the selected configuration */
  CrcHandle.Instance = CRC;
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <SFU_LL_CRC_Config+0x50>)
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <SFU_LL_CRC_Config+0x54>)
 8006926:	601a      	str	r2, [r3, #0]
  CrcHandle.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;

  /* The output data are not inverted */
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;

  switch (eCRCConfg)
 8006928:	2801      	cmp	r0, #1
  CrcHandle.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800692a:	f04f 0200 	mov.w	r2, #0
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800692e:	e9c3 2205 	strd	r2, r2, [r3, #20]
  switch (eCRCConfg)
 8006932:	d004      	beq.n	800693e <SFU_LL_CRC_Config+0x1e>
 8006934:	2802      	cmp	r0, #2
 8006936:	d010      	beq.n	800695a <SFU_LL_CRC_Config+0x3a>
 8006938:	f641 70e1 	movw	r0, #8161	; 0x1fe1
      e_ret_status = SFU_ERROR;
    }
  }

  return e_ret_status;
}
 800693c:	bd08      	pop	{r3, pc}
      CrcHandle.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800693e:	809a      	strh	r2, [r3, #4]
      CrcHandle.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8006940:	2203      	movs	r2, #3
    if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 8006942:	480b      	ldr	r0, [pc, #44]	; (8006970 <SFU_LL_CRC_Config+0x50>)
      CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 8006944:	621a      	str	r2, [r3, #32]
    if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 8006946:	f001 f83d 	bl	80079c4 <HAL_CRC_Init>
      e_ret_status = SFU_ERROR;
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <SFU_LL_CRC_Config+0x58>)
 800694c:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 8006950:	2800      	cmp	r0, #0
 8006952:	bf0c      	ite	eq
 8006954:	4618      	moveq	r0, r3
 8006956:	4610      	movne	r0, r2
 8006958:	e7f0      	b.n	800693c <SFU_LL_CRC_Config+0x1c>
      CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B;
 800695a:	2108      	movs	r1, #8
 800695c:	f241 0021 	movw	r0, #4129	; 0x1021
 8006960:	e9c3 0102 	strd	r0, r1, [r3, #8]
      CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 8006964:	f240 1101 	movw	r1, #257	; 0x101
      CrcHandle.Init.InitValue               = 0U;
 8006968:	611a      	str	r2, [r3, #16]
      CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 800696a:	8099      	strh	r1, [r3, #4]
      CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 800696c:	2201      	movs	r2, #1
 800696e:	e7e8      	b.n	8006942 <SFU_LL_CRC_Config+0x22>
 8006970:	2000166c 	.word	0x2000166c
 8006974:	40023000 	.word	0x40023000
 8006978:	00122f11 	.word	0x00122f11

0800697c <SFU_LL_CRC_Init>:
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800697c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8006980:	b082      	sub	sp, #8
 8006982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006988:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800698a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006990:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006992:	9b01      	ldr	r3, [sp, #4]
  e_ret_status = SFU_LL_CRC_Config(SFU_CRC_CONFIG_DEFAULT);
 8006994:	2001      	movs	r0, #1
}
 8006996:	b002      	add	sp, #8
  e_ret_status = SFU_LL_CRC_Config(SFU_CRC_CONFIG_DEFAULT);
 8006998:	f7ff bfc2 	b.w	8006920 <SFU_LL_CRC_Config>

0800699c <SFU_LL_Init>:
  e_ret_status = SFU_LL_CRC_Init();
 800699c:	f7ff bfee 	b.w	800697c <SFU_LL_CRC_Init>

080069a0 <SFU_LL_CRC_Calculate>:
  * @param  pBuffer: pointer to data buffer.
  * @param  BufferLength: buffer length in bytes.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t SFU_LL_CRC_Calculate(uint32_t pBuffer[], uint32_t BufferLength)
{
 80069a0:	460a      	mov	r2, r1
  return HAL_CRC_Calculate(&CrcHandle, pBuffer, BufferLength);
 80069a2:	4601      	mov	r1, r0
 80069a4:	4801      	ldr	r0, [pc, #4]	; (80069ac <SFU_LL_CRC_Calculate+0xc>)
 80069a6:	f001 b847 	b.w	8007a38 <HAL_CRC_Calculate>
 80069aa:	bf00      	nop
 80069ac:	2000166c 	.word	0x2000166c

080069b0 <SFU_LL_UART_Init>:
  - One Stop Bit
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  UartHandle.Instance = SFU_UART;
 80069b0:	480e      	ldr	r0, [pc, #56]	; (80069ec <SFU_LL_UART_Init+0x3c>)
  UartHandle.Init.BaudRate = 115200U;
 80069b2:	4a0f      	ldr	r2, [pc, #60]	; (80069f0 <SFU_LL_UART_Init+0x40>)
{
 80069b4:	b508      	push	{r3, lr}
  UartHandle.Init.BaudRate = 115200U;
 80069b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80069ba:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80069be:	2300      	movs	r3, #0
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 80069c0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  UartHandle.Init.Parity = UART_PARITY_NONE;
 80069c4:	6343      	str	r3, [r0, #52]	; 0x34
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069c6:	63c3      	str	r3, [r0, #60]	; 0x3c
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 80069c8:	230c      	movs	r3, #12
 80069ca:	6383      	str	r3, [r0, #56]	; 0x38
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80069cc:	2310      	movs	r3, #16
 80069ce:	64c3      	str	r3, [r0, #76]	; 0x4c
  UartHandle.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80069d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069d4:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_UART_Init(&UartHandle) == HAL_OK)
 80069d6:	3024      	adds	r0, #36	; 0x24
 80069d8:	f002 fefb 	bl	80097d2 <HAL_UART_Init>
    e_ret_status = SFU_SUCCESS;
  }

  return e_ret_status;

}
 80069dc:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <SFU_LL_UART_Init+0x44>)
 80069de:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 80069e2:	2800      	cmp	r0, #0
 80069e4:	bf14      	ite	ne
 80069e6:	4610      	movne	r0, r2
 80069e8:	4618      	moveq	r0, r3
 80069ea:	bd08      	pop	{r3, pc}
 80069ec:	2000166c 	.word	0x2000166c
 80069f0:	40013800 	.word	0x40013800
 80069f4:	00122f11 	.word	0x00122f11

080069f8 <SFU_LL_UART_Transmit>:
  * @retval status of the write operation
  *         SFU_ERROR : if the write operation is not performed
  *         SFU_SUCCESS : if the write operation is successfully performed
  */
SFU_ErrorStatus SFU_LL_UART_Transmit(uint8_t *pData, uint16_t DataLength, uint32_t Timeout)
{
 80069f8:	b508      	push	{r3, lr}
 80069fa:	4613      	mov	r3, r2
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check the pointers allocation */
  if (pData == NULL)
 80069fc:	b910      	cbnz	r0, 8006a04 <SFU_LL_UART_Transmit+0xc>
  {
    return SFU_ERROR;
 80069fe:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  {
    e_ret_status = SFU_SUCCESS;
  }

  return e_ret_status;
}
 8006a02:	bd08      	pop	{r3, pc}
  if (HAL_UART_Transmit(&UartHandle, (uint8_t *)pData, DataLength, Timeout) == HAL_OK)
 8006a04:	460a      	mov	r2, r1
 8006a06:	4601      	mov	r1, r0
 8006a08:	4803      	ldr	r0, [pc, #12]	; (8006a18 <SFU_LL_UART_Transmit+0x20>)
 8006a0a:	f002 fdd7 	bl	80095bc <HAL_UART_Transmit>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d1f5      	bne.n	80069fe <SFU_LL_UART_Transmit+0x6>
    e_ret_status = SFU_SUCCESS;
 8006a12:	4802      	ldr	r0, [pc, #8]	; (8006a1c <SFU_LL_UART_Transmit+0x24>)
 8006a14:	e7f5      	b.n	8006a02 <SFU_LL_UART_Transmit+0xa>
 8006a16:	bf00      	nop
 8006a18:	20001690 	.word	0x20001690
 8006a1c:	00122f11 	.word	0x00122f11

08006a20 <SFU_LL_UART_Receive>:
  * @retval status of the read operation
  *         SFU_ERROR : if the read operation is not performed
  *         SFU_SUCCESS : if the read operation is successfully performed
  */
SFU_ErrorStatus SFU_LL_UART_Receive(uint8_t *pData, uint16_t DataLength, uint32_t Timeout)
{
 8006a20:	b508      	push	{r3, lr}
 8006a22:	4613      	mov	r3, r2
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check the pointers allocation */
  if (pData == NULL)
 8006a24:	b910      	cbnz	r0, 8006a2c <SFU_LL_UART_Receive+0xc>
  {
    return SFU_ERROR;
 8006a26:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  {
    e_ret_status = SFU_SUCCESS;
  }

  return e_ret_status;
}
 8006a2a:	bd08      	pop	{r3, pc}
  if (HAL_UART_Receive(&UartHandle, (uint8_t *)pData, DataLength, Timeout) == HAL_OK)
 8006a2c:	460a      	mov	r2, r1
 8006a2e:	4601      	mov	r1, r0
 8006a30:	4803      	ldr	r0, [pc, #12]	; (8006a40 <SFU_LL_UART_Receive+0x20>)
 8006a32:	f002 fe20 	bl	8009676 <HAL_UART_Receive>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d1f5      	bne.n	8006a26 <SFU_LL_UART_Receive+0x6>
    e_ret_status = SFU_SUCCESS;
 8006a3a:	4802      	ldr	r0, [pc, #8]	; (8006a44 <SFU_LL_UART_Receive+0x24>)
 8006a3c:	e7f5      	b.n	8006a2a <SFU_LL_UART_Receive+0xa>
 8006a3e:	bf00      	nop
 8006a40:	20001690 	.word	0x20001690
 8006a44:	00122f11 	.word	0x00122f11

08006a48 <SFU_LL_UART_Flush>:
  * @retval status of the operation.
  */
SFU_ErrorStatus SFU_LL_UART_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <SFU_LL_UART_Flush+0x18>)

  return SFU_SUCCESS;
}
 8006a4a:	4806      	ldr	r0, [pc, #24]	; (8006a64 <SFU_LL_UART_Flush+0x1c>)
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	f042 0208 	orr.w	r2, r2, #8
 8006a54:	619a      	str	r2, [r3, #24]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	f042 0210 	orr.w	r2, r2, #16
 8006a5c:	619a      	str	r2, [r3, #24]
}
 8006a5e:	4770      	bx	lr
 8006a60:	2000166c 	.word	0x2000166c
 8006a64:	00122f11 	.word	0x00122f11

08006a68 <SFU_LL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_BDCR register are set to their reset values.
  * @retval None
  */
void SFU_LL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8006a68:	b500      	push	{lr}
 8006a6a:	b0a9      	sub	sp, #164	; 0xa4

  UNUSED(hrtc);
  /*-1- Enables access to the backup domain */
  /* To enable access on RTC registers */

  HAL_PWR_EnableBkUpAccess();
 8006a6c:	f001 fbc0 	bl	80081f0 <HAL_PWR_EnableBkUpAccess>
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    SFU_LL_Error_Handler();
  }
#elif defined (RTC_CLOCK_SOURCE_LSI)
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI1 | RCC_OSCILLATORTYPE_LSE;
 8006a70:	230c      	movs	r3, #12
 8006a72:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006a74:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006a76:	2300      	movs	r3, #0
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a78:	a802      	add	r0, sp, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006a7a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006a7c:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8006a7e:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a80:	f001 fcc6 	bl	8008410 <HAL_RCC_OscConfig>
 8006a84:	b100      	cbz	r0, 8006a88 <SFU_LL_RTC_MspInit+0x20>
{
  /*
    * ADD SRC CODE HERE
    */

  while (1 == 1)
 8006a86:	e7fe      	b.n	8006a86 <SFU_LL_RTC_MspInit+0x1e>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a8c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a8e:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a94:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a96:	f002 f8d6 	bl	8008c46 <HAL_RCCEx_PeriphCLKConfig>
 8006a9a:	b100      	cbz	r0, 8006a9e <SFU_LL_RTC_MspInit+0x36>
  while (1 == 1)
 8006a9c:	e7fe      	b.n	8006a9c <SFU_LL_RTC_MspInit+0x34>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_IRQn, 0x0FU, 0U);
 8006aa2:	210f      	movs	r1, #15
 8006aa4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006aa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ab6:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006abe:	4602      	mov	r2, r0
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	2002      	movs	r0, #2
  (void)tmpreg;
 8006ac4:	9b01      	ldr	r3, [sp, #4]
 8006ac6:	f000 fe9f 	bl	8007808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_IRQn);
 8006aca:	2002      	movs	r0, #2
 8006acc:	f000 fece 	bl	800786c <HAL_NVIC_EnableIRQ>
}
 8006ad0:	b029      	add	sp, #164	; 0xa4
 8006ad2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006ad8 <SFU_LL_UART_MspInit>:
{
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->Instance == SFU_UART)
 8006ada:	6802      	ldr	r2, [r0, #0]
 8006adc:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <SFU_LL_UART_MspInit+0x7c>)
 8006ade:	429a      	cmp	r2, r3
{
 8006ae0:	b089      	sub	sp, #36	; 0x24
  if (huart->Instance == SFU_UART)
 8006ae2:	d134      	bne.n	8006b4e <SFU_LL_UART_MspInit+0x76>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8006ae8:	481b      	ldr	r0, [pc, #108]	; (8006b58 <SFU_LL_UART_MspInit+0x80>)
 8006aea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006af0:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006af2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006af4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006af8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8006afa:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006afc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006afe:	f042 0202 	orr.w	r2, r2, #2
 8006b02:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006b04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b06:	f002 0202 	and.w	r2, r2, #2
 8006b0a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006b0c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b10:	f042 0202 	orr.w	r2, r2, #2
 8006b14:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8006b1e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b20:	2702      	movs	r7, #2
 8006b22:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b24:	2600      	movs	r6, #0
 8006b26:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = SFU_UART_TX_AF;
 8006b28:	2407      	movs	r4, #7
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8006b2a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b30:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = SFU_UART_TX_AF;
 8006b34:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8006b36:	f001 fa63 	bl	8008000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SFU_UART_RX_PIN;
 8006b3a:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 8006b3c:	4806      	ldr	r0, [pc, #24]	; (8006b58 <SFU_LL_UART_MspInit+0x80>)
    GPIO_InitStruct.Alternate = SFU_UART_RX_AF;
 8006b3e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 8006b40:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b42:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b46:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 8006b4a:	f001 fa59 	bl	8008000 <HAL_GPIO_Init>
}
 8006b4e:	b009      	add	sp, #36	; 0x24
 8006b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40013800 	.word	0x40013800
 8006b58:	48000400 	.word	0x48000400

08006b5c <SFU_LL_FLASH_Init>:
  * @brief  Initialize internal and external flash interface (OSPI/QSPI)
  * @param  none
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_FLASH_Init(void)
{
 8006b5c:	b508      	push	{r3, lr}
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  e_ret_status = SFU_LL_FLASH_INT_Init();
 8006b5e:	f000 f861 	bl	8006c24 <SFU_LL_FLASH_INT_Init>
  if (e_ret_status == SFU_SUCCESS)
 8006b62:	4b04      	ldr	r3, [pc, #16]	; (8006b74 <SFU_LL_FLASH_Init+0x18>)
 8006b64:	4298      	cmp	r0, r3
 8006b66:	d103      	bne.n	8006b70 <SFU_LL_FLASH_Init+0x14>
  {
    e_ret_status = SFU_LL_FLASH_EXT_Init();
  }
  return e_ret_status;
}
 8006b68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e_ret_status = SFU_LL_FLASH_EXT_Init();
 8006b6c:	f000 b82e 	b.w	8006bcc <SFU_LL_FLASH_EXT_Init>
}
 8006b70:	bd08      	pop	{r3, pc}
 8006b72:	bf00      	nop
 8006b74:	00122f11 	.word	0x00122f11

08006b78 <SFU_LL_FLASH_Erase_Size>:
  */
SFU_ErrorStatus SFU_LL_FLASH_Erase_Size(SFU_FLASH_StatusTypeDef *pFlashStatus, uint8_t *pStart, uint32_t Length)
{

  /* Check Flash start address */
  if ((uint32_t) pStart < EXTERNAL_FLASH_ADDRESS)
 8006b78:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
 8006b7c:	d201      	bcs.n	8006b82 <SFU_LL_FLASH_Erase_Size+0xa>
  {
    return SFU_LL_FLASH_INT_Erase_Size(pFlashStatus, pStart, Length);
 8006b7e:	f000 b931 	b.w	8006de4 <SFU_LL_FLASH_INT_Erase_Size>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Erase_Size(pFlashStatus, pStart, Length);
 8006b82:	f000 b827 	b.w	8006bd4 <SFU_LL_FLASH_EXT_Erase_Size>

08006b86 <SFU_LL_FLASH_Write>:
  */
SFU_ErrorStatus SFU_LL_FLASH_Write(SFU_FLASH_StatusTypeDef *pFlashStatus, uint8_t  *pDestination,
                                   const uint8_t *pSource, uint32_t Length)
{
  /* Check Flash destination address */
  if ((uint32_t) pDestination < EXTERNAL_FLASH_ADDRESS)
 8006b86:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
 8006b8a:	d201      	bcs.n	8006b90 <SFU_LL_FLASH_Write+0xa>
  {
    return SFU_LL_FLASH_INT_Write(pFlashStatus, pDestination, pSource, Length);
 8006b8c:	f000 b84e 	b.w	8006c2c <SFU_LL_FLASH_INT_Write>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Write(pFlashStatus, pDestination, pSource, Length);
 8006b90:	f000 b823 	b.w	8006bda <SFU_LL_FLASH_EXT_Write>

08006b94 <SFU_LL_FLASH_Read>:
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_FLASH_Read(uint8_t *pDestination, const uint8_t *pSource, uint32_t Length)
{
  /* Check Flash source address */
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 8006b94:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
 8006b98:	d201      	bcs.n	8006b9e <SFU_LL_FLASH_Read+0xa>
  {
    return SFU_LL_FLASH_INT_Read(pDestination, pSource, Length);
 8006b9a:	f000 b8bb 	b.w	8006d14 <SFU_LL_FLASH_INT_Read>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Read(pDestination, pSource, Length);
 8006b9e:	f000 b81f 	b.w	8006be0 <SFU_LL_FLASH_EXT_Read>

08006ba2 <SFU_LL_FLASH_Compare>:
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_FLASH_Compare(const uint8_t *pFlash, const uint32_t Pattern1, const uint32_t Pattern2, uint32_t Length)
{
  /* Check Flash source address */
  if ((uint32_t) pFlash < EXTERNAL_FLASH_ADDRESS)
 8006ba2:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 8006ba6:	d201      	bcs.n	8006bac <SFU_LL_FLASH_Compare+0xa>
  {
    return SFU_LL_FLASH_INT_Compare(pFlash, Pattern1, Pattern2, Length);
 8006ba8:	f000 b8ee 	b.w	8006d88 <SFU_LL_FLASH_INT_Compare>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Compare(pFlash, Pattern1, Pattern2, Length);
 8006bac:	f000 b81b 	b.w	8006be6 <SFU_LL_FLASH_EXT_Compare>

08006bb0 <SFU_LL_FLASH_Config_Exe>:
   * Internal flash : nothing to do
   * External flash : configure memory mapped mode
   */

  /* Check Flash address */
  if (SlotStartAdd[SlotNumber] < EXTERNAL_FLASH_ADDRESS)
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <SFU_LL_FLASH_Config_Exe+0x14>)
 8006bb2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006bb6:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 8006bba:	d301      	bcc.n	8006bc0 <SFU_LL_FLASH_Config_Exe+0x10>
  {
    return SFU_SUCCESS;
  }
  else
  {
    return SFU_LL_FLASH_EXT_Config_Exe(SlotNumber);
 8006bbc:	f000 b816 	b.w	8006bec <SFU_LL_FLASH_EXT_Config_Exe>
  }
}
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <SFU_LL_FLASH_Config_Exe+0x18>)
 8006bc2:	4770      	bx	lr
 8006bc4:	0800ab9c 	.word	0x0800ab9c
 8006bc8:	00122f11 	.word	0x00122f11

08006bcc <SFU_LL_FLASH_EXT_Init>:
       systematically during startup phase */

SFU_ErrorStatus SFU_LL_FLASH_EXT_Init(void)
{
  return SFU_SUCCESS;
}
 8006bcc:	4800      	ldr	r0, [pc, #0]	; (8006bd0 <SFU_LL_FLASH_EXT_Init+0x4>)
 8006bce:	4770      	bx	lr
 8006bd0:	00122f11 	.word	0x00122f11

08006bd4 <SFU_LL_FLASH_EXT_Erase_Size>:
{
  UNUSED(pFlashStatus);
  UNUSED(pStart);
  UNUSED(Length);
  return SFU_ERROR;
}
 8006bd4:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8006bd8:	4770      	bx	lr

08006bda <SFU_LL_FLASH_EXT_Write>:
  UNUSED(pFlashStatus);
  UNUSED(pDestination);
  UNUSED(pSource);
  UNUSED(Length);
  return SFU_ERROR;
}
 8006bda:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8006bde:	4770      	bx	lr

08006be0 <SFU_LL_FLASH_EXT_Read>:
 8006be0:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8006be4:	4770      	bx	lr

08006be6 <SFU_LL_FLASH_EXT_Compare>:
  UNUSED(pFlash);
  UNUSED(Pattern1);
  UNUSED(Pattern2);
  UNUSED(Length);
  return SFU_ERROR;
}
 8006be6:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8006bea:	4770      	bx	lr

08006bec <SFU_LL_FLASH_EXT_Config_Exe>:
SFU_ErrorStatus SFU_LL_FLASH_EXT_Config_Exe(uint32_t SlotNumber)
{
  UNUSED(SlotNumber);
  return SFU_SUCCESS;
}
 8006bec:	4800      	ldr	r0, [pc, #0]	; (8006bf0 <SFU_LL_FLASH_EXT_Config_Exe+0x4>)
 8006bee:	4770      	bx	lr
 8006bf0:	00122f11 	.word	0x00122f11

08006bf4 <SFU_LL_FLASH_INT_Clear_Error.part.0>:
/**
  * @brief  Clear error flags raised during previous operation
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
static SFU_ErrorStatus SFU_LL_FLASH_INT_Clear_Error(void)
 8006bf4:	b508      	push	{r3, lr}
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
  {

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8006bf6:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <SFU_LL_FLASH_INT_Clear_Error.part.0+0x28>)
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8006bfe:	619a      	str	r2, [r3, #24]
 8006c00:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8006c04:	611a      	str	r2, [r3, #16]


    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8006c06:	f000 ff6f 	bl	8007ae8 <HAL_FLASH_Lock>
    }
  }

  return e_ret_status;

}
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <SFU_LL_FLASH_INT_Clear_Error.part.0+0x2c>)
 8006c0c:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 8006c10:	2800      	cmp	r0, #0
 8006c12:	bf14      	ite	ne
 8006c14:	4610      	movne	r0, r2
 8006c16:	4618      	moveq	r0, r3
 8006c18:	bd08      	pop	{r3, pc}
 8006c1a:	bf00      	nop
 8006c1c:	58004000 	.word	0x58004000
 8006c20:	00122f11 	.word	0x00122f11

08006c24 <SFU_LL_FLASH_INT_Init>:
}
 8006c24:	4800      	ldr	r0, [pc, #0]	; (8006c28 <SFU_LL_FLASH_INT_Init+0x4>)
 8006c26:	4770      	bx	lr
 8006c28:	00122f11 	.word	0x00122f11

08006c2c <SFU_LL_FLASH_INT_Write>:
{
 8006c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	460c      	mov	r4, r1
 8006c32:	4617      	mov	r7, r2
 8006c34:	461e      	mov	r6, r3
  uint32_t destination = (uint32_t)pDestination;
 8006c36:	4689      	mov	r9, r1
  if ((pFlashStatus == NULL) || (pSource == NULL))
 8006c38:	4605      	mov	r5, r0
 8006c3a:	b910      	cbnz	r0, 8006c42 <SFU_LL_FLASH_INT_Write+0x16>
          e_ret_status = SFU_ERROR;
 8006c3c:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 8006c40:	e019      	b.n	8006c76 <SFU_LL_FLASH_INT_Write+0x4a>
  if ((pFlashStatus == NULL) || (pSource == NULL))
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	d0fa      	beq.n	8006c3c <SFU_LL_FLASH_INT_Write+0x10>
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006c46:	4830      	ldr	r0, [pc, #192]	; (8006d08 <SFU_LL_FLASH_INT_Write+0xdc>)
 8006c48:	6840      	ldr	r0, [r0, #4]
 8006c4a:	4288      	cmp	r0, r1
 8006c4c:	d817      	bhi.n	8006c7e <SFU_LL_FLASH_INT_Write+0x52>
        ((destination + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8006c4e:	441c      	add	r4, r3
 8006c50:	f500 7000 	add.w	r0, r0, #512	; 0x200
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006c54:	4284      	cmp	r4, r0
 8006c56:	d812      	bhi.n	8006c7e <SFU_LL_FLASH_INT_Write+0x52>
  if ((inside_header == 1U) && (Length != 0U))
 8006c58:	b18b      	cbz	r3, 8006c7e <SFU_LL_FLASH_INT_Write+0x52>
    SE_ErrorStatus se_ret_status = SE_SFU_IMG_Write(&se_status, (uint8_t *)destination, pSource, Length);
 8006c5a:	a801      	add	r0, sp, #4
 8006c5c:	f7fc fdca 	bl	80037f4 <SE_SFU_IMG_Write>
    if (se_ret_status == SE_SUCCESS)
 8006c60:	4b2a      	ldr	r3, [pc, #168]	; (8006d0c <SFU_LL_FLASH_INT_Write+0xe0>)
      *pFlashStatus = SFU_FLASH_ERROR;
 8006c62:	4c2b      	ldr	r4, [pc, #172]	; (8006d10 <SFU_LL_FLASH_INT_Write+0xe4>)
 8006c64:	4298      	cmp	r0, r3
 8006c66:	bf0c      	ite	eq
 8006c68:	2305      	moveq	r3, #5
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8006c70:	bf18      	it	ne
 8006c72:	4604      	movne	r4, r0
 8006c74:	702b      	strb	r3, [r5, #0]
}
 8006c76:	4620      	mov	r0, r4
 8006c78:	b003      	add	sp, #12
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pFlashStatus = SFU_FLASH_ERROR;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	702b      	strb	r3, [r5, #0]
  if (HAL_FLASH_Unlock() == HAL_OK)
 8006c82:	f000 ff1f 	bl	8007ac4 <HAL_FLASH_Unlock>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d1d8      	bne.n	8006c3c <SFU_LL_FLASH_INT_Write+0x10>
 8006c8a:	f7ff ffb3 	bl	8006bf4 <SFU_LL_FLASH_INT_Clear_Error.part.0>
    if (e_ret_status == SFU_SUCCESS)
 8006c8e:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <SFU_LL_FLASH_INT_Write+0xe4>)
 8006c90:	4298      	cmp	r0, r3
 8006c92:	4604      	mov	r4, r0
 8006c94:	d1ef      	bne.n	8006c76 <SFU_LL_FLASH_INT_Write+0x4a>
      if (HAL_FLASH_Unlock() != HAL_OK)
 8006c96:	f000 ff15 	bl	8007ac4 <HAL_FLASH_Unlock>
 8006c9a:	b968      	cbnz	r0, 8006cb8 <SFU_LL_FLASH_INT_Write+0x8c>
  uint32_t source = (uint32_t)pSource;
 8006c9c:	46b8      	mov	r8, r7
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS);  i += sizeof(SFU_LL_FLASH_write_t))
 8006c9e:	46a2      	mov	sl, r4
          *pFlashStatus = SFU_FLASH_ERROR;
 8006ca0:	4683      	mov	fp, r0
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS);  i += sizeof(SFU_LL_FLASH_write_t))
 8006ca2:	eba8 0307 	sub.w	r3, r8, r7
 8006ca6:	42b3      	cmp	r3, r6
 8006ca8:	d30e      	bcc.n	8006cc8 <SFU_LL_FLASH_INT_Write+0x9c>
        if (HAL_FLASH_Lock() != HAL_OK)
 8006caa:	f000 ff1d 	bl	8007ae8 <HAL_FLASH_Lock>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d0e1      	beq.n	8006c76 <SFU_LL_FLASH_INT_Write+0x4a>
          *pFlashStatus = SFU_FLASH_ERR_HAL;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	702b      	strb	r3, [r5, #0]
 8006cb6:	e7c1      	b.n	8006c3c <SFU_LL_FLASH_INT_Write+0x10>
        *pFlashStatus = SFU_FLASH_ERR_HAL;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	702b      	strb	r3, [r5, #0]
 8006cbc:	e7db      	b.n	8006c76 <SFU_LL_FLASH_INT_Write+0x4a>
            *pFlashStatus = SFU_FLASH_ERR_WRITING;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	702b      	strb	r3, [r5, #0]
            e_ret_status = SFU_ERROR;
 8006cc2:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 8006cc6:	e01b      	b.n	8006d00 <SFU_LL_FLASH_INT_Write+0xd4>
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS);  i += sizeof(SFU_LL_FLASH_write_t))
 8006cc8:	4554      	cmp	r4, sl
 8006cca:	d1ee      	bne.n	8006caa <SFU_LL_FLASH_INT_Write+0x7e>
          *pFlashStatus = SFU_FLASH_ERROR;
 8006ccc:	f885 b000 	strb.w	fp, [r5]
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, destination, *((uint64_t *)(source + i)))
 8006cd0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	f000 ff6e 	bl	8007bb8 <HAL_FLASH_Program>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d1ee      	bne.n	8006cbe <SFU_LL_FLASH_INT_Write+0x92>
            if (*(uint64_t *)destination != *(uint64_t *)(source + i))
 8006ce0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006ce4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006ce8:	4299      	cmp	r1, r3
 8006cea:	bf0b      	itete	eq
 8006cec:	4290      	cmpeq	r0, r2
              *pFlashStatus = SFU_FLASH_ERR_WRITINGCTRL;
 8006cee:	2304      	movne	r3, #4
              *pFlashStatus = SFU_FLASH_SUCCESS;
 8006cf0:	2305      	moveq	r3, #5
              *pFlashStatus = SFU_FLASH_ERR_WRITINGCTRL;
 8006cf2:	702b      	strbne	r3, [r5, #0]
              e_ret_status = SFU_ERROR;
 8006cf4:	bf12      	itee	ne
 8006cf6:	f641 74e1 	movwne	r4, #8161	; 0x1fe1
              destination = destination + sizeof(SFU_LL_FLASH_write_t);
 8006cfa:	f109 0908 	addeq.w	r9, r9, #8
              *pFlashStatus = SFU_FLASH_SUCCESS;
 8006cfe:	702b      	strbeq	r3, [r5, #0]
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS);  i += sizeof(SFU_LL_FLASH_write_t))
 8006d00:	f108 0808 	add.w	r8, r8, #8
 8006d04:	e7cd      	b.n	8006ca2 <SFU_LL_FLASH_INT_Write+0x76>
 8006d06:	bf00      	nop
 8006d08:	0800abdc 	.word	0x0800abdc
 8006d0c:	0012310f 	.word	0x0012310f
 8006d10:	00122f11 	.word	0x00122f11

08006d14 <SFU_LL_FLASH_INT_Read>:
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006d14:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <SFU_LL_FLASH_INT_Read+0x64>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	428b      	cmp	r3, r1
{
 8006d1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d1c:	4c17      	ldr	r4, [pc, #92]	; (8006d7c <SFU_LL_FLASH_INT_Read+0x68>)
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006d1e:	d826      	bhi.n	8006d6e <SFU_LL_FLASH_INT_Read+0x5a>
        ((source + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8006d20:	188d      	adds	r5, r1, r2
 8006d22:	f503 7300 	add.w	r3, r3, #512	; 0x200
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006d26:	429d      	cmp	r5, r3
 8006d28:	d821      	bhi.n	8006d6e <SFU_LL_FLASH_INT_Read+0x5a>
    DoubleECC_Error_Counter = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	6023      	str	r3, [r4, #0]
    se_ret_status = SE_SFU_IMG_Read(&se_status, pDestination, (uint8_t *)source, Length);
 8006d2e:	4613      	mov	r3, r2
 8006d30:	460a      	mov	r2, r1
 8006d32:	4601      	mov	r1, r0
 8006d34:	a801      	add	r0, sp, #4
 8006d36:	f7fc fd33 	bl	80037a0 <SE_SFU_IMG_Read>
    if ((se_ret_status == SE_SUCCESS) && (DoubleECC_Error_Counter == 0U))
 8006d3a:	4b11      	ldr	r3, [pc, #68]	; (8006d80 <SFU_LL_FLASH_INT_Read+0x6c>)
 8006d3c:	4298      	cmp	r0, r3
 8006d3e:	d00b      	beq.n	8006d58 <SFU_LL_FLASH_INT_Read+0x44>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8006d40:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8006d44:	e00f      	b.n	8006d66 <SFU_LL_FLASH_INT_Read+0x52>
      *pDestination = *pSource;
 8006d46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006d4a:	f800 3b01 	strb.w	r3, [r0], #1
    for (i = 0; (i < Length) && (DoubleECC_Error_Counter == 0U); i++, pDestination++, pSource++)
 8006d4e:	4290      	cmp	r0, r2
 8006d50:	d002      	beq.n	8006d58 <SFU_LL_FLASH_INT_Read+0x44>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0f6      	beq.n	8006d46 <SFU_LL_FLASH_INT_Read+0x32>
    if ((se_ret_status == SE_SUCCESS) && (DoubleECC_Error_Counter == 0U))
 8006d58:	6822      	ldr	r2, [r4, #0]
      e_ret_status = SFU_SUCCESS;
 8006d5a:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <SFU_LL_FLASH_INT_Read+0x70>)
 8006d5c:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8006d60:	2a00      	cmp	r2, #0
 8006d62:	bf08      	it	eq
 8006d64:	4618      	moveq	r0, r3
    DoubleECC_Error_Counter = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	6023      	str	r3, [r4, #0]
}
 8006d6a:	b003      	add	sp, #12
 8006d6c:	bd30      	pop	{r4, r5, pc}
    DoubleECC_Error_Counter = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6023      	str	r3, [r4, #0]
    for (i = 0; (i < Length) && (DoubleECC_Error_Counter == 0U); i++, pDestination++, pSource++)
 8006d72:	3901      	subs	r1, #1
 8006d74:	4402      	add	r2, r0
 8006d76:	e7ea      	b.n	8006d4e <SFU_LL_FLASH_INT_Read+0x3a>
 8006d78:	0800abdc 	.word	0x0800abdc
 8006d7c:	20001720 	.word	0x20001720
 8006d80:	0012310f 	.word	0x0012310f
 8006d84:	00122f11 	.word	0x00122f11

08006d88 <SFU_LL_FLASH_INT_Compare>:
{
 8006d88:	b570      	push	{r4, r5, r6, lr}
  DoubleECC_Error_Counter = 0U;
 8006d8a:	4d0a      	ldr	r5, [pc, #40]	; (8006db4 <SFU_LL_FLASH_INT_Compare+0x2c>)
 8006d8c:	2400      	movs	r4, #0
 8006d8e:	602c      	str	r4, [r5, #0]
  for ( i = 0U; i < Length; i += 4U)
 8006d90:	429c      	cmp	r4, r3
 8006d92:	d304      	bcc.n	8006d9e <SFU_LL_FLASH_INT_Compare+0x16>
  if (DoubleECC_Error_Counter != 0U)
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b94b      	cbnz	r3, 8006dac <SFU_LL_FLASH_INT_Compare+0x24>
  return SFU_SUCCESS;
 8006d98:	4807      	ldr	r0, [pc, #28]	; (8006db8 <SFU_LL_FLASH_INT_Compare+0x30>)
  DoubleECC_Error_Counter = 0U;
 8006d9a:	602b      	str	r3, [r5, #0]
}
 8006d9c:	bd70      	pop	{r4, r5, r6, pc}
    if ((*(uint32_t *)(flash + i) != Pattern1) &&  (*(uint32_t *)(flash + i) != Pattern2))
 8006d9e:	5906      	ldr	r6, [r0, r4]
 8006da0:	428e      	cmp	r6, r1
 8006da2:	d001      	beq.n	8006da8 <SFU_LL_FLASH_INT_Compare+0x20>
 8006da4:	4296      	cmp	r6, r2
 8006da6:	d101      	bne.n	8006dac <SFU_LL_FLASH_INT_Compare+0x24>
  for ( i = 0U; i < Length; i += 4U)
 8006da8:	3404      	adds	r4, #4
 8006daa:	e7f1      	b.n	8006d90 <SFU_LL_FLASH_INT_Compare+0x8>
      return SFU_ERROR;
 8006dac:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8006db0:	e7f4      	b.n	8006d9c <SFU_LL_FLASH_INT_Compare+0x14>
 8006db2:	bf00      	nop
 8006db4:	20001720 	.word	0x20001720
 8006db8:	00122f11 	.word	0x00122f11

08006dbc <SFU_LL_FLASH_INT_GetPage>:
  if (Addr < (FLASH_BASE + (FLASH_BANK_SIZE)))
 8006dbc:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <SFU_LL_FLASH_INT_GetPage+0x20>)
 8006dbe:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <SFU_LL_FLASH_INT_GetPage+0x24>)
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	ea02 2283 	and.w	r2, r2, r3, lsl #10
 8006dc6:	f102 6100 	add.w	r1, r2, #134217728	; 0x8000000
 8006dca:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8006dce:	4281      	cmp	r1, r0
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8006dd0:	bf8e      	itee	hi
 8006dd2:	0b18      	lsrhi	r0, r3, #12
    page = (Addr - (FLASH_BASE + (FLASH_BANK_SIZE))) / FLASH_PAGE_SIZE;
 8006dd4:	1a98      	subls	r0, r3, r2
 8006dd6:	0b00      	lsrls	r0, r0, #12
}
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	1fff75e0 	.word	0x1fff75e0
 8006de0:	001ffc00 	.word	0x001ffc00

08006de4 <SFU_LL_FLASH_INT_Erase_Size>:
{
 8006de4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t page_error = 0U;
 8006de8:	2300      	movs	r3, #0
{
 8006dea:	4688      	mov	r8, r1
 8006dec:	4614      	mov	r4, r2
  uint32_t page_error = 0U;
 8006dee:	9300      	str	r3, [sp, #0]
  if (pFlashStatus == NULL)
 8006df0:	4606      	mov	r6, r0
 8006df2:	b928      	cbnz	r0, 8006e00 <SFU_LL_FLASH_INT_Erase_Size+0x1c>
        e_ret_status = SFU_ERROR;
 8006df4:	f641 75e1 	movw	r5, #8161	; 0x1fe1
}
 8006df8:	4628      	mov	r0, r5
 8006dfa:	b004      	add	sp, #16
 8006dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *pFlashStatus = SFU_FLASH_SUCCESS;
 8006e00:	2305      	movs	r3, #5
 8006e02:	7003      	strb	r3, [r0, #0]
  if (HAL_FLASH_Unlock() == HAL_OK)
 8006e04:	f000 fe5e 	bl	8007ac4 <HAL_FLASH_Unlock>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d1f3      	bne.n	8006df4 <SFU_LL_FLASH_INT_Erase_Size+0x10>
 8006e0c:	f7ff fef2 	bl	8006bf4 <SFU_LL_FLASH_INT_Clear_Error.part.0>
  if (e_ret_status == SFU_SUCCESS)
 8006e10:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <SFU_LL_FLASH_INT_Erase_Size+0x94>)
 8006e12:	4298      	cmp	r0, r3
 8006e14:	4605      	mov	r5, r0
 8006e16:	d1ef      	bne.n	8006df8 <SFU_LL_FLASH_INT_Erase_Size+0x14>
    if (HAL_FLASH_Unlock() == HAL_OK)
 8006e18:	f000 fe54 	bl	8007ac4 <HAL_FLASH_Unlock>
 8006e1c:	bb40      	cbnz	r0, 8006e70 <SFU_LL_FLASH_INT_Erase_Size+0x8c>
      first_page = SFU_LL_FLASH_INT_GetPage(start);
 8006e1e:	4640      	mov	r0, r8
 8006e20:	f7ff ffcc 	bl	8006dbc <SFU_LL_FLASH_INT_GetPage>
 8006e24:	4607      	mov	r7, r0
      nb_pages = SFU_LL_FLASH_INT_GetPage(start + length - 1U) - first_page + 1U;
 8006e26:	1e60      	subs	r0, r4, #1
 8006e28:	4440      	add	r0, r8
 8006e2a:	f7ff ffc7 	bl	8006dbc <SFU_LL_FLASH_INT_GetPage>
      p_erase_init.TypeErase   = FLASH_TYPEERASE_PAGES;
 8006e2e:	2302      	movs	r3, #2
      nb_pages = SFU_LL_FLASH_INT_GetPage(start + length - 1U) - first_page + 1U;
 8006e30:	1c44      	adds	r4, r0, #1
 8006e32:	1be4      	subs	r4, r4, r7
      p_erase_init.TypeErase   = FLASH_TYPEERASE_PAGES;
 8006e34:	9301      	str	r3, [sp, #4]
          *pFlashStatus = SFU_FLASH_ERR_ERASE;
 8006e36:	4698      	mov	r8, r3
        chunk_nb_pages = (nb_pages >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_pages;
 8006e38:	2c02      	cmp	r4, #2
 8006e3a:	4623      	mov	r3, r4
        if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 8006e3c:	4669      	mov	r1, sp
        chunk_nb_pages = (nb_pages >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_pages;
 8006e3e:	bf28      	it	cs
 8006e40:	2302      	movcs	r3, #2
        if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 8006e42:	a801      	add	r0, sp, #4
        p_erase_init.NbPages = chunk_nb_pages;
 8006e44:	e9cd 7302 	strd	r7, r3, [sp, #8]
        nb_pages -= chunk_nb_pages;
 8006e48:	1ae4      	subs	r4, r4, r3
        first_page += chunk_nb_pages;
 8006e4a:	441f      	add	r7, r3
        if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 8006e4c:	f001 f870 	bl	8007f30 <HAL_FLASHEx_Erase>
 8006e50:	b118      	cbz	r0, 8006e5a <SFU_LL_FLASH_INT_Erase_Size+0x76>
          *pFlashStatus = SFU_FLASH_ERR_ERASE;
 8006e52:	f886 8000 	strb.w	r8, [r6]
          e_ret_status = SFU_ERROR;
 8006e56:	f641 75e1 	movw	r5, #8161	; 0x1fe1
        SFU_LL_SECU_IWDG_Refresh(); /* calling this function which checks the compiler switch */
 8006e5a:	f000 f93b 	bl	80070d4 <SFU_LL_SECU_IWDG_Refresh>
      } while (nb_pages > 0U);
 8006e5e:	2c00      	cmp	r4, #0
 8006e60:	d1ea      	bne.n	8006e38 <SFU_LL_FLASH_INT_Erase_Size+0x54>
      if (HAL_FLASH_Lock() != HAL_OK)
 8006e62:	f000 fe41 	bl	8007ae8 <HAL_FLASH_Lock>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d0c6      	beq.n	8006df8 <SFU_LL_FLASH_INT_Erase_Size+0x14>
        *pFlashStatus = SFU_FLASH_ERR_HAL;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	7033      	strb	r3, [r6, #0]
 8006e6e:	e7c1      	b.n	8006df4 <SFU_LL_FLASH_INT_Erase_Size+0x10>
      *pFlashStatus = SFU_FLASH_ERR_HAL;
 8006e70:	2301      	movs	r3, #1
 8006e72:	7033      	strb	r3, [r6, #0]
 8006e74:	e7c0      	b.n	8006df8 <SFU_LL_FLASH_INT_Erase_Size+0x14>
 8006e76:	bf00      	nop
 8006e78:	00122f11 	.word	0x00122f11

08006e7c <NMI_Handler>:
{
  uint32_t *p_sp;
  uint32_t lr;
  uint16_t opcode_msb;

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8006e7c:	4b19      	ldr	r3, [pc, #100]	; (8006ee4 <NMI_Handler+0x68>)
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	db00      	blt.n	8006e86 <NMI_Handler+0xa>
      *(p_sp + 6U) += 4U;
    }
  }
  else
  {
    while (1 == 1)
 8006e84:	e7fe      	b.n	8006e84 <NMI_Handler+0x8>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCD);
 8006e86:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <NMI_Handler+0x68>)
 8006e88:	6993      	ldr	r3, [r2, #24]
 8006e8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e8e:	6193      	str	r3, [r2, #24]
    DoubleECC_Error_Counter++;
 8006e90:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <NMI_Handler+0x6c>)
 8006e92:	6813      	ldr	r3, [r2, #0]
 8006e94:	3301      	adds	r3, #1
 8006e96:	6013      	str	r3, [r2, #0]
  __ASM volatile("MOV %0, LR" : "=r"(result));
 8006e98:	4673      	mov	r3, lr
    if (((lr) & (0xFU)) == 0xDU)
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	2b0d      	cmp	r3, #13
 8006ea0:	d016      	beq.n	8006ed0 <NMI_Handler+0x54>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8006ea2:	f3ef 8308 	mrs	r3, MSP
    if ((*(p_sp + 7U) & (1U << xPSR_T_Pos)) != 0U)
 8006ea6:	69da      	ldr	r2, [r3, #28]
 8006ea8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8006eac:	d016      	beq.n	8006edc <NMI_Handler+0x60>
      opcode_msb = (*(uint16_t *)(*(p_sp + 6) & 0xFFFFFFFEU) & 0xF800U);
 8006eae:	699a      	ldr	r2, [r3, #24]
 8006eb0:	f022 0101 	bic.w	r1, r2, #1
 8006eb4:	8809      	ldrh	r1, [r1, #0]
      if ((opcode_msb == 0xE800U) || (opcode_msb == 0xF000U) || (opcode_msb == 0xF800U))
 8006eb6:	f401 4068 	and.w	r0, r1, #59392	; 0xe800
 8006eba:	f5b0 4f68 	cmp.w	r0, #59392	; 0xe800
 8006ebe:	d00a      	beq.n	8006ed6 <NMI_Handler+0x5a>
 8006ec0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8006ec4:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
 8006ec8:	d005      	beq.n	8006ed6 <NMI_Handler+0x5a>
        *(p_sp + 6U) += 2U;
 8006eca:	3202      	adds	r2, #2
 8006ecc:	619a      	str	r2, [r3, #24]
 8006ece:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006ed0:	f3ef 8309 	mrs	r3, PSP
  return(result);
 8006ed4:	e7e7      	b.n	8006ea6 <NMI_Handler+0x2a>
        *(p_sp + 6U) += 4U;
 8006ed6:	3204      	adds	r2, #4
 8006ed8:	619a      	str	r2, [r3, #24]
 8006eda:	4770      	bx	lr
      *(p_sp + 6U) += 4U;
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	3204      	adds	r2, #4
 8006ee0:	619a      	str	r2, [r3, #24]
    {
      ;
    }
  }
}
 8006ee2:	4770      	bx	lr
 8006ee4:	58004000 	.word	0x58004000
 8006ee8:	20001720 	.word	0x20001720

08006eec <HardFault_Handler>:
  * @param  None.
  * @retval None.
  */
void HardFault_Handler(void)
{
  SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_HARD_FAULT);
 8006eec:	2002      	movs	r0, #2
 8006eee:	f7fd be99 	b.w	8004c24 <SFU_EXCPT_IrqExceptionHandler>
	...

08006ef4 <SFU_LL_SECU_CheckApplyStaticProtections>:
  *         flash sections in order to maximize the security level for the specific MCU.
  * @retval uint32_t CRC (returned value is the combination of all the applied protections.
  *         If different from SFU_STD_PROTECTION_ALL, 1 or more protections cannot be applied)
  */
SFU_ErrorStatus SFU_LL_SECU_CheckApplyStaticProtections(void)
{
 8006ef4:	b530      	push	{r4, r5, lr}
 8006ef6:	b095      	sub	sp, #84	; 0x54
  FLASH_OBProgramInitTypeDef flash_option_bytes;
  SFU_BoolTypeDef is_protection_to_be_applied = SFU_FALSE;
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  /* Unlock the Flash to enable the flash control register access *************/
  (void) HAL_FLASH_Unlock();
 8006ef8:	f000 fde4 	bl	8007ac4 <HAL_FLASH_Unlock>

  /* Clear OPTVERR bit set on virgin samples */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006efc:	4b56      	ldr	r3, [pc, #344]	; (8007058 <SFU_LL_SECU_CheckApplyStaticProtections+0x164>)
 8006efe:	4c57      	ldr	r4, [pc, #348]	; (800705c <SFU_LL_SECU_CheckApplyStaticProtections+0x168>)
 8006f00:	4d57      	ldr	r5, [pc, #348]	; (8007060 <SFU_LL_SECU_CheckApplyStaticProtections+0x16c>)
 8006f02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006f06:	611a      	str	r2, [r3, #16]

  /* Unlock the Options Bytes *************************************************/
  (void) HAL_FLASH_OB_Unlock();
 8006f08:	f000 fdfa 	bl	8007b00 <HAL_FLASH_OB_Unlock>

  /* Get Option Bytes status for WRP AREA_A  **********/
  flash_option_bytes.WRPArea     = SFU_PROTECT_WRP_AREA_1;
 8006f0c:	2300      	movs	r3, #0
  (void) HAL_FLASHEx_OBGetConfig(&flash_option_bytes);
 8006f0e:	a801      	add	r0, sp, #4
  flash_option_bytes.WRPArea     = SFU_PROTECT_WRP_AREA_1;
 8006f10:	9302      	str	r3, [sp, #8]
  (void) HAL_FLASHEx_OBGetConfig(&flash_option_bytes);
 8006f12:	f000 ff7b 	bl	8007e0c <HAL_FLASHEx_OBGetConfig>

  /* Check/Apply RDP_Level 1. This is the minimum protection allowed */
  /* if RDP_Level 2 is already applied it's not possible to modify the OptionBytes anymore */
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 8006f16:	9b05      	ldr	r3, [sp, #20]

  e_ret_status = SFU_SUCCESS;
  if (e_ret_status == SFU_SUCCESS)
  {
    /* Execution stopped if flow control failed */
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 8006f18:	6822      	ldr	r2, [r4, #0]
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 8006f1a:	2bcc      	cmp	r3, #204	; 0xcc
 8006f1c:	f246 7387 	movw	r3, #26503	; 0x6787
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 8006f20:	ea83 0302 	eor.w	r3, r3, r2
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	f245 7376 	movw	r3, #22390	; 0x5776
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 8006f2a:	d12b      	bne.n	8006f84 <SFU_LL_SECU_CheckApplyStaticProtections+0x90>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <SFU_LL_SECU_CheckApplyStaticProtections+0x40>
 8006f30:	f7fd fe9c 	bl	8004c6c <SFU_EXCPT_Security_Error>
SFU_ErrorStatus SFU_LL_SECU_CheckProtectionWRP(FLASH_OBProgramInitTypeDef *psFlashOptionBytes)
{
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check WRP ****************************************************************/
  if ((psFlashOptionBytes->WRPStartOffset == SFU_PROTECT_WRP_PAGE_START_1) &&
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	ebb3 3f15 	cmp.w	r3, r5, lsr #12
 8006f3a:	d11c      	bne.n	8006f76 <SFU_LL_SECU_CheckApplyStaticProtections+0x82>
 8006f3c:	4a49      	ldr	r2, [pc, #292]	; (8007064 <SFU_LL_SECU_CheckApplyStaticProtections+0x170>)
 8006f3e:	9b04      	ldr	r3, [sp, #16]
 8006f40:	ebb3 3f12 	cmp.w	r3, r2, lsr #12
 8006f44:	d117      	bne.n	8006f76 <SFU_LL_SECU_CheckApplyStaticProtections+0x82>
    e_ret_status = SFU_SUCCESS; /*Protection applied */
  }
  if (e_ret_status == SFU_SUCCESS)
  {
    /* Execution stopped if flow control failed */
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_WRP, FLOW_CTRL_WRP);
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	f482 434c 	eor.w	r3, r2, #52224	; 0xcc00
 8006f4c:	f083 03cd 	eor.w	r3, r3, #205	; 0xcd
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d001      	beq.n	8006f5e <SFU_LL_SECU_CheckApplyStaticProtections+0x6a>
      SFU_EXCPT_Security_Error();
 8006f5a:	f7fd fe87 	bl	8004c6c <SFU_EXCPT_Security_Error>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_RDP, FLOW_CTRL_RDP);
 8006f5e:	6822      	ldr	r2, [r4, #0]
 8006f60:	f482 4363 	eor.w	r3, r2, #58112	; 0xe300
 8006f64:	f083 03dc 	eor.w	r3, r3, #220	; 0xdc
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	f64f 433c 	movw	r3, #64572	; 0xfc3c
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d105      	bne.n	8006f7e <SFU_LL_SECU_CheckApplyStaticProtections+0x8a>
        (void) HAL_FLASH_OB_Launch();
 8006f72:	4c3d      	ldr	r4, [pc, #244]	; (8007068 <SFU_LL_SECU_CheckApplyStaticProtections+0x174>)
 8006f74:	e030      	b.n	8006fd8 <SFU_LL_SECU_CheckApplyStaticProtections+0xe4>
      TRACE("\r\n= [SBOOT] System Security Configuration failed! Product blocked.");
 8006f76:	483d      	ldr	r0, [pc, #244]	; (800706c <SFU_LL_SECU_CheckApplyStaticProtections+0x178>)
 8006f78:	f002 fcaa 	bl	80098d0 <iprintf>
 8006f7c:	e7ed      	b.n	8006f5a <SFU_LL_SECU_CheckApplyStaticProtections+0x66>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_RDP, FLOW_CTRL_RDP);
 8006f7e:	f7fd fe75 	bl	8004c6c <SFU_EXCPT_Security_Error>
 8006f82:	e7f6      	b.n	8006f72 <SFU_LL_SECU_CheckApplyStaticProtections+0x7e>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d001      	beq.n	8006f8c <SFU_LL_SECU_CheckApplyStaticProtections+0x98>
 8006f88:	f7fd fe70 	bl	8004c6c <SFU_EXCPT_Security_Error>
  if ((psFlashOptionBytes->WRPStartOffset == SFU_PROTECT_WRP_PAGE_START_1) &&
 8006f8c:	9903      	ldr	r1, [sp, #12]
 8006f8e:	4b35      	ldr	r3, [pc, #212]	; (8007064 <SFU_LL_SECU_CheckApplyStaticProtections+0x170>)
 8006f90:	ebb1 3f15 	cmp.w	r1, r5, lsr #12
 8006f94:	ea4f 3215 	mov.w	r2, r5, lsr #12
 8006f98:	ea4f 3313 	mov.w	r3, r3, lsr #12
 8006f9c:	d110      	bne.n	8006fc0 <SFU_LL_SECU_CheckApplyStaticProtections+0xcc>
 8006f9e:	9904      	ldr	r1, [sp, #16]
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	d10d      	bne.n	8006fc0 <SFU_LL_SECU_CheckApplyStaticProtections+0xcc>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_WRP, FLOW_CTRL_WRP);
 8006fa4:	6822      	ldr	r2, [r4, #0]
 8006fa6:	f482 434c 	eor.w	r3, r2, #52224	; 0xcc00
 8006faa:	f083 03cd 	eor.w	r3, r3, #205	; 0xcd
 8006fae:	6023      	str	r3, [r4, #0]
 8006fb0:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d001      	beq.n	8006fbc <SFU_LL_SECU_CheckApplyStaticProtections+0xc8>
 8006fb8:	f7fd fe58 	bl	8004c6c <SFU_EXCPT_Security_Error>
  }
  return e_ret_status;
 8006fbc:	2500      	movs	r5, #0
 8006fbe:	e01e      	b.n	8006ffe <SFU_LL_SECU_CheckApplyStaticProtections+0x10a>
  }
  else
  {
#if defined(SECBOOT_OB_DEV_MODE)
    psFlashOptionBytes->OptionType     = OPTIONBYTE_WRP;
    psFlashOptionBytes->WRPArea        = SFU_PROTECT_WRP_AREA_1;
 8006fc0:	2501      	movs	r5, #1
 8006fc2:	2100      	movs	r1, #0
    psFlashOptionBytes->WRPStartOffset = SFU_PROTECT_WRP_PAGE_START_1;
    psFlashOptionBytes->WRPEndOffset   = SFU_PROTECT_WRP_PAGE_END_1;

    if (HAL_FLASHEx_OBProgram(psFlashOptionBytes) == HAL_OK)
 8006fc4:	a801      	add	r0, sp, #4
    psFlashOptionBytes->WRPArea        = SFU_PROTECT_WRP_AREA_1;
 8006fc6:	e9cd 5101 	strd	r5, r1, [sp, #4]
    psFlashOptionBytes->WRPEndOffset   = SFU_PROTECT_WRP_PAGE_END_1;
 8006fca:	e9cd 2303 	strd	r2, r3, [sp, #12]
    if (HAL_FLASHEx_OBProgram(psFlashOptionBytes) == HAL_OK)
 8006fce:	f000 fe2b 	bl	8007c28 <HAL_FLASHEx_OBProgram>
 8006fd2:	b140      	cbz	r0, 8006fe6 <SFU_LL_SECU_CheckApplyStaticProtections+0xf2>
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;
 8006fd4:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  (void) HAL_FLASH_OB_Lock();
 8006fd8:	f000 fda6 	bl	8007b28 <HAL_FLASH_OB_Lock>
  (void) HAL_FLASH_Lock();
 8006fdc:	f000 fd84 	bl	8007ae8 <HAL_FLASH_Lock>
}
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	b015      	add	sp, #84	; 0x54
 8006fe4:	bd30      	pop	{r4, r5, pc}
    {
      *pbIsProtectionToBeApplied |= 1U;
      e_ret_status = SFU_SUCCESS;
      /* Execution stopped if flow control failed */
      FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_WRP, FLOW_CTRL_WRP);
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	f482 434c 	eor.w	r3, r2, #52224	; 0xcc00
 8006fec:	f083 03cd 	eor.w	r3, r3, #205	; 0xcd
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d001      	beq.n	8006ffe <SFU_LL_SECU_CheckApplyStaticProtections+0x10a>
 8006ffa:	f7fd fe37 	bl	8004c6c <SFU_EXCPT_Security_Error>
  if (psFlashOptionBytes->RDPLevel == SFU_PROTECT_RDP_LEVEL)
 8006ffe:	9b05      	ldr	r3, [sp, #20]
 8007000:	2bbb      	cmp	r3, #187	; 0xbb
 8007002:	d10d      	bne.n	8007020 <SFU_LL_SECU_CheckApplyStaticProtections+0x12c>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_RDP, FLOW_CTRL_RDP);
 8007004:	6822      	ldr	r2, [r4, #0]
 8007006:	f482 4363 	eor.w	r3, r2, #58112	; 0xe300
 800700a:	f083 03dc 	eor.w	r3, r3, #220	; 0xdc
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	f64f 433c 	movw	r3, #64572	; 0xfc3c
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <SFU_LL_SECU_CheckApplyStaticProtections+0x128>
 8007018:	f7fd fe28 	bl	8004c6c <SFU_EXCPT_Security_Error>
      if (is_protection_to_be_applied)
 800701c:	b9c5      	cbnz	r5, 8007050 <SFU_LL_SECU_CheckApplyStaticProtections+0x15c>
 800701e:	e7a8      	b.n	8006f72 <SFU_LL_SECU_CheckApplyStaticProtections+0x7e>
    TRACE("\r\n\t  Applying RDP-1 Level. You might need to unplug/plug the USB cable!");
 8007020:	4813      	ldr	r0, [pc, #76]	; (8007070 <SFU_LL_SECU_CheckApplyStaticProtections+0x17c>)
 8007022:	f002 fc55 	bl	80098d0 <iprintf>
    psFlashOptionBytes->OptionType      = OPTIONBYTE_RDP;
 8007026:	2302      	movs	r3, #2
 8007028:	9301      	str	r3, [sp, #4]
    if (HAL_FLASHEx_OBProgram(psFlashOptionBytes) == HAL_OK)
 800702a:	a801      	add	r0, sp, #4
    psFlashOptionBytes->RDPLevel        = SFU_PROTECT_RDP_LEVEL;
 800702c:	23bb      	movs	r3, #187	; 0xbb
 800702e:	9305      	str	r3, [sp, #20]
    if (HAL_FLASHEx_OBProgram(psFlashOptionBytes) == HAL_OK)
 8007030:	f000 fdfa 	bl	8007c28 <HAL_FLASHEx_OBProgram>
 8007034:	2800      	cmp	r0, #0
 8007036:	d1cd      	bne.n	8006fd4 <SFU_LL_SECU_CheckApplyStaticProtections+0xe0>
      FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_RDP, FLOW_CTRL_RDP);
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	f482 4363 	eor.w	r3, r2, #58112	; 0xe300
 800703e:	f083 03dc 	eor.w	r3, r3, #220	; 0xdc
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	f64f 433c 	movw	r3, #64572	; 0xfc3c
 8007048:	429a      	cmp	r2, r3
 800704a:	d001      	beq.n	8007050 <SFU_LL_SECU_CheckApplyStaticProtections+0x15c>
 800704c:	f7fd fe0e 	bl	8004c6c <SFU_EXCPT_Security_Error>
        (void) HAL_FLASH_OB_Launch();
 8007050:	f000 fd78 	bl	8007b44 <HAL_FLASH_OB_Launch>
 8007054:	e78d      	b.n	8006f72 <SFU_LL_SECU_CheckApplyStaticProtections+0x7e>
 8007056:	bf00      	nop
 8007058:	58004000 	.word	0x58004000
 800705c:	20001010 	.word	0x20001010
 8007060:	00000000 	.word	0x00000000
 8007064:	00014fff 	.word	0x00014fff
 8007068:	00122f11 	.word	0x00122f11
 800706c:	0800bcd7 	.word	0x0800bcd7
 8007070:	0800bd1a 	.word	0x0800bd1a

08007074 <SFU_LL_SECU_GetResetSources>:
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) ||
 8007074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007078:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800707c:	0091      	lsls	r1, r2, #2
 800707e:	d403      	bmi.n	8007088 <SFU_LL_SECU_GetResetSources+0x14>
      (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 8007080:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) ||
 8007084:	0052      	lsls	r2, r2, #1
 8007086:	d502      	bpl.n	800708e <SFU_LL_SECU_GetResetSources+0x1a>
    *peResetpSourceId = SFU_RESET_WDG_RESET;
 8007088:	2301      	movs	r3, #1
    *peResetpSourceId = SFU_RESET_UNKNOWN;
 800708a:	7003      	strb	r3, [r0, #0]
}
 800708c:	4770      	bx	lr
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 800708e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007092:	2a00      	cmp	r2, #0
 8007094:	da01      	bge.n	800709a <SFU_LL_SECU_GetResetSources+0x26>
    *peResetpSourceId = SFU_RESET_LOW_POWER;
 8007096:	2302      	movs	r3, #2
 8007098:	e7f7      	b.n	800708a <SFU_LL_SECU_GetResetSources+0x16>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 800709a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800709e:	00d1      	lsls	r1, r2, #3
 80070a0:	d501      	bpl.n	80070a6 <SFU_LL_SECU_GetResetSources+0x32>
    *peResetpSourceId = SFU_RESET_SW_RESET;
 80070a2:	2305      	movs	r3, #5
 80070a4:	e7f1      	b.n	800708a <SFU_LL_SECU_GetResetSources+0x16>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_OBLRST) != RESET)
 80070a6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80070aa:	0192      	lsls	r2, r2, #6
 80070ac:	d501      	bpl.n	80070b2 <SFU_LL_SECU_GetResetSources+0x3e>
    *peResetpSourceId = SFU_RESET_OB_LOADER;
 80070ae:	2306      	movs	r3, #6
 80070b0:	e7eb      	b.n	800708a <SFU_LL_SECU_GetResetSources+0x16>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 80070b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b6:	f013 6380 	ands.w	r3, r3, #67108864	; 0x4000000
    *peResetpSourceId = SFU_RESET_HW_RESET;
 80070ba:	bf18      	it	ne
 80070bc:	2303      	movne	r3, #3
 80070be:	e7e4      	b.n	800708a <SFU_LL_SECU_GetResetSources+0x16>

080070c0 <SFU_LL_SECU_ClearResetSources>:
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80070c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070c4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80070c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80070d0:	4770      	bx	lr
	...

080070d4 <SFU_LL_SECU_IWDG_Refresh>:
{
 80070d4:	b508      	push	{r3, lr}
    if (HAL_IWDG_Refresh(&IwdgHandle) == HAL_OK)
 80070d6:	4805      	ldr	r0, [pc, #20]	; (80070ec <SFU_LL_SECU_IWDG_Refresh+0x18>)
 80070d8:	f001 f883 	bl	80081e2 <HAL_IWDG_Refresh>
}
 80070dc:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <SFU_LL_SECU_IWDG_Refresh+0x1c>)
 80070de:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 80070e2:	2800      	cmp	r0, #0
 80070e4:	bf14      	ite	ne
 80070e6:	4610      	movne	r0, r2
 80070e8:	4618      	moveq	r0, r3
 80070ea:	bd08      	pop	{r3, pc}
 80070ec:	20001724 	.word	0x20001724
 80070f0:	00122f11 	.word	0x00122f11

080070f4 <SFU_LL_SECU_SetProtectionMPU_UserApp>:
  * @brief  Apply MPU protection before executing UserApp
  * @param  None
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_SECU_SetProtectionMPU_UserApp(void)
{
 80070f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  MPU_Region_InitTypeDef MPU_InitStruct;

  MPU_InitStruct.Enable               = MPU_REGION_ENABLE;
 80070f6:	f240 6301 	movw	r3, #1537	; 0x601
 80070fa:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Number               = MPU_REGION_NUMBER6;
  MPU_InitStruct.BaseAddress          = APP_PROTECT_MPU_AREA_ACTIVE_SLOT_START;
  MPU_InitStruct.Size                 = APP_PROTECT_MPU_AREA_ACTIVE_SLOT_SIZE;
 80070fe:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <SFU_LL_SECU_SetProtectionMPU_UserApp+0x40>)
 8007100:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  MPU_InitStruct.SubRegionDisable     = APP_PROTECT_MPU_AREA_ACTIVE_SLOT_SREG;
  MPU_InitStruct.AccessPermission     = APP_PROTECT_MPU_AREA_ACTIVE_SLOT_PERM;
  MPU_InitStruct.DisableExec          = APP_PROTECT_MPU_AREA_ACTIVE_SLOT_EXEC;
 8007104:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  MPU_InitStruct.IsShareable          = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsBufferable         = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsCacheable          = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.TypeExtField         = MPU_TEX_LEVEL0;
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007108:	4668      	mov	r0, sp
  MPU_InitStruct.Size                 = APP_PROTECT_MPU_AREA_ACTIVE_SLOT_SIZE;
 800710a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  MPU_InitStruct.DisableExec          = APP_PROTECT_MPU_AREA_ACTIVE_SLOT_EXEC;
 800710e:	9403      	str	r4, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007110:	f000 fbe2 	bl	80078d8 <HAL_MPU_ConfigRegion>


  MPU_InitStruct.Enable               = MPU_REGION_ENABLE;
 8007114:	f240 7301 	movw	r3, #1793	; 0x701
  MPU_InitStruct.Number               = MPU_REGION_NUMBER7;
  MPU_InitStruct.BaseAddress          = APP_PROTECT_MPU_AREA_2_ACTIVE_SLOT_START;
  MPU_InitStruct.Size                 = APP_PROTECT_MPU_AREA_2_ACTIVE_SLOT_SIZE;
 8007118:	4907      	ldr	r1, [pc, #28]	; (8007138 <SFU_LL_SECU_SetProtectionMPU_UserApp+0x44>)
  MPU_InitStruct.Enable               = MPU_REGION_ENABLE;
 800711a:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size                 = APP_PROTECT_MPU_AREA_2_ACTIVE_SLOT_SIZE;
 800711e:	4b07      	ldr	r3, [pc, #28]	; (800713c <SFU_LL_SECU_SetProtectionMPU_UserApp+0x48>)
  MPU_InitStruct.SubRegionDisable     = APP_PROTECT_MPU_AREA_2_ACTIVE_SLOT_SREG;
  MPU_InitStruct.AccessPermission     = APP_PROTECT_MPU_AREA_2_ACTIVE_SLOT_PERM;
  MPU_InitStruct.DisableExec          = APP_PROTECT_MPU_AREA_2_ACTIVE_SLOT_EXEC;
 8007120:	9403      	str	r4, [sp, #12]
  MPU_InitStruct.IsShareable          = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsBufferable         = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsCacheable          = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.TypeExtField         = MPU_TEX_LEVEL0;
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007122:	4668      	mov	r0, sp
  MPU_InitStruct.Size                 = APP_PROTECT_MPU_AREA_2_ACTIVE_SLOT_SIZE;
 8007124:	e9cd 1301 	strd	r1, r3, [sp, #4]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007128:	f000 fbd6 	bl	80078d8 <HAL_MPU_ConfigRegion>

  return SFU_SUCCESS;
}
 800712c:	4804      	ldr	r0, [pc, #16]	; (8007140 <SFU_LL_SECU_SetProtectionMPU_UserApp+0x4c>)
 800712e:	b004      	add	sp, #16
 8007130:	bd10      	pop	{r4, pc}
 8007132:	bf00      	nop
 8007134:	05000711 	.word	0x05000711
 8007138:	08040000 	.word	0x08040000
 800713c:	0300c00f 	.word	0x0300c00f
 8007140:	00122f11 	.word	0x00122f11

08007144 <SFU_LL_SECU_SetProtectionMPU>:
  * @brief  Apply MPU protection
  * @param  uStep Configuration step : SFU_INITIAL_CONFIGURATION, SFU_SECOND_CONFIGURATION, SFU_THIRD_CONFIGURATION
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_SECU_SetProtectionMPU(uint8_t uStep)
{
 8007144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    * the next 2kB.
    */
  uint32_t region1_first_16kb_sub_region_disabled; /* index of the first sub-region to be disabled in region 1 */
  uint32_t region2_first_2kb_sub_region_disabled;  /* index of the first sub-region to be disabled in region 2 */
  /* The total size of the executable code is: SFU_ROM_ADDR_END - FLASH_BASE + 1 */
  uint32_t sbsfu_code_size = (SFU_ROM_ADDR_END - FLASH_BASE + 1U);  /* sbsfu, secure engine, callgate, se_interface,
 8007148:	4953      	ldr	r1, [pc, #332]	; (8007298 <SFU_LL_SECU_SetProtectionMPU+0x154>)
  /*
    * If the executable size is more than 128kB + 16kB - 1 byte then we return an error,
    * because the algorithm would try configuring 9 sub-regions of 16kB.
    * Restriction: the current algorithm cannot compute that we need 8*16kB + 8*2kB.
    */
  if (region1_first_16kb_sub_region_disabled <= SFU_PROTECT_MPU_MAX_NB_SUBREG)
 800714a:	f5b1 3f10 	cmp.w	r1, #147456	; 0x24000
{
 800714e:	4681      	mov	r9, r0
  region1_first_16kb_sub_region_disabled = sbsfu_code_size >> 14U ; /* shifting by 14 to divide by 16k */
 8007150:	ea4f 3091 	mov.w	r0, r1, lsr #14
  if (region1_first_16kb_sub_region_disabled <= SFU_PROTECT_MPU_MAX_NB_SUBREG)
 8007154:	d304      	bcc.n	8007160 <SFU_LL_SECU_SetProtectionMPU+0x1c>
    if (((region1_first_16kb_sub_region_disabled * 16384U) + (region2_first_2kb_sub_region_disabled * 2048U)) <
        sbsfu_code_size)
    {
      /* The MPU settings do not cover properly the executable code size */
      TRACE("\r\n [MPU] Executable code (%lu bytes) not fully covered !", sbsfu_code_size);
      return SFU_ERROR;
 8007156:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  {
    /* Execution stopped if flow control failed */
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_MPU, FLOW_CTRL_MPU);
  }
  return e_ret_status;
}
 800715a:	b004      	add	sp, #16
 800715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  region2_first_2kb_sub_region_disabled = sbsfu_code_size & 16383U;
 8007160:	f3c1 030d 	ubfx	r3, r1, #0, #14
    region2_first_2kb_sub_region_disabled = ((region2_first_2kb_sub_region_disabled + 2047U) >> 11U);
 8007164:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
    if (((region1_first_16kb_sub_region_disabled * 16384U) + (region2_first_2kb_sub_region_disabled * 2048U)) <
 8007168:	00c2      	lsls	r2, r0, #3
    region2_first_2kb_sub_region_disabled = ((region2_first_2kb_sub_region_disabled + 2047U) >> 11U);
 800716a:	0adf      	lsrs	r7, r3, #11
    if (((region1_first_16kb_sub_region_disabled * 16384U) + (region2_first_2kb_sub_region_disabled * 2048U)) <
 800716c:	eb02 23d3 	add.w	r3, r2, r3, lsr #11
 8007170:	ebb1 2fc3 	cmp.w	r1, r3, lsl #11
 8007174:	d903      	bls.n	800717e <SFU_LL_SECU_SetProtectionMPU+0x3a>
      TRACE("\r\n [MPU] Executable code (%lu bytes) not fully covered !", sbsfu_code_size);
 8007176:	4849      	ldr	r0, [pc, #292]	; (800729c <SFU_LL_SECU_SetProtectionMPU+0x158>)
 8007178:	f002 fbaa 	bl	80098d0 <iprintf>
 800717c:	e7eb      	b.n	8007156 <SFU_LL_SECU_SetProtectionMPU+0x12>
        MPU_InitStruct.BaseAddress = (SFU_ROM_ADDR_END  & ~16383U); /* 16k LSBs set to 0 */
 800717e:	4b48      	ldr	r3, [pc, #288]	; (80072a0 <SFU_LL_SECU_SetProtectionMPU+0x15c>)
 8007180:	4c48      	ldr	r4, [pc, #288]	; (80072a4 <SFU_LL_SECU_SetProtectionMPU+0x160>)
  MPU->RNR = pMPUInitStruct->Number;
 8007182:	f8df a130 	ldr.w	sl, [pc, #304]	; 80072b4 <SFU_LL_SECU_SetProtectionMPU+0x170>
        MPU_InitStruct.SubRegionDisable = (uint8_t)(0xffU << region2_first_2kb_sub_region_disabled);
 8007186:	25ff      	movs	r5, #255	; 0xff
 8007188:	fa05 f707 	lsl.w	r7, r5, r7
        MPU_InitStruct.BaseAddress = (SFU_ROM_ADDR_END  & ~16383U); /* 16k LSBs set to 0 */
 800718c:	f423 587f 	bic.w	r8, r3, #16320	; 0x3fc0
        MPU_InitStruct.SubRegionDisable = (uint8_t)(0xffU << region1_first_16kb_sub_region_disabled);
 8007190:	4085      	lsls	r5, r0
        MPU_InitStruct.SubRegionDisable = (uint8_t)(0xffU << region2_first_2kb_sub_region_disabled);
 8007192:	b2ff      	uxtb	r7, r7
        MPU_InitStruct.SubRegionDisable = (uint8_t)(0xffU << region1_first_16kb_sub_region_disabled);
 8007194:	b2ed      	uxtb	r5, r5
 8007196:	2600      	movs	r6, #0
        MPU_InitStruct.BaseAddress = (SFU_ROM_ADDR_END  & ~16383U); /* 16k LSBs set to 0 */
 8007198:	f028 083f 	bic.w	r8, r8, #63	; 0x3f
      MPU_InitStruct.BaseAddress          = MpuAreas[mpu_region_num].BaseAddress;
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	9301      	str	r3, [sp, #4]
      MPU_InitStruct.Enable               = MPU_REGION_ENABLE;
 80071a0:	f04f 0e01 	mov.w	lr, #1
      MPU_InitStruct.SubRegionDisable     = MpuAreas[mpu_region_num].SubRegionDisable;
 80071a4:	7ae3      	ldrb	r3, [r4, #11]
      MPU_InitStruct.Number               = MpuAreas[mpu_region_num].Number;
 80071a6:	7821      	ldrb	r1, [r4, #0]
      MPU_InitStruct.Size                 = MpuAreas[mpu_region_num].Size;
 80071a8:	f894 c008 	ldrb.w	ip, [r4, #8]
      MPU_InitStruct.AccessPermission     = MpuAreas[mpu_region_num].AccessPermission;
 80071ac:	7a62      	ldrb	r2, [r4, #9]
      MPU_InitStruct.DisableExec          = MpuAreas[mpu_region_num].DisableExec;
 80071ae:	7aa0      	ldrb	r0, [r4, #10]
      MPU_InitStruct.SubRegionDisable     = MpuAreas[mpu_region_num].SubRegionDisable;
 80071b0:	f88d 3009 	strb.w	r3, [sp, #9]
      if (mpu_region_num == 1U)
 80071b4:	4576      	cmp	r6, lr
      MPU_InitStruct.TypeExtField         = MPU_TEX_LEVEL0;
 80071b6:	f04f 0300 	mov.w	r3, #0
 80071ba:	f88d 300a 	strb.w	r3, [sp, #10]
      MPU_InitStruct.IsShareable          = MPU_ACCESS_NOT_SHAREABLE;
 80071be:	f88d 300d 	strb.w	r3, [sp, #13]
      MPU_InitStruct.Enable               = MPU_REGION_ENABLE;
 80071c2:	f88d e000 	strb.w	lr, [sp]
      MPU_InitStruct.Number               = MpuAreas[mpu_region_num].Number;
 80071c6:	f88d 1001 	strb.w	r1, [sp, #1]
      MPU_InitStruct.Size                 = MpuAreas[mpu_region_num].Size;
 80071ca:	f88d c008 	strb.w	ip, [sp, #8]
      MPU_InitStruct.AccessPermission     = MpuAreas[mpu_region_num].AccessPermission;
 80071ce:	f88d 200b 	strb.w	r2, [sp, #11]
      MPU_InitStruct.DisableExec          = MpuAreas[mpu_region_num].DisableExec;
 80071d2:	f88d 000c 	strb.w	r0, [sp, #12]
      MPU_InitStruct.IsCacheable          = MPU_ACCESS_CACHEABLE;
 80071d6:	f8ad e00e 	strh.w	lr, [sp, #14]
      if (mpu_region_num == 1U)
 80071da:	b2f3      	uxtb	r3, r6
 80071dc:	d125      	bne.n	800722a <SFU_LL_SECU_SetProtectionMPU+0xe6>
        MPU_InitStruct.SubRegionDisable = (uint8_t)(0xffU << region1_first_16kb_sub_region_disabled);
 80071de:	f88d 5009 	strb.w	r5, [sp, #9]
      if (uStep == SFU_INITIAL_CONFIGURATION)
 80071e2:	f1b9 0f00 	cmp.w	r9, #0
 80071e6:	d127      	bne.n	8007238 <SFU_LL_SECU_SetProtectionMPU+0xf4>
        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80071e8:	4668      	mov	r0, sp
 80071ea:	f000 fb75 	bl	80078d8 <HAL_MPU_ConfigRegion>
    for (mpu_region_num = 0U; mpu_region_num < (sizeof(MpuAreas) / sizeof(SFU_MPU_InitTypeDef)); mpu_region_num++)
 80071ee:	3601      	adds	r6, #1
 80071f0:	2e06      	cmp	r6, #6
 80071f2:	f104 040c 	add.w	r4, r4, #12
 80071f6:	d1d1      	bne.n	800719c <SFU_LL_SECU_SetProtectionMPU+0x58>
    if (uStep == SFU_INITIAL_CONFIGURATION)
 80071f8:	f1b9 0f00 	cmp.w	r9, #0
 80071fc:	d140      	bne.n	8007280 <SFU_LL_SECU_SetProtectionMPU+0x13c>
      HAL_MPU_Enable(MPU_HARDFAULT_NMI);
 80071fe:	2002      	movs	r0, #2
 8007200:	f000 fb58 	bl	80078b4 <HAL_MPU_Enable>
      SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007204:	4a28      	ldr	r2, [pc, #160]	; (80072a8 <SFU_LL_SECU_SetProtectionMPU+0x164>)
 8007206:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800720c:	6253      	str	r3, [r2, #36]	; 0x24
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_MPU, FLOW_CTRL_MPU);
 800720e:	4927      	ldr	r1, [pc, #156]	; (80072ac <SFU_LL_SECU_SetProtectionMPU+0x168>)
 8007210:	680a      	ldr	r2, [r1, #0]
 8007212:	f482 3399 	eor.w	r3, r2, #78336	; 0x13200
 8007216:	f083 03cd 	eor.w	r3, r3, #205	; 0xcd
 800721a:	f5b2 5fff 	cmp.w	r2, #8160	; 0x1fe0
 800721e:	600b      	str	r3, [r1, #0]
 8007220:	d001      	beq.n	8007226 <SFU_LL_SECU_SetProtectionMPU+0xe2>
 8007222:	f7fd fd23 	bl	8004c6c <SFU_EXCPT_Security_Error>
 8007226:	4822      	ldr	r0, [pc, #136]	; (80072b0 <SFU_LL_SECU_SetProtectionMPU+0x16c>)
 8007228:	e797      	b.n	800715a <SFU_LL_SECU_SetProtectionMPU+0x16>
      else if (mpu_region_num == 2U)
 800722a:	2b02      	cmp	r3, #2
        MPU_InitStruct.SubRegionDisable = (uint8_t)(0xffU << region2_first_2kb_sub_region_disabled);
 800722c:	bf04      	itt	eq
 800722e:	f88d 7009 	strbeq.w	r7, [sp, #9]
        MPU_InitStruct.BaseAddress = (SFU_ROM_ADDR_END  & ~16383U); /* 16k LSBs set to 0 */
 8007232:	f8cd 8004 	streq.w	r8, [sp, #4]
 8007236:	e7d4      	b.n	80071e2 <SFU_LL_SECU_SetProtectionMPU+0x9e>
  MPU->RNR = pMPUInitStruct->Number;
 8007238:	f8ca 1008 	str.w	r1, [sl, #8]
  if (((MPU->RBAR & MPU_RBAR_ADDR_Msk) == pMPUInitStruct->BaseAddress) && (MPU->RASR == mpu_rasr))
 800723c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007240:	9901      	ldr	r1, [sp, #4]
 8007242:	f023 031f 	bic.w	r3, r3, #31
 8007246:	428b      	cmp	r3, r1
 8007248:	d185      	bne.n	8007156 <SFU_LL_SECU_SetProtectionMPU+0x12>
  mpu_rasr |= (((uint32_t)pMPUInitStruct->AccessPermission   << MPU_RASR_AP_Pos) & MPU_RASR_AP_Msk);
 800724a:	0613      	lsls	r3, r2, #24
  mpu_rasr |= (((uint32_t)pMPUInitStruct->Size               << MPU_RASR_SIZE_Pos) & MPU_RASR_SIZE_Msk);
 800724c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  mpu_rasr |= (((uint32_t)pMPUInitStruct->SubRegionDisable   << MPU_RASR_SRD_Pos) & MPU_RASR_SRD_Msk);
 8007250:	f89d 2009 	ldrb.w	r2, [sp, #9]
  if (((MPU->RBAR & MPU_RBAR_ADDR_Msk) == pMPUInitStruct->BaseAddress) && (MPU->RASR == mpu_rasr))
 8007254:	f8da 1010 	ldr.w	r1, [sl, #16]
  mpu_rasr |= (((uint32_t)pMPUInitStruct->AccessPermission   << MPU_RASR_AP_Pos) & MPU_RASR_AP_Msk);
 8007258:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
  mpu_rasr |= (((uint32_t)pMPUInitStruct->Size               << MPU_RASR_SIZE_Pos) & MPU_RASR_SIZE_Msk);
 800725c:	f00c 0c3e 	and.w	ip, ip, #62	; 0x3e
  mpu_rasr |= (((uint32_t)pMPUInitStruct->Enable             << MPU_RASR_ENABLE_Pos) & MPU_RASR_ENABLE_Msk);
 8007260:	ea43 030c 	orr.w	r3, r3, ip
  mpu_rasr |= (((uint32_t)pMPUInitStruct->DisableExec        << MPU_RASR_XN_Pos) & MPU_RASR_XN_Msk);
 8007264:	0700      	lsls	r0, r0, #28
  mpu_rasr |= (((uint32_t)pMPUInitStruct->Enable             << MPU_RASR_ENABLE_Pos) & MPU_RASR_ENABLE_Msk);
 8007266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  mpu_rasr |= (((uint32_t)pMPUInitStruct->DisableExec        << MPU_RASR_XN_Pos) & MPU_RASR_XN_Msk);
 800726a:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
  mpu_rasr |= (((uint32_t)pMPUInitStruct->Enable             << MPU_RASR_ENABLE_Pos) & MPU_RASR_ENABLE_Msk);
 800726e:	4303      	orrs	r3, r0
 8007270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007274:	f043 0301 	orr.w	r3, r3, #1
  if (((MPU->RBAR & MPU_RBAR_ADDR_Msk) == pMPUInitStruct->BaseAddress) && (MPU->RASR == mpu_rasr))
 8007278:	428b      	cmp	r3, r1
 800727a:	f47f af6c 	bne.w	8007156 <SFU_LL_SECU_SetProtectionMPU+0x12>
 800727e:	e7b6      	b.n	80071ee <SFU_LL_SECU_SetProtectionMPU+0xaa>
      if (MPU->CTRL != (MPU_HARDFAULT_NMI | MPU_CTRL_ENABLE_Msk))
 8007280:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <SFU_LL_SECU_SetProtectionMPU+0x170>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b03      	cmp	r3, #3
 8007286:	f47f af66 	bne.w	8007156 <SFU_LL_SECU_SetProtectionMPU+0x12>
      if ((SCB->SHCSR & SCB_SHCSR_MEMFAULTENA_Msk) != SCB_SHCSR_MEMFAULTENA_Msk)
 800728a:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <SFU_LL_SECU_SetProtectionMPU+0x164>)
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	03db      	lsls	r3, r3, #15
 8007290:	f57f af61 	bpl.w	8007156 <SFU_LL_SECU_SetProtectionMPU+0x12>
 8007294:	e7bb      	b.n	800720e <SFU_LL_SECU_SetProtectionMPU+0xca>
 8007296:	bf00      	nop
 8007298:	00010000 	.word	0x00010000
 800729c:	0800bd62 	.word	0x0800bd62
 80072a0:	0800ffff 	.word	0x0800ffff
 80072a4:	0800ac98 	.word	0x0800ac98
 80072a8:	e000ed00 	.word	0xe000ed00
 80072ac:	20001010 	.word	0x20001010
 80072b0:	00122f11 	.word	0x00122f11
 80072b4:	e000ed90 	.word	0xe000ed90

080072b8 <SFU_LL_SECU_SetProtectionDMA>:
  * @brief  Apply DMA protection
  * @param  None
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_SECU_SetProtectionDMA(void)
{
 80072b8:	b508      	push	{r3, lr}
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80072ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000




  /* Execution stopped if flow control failed */
  FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_DMA, FLOW_CTRL_DMA);
 80072be:	490d      	ldr	r1, [pc, #52]	; (80072f4 <SFU_LL_SECU_SetProtectionDMA+0x3c>)
 80072c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072c2:	f022 0201 	bic.w	r2, r2, #1
 80072c6:	649a      	str	r2, [r3, #72]	; 0x48
 80072c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072ca:	f022 0202 	bic.w	r2, r2, #2
 80072ce:	649a      	str	r2, [r3, #72]	; 0x48
 80072d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072d2:	f022 0204 	bic.w	r2, r2, #4
 80072d6:	649a      	str	r2, [r3, #72]	; 0x48
 80072d8:	680a      	ldr	r2, [r1, #0]
 80072da:	f482 33aa 	eor.w	r3, r2, #87040	; 0x15400
 80072de:	f083 03b5 	eor.w	r3, r3, #181	; 0xb5
 80072e2:	600b      	str	r3, [r1, #0]
 80072e4:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <SFU_LL_SECU_SetProtectionDMA+0x40>)
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d001      	beq.n	80072ee <SFU_LL_SECU_SetProtectionDMA+0x36>
 80072ea:	f7fd fcbf 	bl	8004c6c <SFU_EXCPT_Security_Error>
  return SFU_SUCCESS;
}
 80072ee:	4803      	ldr	r0, [pc, #12]	; (80072fc <SFU_LL_SECU_SetProtectionDMA+0x44>)
 80072f0:	bd08      	pop	{r3, pc}
 80072f2:	bf00      	nop
 80072f4:	20001010 	.word	0x20001010
 80072f8:	00012d2d 	.word	0x00012d2d
 80072fc:	00122f11 	.word	0x00122f11

08007300 <SFU_LL_SECU_SetProtectionDAP>:
  * @brief  Set DAP protection status, configuring SWCLK and SWDIO GPIO pins.
  * @param  None
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_SECU_SetProtectionDAP(void)
{
 8007300:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Enable the DAP protections, so disable the DAP re-configuring SWCLK and SWDIO GPIO pins */
  GPIO_InitStruct.Pin = SFU_DBG_SWDIO_PIN | SFU_DBG_SWCLK_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SFU_DBG_PORT, &GPIO_InitStruct);
 8007306:	a901      	add	r1, sp, #4
 8007308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007318:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  (void)tmpreg;
 800731c:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(SFU_DBG_PORT, &GPIO_InitStruct);
 800731e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007322:	2300      	movs	r3, #0
 8007324:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007328:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(SFU_DBG_PORT, &GPIO_InitStruct);
 800732a:	f000 fe69 	bl	8008000 <HAL_GPIO_Init>
  e_ret_status = SFU_SUCCESS;
  /* Execution stopped if flow control failed */
  FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_DAP, FLOW_CTRL_DAP);
 800732e:	4908      	ldr	r1, [pc, #32]	; (8007350 <SFU_LL_SECU_SetProtectionDAP+0x50>)
 8007330:	680a      	ldr	r2, [r1, #0]
 8007332:	f482 33bd 	eor.w	r3, r2, #96768	; 0x17a00
 8007336:	f483 73d2 	eor.w	r3, r3, #420	; 0x1a4
 800733a:	600b      	str	r3, [r1, #0]
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <SFU_LL_SECU_SetProtectionDAP+0x54>)
 800733e:	429a      	cmp	r2, r3
 8007340:	d001      	beq.n	8007346 <SFU_LL_SECU_SetProtectionDAP+0x46>
 8007342:	f7fd fc93 	bl	8004c6c <SFU_EXCPT_Security_Error>

  return e_ret_status;
}
 8007346:	4804      	ldr	r0, [pc, #16]	; (8007358 <SFU_LL_SECU_SetProtectionDAP+0x58>)
 8007348:	b007      	add	sp, #28
 800734a:	f85d fb04 	ldr.w	pc, [sp], #4
 800734e:	bf00      	nop
 8007350:	20001010 	.word	0x20001010
 8007354:	00011c22 	.word	0x00011c22
 8007358:	00122f11 	.word	0x00122f11

0800735c <SFU_LL_SECU_SetProtectionANTI_TAMPER>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 800735c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  * @brief  Apply ANTI TAMPER protection
  * @param None
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_SECU_SetProtectionANTI_TAMPER(void)
{
 8007360:	b510      	push	{r4, lr}
 8007362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  - Asynch Prediv  = Value according to source clock
  - Synch Prediv   = Value according to source clock
  - OutPut         = Output Disable
  - OutPutPolarity = High Polarity
  - OutPutType     = Open Drain */
  RtcHandle.Instance            = RTC;
 8007364:	4c22      	ldr	r4, [pc, #136]	; (80073f0 <SFU_LL_SECU_SetProtectionANTI_TAMPER+0x94>)
  RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8007366:	4923      	ldr	r1, [pc, #140]	; (80073f4 <SFU_LL_SECU_SetProtectionANTI_TAMPER+0x98>)
 8007368:	f042 0201 	orr.w	r2, r2, #1
 800736c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800736e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8007370:	b08c      	sub	sp, #48	; 0x30
 8007372:	f003 0301 	and.w	r3, r3, #1
  RtcHandle.Init.AsynchPrediv   = RTC_ASYNCH_PREDIV;
  RtcHandle.Init.SynchPrediv    = RTC_SYNCH_PREDIV;
 8007376:	207f      	movs	r0, #127	; 0x7f
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	22ff      	movs	r2, #255	; 0xff
 800737c:	e9c4 0202 	strd	r0, r2, [r4, #8]
  (void)tmpreg;
 8007380:	9b01      	ldr	r3, [sp, #4]
  RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&RtcHandle) == HAL_OK)
 8007382:	4620      	mov	r0, r4
  RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8007384:	2300      	movs	r3, #0
 8007386:	e9c4 1300 	strd	r1, r3, [r4]
  RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 800738a:	e9c4 3306 	strd	r3, r3, [r4, #24]
  RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 800738e:	6123      	str	r3, [r4, #16]
  if (HAL_RTC_Init(&RtcHandle) == HAL_OK)
 8007390:	f001 fe50 	bl	8009034 <HAL_RTC_Init>
 8007394:	b118      	cbz	r0, 800739e <SFU_LL_SECU_SetProtectionANTI_TAMPER+0x42>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8007396:	f641 70e1 	movw	r0, #8161	; 0x1fe1
      FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_TAMPER, FLOW_CTRL_TAMPER);
    }
  }

  return e_ret_status;
}
 800739a:	b00c      	add	sp, #48	; 0x30
 800739c:	bd10      	pop	{r4, pc}
    stamperstructure.Tamper                       = RTC_TAMPER_ID;
 800739e:	2308      	movs	r3, #8
 80073a0:	9302      	str	r3, [sp, #8]
    stamperstructure.Trigger                      = RTC_TAMPERTRIGGER_FALLINGEDGE;
 80073a2:	2302      	movs	r3, #2
    stamperstructure.SamplingFrequency            = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 80073a4:	e9cd 0007 	strd	r0, r0, [sp, #28]
    stamperstructure.TamperPullUp                 = RTC_TAMPER_PULLUP_ENABLE;
 80073a8:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
    stamperstructure.MaskFlag                     = RTC_TAMPERMASK_FLAG_DISABLE;
 80073ac:	e9cd 0005 	strd	r0, r0, [sp, #20]
    stamperstructure.Trigger                      = RTC_TAMPERTRIGGER_FALLINGEDGE;
 80073b0:	9304      	str	r3, [sp, #16]
    stamperstructure.TimeStampOnTamperDetection   = RTC_TIMESTAMPONTAMPERDETECTION_DISABLE;
 80073b2:	900b      	str	r0, [sp, #44]	; 0x2c
    stamperstructure.Interrupt                    = RTC_TAMPER_ID_INTERRUPT;
 80073b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    if (HAL_RTCEx_SetTamper_IT(&RtcHandle, &stamperstructure) == HAL_OK)
 80073b8:	a902      	add	r1, sp, #8
 80073ba:	4620      	mov	r0, r4
    stamperstructure.Interrupt                    = RTC_TAMPER_ID_INTERRUPT;
 80073bc:	9303      	str	r3, [sp, #12]
    if (HAL_RTCEx_SetTamper_IT(&RtcHandle, &stamperstructure) == HAL_OK)
 80073be:	f001 fe95 	bl	80090ec <HAL_RTCEx_SetTamper_IT>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d1e7      	bne.n	8007396 <SFU_LL_SECU_SetProtectionANTI_TAMPER+0x3a>
      __HAL_RTC_TAMPER_CLEAR_FLAG(&RtcHandle, RTC_FLAG_TAMP2F);
 80073c6:	6822      	ldr	r2, [r4, #0]
      FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_TAMPER, FLOW_CTRL_TAMPER);
 80073c8:	490b      	ldr	r1, [pc, #44]	; (80073f8 <SFU_LL_SECU_SetProtectionANTI_TAMPER+0x9c>)
      __HAL_RTC_TAMPER_CLEAR_FLAG(&RtcHandle, RTC_FLAG_TAMP2F);
 80073ca:	68d3      	ldr	r3, [r2, #12]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f463 4381 	orn	r3, r3, #16512	; 0x4080
 80073d2:	60d3      	str	r3, [r2, #12]
      FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_TAMPER, FLOW_CTRL_TAMPER);
 80073d4:	680a      	ldr	r2, [r1, #0]
 80073d6:	f482 3396 	eor.w	r3, r2, #76800	; 0x12c00
 80073da:	f083 03d3 	eor.w	r3, r3, #211	; 0xd3
 80073de:	600b      	str	r3, [r1, #0]
 80073e0:	f246 7386 	movw	r3, #26502	; 0x6786
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d001      	beq.n	80073ec <SFU_LL_SECU_SetProtectionANTI_TAMPER+0x90>
 80073e8:	f7fd fc40 	bl	8004c6c <SFU_EXCPT_Security_Error>
 80073ec:	4803      	ldr	r0, [pc, #12]	; (80073fc <SFU_LL_SECU_SetProtectionANTI_TAMPER+0xa0>)
  return e_ret_status;
 80073ee:	e7d4      	b.n	800739a <SFU_LL_SECU_SetProtectionANTI_TAMPER+0x3e>
 80073f0:	20001760 	.word	0x20001760
 80073f4:	40002800 	.word	0x40002800
 80073f8:	20001010 	.word	0x20001010
 80073fc:	00122f11 	.word	0x00122f11

08007400 <SFU_LL_SECU_CheckApplyRuntimeProtections>:
{
 8007400:	b570      	push	{r4, r5, r6, lr}
  if (SFU_LL_SECU_SetProtectionMPU(uStep) == SFU_SUCCESS)
 8007402:	f7ff fe9f 	bl	8007144 <SFU_LL_SECU_SetProtectionMPU>
 8007406:	4e1c      	ldr	r6, [pc, #112]	; (8007478 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x78>)
    e_ret_status = SFU_ERROR;
 8007408:	f641 75e1 	movw	r5, #8161	; 0x1fe1
 800740c:	42b0      	cmp	r0, r6
 800740e:	bf0c      	ite	eq
 8007410:	4634      	moveq	r4, r6
 8007412:	462c      	movne	r4, r5
  if (SFU_LL_SECU_SetProtectionDMA() == SFU_SUCCESS)
 8007414:	f7ff ff50 	bl	80072b8 <SFU_LL_SECU_SetProtectionDMA>
  IwdgHandle.Init.Prescaler = IWDG_PRESCALER_64;
 8007418:	4a18      	ldr	r2, [pc, #96]	; (800747c <SFU_LL_SECU_CheckApplyRuntimeProtections+0x7c>)
    e_ret_status = SFU_ERROR;
 800741a:	42b0      	cmp	r0, r6
 800741c:	bf18      	it	ne
 800741e:	462c      	movne	r4, r5
  IwdgHandle.Instance = IWDG;
 8007420:	4817      	ldr	r0, [pc, #92]	; (8007480 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x80>)
  IwdgHandle.Init.Prescaler = IWDG_PRESCALER_64;
 8007422:	2304      	movs	r3, #4
 8007424:	e9c0 2300 	strd	r2, r3, [r0]
  IwdgHandle.Init.Window = IWDG_WINDOW_DISABLE;
 8007428:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800742c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007430:	e9c0 1302 	strd	r1, r3, [r0, #8]
    if (HAL_IWDG_Init(&IwdgHandle) == HAL_OK)
 8007434:	f000 feae 	bl	8008194 <HAL_IWDG_Init>
 8007438:	b9d8      	cbnz	r0, 8007472 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x72>
      FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_IWDG, FLOW_CTRL_IWDG);
 800743a:	4912      	ldr	r1, [pc, #72]	; (8007484 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x84>)
 800743c:	680a      	ldr	r2, [r1, #0]
 800743e:	f482 33b2 	eor.w	r3, r2, #91136	; 0x16400
 8007442:	f483 73dd 	eor.w	r3, r3, #442	; 0x1ba
 8007446:	600b      	str	r3, [r1, #0]
 8007448:	f647 1398 	movw	r3, #31128	; 0x7998
 800744c:	429a      	cmp	r2, r3
 800744e:	d001      	beq.n	8007454 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x54>
 8007450:	f7fd fc0c 	bl	8004c6c <SFU_EXCPT_Security_Error>
  if (SFU_LL_SECU_SetProtectionDAP() == SFU_SUCCESS)
 8007454:	f7ff ff54 	bl	8007300 <SFU_LL_SECU_SetProtectionDAP>
 8007458:	4e07      	ldr	r6, [pc, #28]	; (8007478 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x78>)
    e_ret_status = SFU_ERROR;
 800745a:	f641 75e1 	movw	r5, #8161	; 0x1fe1
 800745e:	42b0      	cmp	r0, r6
 8007460:	bf18      	it	ne
 8007462:	462c      	movne	r4, r5
  if (SFU_LL_SECU_SetProtectionANTI_TAMPER() == SFU_SUCCESS)
 8007464:	f7ff ff7a 	bl	800735c <SFU_LL_SECU_SetProtectionANTI_TAMPER>
}
 8007468:	42b0      	cmp	r0, r6
 800746a:	bf0c      	ite	eq
 800746c:	4620      	moveq	r0, r4
 800746e:	4628      	movne	r0, r5
 8007470:	bd70      	pop	{r4, r5, r6, pc}
    e_ret_status = SFU_ERROR;
 8007472:	462c      	mov	r4, r5
 8007474:	e7ee      	b.n	8007454 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x54>
 8007476:	bf00      	nop
 8007478:	00122f11 	.word	0x00122f11
 800747c:	40003000 	.word	0x40003000
 8007480:	20001724 	.word	0x20001724
 8007484:	20001010 	.word	0x20001010

08007488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007488:	480d      	ldr	r0, [pc, #52]	; (80074c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800748a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800748c:	480d      	ldr	r0, [pc, #52]	; (80074c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800748e:	490e      	ldr	r1, [pc, #56]	; (80074c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007490:	4a0e      	ldr	r2, [pc, #56]	; (80074cc <LoopForever+0xe>)
  movs r3, #0
 8007492:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007494:	e002      	b.n	800749c <LoopCopyDataInit>

08007496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800749a:	3304      	adds	r3, #4

0800749c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800749c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800749e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80074a0:	d3f9      	bcc.n	8007496 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80074a2:	4a0b      	ldr	r2, [pc, #44]	; (80074d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80074a4:	4c0b      	ldr	r4, [pc, #44]	; (80074d4 <LoopForever+0x16>)
  movs r3, #0
 80074a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80074a8:	e001      	b.n	80074ae <LoopFillZerobss>

080074aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80074aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074ac:	3204      	adds	r2, #4

080074ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80074ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80074b0:	d3fb      	bcc.n	80074aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80074b2:	f000 f8ff 	bl	80076b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80074b6:	f002 f9c3 	bl	8009840 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80074ba:	f7fc fdc5 	bl	8004048 <main>

080074be <LoopForever>:

LoopForever:
  b LoopForever
 80074be:	e7fe      	b.n	80074be <LoopForever>
  ldr   r0, =_estack
 80074c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80074c4:	20001010 	.word	0x20001010
  ldr r1, =_edata
 80074c8:	200010a8 	.word	0x200010a8
  ldr r2, =_sidata
 80074cc:	0800be50 	.word	0x0800be50
  ldr r2, =_sbss
 80074d0:	200010a8 	.word	0x200010a8
  ldr r4, =_ebss
 80074d4:	20001a24 	.word	0x20001a24

080074d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80074d8:	e7fe      	b.n	80074d8 <ADC1_IRQHandler>

080074da <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80074da:	b570      	push	{r4, r5, r6, lr}
 80074dc:	460e      	mov	r6, r1
 80074de:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074e0:	2500      	movs	r5, #0
 80074e2:	42a5      	cmp	r5, r4
 80074e4:	db01      	blt.n	80074ea <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80074e6:	4620      	mov	r0, r4
 80074e8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80074ea:	f3af 8000 	nop.w
 80074ee:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074f0:	3501      	adds	r5, #1
 80074f2:	e7f6      	b.n	80074e2 <_read+0x8>

080074f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	460e      	mov	r6, r1
 80074f8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074fa:	2500      	movs	r5, #0
 80074fc:	42a5      	cmp	r5, r4
 80074fe:	db01      	blt.n	8007504 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8007500:	4620      	mov	r0, r4
 8007502:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8007504:	5d70      	ldrb	r0, [r6, r5]
 8007506:	f7fd fb72 	bl	8004bee <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800750a:	3501      	adds	r5, #1
 800750c:	e7f6      	b.n	80074fc <_write+0x8>
	...

08007510 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007510:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007512:	4b0a      	ldr	r3, [pc, #40]	; (800753c <_sbrk+0x2c>)
 8007514:	6819      	ldr	r1, [r3, #0]
{
 8007516:	4602      	mov	r2, r0
	if (heap_end == 0)
 8007518:	b909      	cbnz	r1, 800751e <_sbrk+0xe>
		heap_end = &end;
 800751a:	4909      	ldr	r1, [pc, #36]	; (8007540 <_sbrk+0x30>)
 800751c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800751e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8007520:	4669      	mov	r1, sp
 8007522:	4402      	add	r2, r0
 8007524:	428a      	cmp	r2, r1
 8007526:	d906      	bls.n	8007536 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007528:	f002 f984 	bl	8009834 <__errno>
 800752c:	230c      	movs	r3, #12
 800752e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8007534:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8007536:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8007538:	e7fc      	b.n	8007534 <_sbrk+0x24>
 800753a:	bf00      	nop
 800753c:	20001734 	.word	0x20001734
 8007540:	20001a28 	.word	0x20001a28

08007544 <_close>:

int _close(int file)
{
	return -1;
}
 8007544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007548:	4770      	bx	lr

0800754a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800754a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800754e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007550:	2000      	movs	r0, #0
 8007552:	4770      	bx	lr

08007554 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007554:	2001      	movs	r0, #1
 8007556:	4770      	bx	lr

08007558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007558:	2000      	movs	r0, #0
 800755a:	4770      	bx	lr

0800755c <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 800755c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8007560:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007564:	4302      	orrs	r2, r0
 8007566:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	4018      	ands	r0, r3
 800756c:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800756e:	9b01      	ldr	r3, [sp, #4]
}
 8007570:	b002      	add	sp, #8
 8007572:	4770      	bx	lr

08007574 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8007578:	2214      	movs	r2, #20
{
 800757a:	4604      	mov	r4, r0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800757c:	2100      	movs	r1, #0
 800757e:	a801      	add	r0, sp, #4
 8007580:	f002 f99e 	bl	80098c0 <memset>
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8007584:	2002      	movs	r0, #2
 8007586:	f7ff ffe9 	bl	800755c <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800758a:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <BSP_LED_Init+0x48>)
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull = GPIO_NOPULL;
 800758c:	2600      	movs	r6, #0
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800758e:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8007592:	9501      	str	r5, [sp, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8007594:	2301      	movs	r3, #1
 8007596:	e9cd 3602 	strd	r3, r6, [sp, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800759a:	2302      	movs	r3, #2
 800759c:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800759e:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <BSP_LED_Init+0x4c>)
 80075a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075a4:	a901      	add	r1, sp, #4
 80075a6:	6860      	ldr	r0, [r4, #4]
 80075a8:	f000 fd2a 	bl	8008000 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80075ac:	6860      	ldr	r0, [r4, #4]
 80075ae:	4632      	mov	r2, r6
 80075b0:	4629      	mov	r1, r5
 80075b2:	f000 fde1 	bl	8008178 <HAL_GPIO_WritePin>
}
 80075b6:	b006      	add	sp, #24
 80075b8:	bd70      	pop	{r4, r5, r6, pc}
 80075ba:	bf00      	nop
 80075bc:	0800ace0 	.word	0x0800ace0
 80075c0:	20001018 	.word	0x20001018

080075c4 <BSP_LED_Off>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <BSP_LED_Off+0x14>)
 80075c6:	4905      	ldr	r1, [pc, #20]	; (80075dc <BSP_LED_Off+0x18>)
 80075c8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80075cc:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 80075d0:	6858      	ldr	r0, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f000 bdd0 	b.w	8008178 <HAL_GPIO_WritePin>
 80075d8:	20001018 	.word	0x20001018
 80075dc:	0800ace0 	.word	0x0800ace0

080075e0 <BSP_LED_Toggle>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <BSP_LED_Toggle+0x14>)
 80075e2:	4a05      	ldr	r2, [pc, #20]	; (80075f8 <BSP_LED_Toggle+0x18>)
 80075e4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80075e8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 80075ec:	6858      	ldr	r0, [r3, #4]
 80075ee:	f000 bdc8 	b.w	8008182 <HAL_GPIO_TogglePin>
 80075f2:	bf00      	nop
 80075f4:	20001018 	.word	0x20001018
 80075f8:	0800ace0 	.word	0x0800ace0

080075fc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	4604      	mov	r4, r0
 8007602:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007604:	2214      	movs	r2, #20
 8007606:	2100      	movs	r1, #0
 8007608:	a803      	add	r0, sp, #12
 800760a:	f002 f959 	bl	80098c0 <memset>
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800760e:	b9cc      	cbnz	r4, 8007644 <BSP_PB_Init+0x48>
 8007610:	2004      	movs	r0, #4
 8007612:	f7ff ffa3 	bl	800755c <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8007616:	b9d5      	cbnz	r5, 800764e <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007618:	4b1b      	ldr	r3, [pc, #108]	; (8007688 <BSP_PB_Init+0x8c>)
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
    gpioinitstruct.Pull = GPIO_PULLUP;
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800761a:	481c      	ldr	r0, [pc, #112]	; (800768c <BSP_PB_Init+0x90>)
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800761c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007620:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007624:	88db      	ldrh	r3, [r3, #6]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007626:	6920      	ldr	r0, [r4, #16]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8007628:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800762c:	a903      	add	r1, sp, #12
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800762e:	2501      	movs	r5, #1
 8007630:	2302      	movs	r3, #2
 8007632:	e9cd 5305 	strd	r5, r3, [sp, #20]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007636:	f000 fce3 	bl	8008000 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 800763a:	4628      	mov	r0, r5
 800763c:	f000 f8b6 	bl	80077ac <HAL_Delay>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8007640:	b008      	add	sp, #32
 8007642:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8007644:	1e63      	subs	r3, r4, #1
 8007646:	2b01      	cmp	r3, #1
 8007648:	d8e5      	bhi.n	8007616 <BSP_PB_Init+0x1a>
 800764a:	2008      	movs	r0, #8
 800764c:	e7e1      	b.n	8007612 <BSP_PB_Init+0x16>
  if(ButtonMode == BUTTON_MODE_EXTI)
 800764e:	2d01      	cmp	r5, #1
 8007650:	d1f6      	bne.n	8007640 <BSP_PB_Init+0x44>
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007652:	4e0d      	ldr	r6, [pc, #52]	; (8007688 <BSP_PB_Init+0x8c>)
    gpioinitstruct.Pull = GPIO_PULLUP;
 8007654:	9505      	str	r5, [sp, #20]
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007656:	eb06 0344 	add.w	r3, r6, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800765a:	a903      	add	r1, sp, #12
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800765c:	88db      	ldrh	r3, [r3, #6]
 800765e:	9303      	str	r3, [sp, #12]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <BSP_PB_Init+0x94>)
 8007662:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007664:	4b09      	ldr	r3, [pc, #36]	; (800768c <BSP_PB_Init+0x90>)
 8007666:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800766a:	4434      	add	r4, r6
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800766c:	6918      	ldr	r0, [r3, #16]
 800766e:	f000 fcc7 	bl	8008000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8007672:	f994 000c 	ldrsb.w	r0, [r4, #12]
 8007676:	9001      	str	r0, [sp, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	210f      	movs	r1, #15
 800767c:	f000 f8c4 	bl	8007808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8007680:	9801      	ldr	r0, [sp, #4]
 8007682:	f000 f8f3 	bl	800786c <HAL_NVIC_EnableIRQ>
}
 8007686:	e7db      	b.n	8007640 <BSP_PB_Init+0x44>
 8007688:	0800ace0 	.word	0x0800ace0
 800768c:	20001018 	.word	0x20001018
 8007690:	10210000 	.word	0x10210000

08007694 <BSP_PB_GetState>:
  *     @arg BUTTON_SW2
  *     @arg BUTTON_SW3
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007694:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8007696:	4a05      	ldr	r2, [pc, #20]	; (80076ac <BSP_PB_GetState+0x18>)
 8007698:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <BSP_PB_GetState+0x1c>)
 800769a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800769e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076a2:	88d1      	ldrh	r1, [r2, #6]
 80076a4:	6900      	ldr	r0, [r0, #16]
 80076a6:	f000 fd61 	bl	800816c <HAL_GPIO_ReadPin>
}
 80076aa:	bd08      	pop	{r3, pc}
 80076ac:	0800ace0 	.word	0x0800ace0
 80076b0:	20001018 	.word	0x20001018

080076b4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80076b4:	4a16      	ldr	r2, [pc, #88]	; (8007710 <SystemInit+0x5c>)
 80076b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80076ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80076c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80076c6:	f46f 7082 	mvn.w	r0, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 80076d2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80076d6:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80076d8:	6819      	ldr	r1, [r3, #0]
 80076da:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 80076de:	4402      	add	r2, r0
 80076e0:	400a      	ands	r2, r1
 80076e2:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80076e4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80076e8:	f022 0205 	bic.w	r2, r2, #5
 80076ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80076f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80076fc:	4a05      	ldr	r2, [pc, #20]	; (8007714 <SystemInit+0x60>)
 80076fe:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007700:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007708:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800770a:	2200      	movs	r2, #0
 800770c:	619a      	str	r2, [r3, #24]
}
 800770e:	4770      	bx	lr
 8007710:	e000ed00 	.word	0xe000ed00
 8007714:	22041000 	.word	0x22041000

08007718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007718:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 800771a:	4e0f      	ldr	r6, [pc, #60]	; (8007758 <HAL_InitTick+0x40>)
 800771c:	7833      	ldrb	r3, [r6, #0]
{
 800771e:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8007720:	b90b      	cbnz	r3, 8007726 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8007722:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8007724:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007726:	f000 fe63 	bl	80083f0 <HAL_RCC_GetHCLKFreq>
 800772a:	7832      	ldrb	r2, [r6, #0]
 800772c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007730:	fbb3 f3f2 	udiv	r3, r3, r2
 8007734:	fbb0 f0f3 	udiv	r0, r0, r3
 8007738:	f000 f8a6 	bl	8007888 <HAL_SYSTICK_Config>
 800773c:	4604      	mov	r4, r0
 800773e:	2800      	cmp	r0, #0
 8007740:	d1ef      	bne.n	8007722 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007742:	2d0f      	cmp	r5, #15
 8007744:	d8ed      	bhi.n	8007722 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007746:	4602      	mov	r2, r0
 8007748:	4629      	mov	r1, r5
 800774a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800774e:	f000 f85b 	bl	8007808 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007752:	6075      	str	r5, [r6, #4]
 8007754:	4620      	mov	r0, r4
 8007756:	e7e5      	b.n	8007724 <HAL_InitTick+0xc>
 8007758:	20001038 	.word	0x20001038

0800775c <HAL_Init>:
{
 800775c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800775e:	2003      	movs	r0, #3
 8007760:	f000 f840 	bl	80077e4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007764:	200f      	movs	r0, #15
 8007766:	f7ff ffd7 	bl	8007718 <HAL_InitTick>
 800776a:	4604      	mov	r4, r0
 800776c:	b918      	cbnz	r0, 8007776 <HAL_Init+0x1a>
    HAL_MspInit();
 800776e:	f7fc fc76 	bl	800405e <HAL_MspInit>
}
 8007772:	4620      	mov	r0, r4
 8007774:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8007776:	2401      	movs	r4, #1
 8007778:	e7fb      	b.n	8007772 <HAL_Init+0x16>
	...

0800777c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800777c:	4a03      	ldr	r2, [pc, #12]	; (800778c <HAL_IncTick+0x10>)
 800777e:	4b04      	ldr	r3, [pc, #16]	; (8007790 <HAL_IncTick+0x14>)
 8007780:	6811      	ldr	r1, [r2, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	440b      	add	r3, r1
 8007786:	6013      	str	r3, [r2, #0]
}
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20001a10 	.word	0x20001a10
 8007790:	20001038 	.word	0x20001038

08007794 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007794:	4b01      	ldr	r3, [pc, #4]	; (800779c <HAL_GetTick+0x8>)
 8007796:	6818      	ldr	r0, [r3, #0]
}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20001a10 	.word	0x20001a10

080077a0 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80077a0:	4b01      	ldr	r3, [pc, #4]	; (80077a8 <HAL_GetTickPrio+0x8>)
 80077a2:	6858      	ldr	r0, [r3, #4]
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	20001038 	.word	0x20001038

080077ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 80077b0:	f7ff fff0 	bl	8007794 <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80077b4:	1c63      	adds	r3, r4, #1
    {
      wait += (uint32_t)(uwTickFreq);
 80077b6:	bf1c      	itt	ne
 80077b8:	4b05      	ldrne	r3, [pc, #20]	; (80077d0 <HAL_Delay+0x24>)
 80077ba:	781b      	ldrbne	r3, [r3, #0]
    uint32_t tickstart = HAL_GetTick();
 80077bc:	4605      	mov	r5, r0
      wait += (uint32_t)(uwTickFreq);
 80077be:	bf18      	it	ne
 80077c0:	18e4      	addne	r4, r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80077c2:	f7ff ffe7 	bl	8007794 <HAL_GetTick>
 80077c6:	1b43      	subs	r3, r0, r5
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d3fa      	bcc.n	80077c2 <HAL_Delay+0x16>
    {
    }
  }
 80077cc:	bd38      	pop	{r3, r4, r5, pc}
 80077ce:	bf00      	nop
 80077d0:	20001038 	.word	0x20001038

080077d4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80077d4:	4a02      	ldr	r2, [pc, #8]	; (80077e0 <HAL_SuspendTick+0xc>)
 80077d6:	6813      	ldr	r3, [r2, #0]
 80077d8:	f023 0302 	bic.w	r3, r3, #2
 80077dc:	6013      	str	r3, [r2, #0]
}
 80077de:	4770      	bx	lr
 80077e0:	e000e010 	.word	0xe000e010

080077e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077e4:	4907      	ldr	r1, [pc, #28]	; (8007804 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80077e6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077ec:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077ee:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077f4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80077fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007800:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007802:	4770      	bx	lr
 8007804:	e000ed00 	.word	0xe000ed00

08007808 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007808:	4b16      	ldr	r3, [pc, #88]	; (8007864 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800780a:	b530      	push	{r4, r5, lr}
 800780c:	68dc      	ldr	r4, [r3, #12]
 800780e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007812:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007816:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007818:	2d04      	cmp	r5, #4
 800781a:	bf28      	it	cs
 800781c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800781e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007824:	bf8c      	ite	hi
 8007826:	3c03      	subhi	r4, #3
 8007828:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800782a:	fa03 f505 	lsl.w	r5, r3, r5
 800782e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007832:	40a3      	lsls	r3, r4
 8007834:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007838:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800783a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800783c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007840:	bfac      	ite	ge
 8007842:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007846:	4a08      	ldrlt	r2, [pc, #32]	; (8007868 <HAL_NVIC_SetPriority+0x60>)
 8007848:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800784c:	bfb8      	it	lt
 800784e:	f000 000f 	andlt.w	r0, r0, #15
 8007852:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007854:	bfaa      	itet	ge
 8007856:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800785a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800785c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007860:	bd30      	pop	{r4, r5, pc}
 8007862:	bf00      	nop
 8007864:	e000ed00 	.word	0xe000ed00
 8007868:	e000ed14 	.word	0xe000ed14

0800786c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800786c:	2800      	cmp	r0, #0
 800786e:	db08      	blt.n	8007882 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007870:	0942      	lsrs	r2, r0, #5
 8007872:	2301      	movs	r3, #1
 8007874:	f000 001f 	and.w	r0, r0, #31
 8007878:	fa03 f000 	lsl.w	r0, r3, r0
 800787c:	4b01      	ldr	r3, [pc, #4]	; (8007884 <HAL_NVIC_EnableIRQ+0x18>)
 800787e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007882:	4770      	bx	lr
 8007884:	e000e100 	.word	0xe000e100

08007888 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007888:	3801      	subs	r0, #1
 800788a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800788e:	d20a      	bcs.n	80078a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007890:	4b06      	ldr	r3, [pc, #24]	; (80078ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007892:	4a07      	ldr	r2, [pc, #28]	; (80078b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007894:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007896:	21f0      	movs	r1, #240	; 0xf0
 8007898:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800789c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800789e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80078a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80078a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	e000e010 	.word	0xe000e010
 80078b0:	e000ed00 	.word	0xe000ed00

080078b4 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <HAL_MPU_Enable+0x1c>)
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80078b6:	4a07      	ldr	r2, [pc, #28]	; (80078d4 <HAL_MPU_Enable+0x20>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80078b8:	f040 0001 	orr.w	r0, r0, #1
 80078bc:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80078be:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80078c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80078ca:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80078ce:	4770      	bx	lr
 80078d0:	e000ed90 	.word	0xe000ed90
 80078d4:	e000ed00 	.word	0xe000ed00

080078d8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80078d8:	4a12      	ldr	r2, [pc, #72]	; (8007924 <HAL_MPU_ConfigRegion+0x4c>)
 80078da:	7843      	ldrb	r3, [r0, #1]
{
 80078dc:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80078de:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0U)
 80078e0:	7801      	ldrb	r1, [r0, #0]
 80078e2:	b1d9      	cbz	r1, 800791c <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80078e4:	6843      	ldr	r3, [r0, #4]
 80078e6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80078e8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80078ea:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80078ec:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80078ee:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80078f2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80078f4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80078f6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80078fa:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80078fc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007900:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007902:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007906:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007908:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800790c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800790e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007912:	7a01      	ldrb	r1, [r0, #8]
 8007914:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007918:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 800791a:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00U;
 800791c:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00U;
 800791e:	6111      	str	r1, [r2, #16]
}
 8007920:	e7fb      	b.n	800791a <HAL_MPU_ConfigRegion+0x42>
 8007922:	bf00      	nop
 8007924:	e000ed90 	.word	0xe000ed90

08007928 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800792a:	f022 0703 	bic.w	r7, r2, #3
 800792e:	6805      	ldr	r5, [r0, #0]
 8007930:	460b      	mov	r3, r1
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007932:	0896      	lsrs	r6, r2, #2
 8007934:	440f      	add	r7, r1
 8007936:	42bb      	cmp	r3, r7
 8007938:	d108      	bne.n	800794c <CRC_Handle_8+0x24>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800793a:	f012 0203 	ands.w	r2, r2, #3
 800793e:	d01e      	beq.n	800797e <CRC_Handle_8+0x56>
  {
    if ((BufferLength % 4U) == 1U)
 8007940:	2a01      	cmp	r2, #1
 8007942:	d114      	bne.n	800796e <CRC_Handle_8+0x46>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007944:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007948:	702b      	strb	r3, [r5, #0]
 800794a:	e018      	b.n	800797e <CRC_Handle_8+0x56>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800794c:	785c      	ldrb	r4, [r3, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800794e:	f893 c000 	ldrb.w	ip, [r3]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007952:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007954:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8007958:	f893 c003 	ldrb.w	ip, [r3, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800795c:	ea44 040c 	orr.w	r4, r4, ip
 8007960:	f893 c002 	ldrb.w	ip, [r3, #2]
 8007964:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007968:	602c      	str	r4, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800796a:	3304      	adds	r3, #4
 800796c:	e7e3      	b.n	8007936 <CRC_Handle_8+0xe>
    if ((BufferLength % 4U) == 2U)
 800796e:	2a02      	cmp	r2, #2
 8007970:	d108      	bne.n	8007984 <CRC_Handle_8+0x5c>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007972:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 800797c:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800797e:	6803      	ldr	r3, [r0, #0]
 8007980:	6818      	ldr	r0, [r3, #0]
}
 8007982:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007984:	785a      	ldrb	r2, [r3, #1]
 8007986:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 800798a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 800798e:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007990:	789b      	ldrb	r3, [r3, #2]
 8007992:	e7d9      	b.n	8007948 <CRC_Handle_8+0x20>

08007994 <CRC_Handle_16>:
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007994:	6800      	ldr	r0, [r0, #0]
{
 8007996:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007998:	2300      	movs	r3, #0
 800799a:	0855      	lsrs	r5, r2, #1
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800799c:	1c8e      	adds	r6, r1, #2
  for (i = 0U; i < (BufferLength / 2U); i++)
 800799e:	429d      	cmp	r5, r3
 80079a0:	d106      	bne.n	80079b0 <CRC_Handle_16+0x1c>
  }
  if ((BufferLength % 2U) != 0U)
 80079a2:	07d3      	lsls	r3, r2, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 80079a4:	bf44      	itt	mi
 80079a6:	f831 3025 	ldrhmi.w	r3, [r1, r5, lsl #2]
 80079aa:	8003      	strhmi	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80079ac:	6800      	ldr	r0, [r0, #0]
}
 80079ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80079b0:	f831 7023 	ldrh.w	r7, [r1, r3, lsl #2]
 80079b4:	f836 4023 	ldrh.w	r4, [r6, r3, lsl #2]
 80079b8:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80079bc:	6004      	str	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80079be:	3301      	adds	r3, #1
 80079c0:	e7ed      	b.n	800799e <CRC_Handle_16+0xa>

080079c2 <HAL_CRC_MspInit>:
}
 80079c2:	4770      	bx	lr

080079c4 <HAL_CRC_Init>:
{
 80079c4:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 80079c6:	4604      	mov	r4, r0
 80079c8:	b908      	cbnz	r0, 80079ce <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80079ca:	2001      	movs	r0, #1
}
 80079cc:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80079ce:	7f43      	ldrb	r3, [r0, #29]
 80079d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80079d4:	b913      	cbnz	r3, 80079dc <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80079d6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80079d8:	f7ff fff3 	bl	80079c2 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80079dc:	2302      	movs	r3, #2
 80079de:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80079e0:	7923      	ldrb	r3, [r4, #4]
 80079e2:	b9e3      	cbnz	r3, 8007a1e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	4a13      	ldr	r2, [pc, #76]	; (8007a34 <HAL_CRC_Init+0x70>)
 80079e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	f022 0218 	bic.w	r2, r2, #24
 80079f0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80079f2:	7962      	ldrb	r2, [r4, #5]
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	b9d2      	cbnz	r2, 8007a2e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80079f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80079fc:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	6961      	ldr	r1, [r4, #20]
 8007a02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a06:	430a      	orrs	r2, r1
 8007a08:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	69a1      	ldr	r1, [r4, #24]
 8007a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a12:	430a      	orrs	r2, r1
 8007a14:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8007a16:	2301      	movs	r3, #1
 8007a18:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e7d6      	b.n	80079cc <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007a1e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 f82c 	bl	8007a80 <HAL_CRCEx_Polynomial_Set>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d0e2      	beq.n	80079f2 <HAL_CRC_Init+0x2e>
 8007a2c:	e7cd      	b.n	80079ca <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007a2e:	6922      	ldr	r2, [r4, #16]
 8007a30:	e7e4      	b.n	80079fc <HAL_CRC_Init+0x38>
 8007a32:	bf00      	nop
 8007a34:	04c11db7 	.word	0x04c11db7

08007a38 <HAL_CRC_Calculate>:
{
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007a3a:	2602      	movs	r6, #2
 8007a3c:	7746      	strb	r6, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8007a3e:	6806      	ldr	r6, [r0, #0]
 8007a40:	68b7      	ldr	r7, [r6, #8]
 8007a42:	f047 0701 	orr.w	r7, r7, #1
 8007a46:	60b7      	str	r7, [r6, #8]
  switch (hcrc->InputDataFormat)
 8007a48:	6a07      	ldr	r7, [r0, #32]
 8007a4a:	2f02      	cmp	r7, #2
{
 8007a4c:	4604      	mov	r4, r0
  switch (hcrc->InputDataFormat)
 8007a4e:	d014      	beq.n	8007a7a <HAL_CRC_Calculate+0x42>
 8007a50:	2f03      	cmp	r7, #3
 8007a52:	d005      	beq.n	8007a60 <HAL_CRC_Calculate+0x28>
 8007a54:	2f01      	cmp	r7, #1
 8007a56:	d00d      	beq.n	8007a74 <HAL_CRC_Calculate+0x3c>
 8007a58:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	7763      	strb	r3, [r4, #29]
}
 8007a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a60:	eb01 0582 	add.w	r5, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 8007a64:	42a9      	cmp	r1, r5
 8007a66:	d101      	bne.n	8007a6c <HAL_CRC_Calculate+0x34>
      temp = hcrc->Instance->DR;
 8007a68:	6830      	ldr	r0, [r6, #0]
      break;
 8007a6a:	e7f6      	b.n	8007a5a <HAL_CRC_Calculate+0x22>
        hcrc->Instance->DR = pBuffer[index];
 8007a6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8007a70:	6033      	str	r3, [r6, #0]
      for (index = 0U; index < BufferLength; index++)
 8007a72:	e7f7      	b.n	8007a64 <HAL_CRC_Calculate+0x2c>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8007a74:	f7ff ff58 	bl	8007928 <CRC_Handle_8>
      break;
 8007a78:	e7ef      	b.n	8007a5a <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007a7a:	f7ff ff8b 	bl	8007994 <CRC_Handle_16>
      break;
 8007a7e:	e7ec      	b.n	8007a5a <HAL_CRC_Calculate+0x22>

08007a80 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007a80:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007a82:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007a84:	3b01      	subs	r3, #1
 8007a86:	d306      	bcc.n	8007a96 <HAL_CRCEx_Polynomial_Set+0x16>
 8007a88:	fa21 f403 	lsr.w	r4, r1, r3
 8007a8c:	07e4      	lsls	r4, r4, #31
 8007a8e:	d5f9      	bpl.n	8007a84 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8007a90:	2a08      	cmp	r2, #8
 8007a92:	d014      	beq.n	8007abe <HAL_CRCEx_Polynomial_Set+0x3e>
 8007a94:	d802      	bhi.n	8007a9c <HAL_CRCEx_Polynomial_Set+0x1c>
 8007a96:	b13a      	cbz	r2, 8007aa8 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8007a98:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8007a9a:	e00d      	b.n	8007ab8 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8007a9c:	2a10      	cmp	r2, #16
 8007a9e:	d00c      	beq.n	8007aba <HAL_CRCEx_Polynomial_Set+0x3a>
 8007aa0:	2a18      	cmp	r2, #24
 8007aa2:	d1f9      	bne.n	8007a98 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 8007aa4:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8007aa6:	d8f7      	bhi.n	8007a98 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007aa8:	6800      	ldr	r0, [r0, #0]
 8007aaa:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007aac:	6883      	ldr	r3, [r0, #8]
 8007aae:	f023 0318 	bic.w	r3, r3, #24
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	6082      	str	r2, [r0, #8]
 8007ab6:	2000      	movs	r0, #0
}
 8007ab8:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8007aba:	2b07      	cmp	r3, #7
 8007abc:	e7f3      	b.n	8007aa6 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8007abe:	2b0f      	cmp	r3, #15
 8007ac0:	e7f1      	b.n	8007aa6 <HAL_CRCEx_Polynomial_Set+0x26>
	...

08007ac4 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007ac4:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <HAL_FLASH_Unlock+0x1c>)
 8007ac6:	695a      	ldr	r2, [r3, #20]
 8007ac8:	2a00      	cmp	r2, #0
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007aca:	bfbf      	itttt	lt
 8007acc:	4a05      	ldrlt	r2, [pc, #20]	; (8007ae4 <HAL_FLASH_Unlock+0x20>)
 8007ace:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007ad0:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8007ad4:	609a      	strlt	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007ad6:	bfba      	itte	lt
 8007ad8:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8007ada:	0fc0      	lsrlt	r0, r0, #31
 8007adc:	2000      	movge	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8007ade:	4770      	bx	lr
 8007ae0:	58004000 	.word	0x58004000
 8007ae4:	45670123 	.word	0x45670123

08007ae8 <HAL_FLASH_Lock>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <HAL_FLASH_Lock+0x14>)
 8007aea:	695a      	ldr	r2, [r3, #20]
 8007aec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007af0:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8007af2:	6958      	ldr	r0, [r3, #20]
  {
    status = HAL_ERROR;
  }

  return status;
}
 8007af4:	43c0      	mvns	r0, r0
 8007af6:	0fc0      	lsrs	r0, r0, #31
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	58004000 	.word	0x58004000

08007b00 <HAL_FLASH_OB_Unlock>:
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <HAL_FLASH_OB_Unlock+0x20>)
 8007b02:	695a      	ldr	r2, [r3, #20]
 8007b04:	0052      	lsls	r2, r2, #1
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8007b06:	bf41      	itttt	mi
 8007b08:	4a06      	ldrmi	r2, [pc, #24]	; (8007b24 <HAL_FLASH_OB_Unlock+0x24>)
 8007b0a:	60da      	strmi	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8007b0c:	f102 3244 	addmi.w	r2, r2, #1145324612	; 0x44444444
 8007b10:	60da      	strmi	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 8007b12:	bf46      	itte	mi
 8007b14:	6958      	ldrmi	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b16:	f3c0 7080 	ubfxmi	r0, r0, #30, #1
 8007b1a:	2001      	movpl	r0, #1
      status = HAL_OK;
    }
  }

  return status;
}
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	58004000 	.word	0x58004000
 8007b24:	08192a3b 	.word	0x08192a3b

08007b28 <HAL_FLASH_OB_Lock>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <HAL_FLASH_OB_Lock+0x18>)
 8007b2a:	695a      	ldr	r2, [r3, #20]
 8007b2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007b30:	615a      	str	r2, [r3, #20]

  /* verify option bytes are lock */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 8007b32:	6958      	ldr	r0, [r3, #20]
 8007b34:	f080 4080 	eor.w	r0, r0, #1073741824	; 0x40000000
  {
    status = HAL_ERROR;
  }

  return status;
}
 8007b38:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	58004000 	.word	0x58004000

08007b44 <HAL_FLASH_OB_Launch>:
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
  /* Set the bit to force the option byte reloading */
  /* The OB launch is done from the same register either from CPU1 or CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8007b44:	4a03      	ldr	r2, [pc, #12]	; (8007b54 <HAL_FLASH_OB_Launch+0x10>)
 8007b46:	6953      	ldr	r3, [r2, #20]
 8007b48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b4c:	6153      	str	r3, [r2, #20]

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
}
 8007b4e:	2001      	movs	r0, #1
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	58004000 	.word	0x58004000

08007b58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	4605      	mov	r5, r0
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8007b5c:	f7ff fe1a 	bl	8007794 <HAL_GetTick>

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007b60:	4e13      	ldr	r6, [pc, #76]	; (8007bb0 <FLASH_WaitForLastOperation+0x58>)
  uint32_t tickstart = HAL_GetTick();
 8007b62:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007b64:	6933      	ldr	r3, [r6, #16]
 8007b66:	03d9      	lsls	r1, r3, #15
 8007b68:	d40f      	bmi.n	8007b8a <FLASH_WaitForLastOperation+0x32>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8007b6a:	6933      	ldr	r3, [r6, #16]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8007b6c:	07da      	lsls	r2, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007b6e:	bf44      	itt	mi
 8007b70:	2201      	movmi	r2, #1
 8007b72:	6132      	strmi	r2, [r6, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8007b74:	f24c 32fa 	movw	r2, #50170	; 0xc3fa

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8007b78:	4013      	ands	r3, r2
 8007b7a:	d10d      	bne.n	8007b98 <FLASH_WaitForLastOperation+0x40>

    return HAL_ERROR;
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8007b7c:	4e0c      	ldr	r6, [pc, #48]	; (8007bb0 <FLASH_WaitForLastOperation+0x58>)
 8007b7e:	6933      	ldr	r3, [r6, #16]
 8007b80:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
 8007b84:	d10e      	bne.n	8007ba4 <FLASH_WaitForLastOperation+0x4c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8007b86:	4618      	mov	r0, r3
 8007b88:	e005      	b.n	8007b96 <FLASH_WaitForLastOperation+0x3e>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8007b8a:	f7ff fe03 	bl	8007794 <HAL_GetTick>
 8007b8e:	1b00      	subs	r0, r0, r4
 8007b90:	42a8      	cmp	r0, r5
 8007b92:	d3e7      	bcc.n	8007b64 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 8007b94:	2003      	movs	r0, #3
}
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_FLASH_CLEAR_FLAG(error);
 8007b98:	4a05      	ldr	r2, [pc, #20]	; (8007bb0 <FLASH_WaitForLastOperation+0x58>)
 8007b9a:	6113      	str	r3, [r2, #16]
    pFlash.ErrorCode = error;
 8007b9c:	4a05      	ldr	r2, [pc, #20]	; (8007bb4 <FLASH_WaitForLastOperation+0x5c>)
    return HAL_ERROR;
 8007b9e:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 8007ba0:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8007ba2:	e7f8      	b.n	8007b96 <FLASH_WaitForLastOperation+0x3e>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8007ba4:	f7ff fdf6 	bl	8007794 <HAL_GetTick>
 8007ba8:	1b00      	subs	r0, r0, r4
 8007baa:	42a8      	cmp	r0, r5
 8007bac:	d3e7      	bcc.n	8007b7e <FLASH_WaitForLastOperation+0x26>
 8007bae:	e7f1      	b.n	8007b94 <FLASH_WaitForLastOperation+0x3c>
 8007bb0:	58004000 	.word	0x58004000
 8007bb4:	2000173c 	.word	0x2000173c

08007bb8 <HAL_FLASH_Program>:
{
 8007bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8007bbc:	4c18      	ldr	r4, [pc, #96]	; (8007c20 <HAL_FLASH_Program+0x68>)
{
 8007bbe:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8007bc0:	7823      	ldrb	r3, [r4, #0]
 8007bc2:	2b01      	cmp	r3, #1
{
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460d      	mov	r5, r1
 8007bc8:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 8007bca:	d026      	beq.n	8007c1a <HAL_FLASH_Program+0x62>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	6063      	str	r3, [r4, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007bd8:	f7ff ffbe 	bl	8007b58 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8007bdc:	b9a0      	cbnz	r0, 8007c08 <HAL_FLASH_Program+0x50>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007bde:	2e01      	cmp	r6, #1
 8007be0:	d116      	bne.n	8007c10 <HAL_FLASH_Program+0x58>
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007be2:	4a10      	ldr	r2, [pc, #64]	; (8007c24 <HAL_FLASH_Program+0x6c>)
 8007be4:	6953      	ldr	r3, [r2, #20]
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007bec:	602f      	str	r7, [r5, #0]
 8007bee:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007bf2:	f8c5 8004 	str.w	r8, [r5, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bfa:	f7ff ffad 	bl	8007b58 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <HAL_FLASH_Program+0x6c>)
 8007c00:	6953      	ldr	r3, [r2, #20]
 8007c02:	ea23 0606 	bic.w	r6, r3, r6
 8007c06:	6156      	str	r6, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8007c08:	2300      	movs	r3, #0
 8007c0a:	7023      	strb	r3, [r4, #0]
}
 8007c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007c10:	4639      	mov	r1, r7
 8007c12:	4628      	mov	r0, r5
 8007c14:	f002 ff60 	bl	800aad8 <_etext>
 8007c18:	e7ed      	b.n	8007bf6 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8007c1a:	2002      	movs	r0, #2
 8007c1c:	e7f6      	b.n	8007c0c <HAL_FLASH_Program+0x54>
 8007c1e:	bf00      	nop
 8007c20:	2000173c 	.word	0x2000173c
 8007c24:	58004000 	.word	0x58004000

08007c28 <HAL_FLASHEx_OBProgram>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007c2a:	4c73      	ldr	r4, [pc, #460]	; (8007df8 <HAL_FLASHEx_OBProgram+0x1d0>)
 8007c2c:	7823      	ldrb	r3, [r4, #0]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	f000 80e0 	beq.w	8007df4 <HAL_FLASHEx_OBProgram+0x1cc>
 8007c34:	2301      	movs	r3, #1
 8007c36:	7023      	strb	r3, [r4, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8007c38:	6801      	ldr	r1, [r0, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	6063      	str	r3, [r4, #4]
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8007c3e:	07cb      	lsls	r3, r1, #31
 8007c40:	d50d      	bpl.n	8007c5e <HAL_FLASHEx_OBProgram+0x36>
  {
    /* Configure of Write protection on the selected area */
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 8007c42:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
 8007c46:	041d      	lsls	r5, r3, #16
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8007c48:	6843      	ldr	r3, [r0, #4]
 8007c4a:	4a6c      	ldr	r2, [pc, #432]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f040 80a9 	bne.w	8007da4 <HAL_FLASHEx_OBProgram+0x17c>
  {
    MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8007c52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007c54:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8007c58:	4333      	orrs	r3, r6
 8007c5a:	432b      	orrs	r3, r5
 8007c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 8007c5e:	f001 0306 	and.w	r3, r1, #6
 8007c62:	2b06      	cmp	r3, #6
 8007c64:	f040 80a5 	bne.w	8007db2 <HAL_FLASHEx_OBProgram+0x18a>
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 8007c68:	4d64      	ldr	r5, [pc, #400]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8007c6a:	6942      	ldr	r2, [r0, #20]
  optr = FLASH->OPTR;
 8007c6c:	6a2b      	ldr	r3, [r5, #32]
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8007c6e:	6906      	ldr	r6, [r0, #16]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8007c70:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8007c74:	ea23 0302 	bic.w	r3, r3, r2
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8007c78:	6982      	ldr	r2, [r0, #24]
 8007c7a:	4332      	orrs	r2, r6
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	622b      	str	r3, [r5, #32]
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8007c80:	070d      	lsls	r5, r1, #28
 8007c82:	d528      	bpl.n	8007cd6 <HAL_FLASHEx_OBProgram+0xae>
    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0U)
 8007c84:	69c5      	ldr	r5, [r0, #28]
 8007c86:	4b5e      	ldr	r3, [pc, #376]	; (8007e00 <HAL_FLASHEx_OBProgram+0x1d8>)
 8007c88:	421d      	tst	r5, r3
 8007c8a:	d017      	beq.n	8007cbc <HAL_FLASHEx_OBProgram+0x94>
  assert_param(IS_OB_PCROP_CONFIG(PCROPConfig));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AEndAddr));

  /* get pcrop 1A end register */
  pcrop1aend = FLASH->PCROP1AER;
 8007c8c:	4f5b      	ldr	r7, [pc, #364]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)

  /* Configure the Proprietary code readout protection offset */
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0U)
 8007c8e:	07ea      	lsls	r2, r5, #31
  pcrop1aend = FLASH->PCROP1AER;
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0U)
 8007c92:	d50d      	bpl.n	8007cb0 <HAL_FLASHEx_OBProgram+0x88>
  {
    /* Compute offset depending on pcrop granularity */
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8007c94:	6a02      	ldr	r2, [r0, #32]
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8007c96:	6a46      	ldr	r6, [r0, #36]	; 0x24
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8007c98:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000

    /* Set Zone A start offset */
    WRITE_REG(FLASH->PCROP1ASR, startoffset);

    /* Set Zone A end offset */
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 8007c9c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8007ca0:	0ad2      	lsrs	r2, r2, #11
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8007ca2:	f106 4678 	add.w	r6, r6, #4160749568	; 0xf8000000
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 8007ca6:	f023 0301 	bic.w	r3, r3, #1
    WRITE_REG(FLASH->PCROP1ASR, startoffset);
 8007caa:	627a      	str	r2, [r7, #36]	; 0x24
    pcrop1aend |= endoffset;
 8007cac:	ea43 23d6 	orr.w	r3, r3, r6, lsr #11
  {
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
  }

  /* set 1A End register */
  WRITE_REG(FLASH->PCROP1AER, pcrop1aend);
 8007cb0:	4a52      	ldr	r2, [pc, #328]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0U)
 8007cb2:	2d00      	cmp	r5, #0
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 8007cb4:	bfb8      	it	lt
 8007cb6:	f043 4300 	orrlt.w	r3, r3, #2147483648	; 0x80000000
  WRITE_REG(FLASH->PCROP1AER, pcrop1aend);
 8007cba:	6293      	str	r3, [r2, #40]	; 0x28
    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0U)
 8007cbc:	07af      	lsls	r7, r5, #30
 8007cbe:	d50a      	bpl.n	8007cd6 <HAL_FLASHEx_OBProgram+0xae>
  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BEndAddr));

  /* Compute offset depending on pcrop granularity */
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8007cc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */

  /* Configure the Proprietary code readout protection start address */
  WRITE_REG(FLASH->PCROP1BSR, startoffset);
 8007cc2:	4d4e      	ldr	r5, [pc, #312]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8007cc4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8007cc8:	0ada      	lsrs	r2, r3, #11
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8007cca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  WRITE_REG(FLASH->PCROP1BSR, startoffset);
 8007ccc:	636a      	str	r2, [r5, #52]	; 0x34
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8007cce:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8007cd2:	0adb      	lsrs	r3, r3, #11

  /* Configure the Proprietary code readout protection end address */
  WRITE_REG(FLASH->PCROP1BER, endoffset);
 8007cd4:	63ab      	str	r3, [r5, #56]	; 0x38
  if ((pOBInit->OptionType & (OPTIONBYTE_SECURE_MODE | OPTIONBYTE_C2_BOOT_VECT)) != 0U)
 8007cd6:	f411 7f40 	tst.w	r1, #768	; 0x300
 8007cda:	d048      	beq.n	8007d6e <HAL_FLASHEx_OBProgram+0x146>
  *         contains the configuration information for the programming
  * @retval void
  */
static void FLASH_OB_SecureConfig(FLASH_OBProgramInitTypeDef *pOBParam)
{
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 8007cdc:	4b47      	ldr	r3, [pc, #284]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);

  if ((pOBParam->OptionType & OPTIONBYTE_SECURE_MODE) != 0U)
 8007cde:	058e      	lsls	r6, r1, #22
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 8007ce0:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 8007ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  if ((pOBParam->OptionType & OPTIONBYTE_SECURE_MODE) != 0U)
 8007ce8:	d529      	bpl.n	8007d3e <HAL_FLASHEx_OBProgram+0x116>
    assert_param(IS_OB_SBRSA_START_ADDR(pOBParam->SecureRAM2aStartAddr));
    assert_param(IS_OB_SNBRSA_START_ADDR(pOBParam->SecureRAM2bStartAddr));
    assert_param(IS_OB_SECURE_MODE(pOBParam->SecureMode));

    /* Configure SFR register content with start PAGE index to secure */
    MODIFY_REG(sfr_reg_val, FLASH_SFR_SFSA, (((pOBParam->SecureFlashStartAddr - FLASH_BASE) / FLASH_PAGE_SIZE) << FLASH_SFR_SFSA_Pos));
 8007cea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007cec:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007cf0:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 8007cf4:	ea45 3512 	orr.w	r5, r5, r2, lsr #12
#if defined(FLASH_SRRVR_SBRSA_A)
    MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRSA_A | FLASH_SRRVR_SBRSA_B), \
               (((((pOBParam->SecureRAM2aStartAddr - SRAM2A_BASE) >> SRAM_SECURE_PAGE_GRANULARITY_OFFSET) << FLASH_SRRVR_SBRSA_A_Pos)) | \
                ((((pOBParam->SecureRAM2bStartAddr - SRAM2B_BASE) >> SRAM_SECURE_PAGE_GRANULARITY_OFFSET) << FLASH_SRRVR_SBRSA_B_Pos))));
#else
    MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRSA | FLASH_SRRVR_SNBRSA), \
 8007cf8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007cfa:	f102 425f 	add.w	r2, r2, #3741319168	; 0xdf000000
 8007cfe:	f502 027d 	add.w	r2, r2, #16580608	; 0xfd0000
 8007d02:	0a96      	lsrs	r6, r2, #10
 8007d04:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007d06:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8007d0a:	f5a2 3260 	sub.w	r2, r2, #229376	; 0x38000
 8007d0e:	0a92      	lsrs	r2, r2, #10
 8007d10:	f023 5379 	bic.w	r3, r3, #1044381696	; 0x3e400000
 8007d14:	0652      	lsls	r2, r2, #25
 8007d16:	ea42 4286 	orr.w	r2, r2, r6, lsl #18
 8007d1a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8007d1e:	4313      	orrs	r3, r2
                ((((pOBParam->SecureRAM2bStartAddr - SRAM2B_BASE) >> SRAM_SECURE_PAGE_GRANULARITY_OFFSET) << FLASH_SRRVR_SNBRSA_Pos))));
#endif

    /* If Full System Secure mode is requested, clear all the corresponding bit */
    /* Else set the corresponding bit */
    if (pOBParam->SecureMode == SYSTEM_IN_SECURE_MODE)
 8007d20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d22:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      SET_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
#endif
    }

    /* Update Flash registers */
    WRITE_REG(FLASH->SFR, sfr_reg_val);
 8007d26:	4a35      	ldr	r2, [pc, #212]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
      CLEAR_BIT(sfr_reg_val, FLASH_SFR_FSD);
 8007d28:	bf0b      	itete	eq
 8007d2a:	f425 7580 	biceq.w	r5, r5, #256	; 0x100
      SET_BIT(sfr_reg_val, FLASH_SFR_FSD);
 8007d2e:	f445 7580 	orrne.w	r5, r5, #256	; 0x100
      CLEAR_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 8007d32:	f023 4381 	biceq.w	r3, r3, #1082130432	; 0x40800000
      SET_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 8007d36:	f043 4381 	orrne.w	r3, r3, #1082130432	; 0x40800000
    WRITE_REG(FLASH->SFR, sfr_reg_val);
 8007d3a:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
  }

  /* Boot vector */
  if ((pOBParam->OptionType & OPTIONBYTE_C2_BOOT_VECT) != 0U)
 8007d3e:	05ca      	lsls	r2, r1, #23
 8007d40:	d512      	bpl.n	8007d68 <HAL_FLASHEx_OBProgram+0x140>
    /* Check the parameters */
    assert_param(IS_OB_BOOT_VECTOR_ADDR(pOBParam->C2SecureBootVectAddr));
    assert_param(IS_OB_BOOT_REGION(pOBParam->C2BootRegion));

    /* Set the boot vector */
    if (pOBParam->C2BootRegion == OB_C2_BOOT_FROM_FLASH)
 8007d42:	4a30      	ldr	r2, [pc, #192]	; (8007e04 <HAL_FLASHEx_OBProgram+0x1dc>)
 8007d44:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007d46:	401a      	ands	r2, r3
 8007d48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007d4a:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    {
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - FLASH_BASE) >> 2) | pOBParam->C2BootRegion));
 8007d4e:	bf0b      	itete	eq
 8007d50:	f103 4378 	addeq.w	r3, r3, #4160749568	; 0xf8000000
    }
    else
    {
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - SRAM1_BASE) >> 2) | pOBParam->C2BootRegion));
 8007d54:	f103 4360 	addne.w	r3, r3, #3758096384	; 0xe0000000
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - FLASH_BASE) >> 2) | pOBParam->C2BootRegion));
 8007d58:	ea42 0393 	orreq.w	r3, r2, r3, lsr #2
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - SRAM1_BASE) >> 2) | pOBParam->C2BootRegion));
 8007d5c:	ea45 0393 	orrne.w	r3, r5, r3, lsr #2
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - FLASH_BASE) >> 2) | pOBParam->C2BootRegion));
 8007d60:	bf0c      	ite	eq
 8007d62:	f043 4300 	orreq.w	r3, r3, #2147483648	; 0x80000000
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - SRAM1_BASE) >> 2) | pOBParam->C2BootRegion));
 8007d66:	4313      	orrne	r3, r2
    }
  }

  /* Update Flash registers */
  WRITE_REG(FLASH->SRRVR, srrvr_reg_val);
 8007d68:	4a24      	ldr	r2, [pc, #144]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
 8007d6a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  if ((pOBInit->OptionType & OPTIONBYTE_IPCC_BUF_ADDR) != 0U)
 8007d6e:	06cb      	lsls	r3, r1, #27
 8007d70:	d507      	bpl.n	8007d82 <HAL_FLASHEx_OBProgram+0x15a>
  WRITE_REG(FLASH->IPCCBR, (uint32_t)((IPCCDataBufAddr - SRAM2A_BASE) >> 4));
 8007d72:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007d74:	4a21      	ldr	r2, [pc, #132]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
 8007d76:	f103 435f 	add.w	r3, r3, #3741319168	; 0xdf000000
 8007d7a:	f503 037d 	add.w	r3, r3, #16580608	; 0xfd0000
 8007d7e:	091b      	lsrs	r3, r3, #4
 8007d80:	63d3      	str	r3, [r2, #60]	; 0x3c
static HAL_StatusTypeDef FLASH_OB_ProceedWriteOperation(void)
{
  HAL_StatusTypeDef status;

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d86:	f7ff fee7 	bl	8007b58 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8007d8a:	b940      	cbnz	r0, 8007d9e <HAL_FLASHEx_OBProgram+0x176>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8007d8c:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
 8007d8e:	6953      	ldr	r3, [r2, #20]
 8007d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d94:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d9a:	f7ff fedd 	bl	8007b58 <FLASH_WaitForLastOperation>
  __HAL_UNLOCK(&pFlash);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	7023      	strb	r3, [r4, #0]
}
 8007da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 8007da4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007da6:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8007daa:	4333      	orrs	r3, r6
 8007dac:	432b      	orrs	r3, r5
 8007dae:	6313      	str	r3, [r2, #48]	; 0x30
 8007db0:	e755      	b.n	8007c5e <HAL_FLASHEx_OBProgram+0x36>
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8007db2:	078f      	lsls	r7, r1, #30
 8007db4:	d50b      	bpl.n	8007dce <HAL_FLASHEx_OBProgram+0x1a6>
  uint32_t user_config = (READ_REG(FLASH->OPTR) & OB_USER_ALL);
 8007db6:	4d11      	ldr	r5, [pc, #68]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
    optr &= ~OB_USER_BOR_LEV;
 8007db8:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <HAL_FLASHEx_OBProgram+0x1e0>)
  uint32_t user_config = (READ_REG(FLASH->OPTR) & OB_USER_ALL);
 8007dba:	6a2a      	ldr	r2, [r5, #32]
    optr &= ~OB_USER_BOR_LEV;
 8007dbc:	4013      	ands	r3, r2
  optr = FLASH->OPTR;
 8007dbe:	6a2a      	ldr	r2, [r5, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8007dc0:	f043 06ff 	orr.w	r6, r3, #255	; 0xff
 8007dc4:	ea22 0206 	bic.w	r2, r2, r6
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8007dc8:	6906      	ldr	r6, [r0, #16]
 8007dca:	4333      	orrs	r3, r6
 8007dcc:	e756      	b.n	8007c7c <HAL_FLASHEx_OBProgram+0x54>
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8007dce:	074e      	lsls	r6, r1, #29
 8007dd0:	f57f af56 	bpl.w	8007c80 <HAL_FLASHEx_OBProgram+0x58>
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8007dd4:	4d09      	ldr	r5, [pc, #36]	; (8007dfc <HAL_FLASHEx_OBProgram+0x1d4>)
 8007dd6:	6a2a      	ldr	r2, [r5, #32]
 8007dd8:	b2d2      	uxtb	r2, r2
  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8007dda:	2aaa      	cmp	r2, #170	; 0xaa
 8007ddc:	d002      	beq.n	8007de4 <HAL_FLASHEx_OBProgram+0x1bc>
    return (OB_RDP_LEVEL_1);
 8007dde:	2acc      	cmp	r2, #204	; 0xcc
 8007de0:	bf18      	it	ne
 8007de2:	22bb      	movne	r2, #187	; 0xbb
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8007de4:	6946      	ldr	r6, [r0, #20]
  optr = FLASH->OPTR;
 8007de6:	6a2b      	ldr	r3, [r5, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8007de8:	f046 06ff 	orr.w	r6, r6, #255	; 0xff
 8007dec:	ea23 0306 	bic.w	r3, r3, r6
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8007df0:	6986      	ldr	r6, [r0, #24]
 8007df2:	e7ea      	b.n	8007dca <HAL_FLASHEx_OBProgram+0x1a2>
  __HAL_LOCK(&pFlash);
 8007df4:	2002      	movs	r0, #2
 8007df6:	e7d4      	b.n	8007da2 <HAL_FLASHEx_OBProgram+0x17a>
 8007df8:	2000173c 	.word	0x2000173c
 8007dfc:	58004000 	.word	0x58004000
 8007e00:	80000001 	.word	0x80000001
 8007e04:	7ffc0000 	.word	0x7ffc0000
 8007e08:	ef8f7000 	.word	0xef8f7000

08007e0c <HAL_FLASHEx_OBGetConfig>:
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
 8007e0c:	6842      	ldr	r2, [r0, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 8007e0e:	f240 331f 	movw	r3, #799	; 0x31f
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
 8007e12:	2a01      	cmp	r2, #1
  pOBInit->OptionType = OPTIONBYTE_ALL;
 8007e14:	6003      	str	r3, [r0, #0]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
 8007e16:	d809      	bhi.n	8007e2c <HAL_FLASHEx_OBGetConfig+0x20>
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8007e18:	4b39      	ldr	r3, [pc, #228]	; (8007f00 <HAL_FLASHEx_OBGetConfig+0xf4>)
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	d16b      	bne.n	8007ef6 <HAL_FLASHEx_OBGetConfig+0xea>
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8007e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	6082      	str	r2, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8007e26:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007e2a:	60c3      	str	r3, [r0, #12]
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8007e2c:	4b34      	ldr	r3, [pc, #208]	; (8007f00 <HAL_FLASHEx_OBGetConfig+0xf4>)
 8007e2e:	6a1a      	ldr	r2, [r3, #32]
 8007e30:	b2d2      	uxtb	r2, r2
  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8007e32:	2aaa      	cmp	r2, #170	; 0xaa
 8007e34:	d002      	beq.n	8007e3c <HAL_FLASHEx_OBGetConfig+0x30>
    return (OB_RDP_LEVEL_1);
 8007e36:	2acc      	cmp	r2, #204	; 0xcc
 8007e38:	bf18      	it	ne
 8007e3a:	22bb      	movne	r2, #187	; 0xbb
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8007e3c:	6102      	str	r2, [r0, #16]
  uint32_t user_config = (READ_REG(FLASH->OPTR) & OB_USER_ALL);
 8007e3e:	6a1a      	ldr	r2, [r3, #32]
 8007e40:	4930      	ldr	r1, [pc, #192]	; (8007f04 <HAL_FLASHEx_OBGetConfig+0xf8>)
 8007e42:	400a      	ands	r2, r1
  pOBInit->UserType = OB_USER_ALL;
 8007e44:	e9c0 1205 	strd	r1, r2, [r0, #20]
  *PCROP1BStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8007e48:	4a2f      	ldr	r2, [pc, #188]	; (8007f08 <HAL_FLASHEx_OBGetConfig+0xfc>)
  pcrop             = (READ_BIT(FLASH->PCROP1BSR, FLASH_PCROP1BSR_PCROP1B_STRT));
 8007e4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
  *PCROP1BStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8007e4c:	ea02 21c1 	and.w	r1, r2, r1, lsl #11
 8007e50:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007e54:	6281      	str	r1, [r0, #40]	; 0x28
  pcrop             = (READ_BIT(FLASH->PCROP1BER, FLASH_PCROP1BER_PCROP1B_END));
 8007e56:	6b99      	ldr	r1, [r3, #56]	; 0x38
  *PCROP1BEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8007e58:	ea02 21c1 	and.w	r1, r2, r1, lsl #11
 8007e5c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007e60:	62c1      	str	r1, [r0, #44]	; 0x2c
  pcrop             = (READ_BIT(FLASH->PCROP1ASR, FLASH_PCROP1ASR_PCROP1A_STRT));
 8007e62:	6a59      	ldr	r1, [r3, #36]	; 0x24
  *PCROP1AStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8007e64:	ea02 21c1 	and.w	r1, r2, r1, lsl #11
 8007e68:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007e6c:	6201      	str	r1, [r0, #32]
  pcrop             = (READ_BIT(FLASH->PCROP1AER, FLASH_PCROP1AER_PCROP1A_END));
 8007e6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
  *PCROP1AEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8007e70:	ea02 22c1 	and.w	r2, r2, r1, lsl #11
 8007e74:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 8007e78:	6242      	str	r2, [r0, #36]	; 0x24
  *PCROPConfig      = (READ_REG(FLASH->PCROP1AER) & FLASH_PCROP1AER_PCROP_RDP);
 8007e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e7c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 8007e80:	f042 0203 	orr.w	r2, r2, #3
 8007e84:	61c2      	str	r2, [r0, #28]
  return (uint32_t)((READ_BIT(FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA) << 4) + SRAM2A_BASE);
 8007e86:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007e88:	4a20      	ldr	r2, [pc, #128]	; (8007f0c <HAL_FLASHEx_OBGetConfig+0x100>)
 8007e8a:	ea02 1201 	and.w	r2, r2, r1, lsl #4
 8007e8e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8007e92:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  pOBInit->IPCCdataBufAddr = FLASH_OB_GetIPCCBufferAddr();
 8007e96:	6482      	str	r2, [r0, #72]	; 0x48
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 8007e98:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 8007e9c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  uint32_t user_config = (READ_BIT(sfr_reg_val, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 8007ea0:	b2c9      	uxtb	r1, r1
  *SecureFlashStartAddr = ((user_config * FLASH_PAGE_SIZE) + FLASH_BASE);
 8007ea2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8007ea6:	0309      	lsls	r1, r1, #12
 8007ea8:	6301      	str	r1, [r0, #48]	; 0x30
  *SecureRAM2aStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2A_BASE);
 8007eaa:	0a11      	lsrs	r1, r2, #8
  *SecureRAM2bStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2B_BASE);
 8007eac:	0bd2      	lsrs	r2, r2, #15
  *SecureRAM2aStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2A_BASE);
 8007eae:	f401 41f8 	and.w	r1, r1, #31744	; 0x7c00
  *SecureRAM2bStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2B_BASE);
 8007eb2:	f402 42f8 	and.w	r2, r2, #31744	; 0x7c00
  *SecureRAM2aStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2A_BASE);
 8007eb6:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  *SecureRAM2bStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2B_BASE);
 8007eba:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  *SecureRAM2aStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2A_BASE);
 8007ebe:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
  *SecureRAM2bStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2B_BASE);
 8007ec2:	f502 3260 	add.w	r2, r2, #229376	; 0x38000
  *SecureRAM2aStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2A_BASE);
 8007ec6:	6341      	str	r1, [r0, #52]	; 0x34
  *SecureRAM2bStartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2B_BASE);
 8007ec8:	6382      	str	r2, [r0, #56]	; 0x38
  *SecureMode = (READ_BIT(FLASH->OPTR, FLASH_OPTR_ESE));
 8007eca:	6a1a      	ldr	r2, [r3, #32]
 8007ecc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007ed0:	63c2      	str	r2, [r0, #60]	; 0x3c
  *C2BootResetRegion = (READ_BIT(FLASH->SRRVR, FLASH_SRRVR_C2OPT));
 8007ed2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007ed6:	f002 4100 	and.w	r1, r2, #2147483648	; 0x80000000
 8007eda:	6401      	str	r1, [r0, #64]	; 0x40
  if (*C2BootResetRegion == OB_C2_BOOT_FROM_FLASH)
 8007edc:	2a00      	cmp	r2, #0
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + FLASH_BASE);
 8007ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee2:	4a0b      	ldr	r2, [pc, #44]	; (8007f10 <HAL_FLASHEx_OBGetConfig+0x104>)
 8007ee4:	ea02 0383 	and.w	r3, r2, r3, lsl #2
 8007ee8:	bfb4      	ite	lt
 8007eea:	f103 6300 	addlt.w	r3, r3, #134217728	; 0x8000000
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + SRAM1_BASE);
 8007eee:	f103 5300 	addge.w	r3, r3, #536870912	; 0x20000000
 8007ef2:	6443      	str	r3, [r0, #68]	; 0x44
}
 8007ef4:	4770      	bx	lr
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8007ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	6082      	str	r2, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8007efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efe:	e792      	b.n	8007e26 <HAL_FLASHEx_OBGetConfig+0x1a>
 8007f00:	58004000 	.word	0x58004000
 8007f04:	ef8f7e00 	.word	0xef8f7e00
 8007f08:	000ff800 	.word	0x000ff800
 8007f0c:	0003fff0 	.word	0x0003fff0
 8007f10:	000ffffc 	.word	0x000ffffc

08007f14 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8007f14:	4a05      	ldr	r2, [pc, #20]	; (8007f2c <FLASH_PageErase+0x18>)
 8007f16:	6953      	ldr	r3, [r2, #20]
 8007f18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f1c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8007f20:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8007f24:	f040 0002 	orr.w	r0, r0, #2
 8007f28:	6150      	str	r0, [r2, #20]
}
 8007f2a:	4770      	bx	lr
 8007f2c:	58004000 	.word	0x58004000

08007f30 <HAL_FLASHEx_Erase>:
{
 8007f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8007f34:	4d30      	ldr	r5, [pc, #192]	; (8007ff8 <HAL_FLASHEx_Erase+0xc8>)
 8007f36:	782b      	ldrb	r3, [r5, #0]
 8007f38:	2b01      	cmp	r3, #1
{
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8007f3e:	d059      	beq.n	8007ff4 <HAL_FLASHEx_Erase+0xc4>
 8007f40:	2301      	movs	r3, #1
 8007f42:	702b      	strb	r3, [r5, #0]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	606b      	str	r3, [r5, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007f4c:	f7ff fe04 	bl	8007b58 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8007f50:	4604      	mov	r4, r0
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d147      	bne.n	8007fe6 <HAL_FLASHEx_Erase+0xb6>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8007f56:	6833      	ldr	r3, [r6, #0]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d11c      	bne.n	8007f96 <HAL_FLASHEx_Erase+0x66>
      *PageError = 0xFFFFFFFFU;
 8007f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f60:	f8c8 3000 	str.w	r3, [r8]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007f64:	6877      	ldr	r7, [r6, #4]
 8007f66:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	42bb      	cmp	r3, r7
 8007f6e:	d90b      	bls.n	8007f88 <HAL_FLASHEx_Erase+0x58>
        FLASH_PageErase(index);
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ffcf 	bl	8007f14 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007f76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f7a:	f7ff fded 	bl	8007b58 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d036      	beq.n	8007ff0 <HAL_FLASHEx_Erase+0xc0>
          *PageError = index;
 8007f82:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007f86:	4604      	mov	r4, r0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007f88:	4a1c      	ldr	r2, [pc, #112]	; (8007ffc <HAL_FLASHEx_Erase+0xcc>)
 8007f8a:	6953      	ldr	r3, [r2, #20]
 8007f8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f90:	f023 0302 	bic.w	r3, r3, #2
 8007f94:	6153      	str	r3, [r2, #20]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8007f96:	4b19      	ldr	r3, [pc, #100]	; (8007ffc <HAL_FLASHEx_Erase+0xcc>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	0591      	lsls	r1, r2, #22
 8007f9c:	d50f      	bpl.n	8007fbe <HAL_FLASHEx_Erase+0x8e>
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007fa4:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fb4:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbc:	601a      	str	r2, [r3, #0]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8007fbe:	4b0f      	ldr	r3, [pc, #60]	; (8007ffc <HAL_FLASHEx_Erase+0xcc>)
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	0552      	lsls	r2, r2, #21
 8007fc4:	d50f      	bpl.n	8007fe6 <HAL_FLASHEx_Erase+0xb6>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fcc:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fdc:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fe4:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(&pFlash);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	702b      	strb	r3, [r5, #0]
}
 8007fea:	4620      	mov	r0, r4
 8007fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007ff0:	3701      	adds	r7, #1
 8007ff2:	e7b8      	b.n	8007f66 <HAL_FLASHEx_Erase+0x36>
  __HAL_LOCK(&pFlash);
 8007ff4:	2402      	movs	r4, #2
 8007ff6:	e7f8      	b.n	8007fea <HAL_FLASHEx_Erase+0xba>
 8007ff8:	2000173c 	.word	0x2000173c
 8007ffc:	58004000 	.word	0x58004000

08008000 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008004:	4c57      	ldr	r4, [pc, #348]	; (8008164 <HAL_GPIO_Init+0x164>)
  uint32_t position = 0x00u;
 8008006:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008008:	f04f 0901 	mov.w	r9, #1
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800800c:	f04f 080f 	mov.w	r8, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008010:	680a      	ldr	r2, [r1, #0]
 8008012:	fa32 f503 	lsrs.w	r5, r2, r3
 8008016:	d101      	bne.n	800801c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8008018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800801c:	fa09 fe03 	lsl.w	lr, r9, r3
    if (iocurrent != 0x00u)
 8008020:	ea1e 0202 	ands.w	r2, lr, r2
 8008024:	f000 8094 	beq.w	8008150 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008028:	684d      	ldr	r5, [r1, #4]
 800802a:	f025 0a10 	bic.w	sl, r5, #16
 800802e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008032:	2603      	movs	r6, #3
 8008034:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8008038:	fa06 f60c 	lsl.w	r6, r6, ip
 800803c:	2f01      	cmp	r7, #1
 800803e:	ea6f 0606 	mvn.w	r6, r6
 8008042:	d811      	bhi.n	8008068 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 8008044:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008046:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800804a:	68cf      	ldr	r7, [r1, #12]
 800804c:	fa07 f70c 	lsl.w	r7, r7, ip
 8008050:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8008054:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008056:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008058:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800805c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8008060:	409f      	lsls	r7, r3
 8008062:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8008066:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8008068:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800806a:	ea07 0e06 	and.w	lr, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800806e:	688f      	ldr	r7, [r1, #8]
 8008070:	fa07 f70c 	lsl.w	r7, r7, ip
 8008074:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008078:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 800807c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800807e:	d114      	bne.n	80080aa <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3u];
 8008080:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8008084:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008088:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800808c:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008090:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8008094:	fa08 fb0a 	lsl.w	fp, r8, sl
 8008098:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800809c:	690f      	ldr	r7, [r1, #16]
 800809e:	fa07 f70a 	lsl.w	r7, r7, sl
 80080a2:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 80080a6:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 80080aa:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80080ac:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80080ae:	f005 0703 	and.w	r7, r5, #3
 80080b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80080b6:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 80080ba:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80080bc:	00ee      	lsls	r6, r5, #3
 80080be:	d547      	bpl.n	8008150 <HAL_GPIO_Init+0x150>
        temp = SYSCFG->EXTICR[position >> 2u];
 80080c0:	f023 0703 	bic.w	r7, r3, #3
 80080c4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80080c8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80080cc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80080d0:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80080d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80080d6:	fa08 fe0c 	lsl.w	lr, r8, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80080da:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80080de:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80080e2:	d037      	beq.n	8008154 <HAL_GPIO_Init+0x154>
 80080e4:	4e20      	ldr	r6, [pc, #128]	; (8008168 <HAL_GPIO_Init+0x168>)
 80080e6:	42b0      	cmp	r0, r6
 80080e8:	d036      	beq.n	8008158 <HAL_GPIO_Init+0x158>
 80080ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80080ee:	42b0      	cmp	r0, r6
 80080f0:	d034      	beq.n	800815c <HAL_GPIO_Init+0x15c>
 80080f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80080f6:	42b0      	cmp	r0, r6
 80080f8:	d032      	beq.n	8008160 <HAL_GPIO_Init+0x160>
 80080fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80080fe:	42b0      	cmp	r0, r6
 8008100:	bf0c      	ite	eq
 8008102:	2604      	moveq	r6, #4
 8008104:	2607      	movne	r6, #7
 8008106:	fa06 f60c 	lsl.w	r6, r6, ip
 800810a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800810e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8008110:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8008114:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008116:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 800811a:	bf0c      	ite	eq
 800811c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800811e:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8008120:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        temp = EXTI->EMR1;
 8008124:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008128:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 800812c:	bf0c      	ite	eq
 800812e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8008130:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8008132:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        temp = EXTI->RTSR1;
 8008136:	6826      	ldr	r6, [r4, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008138:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800813c:	bf0c      	ite	eq
 800813e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8008140:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8008142:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8008144:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008146:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 8008148:	bf54      	ite	pl
 800814a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800814c:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 800814e:	6066      	str	r6, [r4, #4]
    position++;
 8008150:	3301      	adds	r3, #1
 8008152:	e75d      	b.n	8008010 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008154:	2600      	movs	r6, #0
 8008156:	e7d6      	b.n	8008106 <HAL_GPIO_Init+0x106>
 8008158:	2601      	movs	r6, #1
 800815a:	e7d4      	b.n	8008106 <HAL_GPIO_Init+0x106>
 800815c:	2602      	movs	r6, #2
 800815e:	e7d2      	b.n	8008106 <HAL_GPIO_Init+0x106>
 8008160:	2603      	movs	r6, #3
 8008162:	e7d0      	b.n	8008106 <HAL_GPIO_Init+0x106>
 8008164:	58000800 	.word	0x58000800
 8008168:	48000400 	.word	0x48000400

0800816c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800816c:	6903      	ldr	r3, [r0, #16]
 800816e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008170:	bf14      	ite	ne
 8008172:	2001      	movne	r0, #1
 8008174:	2000      	moveq	r0, #0
 8008176:	4770      	bx	lr

08008178 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008178:	b10a      	cbz	r2, 800817e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800817a:	6181      	str	r1, [r0, #24]
 800817c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800817e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8008180:	4770      	bx	lr

08008182 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008182:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008184:	ea01 0203 	and.w	r2, r1, r3
 8008188:	ea21 0103 	bic.w	r1, r1, r3
 800818c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008190:	6181      	str	r1, [r0, #24]
}
 8008192:	4770      	bx	lr

08008194 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008194:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008196:	4604      	mov	r4, r0
 8008198:	b308      	cbz	r0, 80081de <HAL_IWDG_Init+0x4a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800819a:	6803      	ldr	r3, [r0, #0]
 800819c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80081a0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80081a2:	f245 5255 	movw	r2, #21845	; 0x5555
 80081a6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80081a8:	6842      	ldr	r2, [r0, #4]
 80081aa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80081ac:	6882      	ldr	r2, [r0, #8]
 80081ae:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80081b0:	f7ff faf0 	bl	8007794 <HAL_GetTick>
 80081b4:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80081b6:	6822      	ldr	r2, [r4, #0]
 80081b8:	68d3      	ldr	r3, [r2, #12]
 80081ba:	b94b      	cbnz	r3, 80081d0 <HAL_IWDG_Init+0x3c>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80081bc:	6910      	ldr	r0, [r2, #16]
 80081be:	68e1      	ldr	r1, [r4, #12]
 80081c0:	4288      	cmp	r0, r1
    hiwdg->Instance->WINR = hiwdg->Init.Window;
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80081c2:	bf0a      	itet	eq
 80081c4:	f64a 21aa 	movweq	r1, #43690	; 0xaaaa
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80081c8:	6111      	strne	r1, [r2, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80081ca:	6011      	streq	r1, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081cc:	4618      	mov	r0, r3
}
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80081d0:	f7ff fae0 	bl	8007794 <HAL_GetTick>
 80081d4:	1b40      	subs	r0, r0, r5
 80081d6:	2830      	cmp	r0, #48	; 0x30
 80081d8:	d9ed      	bls.n	80081b6 <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 80081da:	2003      	movs	r0, #3
 80081dc:	e7f7      	b.n	80081ce <HAL_IWDG_Init+0x3a>
    return HAL_ERROR;
 80081de:	2001      	movs	r0, #1
 80081e0:	e7f5      	b.n	80081ce <HAL_IWDG_Init+0x3a>

080081e2 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80081e2:	6803      	ldr	r3, [r0, #0]
 80081e4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80081e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80081ea:	2000      	movs	r0, #0
 80081ec:	4770      	bx	lr
	...

080081f0 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081f0:	4a02      	ldr	r2, [pc, #8]	; (80081fc <HAL_PWR_EnableBkUpAccess+0xc>)
 80081f2:	6813      	ldr	r3, [r2, #0]
 80081f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081f8:	6013      	str	r3, [r2, #0]
}
 80081fa:	4770      	bx	lr
 80081fc:	58000400 	.word	0x58000400

08008200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008200:	4b02      	ldr	r3, [pc, #8]	; (800820c <HAL_PWREx_GetVoltageRange+0xc>)
 8008202:	6818      	ldr	r0, [r3, #0]
}
 8008204:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	58000400 	.word	0x58000400

08008210 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008214:	6818      	ldr	r0, [r3, #0]
}
 8008216:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800821a:	4770      	bx	lr

0800821c <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800821c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008220:	6818      	ldr	r0, [r3, #0]
}
 8008222:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8008226:	4770      	bx	lr

08008228 <LL_RCC_LSI1_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800822c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8008230:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8008234:	4770      	bx	lr

08008236 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800823a:	6818      	ldr	r0, [r3, #0]
}
 800823c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8008240:	4770      	bx	lr

08008242 <LL_RCC_MSI_SetRange>:
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800824c:	4318      	orrs	r0, r3
 800824e:	6010      	str	r0, [r2, #0]
}
 8008250:	4770      	bx	lr

08008252 <LL_RCC_MSI_SetCalibTrimming>:
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008256:	6853      	ldr	r3, [r2, #4]
 8008258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800825c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8008260:	6050      	str	r0, [r2, #4]
}
 8008262:	4770      	bx	lr

08008264 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008264:	28b0      	cmp	r0, #176	; 0xb0
 8008266:	4b33      	ldr	r3, [pc, #204]	; (8008334 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008268:	4a33      	ldr	r2, [pc, #204]	; (8008338 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800826a:	bf98      	it	ls
 800826c:	0900      	lsrls	r0, r0, #4
{
 800826e:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008270:	bf8c      	ite	hi
 8008272:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008274:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008278:	4c30      	ldr	r4, [pc, #192]	; (800833c <RCC_SetFlashLatencyFromMSIRange+0xd8>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800827a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800827e:	b089      	sub	sp, #36	; 0x24
 8008280:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008284:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008288:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800828a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800828e:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008292:	f7ff ffb5 	bl	8008200 <HAL_PWREx_GetVoltageRange>
 8008296:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008298:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800829c:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800829e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80082a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082a6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80082aa:	ac08      	add	r4, sp, #32
 80082ac:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082b0:	d020      	beq.n	80082f4 <RCC_SetFlashLatencyFromMSIRange+0x90>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80082b2:	4b23      	ldr	r3, [pc, #140]	; (8008340 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80082b4:	429d      	cmp	r5, r3
 80082b6:	d32f      	bcc.n	8008318 <RCC_SetFlashLatencyFromMSIRange+0xb4>
 80082b8:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 80082bc:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 80082c0:	429d      	cmp	r5, r3
 80082c2:	d92b      	bls.n	800831c <RCC_SetFlashLatencyFromMSIRange+0xb8>
 80082c4:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 80082c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082cc:	429d      	cmp	r5, r3
 80082ce:	d927      	bls.n	8008320 <RCC_SetFlashLatencyFromMSIRange+0xbc>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80082d0:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80082d2:	4d1c      	ldr	r5, [pc, #112]	; (8008344 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	f023 0307 	bic.w	r3, r3, #7
 80082da:	4323      	orrs	r3, r4
 80082dc:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082de:	f7ff fa59 	bl	8007794 <HAL_GetTick>
 80082e2:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d11a      	bne.n	8008324 <RCC_SetFlashLatencyFromMSIRange+0xc0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80082ee:	2000      	movs	r0, #0
}
 80082f0:	b009      	add	sp, #36	; 0x24
 80082f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80082f4:	4b14      	ldr	r3, [pc, #80]	; (8008348 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 80082f6:	fbb5 f5f3 	udiv	r5, r5, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80082fa:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80082fc:	f856 2b04 	ldr.w	r2, [r6], #4
 8008300:	4295      	cmp	r5, r2
 8008302:	d805      	bhi.n	8008310 <RCC_SetFlashLatencyFromMSIRange+0xac>
        latency = FLASH_LATENCY_RANGE[index];
 8008304:	aa08      	add	r2, sp, #32
 8008306:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800830a:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
 800830e:	e7e0      	b.n	80082d2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008310:	3301      	adds	r3, #1
 8008312:	2b04      	cmp	r3, #4
 8008314:	d1f2      	bne.n	80082fc <RCC_SetFlashLatencyFromMSIRange+0x98>
 8008316:	e7db      	b.n	80082d0 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008318:	2300      	movs	r3, #0
 800831a:	e7f3      	b.n	8008304 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 800831c:	2301      	movs	r3, #1
 800831e:	e7f1      	b.n	8008304 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8008320:	2302      	movs	r3, #2
 8008322:	e7ef      	b.n	8008304 <RCC_SetFlashLatencyFromMSIRange+0xa0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008324:	f7ff fa36 	bl	8007794 <HAL_GetTick>
 8008328:	1b80      	subs	r0, r0, r6
 800832a:	2802      	cmp	r0, #2
 800832c:	d9da      	bls.n	80082e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      return HAL_TIMEOUT;
 800832e:	2003      	movs	r0, #3
 8008330:	e7de      	b.n	80082f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8008332:	bf00      	nop
 8008334:	0800acf0 	.word	0x0800acf0
 8008338:	0800ad30 	.word	0x0800ad30
 800833c:	0800adf0 	.word	0x0800adf0
 8008340:	006acfc0 	.word	0x006acfc0
 8008344:	58004000 	.word	0x58004000
 8008348:	000f4240 	.word	0x000f4240

0800834c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800834c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008350:	689a      	ldr	r2, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008352:	f012 020c 	ands.w	r2, r2, #12
 8008356:	d10a      	bne.n	800836e <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008358:	681b      	ldr	r3, [r3, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800835a:	4a22      	ldr	r2, [pc, #136]	; (80083e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800835c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008360:	2bb0      	cmp	r3, #176	; 0xb0
 8008362:	bf28      	it	cs
 8008364:	23b0      	movcs	r3, #176	; 0xb0
 8008366:	091b      	lsrs	r3, r3, #4
 8008368:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800836c:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800836e:	2a04      	cmp	r2, #4
 8008370:	d035      	beq.n	80083de <HAL_RCC_GetSysClockFreq+0x92>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008372:	2a08      	cmp	r2, #8
 8008374:	d107      	bne.n	8008386 <HAL_RCC_GetSysClockFreq+0x3a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008376:	681b      	ldr	r3, [r3, #0]
      sysclockfreq = HSE_VALUE;
 8008378:	481b      	ldr	r0, [pc, #108]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800837a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800837e:	4b1b      	ldr	r3, [pc, #108]	; (80083ec <HAL_RCC_GetSysClockFreq+0xa0>)
 8008380:	bf08      	it	eq
 8008382:	4618      	moveq	r0, r3
 8008384:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800838c:	2a02      	cmp	r2, #2
 800838e:	d024      	beq.n	80083da <HAL_RCC_GetSysClockFreq+0x8e>
 8008390:	2a03      	cmp	r2, #3
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	d117      	bne.n	80083c6 <HAL_RCC_GetSysClockFreq+0x7a>
          pllinputfreq = HSE_VALUE / 2U;
 8008396:	4814      	ldr	r0, [pc, #80]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x9c>)
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008398:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800839c:	4b13      	ldr	r3, [pc, #76]	; (80083ec <HAL_RCC_GetSysClockFreq+0xa0>)
 800839e:	bf18      	it	ne
 80083a0:	4603      	movne	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80083a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083a6:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80083a8:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80083aa:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80083ac:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80083b0:	4358      	muls	r0, r3
 80083b2:	f3c1 1302 	ubfx	r3, r1, #4, #3
 80083b6:	3301      	adds	r3, #1
 80083b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80083bc:	0f53      	lsrs	r3, r2, #29
 80083be:	3301      	adds	r3, #1
 80083c0:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80083c4:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80083c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80083ca:	2bb0      	cmp	r3, #176	; 0xb0
 80083cc:	bf28      	it	cs
 80083ce:	23b0      	movcs	r3, #176	; 0xb0
 80083d0:	4a04      	ldr	r2, [pc, #16]	; (80083e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80083d2:	091b      	lsrs	r3, r3, #4
 80083d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        break;
 80083d8:	e7e3      	b.n	80083a2 <HAL_RCC_GetSysClockFreq+0x56>
    switch (pllsource)
 80083da:	4b03      	ldr	r3, [pc, #12]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80083dc:	e7e1      	b.n	80083a2 <HAL_RCC_GetSysClockFreq+0x56>
    sysclockfreq = HSI_VALUE;
 80083de:	4802      	ldr	r0, [pc, #8]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x9c>)
}
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	0800acf0 	.word	0x0800acf0
 80083e8:	00f42400 	.word	0x00f42400
 80083ec:	01e84800 	.word	0x01e84800

080083f0 <HAL_RCC_GetHCLKFreq>:
{
 80083f0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80083f2:	f7ff ffab 	bl	800834c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80083f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083fa:	4a04      	ldr	r2, [pc, #16]	; (800840c <HAL_RCC_GetHCLKFreq+0x1c>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8008406:	fbb0 f0f3 	udiv	r0, r0, r3
 800840a:	bd08      	pop	{r3, pc}
 800840c:	0800ad30 	.word	0x0800ad30

08008410 <HAL_RCC_OscConfig>:
{
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 8008412:	4604      	mov	r4, r0
 8008414:	b908      	cbnz	r0, 800841a <HAL_RCC_OscConfig+0xa>
          return HAL_ERROR;
 8008416:	2001      	movs	r0, #1
 8008418:	e088      	b.n	800852c <HAL_RCC_OscConfig+0x11c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800841a:	6803      	ldr	r3, [r0, #0]
 800841c:	069f      	lsls	r7, r3, #26
 800841e:	d531      	bpl.n	8008484 <HAL_RCC_OscConfig+0x74>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008424:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008426:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008428:	f013 030c 	ands.w	r3, r3, #12
 800842c:	d005      	beq.n	800843a <HAL_RCC_OscConfig+0x2a>
 800842e:	2b0c      	cmp	r3, #12
 8008430:	d161      	bne.n	80084f6 <HAL_RCC_OscConfig+0xe6>
 8008432:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008436:	2b01      	cmp	r3, #1
 8008438:	d15d      	bne.n	80084f6 <HAL_RCC_OscConfig+0xe6>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800843a:	f7ff fefc 	bl	8008236 <LL_RCC_MSI_IsReady>
 800843e:	b110      	cbz	r0, 8008446 <HAL_RCC_OscConfig+0x36>
 8008440:	69e3      	ldr	r3, [r4, #28]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0e7      	beq.n	8008416 <HAL_RCC_OscConfig+0x6>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800844a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008452:	2bb0      	cmp	r3, #176	; 0xb0
 8008454:	bf28      	it	cs
 8008456:	23b0      	movcs	r3, #176	; 0xb0
 8008458:	4298      	cmp	r0, r3
 800845a:	d941      	bls.n	80084e0 <HAL_RCC_OscConfig+0xd0>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800845c:	f7ff ff02 	bl	8008264 <RCC_SetFlashLatencyFromMSIRange>
 8008460:	2800      	cmp	r0, #0
 8008462:	d1d8      	bne.n	8008416 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008464:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008466:	f7ff feec 	bl	8008242 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800846a:	6a20      	ldr	r0, [r4, #32]
 800846c:	f7ff fef1 	bl	8008252 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008470:	f7ff ffbe 	bl	80083f0 <HAL_RCC_GetHCLKFreq>
 8008474:	4bb4      	ldr	r3, [pc, #720]	; (8008748 <HAL_RCC_OscConfig+0x338>)
 8008476:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008478:	4bb4      	ldr	r3, [pc, #720]	; (800874c <HAL_RCC_OscConfig+0x33c>)
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	f7ff f94c 	bl	8007718 <HAL_InitTick>
 8008480:	2800      	cmp	r0, #0
 8008482:	d1c8      	bne.n	8008416 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	07de      	lsls	r6, r3, #31
 8008488:	d462      	bmi.n	8008550 <HAL_RCC_OscConfig+0x140>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	079d      	lsls	r5, r3, #30
 800848e:	f100 80a0 	bmi.w	80085d2 <HAL_RCC_OscConfig+0x1c2>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	f013 0f18 	tst.w	r3, #24
 8008498:	f040 80e1 	bne.w	800865e <HAL_RCC_OscConfig+0x24e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	0758      	lsls	r0, r3, #29
 80084a0:	f100 817d 	bmi.w	800879e <HAL_RCC_OscConfig+0x38e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	0658      	lsls	r0, r3, #25
 80084a8:	f140 81e2 	bpl.w	8008870 <HAL_RCC_OscConfig+0x460>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80084ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80084ae:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 81c9 	beq.w	800884a <HAL_RCC_OscConfig+0x43a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80084b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80084bc:	f043 0301 	orr.w	r3, r3, #1
 80084c0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80084c4:	f7ff f966 	bl	8007794 <HAL_GetTick>
 80084c8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80084ca:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80084ce:	0799      	lsls	r1, r3, #30
 80084d0:	f100 81ce 	bmi.w	8008870 <HAL_RCC_OscConfig+0x460>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084d4:	f7ff f95e 	bl	8007794 <HAL_GetTick>
 80084d8:	1b83      	subs	r3, r0, r6
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d9f5      	bls.n	80084ca <HAL_RCC_OscConfig+0xba>
 80084de:	e024      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084e0:	f7ff feaf 	bl	8008242 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084e4:	6a20      	ldr	r0, [r4, #32]
 80084e6:	f7ff feb4 	bl	8008252 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80084ec:	f7ff feba 	bl	8008264 <RCC_SetFlashLatencyFromMSIRange>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d0bd      	beq.n	8008470 <HAL_RCC_OscConfig+0x60>
 80084f4:	e78f      	b.n	8008416 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80084f6:	69e2      	ldr	r2, [r4, #28]
 80084f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fc:	b1ba      	cbz	r2, 800852e <HAL_RCC_OscConfig+0x11e>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008506:	f7ff f945 	bl	8007794 <HAL_GetTick>
 800850a:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 800850c:	f7ff fe93 	bl	8008236 <LL_RCC_MSI_IsReady>
 8008510:	b130      	cbz	r0, 8008520 <HAL_RCC_OscConfig+0x110>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008512:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008514:	f7ff fe95 	bl	8008242 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008518:	6a20      	ldr	r0, [r4, #32]
 800851a:	f7ff fe9a 	bl	8008252 <LL_RCC_MSI_SetCalibTrimming>
 800851e:	e7b1      	b.n	8008484 <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008520:	f7ff f938 	bl	8007794 <HAL_GetTick>
 8008524:	1b40      	subs	r0, r0, r5
 8008526:	2802      	cmp	r0, #2
 8008528:	d9f0      	bls.n	800850c <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 800852a:	2003      	movs	r0, #3
}
 800852c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	f022 0201 	bic.w	r2, r2, #1
 8008534:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008536:	f7ff f92d 	bl	8007794 <HAL_GetTick>
 800853a:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 800853c:	f7ff fe7b 	bl	8008236 <LL_RCC_MSI_IsReady>
 8008540:	2800      	cmp	r0, #0
 8008542:	d09f      	beq.n	8008484 <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008544:	f7ff f926 	bl	8007794 <HAL_GetTick>
 8008548:	1b40      	subs	r0, r0, r5
 800854a:	2802      	cmp	r0, #2
 800854c:	d9f6      	bls.n	800853c <HAL_RCC_OscConfig+0x12c>
 800854e:	e7ec      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008554:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008556:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008558:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800855c:	2b08      	cmp	r3, #8
 800855e:	d005      	beq.n	800856c <HAL_RCC_OscConfig+0x15c>
 8008560:	2b0c      	cmp	r3, #12
 8008562:	d10b      	bne.n	800857c <HAL_RCC_OscConfig+0x16c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008564:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008568:	2b03      	cmp	r3, #3
 800856a:	d107      	bne.n	800857c <HAL_RCC_OscConfig+0x16c>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800856c:	f7ff fe50 	bl	8008210 <LL_RCC_HSE_IsReady>
 8008570:	2800      	cmp	r0, #0
 8008572:	d08a      	beq.n	800848a <HAL_RCC_OscConfig+0x7a>
 8008574:	6863      	ldr	r3, [r4, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d187      	bne.n	800848a <HAL_RCC_OscConfig+0x7a>
 800857a:	e74c      	b.n	8008416 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800857c:	6861      	ldr	r1, [r4, #4]
 800857e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008582:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	d110      	bne.n	80085ac <HAL_RCC_OscConfig+0x19c>
 800858a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800858e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008590:	f7ff f900 	bl	8007794 <HAL_GetTick>
 8008594:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8008596:	f7ff fe3b 	bl	8008210 <LL_RCC_HSE_IsReady>
 800859a:	2800      	cmp	r0, #0
 800859c:	f47f af75 	bne.w	800848a <HAL_RCC_OscConfig+0x7a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085a0:	f7ff f8f8 	bl	8007794 <HAL_GetTick>
 80085a4:	1b40      	subs	r0, r0, r5
 80085a6:	2864      	cmp	r0, #100	; 0x64
 80085a8:	d9f5      	bls.n	8008596 <HAL_RCC_OscConfig+0x186>
 80085aa:	e7be      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80085ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80085b0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085b2:	2900      	cmp	r1, #0
 80085b4:	d1ec      	bne.n	8008590 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 80085b6:	f7ff f8ed 	bl	8007794 <HAL_GetTick>
 80085ba:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 80085bc:	f7ff fe28 	bl	8008210 <LL_RCC_HSE_IsReady>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	f43f af62 	beq.w	800848a <HAL_RCC_OscConfig+0x7a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085c6:	f7ff f8e5 	bl	8007794 <HAL_GetTick>
 80085ca:	1b40      	subs	r0, r0, r5
 80085cc:	2864      	cmp	r0, #100	; 0x64
 80085ce:	d9f5      	bls.n	80085bc <HAL_RCC_OscConfig+0x1ac>
 80085d0:	e7ab      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80085d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085d6:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80085d8:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80085da:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d005      	beq.n	80085ee <HAL_RCC_OscConfig+0x1de>
 80085e2:	2b0c      	cmp	r3, #12
 80085e4:	d114      	bne.n	8008610 <HAL_RCC_OscConfig+0x200>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80085e6:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d110      	bne.n	8008610 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085ee:	f7ff fe15 	bl	800821c <LL_RCC_HSI_IsReady>
 80085f2:	b118      	cbz	r0, 80085fc <HAL_RCC_OscConfig+0x1ec>
 80085f4:	68e3      	ldr	r3, [r4, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f43f af0d 	beq.w	8008416 <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80085fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008600:	6921      	ldr	r1, [r4, #16]
 8008602:	6853      	ldr	r3, [r2, #4]
 8008604:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008608:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800860c:	6053      	str	r3, [r2, #4]
}
 800860e:	e740      	b.n	8008492 <HAL_RCC_OscConfig+0x82>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008610:	68e2      	ldr	r2, [r4, #12]
 8008612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008616:	b182      	cbz	r2, 800863a <HAL_RCC_OscConfig+0x22a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800861e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008620:	f7ff f8b8 	bl	8007794 <HAL_GetTick>
 8008624:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8008626:	f7ff fdf9 	bl	800821c <LL_RCC_HSI_IsReady>
 800862a:	2800      	cmp	r0, #0
 800862c:	d1e6      	bne.n	80085fc <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800862e:	f7ff f8b1 	bl	8007794 <HAL_GetTick>
 8008632:	1b40      	subs	r0, r0, r5
 8008634:	2802      	cmp	r0, #2
 8008636:	d9f6      	bls.n	8008626 <HAL_RCC_OscConfig+0x216>
 8008638:	e777      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008640:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008642:	f7ff f8a7 	bl	8007794 <HAL_GetTick>
 8008646:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8008648:	f7ff fde8 	bl	800821c <LL_RCC_HSI_IsReady>
 800864c:	2800      	cmp	r0, #0
 800864e:	f43f af20 	beq.w	8008492 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008652:	f7ff f89f 	bl	8007794 <HAL_GetTick>
 8008656:	1b40      	subs	r0, r0, r5
 8008658:	2802      	cmp	r0, #2
 800865a:	d9f5      	bls.n	8008648 <HAL_RCC_OscConfig+0x238>
 800865c:	e765      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800865e:	6962      	ldr	r2, [r4, #20]
 8008660:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8008664:	2a00      	cmp	r2, #0
 8008666:	d073      	beq.n	8008750 <HAL_RCC_OscConfig+0x340>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008668:	06d9      	lsls	r1, r3, #27
 800866a:	d547      	bpl.n	80086fc <HAL_RCC_OscConfig+0x2ec>
        if (LL_RCC_LSI1_IsReady() == 0U)
 800866c:	f7ff fddc 	bl	8008228 <LL_RCC_LSI1_IsReady>
 8008670:	b358      	cbz	r0, 80086ca <HAL_RCC_OscConfig+0x2ba>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008672:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8008676:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800867a:	f043 0304 	orr.w	r3, r3, #4
 800867e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8008682:	f7ff f887 	bl	8007794 <HAL_GetTick>
 8008686:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008688:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800868c:	071a      	lsls	r2, r3, #28
 800868e:	d52f      	bpl.n	80086f0 <HAL_RCC_OscConfig+0x2e0>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008690:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8008694:	69a2      	ldr	r2, [r4, #24]
 8008696:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800869a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800869e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80086a2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80086ae:	f7ff f871 	bl	8007794 <HAL_GetTick>
 80086b2:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 80086b4:	f7ff fdb8 	bl	8008228 <LL_RCC_LSI1_IsReady>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	f43f aeef 	beq.w	800849c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80086be:	f7ff f869 	bl	8007794 <HAL_GetTick>
 80086c2:	1b40      	subs	r0, r0, r5
 80086c4:	2802      	cmp	r0, #2
 80086c6:	d9f5      	bls.n	80086b4 <HAL_RCC_OscConfig+0x2a4>
 80086c8:	e72f      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80086ca:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80086ce:	f043 0301 	orr.w	r3, r3, #1
 80086d2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 80086d6:	f7ff f85d 	bl	8007794 <HAL_GetTick>
 80086da:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 80086dc:	f7ff fda4 	bl	8008228 <LL_RCC_LSI1_IsReady>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d1c6      	bne.n	8008672 <HAL_RCC_OscConfig+0x262>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80086e4:	f7ff f856 	bl	8007794 <HAL_GetTick>
 80086e8:	1b40      	subs	r0, r0, r5
 80086ea:	2802      	cmp	r0, #2
 80086ec:	d9f6      	bls.n	80086dc <HAL_RCC_OscConfig+0x2cc>
 80086ee:	e71c      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80086f0:	f7ff f850 	bl	8007794 <HAL_GetTick>
 80086f4:	1b83      	subs	r3, r0, r6
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d9c6      	bls.n	8008688 <HAL_RCC_OscConfig+0x278>
 80086fa:	e716      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
 80086fc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8008700:	f043 0301 	orr.w	r3, r3, #1
 8008704:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8008708:	f7ff f844 	bl	8007794 <HAL_GetTick>
 800870c:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 800870e:	f7ff fd8b 	bl	8008228 <LL_RCC_LSI1_IsReady>
 8008712:	b198      	cbz	r0, 800873c <HAL_RCC_OscConfig+0x32c>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008718:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800871a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800871e:	f022 0204 	bic.w	r2, r2, #4
 8008722:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008726:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800872a:	071b      	lsls	r3, r3, #28
 800872c:	f57f aeb6 	bpl.w	800849c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008730:	f7ff f830 	bl	8007794 <HAL_GetTick>
 8008734:	1b80      	subs	r0, r0, r6
 8008736:	2803      	cmp	r0, #3
 8008738:	d9f5      	bls.n	8008726 <HAL_RCC_OscConfig+0x316>
 800873a:	e6f6      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800873c:	f7ff f82a 	bl	8007794 <HAL_GetTick>
 8008740:	1b80      	subs	r0, r0, r6
 8008742:	2802      	cmp	r0, #2
 8008744:	d9e3      	bls.n	800870e <HAL_RCC_OscConfig+0x2fe>
 8008746:	e6f0      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
 8008748:	20001034 	.word	0x20001034
 800874c:	2000103c 	.word	0x2000103c
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008750:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8008754:	f023 0304 	bic.w	r3, r3, #4
 8008758:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800875c:	f7ff f81a 	bl	8007794 <HAL_GetTick>
 8008760:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008762:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8008766:	071f      	lsls	r7, r3, #28
 8008768:	d413      	bmi.n	8008792 <HAL_RCC_OscConfig+0x382>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800876a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008776:	f7ff f80d 	bl	8007794 <HAL_GetTick>
 800877a:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 800877c:	f7ff fd54 	bl	8008228 <LL_RCC_LSI1_IsReady>
 8008780:	2800      	cmp	r0, #0
 8008782:	f43f ae8b 	beq.w	800849c <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008786:	f7ff f805 	bl	8007794 <HAL_GetTick>
 800878a:	1b40      	subs	r0, r0, r5
 800878c:	2802      	cmp	r0, #2
 800878e:	d9f5      	bls.n	800877c <HAL_RCC_OscConfig+0x36c>
 8008790:	e6cb      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008792:	f7fe ffff 	bl	8007794 <HAL_GetTick>
 8008796:	1b83      	subs	r3, r0, r6
 8008798:	2b03      	cmp	r3, #3
 800879a:	d9e2      	bls.n	8008762 <HAL_RCC_OscConfig+0x352>
 800879c:	e6c5      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800879e:	4d84      	ldr	r5, [pc, #528]	; (80089b0 <HAL_RCC_OscConfig+0x5a0>)
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	05d8      	lsls	r0, r3, #23
 80087a4:	d51c      	bpl.n	80087e0 <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80087ae:	d125      	bne.n	80087fc <HAL_RCC_OscConfig+0x3ec>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80087b0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80087b4:	f043 0301 	orr.w	r3, r3, #1
 80087b8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 80087bc:	f7fe ffea 	bl	8007794 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80087c0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80087c4:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087c6:	f241 3688 	movw	r6, #5000	; 0x1388
 80087ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087ce:	079a      	lsls	r2, r3, #30
 80087d0:	f53f ae68 	bmi.w	80084a4 <HAL_RCC_OscConfig+0x94>
 80087d4:	f7fe ffde 	bl	8007794 <HAL_GetTick>
 80087d8:	1b43      	subs	r3, r0, r5
 80087da:	42b3      	cmp	r3, r6
 80087dc:	d9f5      	bls.n	80087ca <HAL_RCC_OscConfig+0x3ba>
 80087de:	e6a4      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
      HAL_PWR_EnableBkUpAccess();
 80087e0:	f7ff fd06 	bl	80081f0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80087e4:	f7fe ffd6 	bl	8007794 <HAL_GetTick>
 80087e8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087ea:	682b      	ldr	r3, [r5, #0]
 80087ec:	05d9      	lsls	r1, r3, #23
 80087ee:	d4da      	bmi.n	80087a6 <HAL_RCC_OscConfig+0x396>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087f0:	f7fe ffd0 	bl	8007794 <HAL_GetTick>
 80087f4:	1b80      	subs	r0, r0, r6
 80087f6:	2802      	cmp	r0, #2
 80087f8:	d9f7      	bls.n	80087ea <HAL_RCC_OscConfig+0x3da>
 80087fa:	e696      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087fc:	2b05      	cmp	r3, #5
 80087fe:	d106      	bne.n	800880e <HAL_RCC_OscConfig+0x3fe>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008800:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8008804:	f043 0304 	orr.w	r3, r3, #4
 8008808:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 800880c:	e7d0      	b.n	80087b0 <HAL_RCC_OscConfig+0x3a0>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800880e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8008812:	f022 0201 	bic.w	r2, r2, #1
 8008816:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800881a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800881e:	f022 0204 	bic.w	r2, r2, #4
 8008822:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1c8      	bne.n	80087bc <HAL_RCC_OscConfig+0x3ac>
      tickstart = HAL_GetTick();
 800882a:	f7fe ffb3 	bl	8007794 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800882e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008832:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008834:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8008838:	079b      	lsls	r3, r3, #30
 800883a:	f57f ae33 	bpl.w	80084a4 <HAL_RCC_OscConfig+0x94>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800883e:	f7fe ffa9 	bl	8007794 <HAL_GetTick>
 8008842:	1b83      	subs	r3, r0, r6
 8008844:	42bb      	cmp	r3, r7
 8008846:	d9f5      	bls.n	8008834 <HAL_RCC_OscConfig+0x424>
 8008848:	e66f      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800884a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008856:	f7fe ff9d 	bl	8007794 <HAL_GetTick>
 800885a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800885c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8008860:	079a      	lsls	r2, r3, #30
 8008862:	d505      	bpl.n	8008870 <HAL_RCC_OscConfig+0x460>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008864:	f7fe ff96 	bl	8007794 <HAL_GetTick>
 8008868:	1b83      	subs	r3, r0, r6
 800886a:	2b02      	cmp	r3, #2
 800886c:	d9f6      	bls.n	800885c <HAL_RCC_OscConfig+0x44c>
 800886e:	e65c      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008870:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008872:	b90a      	cbnz	r2, 8008878 <HAL_RCC_OscConfig+0x468>
  return HAL_OK;
 8008874:	2000      	movs	r0, #0
 8008876:	e659      	b.n	800852c <HAL_RCC_OscConfig+0x11c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008878:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800887c:	2a02      	cmp	r2, #2
 800887e:	68a9      	ldr	r1, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008880:	68eb      	ldr	r3, [r5, #12]
 8008882:	f001 010c 	and.w	r1, r1, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008886:	d174      	bne.n	8008972 <HAL_RCC_OscConfig+0x562>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008888:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800888a:	f003 0203 	and.w	r2, r3, #3
 800888e:	4282      	cmp	r2, r0
 8008890:	d118      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4b4>
 8008892:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008894:	f003 0270 	and.w	r2, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008898:	4282      	cmp	r2, r0
 800889a:	d113      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4b4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800889c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800889e:	f3c3 2206 	ubfx	r2, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088a2:	4282      	cmp	r2, r0
 80088a4:	d10e      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4b4>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80088a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088a8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80088ac:	4282      	cmp	r2, r0
 80088ae:	d109      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4b4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088b2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088b6:	4282      	cmp	r2, r0
 80088b8:	d104      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4b4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80088bc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d03f      	beq.n	8008944 <HAL_RCC_OscConfig+0x534>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088c4:	290c      	cmp	r1, #12
 80088c6:	f43f ada6 	beq.w	8008416 <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80088ca:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80088ce:	682b      	ldr	r3, [r5, #0]
 80088d0:	015b      	lsls	r3, r3, #5
 80088d2:	f53f ada0 	bmi.w	8008416 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80088d6:	682b      	ldr	r3, [r5, #0]
 80088d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088dc:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80088de:	f7fe ff59 	bl	8007794 <HAL_GetTick>
 80088e2:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	019f      	lsls	r7, r3, #6
 80088e8:	d426      	bmi.n	8008938 <HAL_RCC_OscConfig+0x528>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088ea:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 80088ee:	68e9      	ldr	r1, [r5, #12]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	4a30      	ldr	r2, [pc, #192]	; (80089b4 <HAL_RCC_OscConfig+0x5a4>)
 80088f4:	400a      	ands	r2, r1
 80088f6:	4313      	orrs	r3, r2
 80088f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80088fa:	4313      	orrs	r3, r2
 80088fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80088fe:	4313      	orrs	r3, r2
 8008900:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008902:	4313      	orrs	r3, r2
 8008904:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008906:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800890a:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008912:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008914:	68eb      	ldr	r3, [r5, #12]
 8008916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800891a:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800891c:	f7fe ff3a 	bl	8007794 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008920:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8008924:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	0198      	lsls	r0, r3, #6
 800892a:	d4a3      	bmi.n	8008874 <HAL_RCC_OscConfig+0x464>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800892c:	f7fe ff32 	bl	8007794 <HAL_GetTick>
 8008930:	1b00      	subs	r0, r0, r4
 8008932:	2802      	cmp	r0, #2
 8008934:	d9f7      	bls.n	8008926 <HAL_RCC_OscConfig+0x516>
 8008936:	e5f8      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008938:	f7fe ff2c 	bl	8007794 <HAL_GetTick>
 800893c:	1b80      	subs	r0, r0, r6
 800893e:	2802      	cmp	r0, #2
 8008940:	d9d0      	bls.n	80088e4 <HAL_RCC_OscConfig+0x4d4>
 8008942:	e5f2      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	0199      	lsls	r1, r3, #6
 8008948:	d494      	bmi.n	8008874 <HAL_RCC_OscConfig+0x464>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008950:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008952:	68eb      	ldr	r3, [r5, #12]
 8008954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008958:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 800895a:	f7fe ff1b 	bl	8007794 <HAL_GetTick>
 800895e:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	019a      	lsls	r2, r3, #6
 8008964:	d486      	bmi.n	8008874 <HAL_RCC_OscConfig+0x464>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008966:	f7fe ff15 	bl	8007794 <HAL_GetTick>
 800896a:	1b00      	subs	r0, r0, r4
 800896c:	2802      	cmp	r0, #2
 800896e:	d9f7      	bls.n	8008960 <HAL_RCC_OscConfig+0x550>
 8008970:	e5db      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008972:	290c      	cmp	r1, #12
 8008974:	f43f ad4f 	beq.w	8008416 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800897e:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008980:	68eb      	ldr	r3, [r5, #12]
 8008982:	f023 0303 	bic.w	r3, r3, #3
 8008986:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8008988:	68eb      	ldr	r3, [r5, #12]
 800898a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800898e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008992:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8008994:	f7fe fefe 	bl	8007794 <HAL_GetTick>
 8008998:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800899a:	682b      	ldr	r3, [r5, #0]
 800899c:	019b      	lsls	r3, r3, #6
 800899e:	f57f af69 	bpl.w	8008874 <HAL_RCC_OscConfig+0x464>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089a2:	f7fe fef7 	bl	8007794 <HAL_GetTick>
 80089a6:	1b00      	subs	r0, r0, r4
 80089a8:	2802      	cmp	r0, #2
 80089aa:	d9f6      	bls.n	800899a <HAL_RCC_OscConfig+0x58a>
 80089ac:	e5bd      	b.n	800852a <HAL_RCC_OscConfig+0x11a>
 80089ae:	bf00      	nop
 80089b0:	58000400 	.word	0x58000400
 80089b4:	11c1808c 	.word	0x11c1808c

080089b8 <HAL_RCC_ClockConfig>:
{
 80089b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089bc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80089be:	4604      	mov	r4, r0
 80089c0:	b910      	cbnz	r0, 80089c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80089c2:	2001      	movs	r0, #1
}
 80089c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089c8:	4e75      	ldr	r6, [pc, #468]	; (8008ba0 <HAL_RCC_ClockConfig+0x1e8>)
 80089ca:	6833      	ldr	r3, [r6, #0]
 80089cc:	f003 0307 	and.w	r3, r3, #7
 80089d0:	428b      	cmp	r3, r1
 80089d2:	d316      	bcc.n	8008a02 <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	0798      	lsls	r0, r3, #30
 80089d8:	d527      	bpl.n	8008a2a <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80089da:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80089de:	68a2      	ldr	r2, [r4, #8]
 80089e0:	68b3      	ldr	r3, [r6, #8]
 80089e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80089ea:	f7fe fed3 	bl	8007794 <HAL_GetTick>
 80089ee:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80089f0:	68b3      	ldr	r3, [r6, #8]
 80089f2:	03d9      	lsls	r1, r3, #15
 80089f4:	d419      	bmi.n	8008a2a <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80089f6:	f7fe fecd 	bl	8007794 <HAL_GetTick>
 80089fa:	1bc3      	subs	r3, r0, r7
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d9f7      	bls.n	80089f0 <HAL_RCC_ClockConfig+0x38>
 8008a00:	e011      	b.n	8008a26 <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a02:	6833      	ldr	r3, [r6, #0]
 8008a04:	f023 0307 	bic.w	r3, r3, #7
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008a0c:	f7fe fec2 	bl	8007794 <HAL_GetTick>
 8008a10:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a12:	6833      	ldr	r3, [r6, #0]
 8008a14:	f003 0307 	and.w	r3, r3, #7
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	d0db      	beq.n	80089d4 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008a1c:	f7fe feba 	bl	8007794 <HAL_GetTick>
 8008a20:	1bc0      	subs	r0, r0, r7
 8008a22:	2802      	cmp	r0, #2
 8008a24:	d9f5      	bls.n	8008a12 <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 8008a26:	2003      	movs	r0, #3
 8008a28:	e7cc      	b.n	80089c4 <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	069a      	lsls	r2, r3, #26
 8008a2e:	d516      	bpl.n	8008a5e <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008a30:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8008a34:	6962      	ldr	r2, [r4, #20]
 8008a36:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8008a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8008a44:	f7fe fea6 	bl	8007794 <HAL_GetTick>
 8008a48:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008a4a:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8008a4e:	039b      	lsls	r3, r3, #14
 8008a50:	d405      	bmi.n	8008a5e <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a52:	f7fe fe9f 	bl	8007794 <HAL_GetTick>
 8008a56:	1bc3      	subs	r3, r0, r7
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d9f6      	bls.n	8008a4a <HAL_RCC_ClockConfig+0x92>
 8008a5c:	e7e3      	b.n	8008a26 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	0658      	lsls	r0, r3, #25
 8008a62:	d517      	bpl.n	8008a94 <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008a64:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8008a68:	69a2      	ldr	r2, [r4, #24]
 8008a6a:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8008a6e:	f023 030f 	bic.w	r3, r3, #15
 8008a72:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8008a76:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8008a7a:	f7fe fe8b 	bl	8007794 <HAL_GetTick>
 8008a7e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008a80:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8008a84:	03d9      	lsls	r1, r3, #15
 8008a86:	d405      	bmi.n	8008a94 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a88:	f7fe fe84 	bl	8007794 <HAL_GetTick>
 8008a8c:	1bc3      	subs	r3, r0, r7
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d9f6      	bls.n	8008a80 <HAL_RCC_ClockConfig+0xc8>
 8008a92:	e7c8      	b.n	8008a26 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	075a      	lsls	r2, r3, #29
 8008a98:	d513      	bpl.n	8008ac2 <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008a9a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8008a9e:	68e2      	ldr	r2, [r4, #12]
 8008aa0:	68b3      	ldr	r3, [r6, #8]
 8008aa2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008aaa:	f7fe fe73 	bl	8007794 <HAL_GetTick>
 8008aae:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008ab0:	68b3      	ldr	r3, [r6, #8]
 8008ab2:	039b      	lsls	r3, r3, #14
 8008ab4:	d405      	bmi.n	8008ac2 <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ab6:	f7fe fe6d 	bl	8007794 <HAL_GetTick>
 8008aba:	1bc3      	subs	r3, r0, r7
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d9f7      	bls.n	8008ab0 <HAL_RCC_ClockConfig+0xf8>
 8008ac0:	e7b1      	b.n	8008a26 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	0718      	lsls	r0, r3, #28
 8008ac6:	d514      	bpl.n	8008af2 <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008ac8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008acc:	6922      	ldr	r2, [r4, #16]
 8008ace:	68b3      	ldr	r3, [r6, #8]
 8008ad0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008ad4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008ad8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008ada:	f7fe fe5b 	bl	8007794 <HAL_GetTick>
 8008ade:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008ae0:	68b3      	ldr	r3, [r6, #8]
 8008ae2:	0359      	lsls	r1, r3, #13
 8008ae4:	d405      	bmi.n	8008af2 <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ae6:	f7fe fe55 	bl	8007794 <HAL_GetTick>
 8008aea:	1bc3      	subs	r3, r0, r7
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d9f7      	bls.n	8008ae0 <HAL_RCC_ClockConfig+0x128>
 8008af0:	e799      	b.n	8008a26 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	07da      	lsls	r2, r3, #31
 8008af6:	d40f      	bmi.n	8008b18 <HAL_RCC_ClockConfig+0x160>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008af8:	4c29      	ldr	r4, [pc, #164]	; (8008ba0 <HAL_RCC_ClockConfig+0x1e8>)
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	42ab      	cmp	r3, r5
 8008b02:	d839      	bhi.n	8008b78 <HAL_RCC_ClockConfig+0x1c0>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008b04:	f7ff fc74 	bl	80083f0 <HAL_RCC_GetHCLKFreq>
 8008b08:	4b26      	ldr	r3, [pc, #152]	; (8008ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8008b0a:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8008b0c:	f7fe fe48 	bl	80077a0 <HAL_GetTickPrio>
}
 8008b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8008b14:	f7fe be00 	b.w	8007718 <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b18:	6863      	ldr	r3, [r4, #4]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d103      	bne.n	8008b26 <HAL_RCC_ClockConfig+0x16e>
      if (LL_RCC_HSE_IsReady() == 0U)
 8008b1e:	f7ff fb77 	bl	8008210 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8008b22:	b940      	cbnz	r0, 8008b36 <HAL_RCC_ClockConfig+0x17e>
 8008b24:	e74d      	b.n	80089c2 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d11f      	bne.n	8008b6a <HAL_RCC_ClockConfig+0x1b2>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	019b      	lsls	r3, r3, #6
 8008b32:	f57f af46 	bpl.w	80089c2 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008b36:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8008b3a:	6862      	ldr	r2, [r4, #4]
 8008b3c:	68b3      	ldr	r3, [r6, #8]
 8008b3e:	f023 0303 	bic.w	r3, r3, #3
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008b46:	f7fe fe25 	bl	8007794 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b4a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8008b4e:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008b50:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	f003 030c 	and.w	r3, r3, #12
 8008b58:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008b5c:	d0cc      	beq.n	8008af8 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b5e:	f7fe fe19 	bl	8007794 <HAL_GetTick>
 8008b62:	1bc0      	subs	r0, r0, r7
 8008b64:	4540      	cmp	r0, r8
 8008b66:	d9f3      	bls.n	8008b50 <HAL_RCC_ClockConfig+0x198>
 8008b68:	e75d      	b.n	8008a26 <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008b6a:	b913      	cbnz	r3, 8008b72 <HAL_RCC_ClockConfig+0x1ba>
      if (LL_RCC_MSI_IsReady() == 0U)
 8008b6c:	f7ff fb63 	bl	8008236 <LL_RCC_MSI_IsReady>
 8008b70:	e7d7      	b.n	8008b22 <HAL_RCC_ClockConfig+0x16a>
      if (LL_RCC_HSI_IsReady() == 0U)
 8008b72:	f7ff fb53 	bl	800821c <LL_RCC_HSI_IsReady>
 8008b76:	e7d4      	b.n	8008b22 <HAL_RCC_ClockConfig+0x16a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	f023 0307 	bic.w	r3, r3, #7
 8008b7e:	432b      	orrs	r3, r5
 8008b80:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8008b82:	f7fe fe07 	bl	8007794 <HAL_GetTick>
 8008b86:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	f003 0307 	and.w	r3, r3, #7
 8008b8e:	42ab      	cmp	r3, r5
 8008b90:	d0b8      	beq.n	8008b04 <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008b92:	f7fe fdff 	bl	8007794 <HAL_GetTick>
 8008b96:	1b80      	subs	r0, r0, r6
 8008b98:	2802      	cmp	r0, #2
 8008b9a:	d9f5      	bls.n	8008b88 <HAL_RCC_ClockConfig+0x1d0>
 8008b9c:	e743      	b.n	8008a26 <HAL_RCC_ClockConfig+0x6e>
 8008b9e:	bf00      	nop
 8008ba0:	58004000 	.word	0x58004000
 8008ba4:	20001034 	.word	0x20001034

08008ba8 <HAL_RCC_GetPCLK1Freq>:
{
 8008ba8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008baa:	f7ff fc21 	bl	80083f0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bb2:	4a05      	ldr	r2, [pc, #20]	; (8008bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bbe:	f003 031f 	and.w	r3, r3, #31
}
 8008bc2:	40d8      	lsrs	r0, r3
 8008bc4:	bd08      	pop	{r3, pc}
 8008bc6:	bf00      	nop
 8008bc8:	0800add0 	.word	0x0800add0

08008bcc <HAL_RCC_GetPCLK2Freq>:
{
 8008bcc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008bce:	f7ff fc0f 	bl	80083f0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bd6:	4a05      	ldr	r2, [pc, #20]	; (8008bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008be2:	f003 031f 	and.w	r3, r3, #31
}
 8008be6:	40d8      	lsrs	r0, r3
 8008be8:	bd08      	pop	{r3, pc}
 8008bea:	bf00      	nop
 8008bec:	0800add0 	.word	0x0800add0

08008bf0 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bf4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8008bf8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8008bfc:	4770      	bx	lr

08008bfe <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c02:	0902      	lsrs	r2, r0, #4
 8008c04:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008c08:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8008c0c:	0100      	lsls	r0, r0, #4
 8008c0e:	ea23 0302 	bic.w	r3, r3, r2
 8008c12:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8008c16:	4318      	orrs	r0, r3
 8008c18:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8008c1c:	4770      	bx	lr

08008c1e <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c22:	6813      	ldr	r3, [r2, #0]
 8008c24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c28:	6013      	str	r3, [r2, #0]
}
 8008c2a:	4770      	bx	lr

08008c2c <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c30:	6813      	ldr	r3, [r2, #0]
 8008c32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c36:	6013      	str	r3, [r2, #0]
}
 8008c38:	4770      	bx	lr

08008c3a <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c3e:	6818      	ldr	r0, [r3, #0]
}
 8008c40:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8008c44:	4770      	bx	lr

08008c46 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008c48:	6805      	ldr	r5, [r0, #0]
 8008c4a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8008c4e:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008c50:	d00a      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008c52:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c58:	f000 80d9 	beq.w	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8008c5c:	f200 80c5 	bhi.w	8008dea <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 80db 	beq.w	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8008c66:	2501      	movs	r5, #1
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	0518      	lsls	r0, r3, #20
 8008c6c:	d515      	bpl.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x54>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008c6e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008c72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c74:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8008c78:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8008c7c:	42bb      	cmp	r3, r7
 8008c7e:	d00c      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008c80:	f7ff fab6 	bl	80081f0 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008c84:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008c88:	2f00      	cmp	r7, #0
 8008c8a:	f040 80fb 	bne.w	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8008c8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c94:	4313      	orrs	r3, r2
 8008c96:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	07da      	lsls	r2, r3, #31
 8008c9e:	d509      	bpl.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ca4:	69a0      	ldr	r0, [r4, #24]
 8008ca6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008caa:	f022 0203 	bic.w	r2, r2, #3
 8008cae:	4302      	orrs	r2, r0
 8008cb0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008cb4:	079f      	lsls	r7, r3, #30
 8008cb6:	d509      	bpl.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x86>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cbc:	69e0      	ldr	r0, [r4, #28]
 8008cbe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008cc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008cc6:	4302      	orrs	r2, r0
 8008cc8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008ccc:	06de      	lsls	r6, r3, #27
 8008cce:	d50c      	bpl.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cd0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008cd2:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8008cd6:	0c31      	lsrs	r1, r6, #16
 8008cd8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008cdc:	0409      	lsls	r1, r1, #16
 8008cde:	ea22 0201 	bic.w	r2, r2, r1
 8008ce2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008ce6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008cea:	0698      	lsls	r0, r3, #26
 8008cec:	d50c      	bpl.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cf0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8008cf4:	0c31      	lsrs	r1, r6, #16
 8008cf6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008cfa:	0409      	lsls	r1, r1, #16
 8008cfc:	ea22 0201 	bic.w	r2, r2, r1
 8008d00:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008d04:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d08:	0759      	lsls	r1, r3, #29
 8008d0a:	d502      	bpl.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d0c:	6a20      	ldr	r0, [r4, #32]
 8008d0e:	f7ff ff76 	bl	8008bfe <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	071a      	lsls	r2, r3, #28
 8008d16:	d502      	bpl.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d18:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d1a:	f7ff ff70 	bl	8008bfe <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	05db      	lsls	r3, r3, #23
 8008d22:	d511      	bpl.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008d2e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008d32:	430b      	orrs	r3, r1

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008d34:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8008d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008d3c:	f040 80ca 	bne.w	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008d40:	68d3      	ldr	r3, [r2, #12]
 8008d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d46:	60d3      	str	r3, [r2, #12]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d48:	6826      	ldr	r6, [r4, #0]
 8008d4a:	05b7      	lsls	r7, r6, #22
 8008d4c:	d51a      	bpl.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008d50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d58:	d003      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8008d5a:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8008d5e:	f040 80f1 	bne.w	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008d62:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8008d66:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8008d6a:	4311      	orrs	r1, r2

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d6c:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008d70:	bf08      	it	eq
 8008d72:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008d76:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8008d7a:	bf02      	ittt	eq
 8008d7c:	68d3      	ldreq	r3, [r2, #12]
 8008d7e:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8008d82:	60d3      	streq	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d84:	0570      	lsls	r0, r6, #21
 8008d86:	d511      	bpl.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x166>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008d8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008d92:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008d96:	430b      	orrs	r3, r1

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008d98:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008da0:	f040 80de 	bne.w	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008da4:	68d3      	ldr	r3, [r2, #12]
 8008da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008daa:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008dac:	6822      	ldr	r2, [r4, #0]
 8008dae:	04d1      	lsls	r1, r2, #19
 8008db0:	d509      	bpl.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x180>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008db6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008db8:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8008dbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008dc0:	4303      	orrs	r3, r0
 8008dc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008dc6:	0493      	lsls	r3, r2, #18
 8008dc8:	d50d      	bpl.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008dd0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8008dd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008dda:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8008ddc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	430b      	orrs	r3, r1
 8008de4:	6253      	str	r3, [r2, #36]	; 0x24
  }
#endif


  return status;
}
 8008de6:	4628      	mov	r0, r5
 8008de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->Sai1ClockSelection)
 8008dea:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df2:	f47f af38 	bne.w	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x20>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008dfc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e00:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008e04:	430b      	orrs	r3, r1
 8008e06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8008e0a:	2500      	movs	r5, #0
 8008e0c:	e72c      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x22>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e12:	68d3      	ldr	r3, [r2, #12]
 8008e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e18:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 8008e1a:	e7ec      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008e1c:	f7ff ff06 	bl	8008c2c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e20:	f7fe fcb8 	bl	8007794 <HAL_GetTick>
 8008e24:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e26:	f7ff ff08 	bl	8008c3a <LL_RCC_PLLSAI1_IsReady>
 8008e2a:	b9a0      	cbnz	r0, 8008e56 <HAL_RCCEx_PeriphCLKConfig+0x210>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e30:	6861      	ldr	r1, [r4, #4]
 8008e32:	6913      	ldr	r3, [r2, #16]
 8008e34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008e38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008e3c:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008e3e:	6913      	ldr	r3, [r2, #16]
 8008e40:	68a1      	ldr	r1, [r4, #8]
 8008e42:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8008e46:	430b      	orrs	r3, r1
 8008e48:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008e4a:	f7ff fee8 	bl	8008c1e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e4e:	f7fe fca1 	bl	8007794 <HAL_GetTick>
 8008e52:	4605      	mov	r5, r0

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e54:	e00b      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x228>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e56:	f7fe fc9d 	bl	8007794 <HAL_GetTick>
 8008e5a:	1b40      	subs	r0, r0, r5
 8008e5c:	2802      	cmp	r0, #2
 8008e5e:	d9e2      	bls.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
{
 8008e60:	2503      	movs	r5, #3
 8008e62:	e701      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e64:	f7fe fc96 	bl	8007794 <HAL_GetTick>
 8008e68:	1b40      	subs	r0, r0, r5
 8008e6a:	2802      	cmp	r0, #2
 8008e6c:	d8f8      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e6e:	f7ff fee4 	bl	8008c3a <LL_RCC_PLLSAI1_IsReady>
 8008e72:	2801      	cmp	r0, #1
 8008e74:	d1f6      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e7a:	6961      	ldr	r1, [r4, #20]
 8008e7c:	6913      	ldr	r3, [r2, #16]
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	6113      	str	r3, [r2, #16]
    if (ret == HAL_OK)
 8008e82:	e7b8      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008e84:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8008e88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e8c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008e90:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8008e94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e98:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008e9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ea2:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8008ea4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008ea8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008eac:	07d9      	lsls	r1, r3, #31
 8008eae:	f57f aef4 	bpl.w	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x54>
          tickstart = HAL_GetTick();
 8008eb2:	f7fe fc6f 	bl	8007794 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eb6:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8008eba:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8008ebc:	f7ff fe98 	bl	8008bf0 <LL_RCC_LSE_IsReady>
 8008ec0:	2801      	cmp	r0, #1
 8008ec2:	f43f aeea 	beq.w	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x54>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ec6:	f7fe fc65 	bl	8007794 <HAL_GetTick>
 8008eca:	1b80      	subs	r0, r0, r6
 8008ecc:	42b8      	cmp	r0, r7
 8008ece:	d9f5      	bls.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 8008ed0:	2503      	movs	r5, #3
 8008ed2:	e6e2      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x54>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008ed4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8008ed8:	f47f af36 	bne.w	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x102>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008edc:	f7ff fea6 	bl	8008c2c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ee0:	f7fe fc58 	bl	8007794 <HAL_GetTick>
 8008ee4:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008ee6:	f7ff fea8 	bl	8008c3a <LL_RCC_PLLSAI1_IsReady>
 8008eea:	b9a0      	cbnz	r0, 8008f16 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ef0:	6861      	ldr	r1, [r4, #4]
 8008ef2:	6913      	ldr	r3, [r2, #16]
 8008ef4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ef8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008efc:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008efe:	6913      	ldr	r3, [r2, #16]
 8008f00:	68e1      	ldr	r1, [r4, #12]
 8008f02:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008f06:	430b      	orrs	r3, r1
 8008f08:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008f0a:	f7ff fe88 	bl	8008c1e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f0e:	f7fe fc41 	bl	8007794 <HAL_GetTick>
 8008f12:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008f14:	e00b      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f16:	f7fe fc3d 	bl	8007794 <HAL_GetTick>
 8008f1a:	1b80      	subs	r0, r0, r6
 8008f1c:	2802      	cmp	r0, #2
 8008f1e:	d9e2      	bls.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
              ret = HAL_TIMEOUT;
 8008f20:	2503      	movs	r5, #3
 8008f22:	e711      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x102>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f24:	f7fe fc36 	bl	8007794 <HAL_GetTick>
 8008f28:	1b80      	subs	r0, r0, r6
 8008f2a:	2802      	cmp	r0, #2
 8008f2c:	d8f8      	bhi.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008f2e:	f7ff fe84 	bl	8008c3a <LL_RCC_PLLSAI1_IsReady>
 8008f32:	2801      	cmp	r0, #1
 8008f34:	d1f6      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f3a:	6961      	ldr	r1, [r4, #20]
 8008f3c:	6913      	ldr	r3, [r2, #16]
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	6113      	str	r3, [r2, #16]
    if (ret != HAL_OK)
 8008f42:	e701      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008f44:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8008f48:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8008f4c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008f50:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f54:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8008f58:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 8008f5c:	4301      	orrs	r1, r0
 8008f5e:	e705      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x126>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008f60:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8008f64:	f47f af22 	bne.w	8008dac <HAL_RCCEx_PeriphCLKConfig+0x166>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008f68:	f7ff fe60 	bl	8008c2c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f6c:	f7fe fc12 	bl	8007794 <HAL_GetTick>
 8008f70:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008f72:	f7ff fe62 	bl	8008c3a <LL_RCC_PLLSAI1_IsReady>
 8008f76:	b9a0      	cbnz	r0, 8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f7c:	6861      	ldr	r1, [r4, #4]
 8008f7e:	6913      	ldr	r3, [r2, #16]
 8008f80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008f84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008f88:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008f8a:	6913      	ldr	r3, [r2, #16]
 8008f8c:	6921      	ldr	r1, [r4, #16]
 8008f8e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008f92:	430b      	orrs	r3, r1
 8008f94:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008f96:	f7ff fe42 	bl	8008c1e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f9a:	f7fe fbfb 	bl	8007794 <HAL_GetTick>
 8008f9e:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008fa0:	e00b      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x374>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008fa2:	f7fe fbf7 	bl	8007794 <HAL_GetTick>
 8008fa6:	1b80      	subs	r0, r0, r6
 8008fa8:	2802      	cmp	r0, #2
 8008faa:	d9e2      	bls.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x32c>
              ret = HAL_TIMEOUT;
 8008fac:	2503      	movs	r5, #3
 8008fae:	e6fd      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008fb0:	f7fe fbf0 	bl	8007794 <HAL_GetTick>
 8008fb4:	1b80      	subs	r0, r0, r6
 8008fb6:	2802      	cmp	r0, #2
 8008fb8:	d8f8      	bhi.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x366>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008fba:	f7ff fe3e 	bl	8008c3a <LL_RCC_PLLSAI1_IsReady>
 8008fbe:	2801      	cmp	r0, #1
 8008fc0:	d1f6      	bne.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fc6:	6961      	ldr	r1, [r4, #20]
 8008fc8:	6913      	ldr	r3, [r2, #16]
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	6113      	str	r3, [r2, #16]
    if (ret != HAL_OK)
 8008fce:	e6ed      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x166>

08008fd0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008fd0:	6802      	ldr	r2, [r0, #0]
{
 8008fd2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008fd4:	68d3      	ldr	r3, [r2, #12]
 8008fd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fda:	60d3      	str	r3, [r2, #12]
{
 8008fdc:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 8008fde:	f7fe fbd9 	bl	8007794 <HAL_GetTick>
 8008fe2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	069b      	lsls	r3, r3, #26
 8008fea:	d501      	bpl.n	8008ff0 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8008fec:	2000      	movs	r0, #0
}
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ff0:	f7fe fbd0 	bl	8007794 <HAL_GetTick>
 8008ff4:	1b40      	subs	r0, r0, r5
 8008ff6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008ffa:	d9f3      	bls.n	8008fe4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8008ffc:	2003      	movs	r0, #3
 8008ffe:	e7f6      	b.n	8008fee <HAL_RTC_WaitForSynchro+0x1e>

08009000 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009000:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009002:	6803      	ldr	r3, [r0, #0]
 8009004:	68da      	ldr	r2, [r3, #12]
 8009006:	0652      	lsls	r2, r2, #25
{
 8009008:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800900a:	d501      	bpl.n	8009010 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800900c:	2000      	movs	r0, #0
}
 800900e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009014:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8009016:	f7fe fbbd 	bl	8007794 <HAL_GetTick>
 800901a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	065b      	lsls	r3, r3, #25
 8009022:	d4f3      	bmi.n	800900c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009024:	f7fe fbb6 	bl	8007794 <HAL_GetTick>
 8009028:	1b40      	subs	r0, r0, r5
 800902a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800902e:	d9f5      	bls.n	800901c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8009030:	2003      	movs	r0, #3
 8009032:	e7ec      	b.n	800900e <RTC_EnterInitMode+0xe>

08009034 <HAL_RTC_Init>:
{
 8009034:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8009036:	4604      	mov	r4, r0
 8009038:	b1d8      	cbz	r0, 8009072 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800903a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800903e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009042:	b91b      	cbnz	r3, 800904c <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8009044:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8009048:	f7fb f82d 	bl	80040a6 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800904c:	2302      	movs	r3, #2
 800904e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	22ca      	movs	r2, #202	; 0xca
 8009056:	625a      	str	r2, [r3, #36]	; 0x24
 8009058:	2253      	movs	r2, #83	; 0x53
 800905a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800905c:	4620      	mov	r0, r4
 800905e:	f7ff ffcf 	bl	8009000 <RTC_EnterInitMode>
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	4605      	mov	r5, r0
 8009066:	b130      	cbz	r0, 8009076 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009068:	22ff      	movs	r2, #255	; 0xff
 800906a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800906c:	2304      	movs	r3, #4
 800906e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 8009072:	2501      	movs	r5, #1
 8009074:	e038      	b.n	80090e8 <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009076:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009078:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800907a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800907e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009082:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009084:	6862      	ldr	r2, [r4, #4]
 8009086:	6899      	ldr	r1, [r3, #8]
 8009088:	4302      	orrs	r2, r0
 800908a:	69a0      	ldr	r0, [r4, #24]
 800908c:	4302      	orrs	r2, r0
 800908e:	430a      	orrs	r2, r1
 8009090:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009092:	68e2      	ldr	r2, [r4, #12]
 8009094:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800909a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800909c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80090a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090a8:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80090aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090ac:	f022 0203 	bic.w	r2, r2, #3
 80090b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80090b2:	69e2      	ldr	r2, [r4, #28]
 80090b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80090b6:	4302      	orrs	r2, r0
 80090b8:	430a      	orrs	r2, r1
 80090ba:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	069b      	lsls	r3, r3, #26
 80090c0:	d40c      	bmi.n	80090dc <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090c2:	4620      	mov	r0, r4
 80090c4:	f7ff ff84 	bl	8008fd0 <HAL_RTC_WaitForSynchro>
 80090c8:	b140      	cbz	r0, 80090dc <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	22ff      	movs	r2, #255	; 0xff
 80090ce:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80090d0:	2304      	movs	r3, #4
 80090d2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80090d6:	f884 5020 	strb.w	r5, [r4, #32]
        return HAL_ERROR;
 80090da:	e7ca      	b.n	8009072 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	22ff      	movs	r2, #255	; 0xff
 80090e0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80090e8:	4628      	mov	r0, r5
 80090ea:	bd38      	pop	{r3, r4, r5, pc}

080090ec <HAL_RTCEx_SetTamper_IT>:
  * @param hrtc RTC handle
  * @param sTamper Pointer to RTC Tamper.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)
{
 80090ec:	b530      	push	{r4, r5, lr}
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090ee:	f890 3020 	ldrb.w	r3, [r0, #32]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	f04f 0302 	mov.w	r3, #2
 80090f8:	d05f      	beq.n	80091ba <HAL_RTCEx_SetTamper_IT+0xce>
 80090fa:	2201      	movs	r2, #1
 80090fc:	f880 2020 	strb.w	r2, [r0, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009100:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Configure the tamper trigger */
  if(sTamper->Trigger != RTC_TAMPERTRIGGER_RISINGEDGE)
 8009104:	680a      	ldr	r2, [r1, #0]
 8009106:	688b      	ldr	r3, [r1, #8]
 8009108:	0054      	lsls	r4, r2, #1
 800910a:	b103      	cbz	r3, 800910e <HAL_RTCEx_SetTamper_IT+0x22>
  {
    sTamper->Trigger = (uint32_t)(sTamper->Tamper << 1U);
 800910c:	608c      	str	r4, [r1, #8]
  }

  if(sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 800910e:	68cb      	ldr	r3, [r1, #12]
 8009110:	b18b      	cbz	r3, 8009136 <HAL_RTCEx_SetTamper_IT+0x4a>
  { 
    sTamper->NoErase = 0U;
#if defined(RTC_TAMPER1_SUPPORT)
    if((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8009112:	f012 0301 	ands.w	r3, r2, #1
    {
      sTamper->NoErase |= RTC_TAMPCR_TAMP1NOERASE;
 8009116:	bf18      	it	ne
 8009118:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 800911c:	60cb      	str	r3, [r1, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 800911e:	0715      	lsls	r5, r2, #28
    {
      sTamper->NoErase |= RTC_TAMPCR_TAMP2NOERASE;
 8009120:	bf42      	ittt	mi
 8009122:	68cb      	ldrmi	r3, [r1, #12]
 8009124:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
 8009128:	60cb      	strmi	r3, [r1, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 800912a:	0693      	lsls	r3, r2, #26
    {
      sTamper->NoErase |= RTC_TAMPCR_TAMP3NOERASE;
 800912c:	bf42      	ittt	mi
 800912e:	68cb      	ldrmi	r3, [r1, #12]
 8009130:	f443 0300 	orrmi.w	r3, r3, #8388608	; 0x800000
 8009134:	60cb      	strmi	r3, [r1, #12]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  if(sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8009136:	690b      	ldr	r3, [r1, #16]
 8009138:	b18b      	cbz	r3, 800915e <HAL_RTCEx_SetTamper_IT+0x72>
  {
    sTamper->MaskFlag = 0U;
#if defined(RTC_TAMPER1_SUPPORT)
    if((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 800913a:	f012 0301 	ands.w	r3, r2, #1
    {
      sTamper->MaskFlag |= RTC_TAMPCR_TAMP1MF;
 800913e:	bf18      	it	ne
 8009140:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8009144:	610b      	str	r3, [r1, #16]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8009146:	0715      	lsls	r5, r2, #28
    {
      sTamper->MaskFlag |= RTC_TAMPCR_TAMP2MF;
 8009148:	bf42      	ittt	mi
 800914a:	690b      	ldrmi	r3, [r1, #16]
 800914c:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8009150:	610b      	strmi	r3, [r1, #16]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8009152:	0693      	lsls	r3, r2, #26
    {
      sTamper->MaskFlag |= RTC_TAMPCR_TAMP3MF;
 8009154:	bf42      	ittt	mi
 8009156:	690b      	ldrmi	r3, [r1, #16]
 8009158:	f043 7380 	orrmi.w	r3, r3, #16777216	; 0x1000000
 800915c:	610b      	strmi	r3, [r1, #16]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  /* Configure the RTC_TAMPCR register */    
  tmpreg = (uint32_t)((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Interrupt | (uint32_t)sTamper->Trigger  | (uint32_t)sTamper->NoErase |\
 800915e:	684b      	ldr	r3, [r1, #4]
 8009160:	688d      	ldr	r5, [r1, #8]
 8009162:	4313      	orrs	r3, r2
 8009164:	432b      	orrs	r3, r5
 8009166:	68cd      	ldr	r5, [r1, #12]
 8009168:	432b      	orrs	r3, r5
 800916a:	690d      	ldr	r5, [r1, #16]
 800916c:	432b      	orrs	r3, r5
            (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFrequency                                |\
 800916e:	694d      	ldr	r5, [r1, #20]
 8009170:	432b      	orrs	r3, r5
 8009172:	698d      	ldr	r5, [r1, #24]
 8009174:	432b      	orrs	r3, r5
 8009176:	69cd      	ldr	r5, [r1, #28]
 8009178:	432b      	orrs	r3, r5
            (uint32_t)sTamper->PrechargeDuration | (uint32_t)sTamper->TamperPullUp | (uint32_t)sTamper->TimeStampOnTamperDetection);
 800917a:	6a0d      	ldr	r5, [r1, #32]
  tmpreg = (uint32_t)((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Interrupt | (uint32_t)sTamper->Trigger  | (uint32_t)sTamper->NoErase |\
 800917c:	6a49      	ldr	r1, [r1, #36]	; 0x24
            (uint32_t)sTamper->PrechargeDuration | (uint32_t)sTamper->TamperPullUp | (uint32_t)sTamper->TimeStampOnTamperDetection);
 800917e:	432b      	orrs	r3, r5
  tmpreg = (uint32_t)((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Interrupt | (uint32_t)sTamper->Trigger  | (uint32_t)sTamper->NoErase |\
 8009180:	430b      	orrs	r3, r1

  hrtc->Instance->TAMPCR &= (uint32_t)~((uint32_t)sTamper->Tamper | (uint32_t)(sTamper->Tamper << 1) | RTC_TAMPCR_MASK);
 8009182:	6801      	ldr	r1, [r0, #0]
 8009184:	4322      	orrs	r2, r4
 8009186:	4c0e      	ldr	r4, [pc, #56]	; (80091c0 <HAL_RTCEx_SetTamper_IT+0xd4>)
 8009188:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800918a:	4314      	orrs	r4, r2
 800918c:	ea25 0404 	bic.w	r4, r5, r4
 8009190:	640c      	str	r4, [r1, #64]	; 0x40
  
  hrtc->Instance->TAMPCR |= tmpreg;
 8009192:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009194:	4313      	orrs	r3, r2
 8009196:	640b      	str	r3, [r1, #64]	; 0x40

  /* RTC Tamper Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 8009198:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <HAL_RTCEx_SetTamper_IT+0xd8>)
 800919a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800919e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80091a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80091ac:	601a      	str	r2, [r3, #0]

  hrtc->State = HAL_RTC_STATE_READY;
 80091ae:	2301      	movs	r3, #1
 80091b0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80091b4:	2300      	movs	r3, #0
 80091b6:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 80091ba:	4618      	mov	r0, r3

  return HAL_OK;
}
 80091bc:	bd30      	pop	{r4, r5, pc}
 80091be:	bf00      	nop
 80091c0:	01ffff84 	.word	0x01ffff84
 80091c4:	58000800 	.word	0x58000800

080091c8 <HAL_RTCEx_TimeStampEventCallback>:
 80091c8:	4770      	bx	lr

080091ca <HAL_RTCEx_Tamper1EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80091ca:	4770      	bx	lr

080091cc <HAL_RTCEx_Tamper3EventCallback>:
 80091cc:	4770      	bx	lr
	...

080091d0 <HAL_RTCEx_TamperTimeStampIRQHandler>:
  if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 80091d0:	6803      	ldr	r3, [r0, #0]
 80091d2:	689a      	ldr	r2, [r3, #8]
 80091d4:	0412      	lsls	r2, r2, #16
{ 
 80091d6:	b510      	push	{r4, lr}
 80091d8:	4604      	mov	r4, r0
  if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 80091da:	d50a      	bpl.n	80091f2 <HAL_RTCEx_TamperTimeStampIRQHandler+0x22>
    if(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	051b      	lsls	r3, r3, #20
 80091e0:	d507      	bpl.n	80091f2 <HAL_RTCEx_TamperTimeStampIRQHandler+0x22>
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 80091e2:	f7ff fff1 	bl	80091c8 <HAL_RTCEx_TimeStampEventCallback>
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80091e6:	6822      	ldr	r2, [r4, #0]
 80091e8:	68d3      	ldr	r3, [r2, #12]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	f463 6308 	orn	r3, r3, #2176	; 0x880
 80091f0:	60d3      	str	r3, [r2, #12]
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	4b1f      	ldr	r3, [pc, #124]	; (8009274 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa4>)
 80091f6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80091f8:	400b      	ands	r3, r1
 80091fa:	b15b      	cbz	r3, 8009214 <HAL_RTCEx_TamperTimeStampIRQHandler+0x44>
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 80091fc:	68d3      	ldr	r3, [r2, #12]
 80091fe:	0499      	lsls	r1, r3, #18
 8009200:	d508      	bpl.n	8009214 <HAL_RTCEx_TamperTimeStampIRQHandler+0x44>
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8009202:	4620      	mov	r0, r4
 8009204:	f7ff ffe1 	bl	80091ca <HAL_RTCEx_Tamper1EventCallback>
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	68d3      	ldr	r3, [r2, #12]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f463 5302 	orn	r3, r3, #8320	; 0x2080
 8009212:	60d3      	str	r3, [r2, #12]
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 8009214:	6822      	ldr	r2, [r4, #0]
 8009216:	4b18      	ldr	r3, [pc, #96]	; (8009278 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa8>)
 8009218:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800921a:	400b      	ands	r3, r1
 800921c:	b15b      	cbz	r3, 8009236 <HAL_RTCEx_TamperTimeStampIRQHandler+0x66>
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 800921e:	68d3      	ldr	r3, [r2, #12]
 8009220:	045a      	lsls	r2, r3, #17
 8009222:	d508      	bpl.n	8009236 <HAL_RTCEx_TamperTimeStampIRQHandler+0x66>
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 8009224:	4620      	mov	r0, r4
 8009226:	f7fb faef 	bl	8004808 <HAL_RTCEx_Tamper2EventCallback>
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 800922a:	6822      	ldr	r2, [r4, #0]
 800922c:	68d3      	ldr	r3, [r2, #12]
 800922e:	b2db      	uxtb	r3, r3
 8009230:	f463 4381 	orn	r3, r3, #16512	; 0x4080
 8009234:	60d3      	str	r3, [r2, #12]
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	4b10      	ldr	r3, [pc, #64]	; (800927c <HAL_RTCEx_TamperTimeStampIRQHandler+0xac>)
 800923a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800923c:	400b      	ands	r3, r1
 800923e:	b18b      	cbz	r3, 8009264 <HAL_RTCEx_TamperTimeStampIRQHandler+0x94>
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 8009240:	68d3      	ldr	r3, [r2, #12]
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	d50e      	bpl.n	8009264 <HAL_RTCEx_TamperTimeStampIRQHandler+0x94>
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 8009246:	4620      	mov	r0, r4
 8009248:	f7ff ffc0 	bl	80091cc <HAL_RTCEx_Tamper3EventCallback>
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 800924c:	6822      	ldr	r2, [r4, #0]
 800924e:	68d3      	ldr	r3, [r2, #12]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800925a:	f443 43fe 	orr.w	r3, r3, #32512	; 0x7f00
 800925e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8009262:	60d3      	str	r3, [r2, #12]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <HAL_RTCEx_TamperTimeStampIRQHandler+0xb0>)
 8009266:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800926a:	60da      	str	r2, [r3, #12]
  hrtc->State = HAL_RTC_STATE_READY;
 800926c:	2301      	movs	r3, #1
 800926e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8009272:	bd10      	pop	{r4, pc}
 8009274:	00010004 	.word	0x00010004
 8009278:	00080004 	.word	0x00080004
 800927c:	00400004 	.word	0x00400004
 8009280:	58000800 	.word	0x58000800

08009284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(LPUART1)
  if (UART_INSTANCE_LOWPOWER(huart))
 8009288:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800928a:	6921      	ldr	r1, [r4, #16]
 800928c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800928e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009290:	69c0      	ldr	r0, [r0, #28]
 8009292:	430a      	orrs	r2, r1
 8009294:	6961      	ldr	r1, [r4, #20]
 8009296:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009298:	4973      	ldr	r1, [pc, #460]	; (8009468 <UART_SetConfig+0x1e4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800929a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800929c:	4029      	ands	r1, r5
 800929e:	430a      	orrs	r2, r1
 80092a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	68e1      	ldr	r1, [r4, #12]
 80092a6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80092aa:	430a      	orrs	r2, r1
 80092ac:	605a      	str	r2, [r3, #4]
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092ae:	4a6f      	ldr	r2, [pc, #444]	; (800946c <UART_SetConfig+0x1e8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092b0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092b2:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092b4:	bf1c      	itt	ne
 80092b6:	6a22      	ldrne	r2, [r4, #32]
 80092b8:	4311      	orrne	r1, r2
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 80092c0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80092c4:	430a      	orrs	r2, r1
 80092c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80092cc:	f022 020f 	bic.w	r2, r2, #15
 80092d0:	430a      	orrs	r2, r1
 80092d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092d4:	4a66      	ldr	r2, [pc, #408]	; (8009470 <UART_SetConfig+0x1ec>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d118      	bne.n	800930c <UART_SetConfig+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80092da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	f200 8098 	bhi.w	800941e <UART_SetConfig+0x19a>
 80092ee:	4a61      	ldr	r2, [pc, #388]	; (8009474 <UART_SetConfig+0x1f0>)
 80092f0:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80092f6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80092fa:	d057      	beq.n	80093ac <UART_SetConfig+0x128>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092fc:	2b07      	cmp	r3, #7
 80092fe:	d816      	bhi.n	800932e <UART_SetConfig+0xaa>
 8009300:	e8df f003 	tbb	[pc, r3]
 8009304:	88158b83 	.word	0x88158b83
 8009308:	6f151515 	.word	0x6f151515
  UART_GETCLOCKSOURCE(huart, clocksource);
 800930c:	4a57      	ldr	r2, [pc, #348]	; (800946c <UART_SetConfig+0x1e8>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d10d      	bne.n	800932e <UART_SetConfig+0xaa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800931a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800931e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009322:	d01a      	beq.n	800935a <UART_SetConfig+0xd6>
 8009324:	d805      	bhi.n	8009332 <UART_SetConfig+0xae>
 8009326:	b153      	cbz	r3, 800933e <UART_SetConfig+0xba>
 8009328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800932c:	d012      	beq.n	8009354 <UART_SetConfig+0xd0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800932e:	2001      	movs	r0, #1
 8009330:	e009      	b.n	8009346 <UART_SetConfig+0xc2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009332:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009336:	d1fa      	bne.n	800932e <UART_SetConfig+0xaa>
 8009338:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800933c:	e00e      	b.n	800935c <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800933e:	f7ff fc33 	bl	8008ba8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009342:	b958      	cbnz	r0, 800935c <UART_SetConfig+0xd8>
 8009344:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8009346:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800934a:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800934c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800934e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8009352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8009354:	f7fe fffa 	bl	800834c <HAL_RCC_GetSysClockFreq>
        break;
 8009358:	e7f3      	b.n	8009342 <UART_SetConfig+0xbe>
        pclk = (uint32_t) HSI_VALUE;
 800935a:	4847      	ldr	r0, [pc, #284]	; (8009478 <UART_SetConfig+0x1f4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800935c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800935e:	4b45      	ldr	r3, [pc, #276]	; (8009474 <UART_SetConfig+0x1f0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009360:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009362:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009366:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800936a:	889a      	ldrh	r2, [r3, #4]
 800936c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009370:	4299      	cmp	r1, r3
 8009372:	d8dc      	bhi.n	800932e <UART_SetConfig+0xaa>
 8009374:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8009378:	d8d9      	bhi.n	800932e <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800937a:	2300      	movs	r3, #0
 800937c:	2100      	movs	r1, #0
 800937e:	f7fa fcaf 	bl	8003ce0 <__aeabi_uldivmod>
 8009382:	020f      	lsls	r7, r1, #8
 8009384:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8009388:	0206      	lsls	r6, r0, #8
 800938a:	0868      	lsrs	r0, r5, #1
 800938c:	1830      	adds	r0, r6, r0
 800938e:	462a      	mov	r2, r5
 8009390:	f04f 0300 	mov.w	r3, #0
 8009394:	f147 0100 	adc.w	r1, r7, #0
 8009398:	f7fa fca2 	bl	8003ce0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800939c:	4b37      	ldr	r3, [pc, #220]	; (800947c <UART_SetConfig+0x1f8>)
 800939e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d8c3      	bhi.n	800932e <UART_SetConfig+0xaa>
        huart->Instance->BRR = usartdiv;
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	60d8      	str	r0, [r3, #12]
 80093aa:	e7cb      	b.n	8009344 <UART_SetConfig+0xc0>
    switch (clocksource)
 80093ac:	2b07      	cmp	r3, #7
 80093ae:	d8be      	bhi.n	800932e <UART_SetConfig+0xaa>
 80093b0:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <UART_SetConfig+0x134>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	08009425 	.word	0x08009425
 80093bc:	080093df 	.word	0x080093df
 80093c0:	0800932f 	.word	0x0800932f
 80093c4:	080093d9 	.word	0x080093d9
 80093c8:	0800932f 	.word	0x0800932f
 80093cc:	0800932f 	.word	0x0800932f
 80093d0:	0800932f 	.word	0x0800932f
 80093d4:	0800942d 	.word	0x0800942d
        pclk = HAL_RCC_GetSysClockFreq();
 80093d8:	f7fe ffb8 	bl	800834c <HAL_RCC_GetSysClockFreq>
        break;
 80093dc:	e024      	b.n	8009428 <UART_SetConfig+0x1a4>
        pclk = (uint32_t) HSI_VALUE;
 80093de:	4826      	ldr	r0, [pc, #152]	; (8009478 <UART_SetConfig+0x1f4>)
 80093e0:	e024      	b.n	800942c <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80093e8:	4b22      	ldr	r3, [pc, #136]	; (8009474 <UART_SetConfig+0x1f0>)
 80093ea:	6862      	ldr	r2, [r4, #4]
 80093ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80093f0:	889b      	ldrh	r3, [r3, #4]
 80093f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80093f6:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 80093fa:	fbb0 f0f2 	udiv	r0, r0, r2
 80093fe:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009400:	f1a0 0210 	sub.w	r2, r0, #16
 8009404:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8009408:	e7cb      	b.n	80093a2 <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800940a:	f7ff fbdf 	bl	8008bcc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800940e:	2800      	cmp	r0, #0
 8009410:	d098      	beq.n	8009344 <UART_SetConfig+0xc0>
 8009412:	e7e8      	b.n	80093e6 <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetSysClockFreq();
 8009414:	f7fe ff9a 	bl	800834c <HAL_RCC_GetSysClockFreq>
        break;
 8009418:	e7f9      	b.n	800940e <UART_SetConfig+0x18a>
        pclk = (uint32_t) HSI_VALUE;
 800941a:	4817      	ldr	r0, [pc, #92]	; (8009478 <UART_SetConfig+0x1f4>)
 800941c:	e7e3      	b.n	80093e6 <UART_SetConfig+0x162>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800941e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009422:	d1f2      	bne.n	800940a <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009424:	f7ff fbd2 	bl	8008bcc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8009428:	2800      	cmp	r0, #0
 800942a:	d08b      	beq.n	8009344 <UART_SetConfig+0xc0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800942c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800942e:	4b11      	ldr	r3, [pc, #68]	; (8009474 <UART_SetConfig+0x1f0>)
 8009430:	6862      	ldr	r2, [r4, #4]
 8009432:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009436:	889b      	ldrh	r3, [r3, #4]
 8009438:	fbb0 f3f3 	udiv	r3, r0, r3
 800943c:	0850      	lsrs	r0, r2, #1
 800943e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8009442:	fbb0 f0f2 	udiv	r0, r0, r2
 8009446:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009448:	f1a3 0110 	sub.w	r1, r3, #16
 800944c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009450:	4291      	cmp	r1, r2
 8009452:	f63f af6c 	bhi.w	800932e <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009456:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 800945a:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800945c:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800945e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8009462:	4318      	orrs	r0, r3
 8009464:	60d0      	str	r0, [r2, #12]
 8009466:	e76d      	b.n	8009344 <UART_SetConfig+0xc0>
 8009468:	cfff69f3 	.word	0xcfff69f3
 800946c:	40008000 	.word	0x40008000
 8009470:	40013800 	.word	0x40013800
 8009474:	0800ae10 	.word	0x0800ae10
 8009478:	00f42400 	.word	0x00f42400
 800947c:	000ffcff 	.word	0x000ffcff

08009480 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009480:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009482:	07da      	lsls	r2, r3, #31
{
 8009484:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009486:	d506      	bpl.n	8009496 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009488:	6801      	ldr	r1, [r0, #0]
 800948a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800948c:	684a      	ldr	r2, [r1, #4]
 800948e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009492:	4322      	orrs	r2, r4
 8009494:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009496:	079c      	lsls	r4, r3, #30
 8009498:	d506      	bpl.n	80094a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800949a:	6801      	ldr	r1, [r0, #0]
 800949c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800949e:	684a      	ldr	r2, [r1, #4]
 80094a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80094a4:	4322      	orrs	r2, r4
 80094a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094a8:	0759      	lsls	r1, r3, #29
 80094aa:	d506      	bpl.n	80094ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094ac:	6801      	ldr	r1, [r0, #0]
 80094ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80094b0:	684a      	ldr	r2, [r1, #4]
 80094b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094b6:	4322      	orrs	r2, r4
 80094b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094ba:	071a      	lsls	r2, r3, #28
 80094bc:	d506      	bpl.n	80094cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094be:	6801      	ldr	r1, [r0, #0]
 80094c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80094c2:	684a      	ldr	r2, [r1, #4]
 80094c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094c8:	4322      	orrs	r2, r4
 80094ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094cc:	06dc      	lsls	r4, r3, #27
 80094ce:	d506      	bpl.n	80094de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094d0:	6801      	ldr	r1, [r0, #0]
 80094d2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80094d4:	688a      	ldr	r2, [r1, #8]
 80094d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094da:	4322      	orrs	r2, r4
 80094dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094de:	0699      	lsls	r1, r3, #26
 80094e0:	d506      	bpl.n	80094f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094e2:	6801      	ldr	r1, [r0, #0]
 80094e4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80094e6:	688a      	ldr	r2, [r1, #8]
 80094e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094ec:	4322      	orrs	r2, r4
 80094ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094f0:	065a      	lsls	r2, r3, #25
 80094f2:	d50f      	bpl.n	8009514 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094f4:	6801      	ldr	r1, [r0, #0]
 80094f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80094f8:	684a      	ldr	r2, [r1, #4]
 80094fa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80094fe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009500:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009504:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009506:	d105      	bne.n	8009514 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009508:	684a      	ldr	r2, [r1, #4]
 800950a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800950c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009510:	4322      	orrs	r2, r4
 8009512:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009514:	061b      	lsls	r3, r3, #24
 8009516:	d506      	bpl.n	8009526 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009518:	6802      	ldr	r2, [r0, #0]
 800951a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800951c:	6853      	ldr	r3, [r2, #4]
 800951e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009522:	430b      	orrs	r3, r1
 8009524:	6053      	str	r3, [r2, #4]
  }
}
 8009526:	bd10      	pop	{r4, pc}

08009528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009530:	4604      	mov	r4, r0
 8009532:	460e      	mov	r6, r1
 8009534:	4615      	mov	r5, r2
 8009536:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009538:	6822      	ldr	r2, [r4, #0]
 800953a:	69d3      	ldr	r3, [r2, #28]
 800953c:	ea36 0303 	bics.w	r3, r6, r3
 8009540:	bf0c      	ite	eq
 8009542:	2301      	moveq	r3, #1
 8009544:	2300      	movne	r3, #0
 8009546:	42ab      	cmp	r3, r5
 8009548:	d001      	beq.n	800954e <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800954a:	2000      	movs	r0, #0
 800954c:	e01c      	b.n	8009588 <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800954e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009552:	d0f2      	beq.n	800953a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009554:	f7fe f91e 	bl	8007794 <HAL_GetTick>
 8009558:	1bc0      	subs	r0, r0, r7
 800955a:	4540      	cmp	r0, r8
 800955c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800955e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009560:	d802      	bhi.n	8009568 <UART_WaitOnFlagUntilTimeout+0x40>
 8009562:	f1b8 0f00 	cmp.w	r8, #0
 8009566:	d111      	bne.n	800958c <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009568:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800956c:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956e:	6883      	ldr	r3, [r0, #8]
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009576:	2320      	movs	r3, #32
 8009578:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800957c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8009580:	2300      	movs	r3, #0
 8009582:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8009586:	2003      	movs	r0, #3
}
 8009588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800958c:	075a      	lsls	r2, r3, #29
 800958e:	d5d3      	bpl.n	8009538 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009590:	69c3      	ldr	r3, [r0, #28]
 8009592:	051b      	lsls	r3, r3, #20
 8009594:	d5d0      	bpl.n	8009538 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009596:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800959a:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800959c:	6803      	ldr	r3, [r0, #0]
 800959e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095a2:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a4:	6883      	ldr	r3, [r0, #8]
 80095a6:	f023 0301 	bic.w	r3, r3, #1
 80095aa:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80095ac:	2320      	movs	r3, #32
 80095ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80095b2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80095ba:	e7e1      	b.n	8009580 <UART_WaitOnFlagUntilTimeout+0x58>

080095bc <HAL_UART_Transmit>:
{
 80095bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80095c0:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80095c2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80095c6:	2b20      	cmp	r3, #32
{
 80095c8:	4604      	mov	r4, r0
 80095ca:	460e      	mov	r6, r1
 80095cc:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80095ce:	d150      	bne.n	8009672 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 80095d0:	2900      	cmp	r1, #0
 80095d2:	d04c      	beq.n	800966e <HAL_UART_Transmit+0xb2>
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	d04a      	beq.n	800966e <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80095d8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d048      	beq.n	8009672 <HAL_UART_Transmit+0xb6>
 80095e0:	2301      	movs	r3, #1
 80095e2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e6:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095e8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ea:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 80095f2:	f7fe f8cf 	bl	8007794 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095f6:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 80095f8:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095fc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8009600:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8009602:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009606:	d103      	bne.n	8009610 <HAL_UART_Transmit+0x54>
 8009608:	6922      	ldr	r2, [r4, #16]
 800960a:	b90a      	cbnz	r2, 8009610 <HAL_UART_Transmit+0x54>
 800960c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800960e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8009610:	2200      	movs	r2, #0
 8009612:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8009616:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800961a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800961e:	b292      	uxth	r2, r2
 8009620:	b942      	cbnz	r2, 8009634 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009622:	2140      	movs	r1, #64	; 0x40
 8009624:	4620      	mov	r0, r4
 8009626:	f7ff ff7f 	bl	8009528 <UART_WaitOnFlagUntilTimeout>
 800962a:	b958      	cbnz	r0, 8009644 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 800962c:	2320      	movs	r3, #32
 800962e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8009632:	e008      	b.n	8009646 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009634:	2200      	movs	r2, #0
 8009636:	2180      	movs	r1, #128	; 0x80
 8009638:	4620      	mov	r0, r4
 800963a:	9303      	str	r3, [sp, #12]
 800963c:	f7ff ff74 	bl	8009528 <UART_WaitOnFlagUntilTimeout>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	b118      	cbz	r0, 800964c <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 8009644:	2003      	movs	r0, #3
}
 8009646:	b004      	add	sp, #16
 8009648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 800964c:	6821      	ldr	r1, [r4, #0]
 800964e:	b95e      	cbnz	r6, 8009668 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009650:	f835 2b02 	ldrh.w	r2, [r5], #2
 8009654:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009658:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800965a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800965e:	3a01      	subs	r2, #1
 8009660:	b292      	uxth	r2, r2
 8009662:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8009666:	e7d6      	b.n	8009616 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009668:	f816 2b01 	ldrb.w	r2, [r6], #1
 800966c:	e7f4      	b.n	8009658 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 800966e:	2001      	movs	r0, #1
 8009670:	e7e9      	b.n	8009646 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8009672:	2002      	movs	r0, #2
 8009674:	e7e7      	b.n	8009646 <HAL_UART_Transmit+0x8a>

08009676 <HAL_UART_Receive>:
{
 8009676:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800967a:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800967c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009680:	2b20      	cmp	r3, #32
{
 8009682:	4604      	mov	r4, r0
 8009684:	460d      	mov	r5, r1
 8009686:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8009688:	d16a      	bne.n	8009760 <HAL_UART_Receive+0xea>
    if ((pData == NULL) || (Size == 0U))
 800968a:	2900      	cmp	r1, #0
 800968c:	d066      	beq.n	800975c <HAL_UART_Receive+0xe6>
 800968e:	2a00      	cmp	r2, #0
 8009690:	d064      	beq.n	800975c <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 8009692:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009696:	2b01      	cmp	r3, #1
 8009698:	d062      	beq.n	8009760 <HAL_UART_Receive+0xea>
 800969a:	2301      	movs	r3, #1
 800969c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a0:	f04f 0800 	mov.w	r8, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096a4:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a6:	f8c0 808c 	str.w	r8, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096aa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ae:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 80096b2:	f7fe f86f 	bl	8007794 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80096b6:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 80096b8:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 80096bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80096c0:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 80096c2:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 80096c6:	d11d      	bne.n	8009704 <HAL_UART_Receive+0x8e>
 80096c8:	6922      	ldr	r2, [r4, #16]
 80096ca:	b9ca      	cbnz	r2, 8009700 <HAL_UART_Receive+0x8a>
 80096cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80096d0:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 80096d8:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096dc:	d123      	bne.n	8009726 <HAL_UART_Receive+0xb0>
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	bb0b      	cbnz	r3, 8009726 <HAL_UART_Receive+0xb0>
 80096e2:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 80096e4:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 80096e6:	2300      	movs	r3, #0
 80096e8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 80096ec:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80096f0:	b290      	uxth	r0, r2
 80096f2:	b9d0      	cbnz	r0, 800972a <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 80096f4:	2320      	movs	r3, #32
 80096f6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80096fa:	b003      	add	sp, #12
 80096fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8009700:	22ff      	movs	r2, #255	; 0xff
 8009702:	e7e5      	b.n	80096d0 <HAL_UART_Receive+0x5a>
 8009704:	b923      	cbnz	r3, 8009710 <HAL_UART_Receive+0x9a>
 8009706:	6922      	ldr	r2, [r4, #16]
 8009708:	2a00      	cmp	r2, #0
 800970a:	d0f9      	beq.n	8009700 <HAL_UART_Receive+0x8a>
 800970c:	227f      	movs	r2, #127	; 0x7f
 800970e:	e7df      	b.n	80096d0 <HAL_UART_Receive+0x5a>
 8009710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009714:	d104      	bne.n	8009720 <HAL_UART_Receive+0xaa>
 8009716:	6922      	ldr	r2, [r4, #16]
 8009718:	2a00      	cmp	r2, #0
 800971a:	d0f7      	beq.n	800970c <HAL_UART_Receive+0x96>
 800971c:	223f      	movs	r2, #63	; 0x3f
 800971e:	e7d7      	b.n	80096d0 <HAL_UART_Receive+0x5a>
 8009720:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8009724:	e7d6      	b.n	80096d4 <HAL_UART_Receive+0x5e>
      pdata16bits = NULL;
 8009726:	2600      	movs	r6, #0
 8009728:	e7dd      	b.n	80096e6 <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800972a:	9700      	str	r7, [sp, #0]
 800972c:	464b      	mov	r3, r9
 800972e:	2200      	movs	r2, #0
 8009730:	2120      	movs	r1, #32
 8009732:	4620      	mov	r0, r4
 8009734:	f7ff fef8 	bl	8009528 <UART_WaitOnFlagUntilTimeout>
 8009738:	b9a0      	cbnz	r0, 8009764 <HAL_UART_Receive+0xee>
      if (pdata8bits == NULL)
 800973a:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 8009742:	b945      	cbnz	r5, 8009756 <HAL_UART_Receive+0xe0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009744:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8009748:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800974c:	3a01      	subs	r2, #1
 800974e:	b292      	uxth	r2, r2
 8009750:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8009754:	e7ca      	b.n	80096ec <HAL_UART_Receive+0x76>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009756:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 800975a:	e7f5      	b.n	8009748 <HAL_UART_Receive+0xd2>
      return  HAL_ERROR;
 800975c:	2001      	movs	r0, #1
 800975e:	e7cc      	b.n	80096fa <HAL_UART_Receive+0x84>
    return HAL_BUSY;
 8009760:	2002      	movs	r0, #2
 8009762:	e7ca      	b.n	80096fa <HAL_UART_Receive+0x84>
        return HAL_TIMEOUT;
 8009764:	2003      	movs	r0, #3
 8009766:	e7c8      	b.n	80096fa <HAL_UART_Receive+0x84>

08009768 <UART_CheckIdleState>:
{
 8009768:	b530      	push	{r4, r5, lr}
 800976a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976c:	2500      	movs	r5, #0
{
 800976e:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009770:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8009774:	f7fe f80e 	bl	8007794 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	6812      	ldr	r2, [r2, #0]
 800977c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800977e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009780:	d417      	bmi.n	80097b2 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009782:	6822      	ldr	r2, [r4, #0]
 8009784:	6812      	ldr	r2, [r2, #0]
 8009786:	0752      	lsls	r2, r2, #29
 8009788:	d509      	bpl.n	800979e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800978a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800978e:	9200      	str	r2, [sp, #0]
 8009790:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009794:	2200      	movs	r2, #0
 8009796:	4620      	mov	r0, r4
 8009798:	f7ff fec6 	bl	8009528 <UART_WaitOnFlagUntilTimeout>
 800979c:	b9b0      	cbnz	r0, 80097cc <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 800979e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097a0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80097a2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80097a6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80097aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ae:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 80097b0:	e00d      	b.n	80097ce <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097b2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80097b6:	9200      	str	r2, [sp, #0]
 80097b8:	9003      	str	r0, [sp, #12]
 80097ba:	462a      	mov	r2, r5
 80097bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097c0:	4620      	mov	r0, r4
 80097c2:	f7ff feb1 	bl	8009528 <UART_WaitOnFlagUntilTimeout>
 80097c6:	9b03      	ldr	r3, [sp, #12]
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d0da      	beq.n	8009782 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80097cc:	2003      	movs	r0, #3
}
 80097ce:	b005      	add	sp, #20
 80097d0:	bd30      	pop	{r4, r5, pc}

080097d2 <HAL_UART_Init>:
{
 80097d2:	b510      	push	{r4, lr}
  if (huart == NULL)
 80097d4:	4604      	mov	r4, r0
 80097d6:	b350      	cbz	r0, 800982e <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80097d8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80097dc:	b91b      	cbnz	r3, 80097e6 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80097de:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80097e2:	f7fa fc62 	bl	80040aa <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80097e6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80097e8:	2324      	movs	r3, #36	; 0x24
 80097ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80097ee:	6813      	ldr	r3, [r2, #0]
 80097f0:	f023 0301 	bic.w	r3, r3, #1
 80097f4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097f6:	4620      	mov	r0, r4
 80097f8:	f7ff fd44 	bl	8009284 <UART_SetConfig>
 80097fc:	2801      	cmp	r0, #1
 80097fe:	d016      	beq.n	800982e <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009800:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009802:	b113      	cbz	r3, 800980a <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8009804:	4620      	mov	r0, r4
 8009806:	f7ff fe3b 	bl	8009480 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800981a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8009822:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8009824:	601a      	str	r2, [r3, #0]
}
 8009826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800982a:	f7ff bf9d 	b.w	8009768 <UART_CheckIdleState>
}
 800982e:	2001      	movs	r0, #1
 8009830:	bd10      	pop	{r4, pc}
	...

08009834 <__errno>:
 8009834:	4b01      	ldr	r3, [pc, #4]	; (800983c <__errno+0x8>)
 8009836:	6818      	ldr	r0, [r3, #0]
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	20001040 	.word	0x20001040

08009840 <__libc_init_array>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4d0d      	ldr	r5, [pc, #52]	; (8009878 <__libc_init_array+0x38>)
 8009844:	4c0d      	ldr	r4, [pc, #52]	; (800987c <__libc_init_array+0x3c>)
 8009846:	1b64      	subs	r4, r4, r5
 8009848:	10a4      	asrs	r4, r4, #2
 800984a:	2600      	movs	r6, #0
 800984c:	42a6      	cmp	r6, r4
 800984e:	d109      	bne.n	8009864 <__libc_init_array+0x24>
 8009850:	4d0b      	ldr	r5, [pc, #44]	; (8009880 <__libc_init_array+0x40>)
 8009852:	4c0c      	ldr	r4, [pc, #48]	; (8009884 <__libc_init_array+0x44>)
 8009854:	f001 f934 	bl	800aac0 <_init>
 8009858:	1b64      	subs	r4, r4, r5
 800985a:	10a4      	asrs	r4, r4, #2
 800985c:	2600      	movs	r6, #0
 800985e:	42a6      	cmp	r6, r4
 8009860:	d105      	bne.n	800986e <__libc_init_array+0x2e>
 8009862:	bd70      	pop	{r4, r5, r6, pc}
 8009864:	f855 3b04 	ldr.w	r3, [r5], #4
 8009868:	4798      	blx	r3
 800986a:	3601      	adds	r6, #1
 800986c:	e7ee      	b.n	800984c <__libc_init_array+0xc>
 800986e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009872:	4798      	blx	r3
 8009874:	3601      	adds	r6, #1
 8009876:	e7f2      	b.n	800985e <__libc_init_array+0x1e>
 8009878:	0800be40 	.word	0x0800be40
 800987c:	0800be40 	.word	0x0800be40
 8009880:	0800be40 	.word	0x0800be40
 8009884:	0800be44 	.word	0x0800be44

08009888 <memcmp>:
 8009888:	b530      	push	{r4, r5, lr}
 800988a:	3901      	subs	r1, #1
 800988c:	2400      	movs	r4, #0
 800988e:	42a2      	cmp	r2, r4
 8009890:	d101      	bne.n	8009896 <memcmp+0xe>
 8009892:	2000      	movs	r0, #0
 8009894:	e005      	b.n	80098a2 <memcmp+0x1a>
 8009896:	5d03      	ldrb	r3, [r0, r4]
 8009898:	3401      	adds	r4, #1
 800989a:	5d0d      	ldrb	r5, [r1, r4]
 800989c:	42ab      	cmp	r3, r5
 800989e:	d0f6      	beq.n	800988e <memcmp+0x6>
 80098a0:	1b58      	subs	r0, r3, r5
 80098a2:	bd30      	pop	{r4, r5, pc}

080098a4 <memcpy>:
 80098a4:	440a      	add	r2, r1
 80098a6:	4291      	cmp	r1, r2
 80098a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80098ac:	d100      	bne.n	80098b0 <memcpy+0xc>
 80098ae:	4770      	bx	lr
 80098b0:	b510      	push	{r4, lr}
 80098b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ba:	4291      	cmp	r1, r2
 80098bc:	d1f9      	bne.n	80098b2 <memcpy+0xe>
 80098be:	bd10      	pop	{r4, pc}

080098c0 <memset>:
 80098c0:	4402      	add	r2, r0
 80098c2:	4603      	mov	r3, r0
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d100      	bne.n	80098ca <memset+0xa>
 80098c8:	4770      	bx	lr
 80098ca:	f803 1b01 	strb.w	r1, [r3], #1
 80098ce:	e7f9      	b.n	80098c4 <memset+0x4>

080098d0 <iprintf>:
 80098d0:	b40f      	push	{r0, r1, r2, r3}
 80098d2:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <iprintf+0x2c>)
 80098d4:	b513      	push	{r0, r1, r4, lr}
 80098d6:	681c      	ldr	r4, [r3, #0]
 80098d8:	b124      	cbz	r4, 80098e4 <iprintf+0x14>
 80098da:	69a3      	ldr	r3, [r4, #24]
 80098dc:	b913      	cbnz	r3, 80098e4 <iprintf+0x14>
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 fb3a 	bl	8009f58 <__sinit>
 80098e4:	ab05      	add	r3, sp, #20
 80098e6:	9a04      	ldr	r2, [sp, #16]
 80098e8:	68a1      	ldr	r1, [r4, #8]
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 fd13 	bl	800a318 <_vfiprintf_r>
 80098f2:	b002      	add	sp, #8
 80098f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f8:	b004      	add	sp, #16
 80098fa:	4770      	bx	lr
 80098fc:	20001040 	.word	0x20001040

08009900 <putchar>:
 8009900:	4b09      	ldr	r3, [pc, #36]	; (8009928 <putchar+0x28>)
 8009902:	b513      	push	{r0, r1, r4, lr}
 8009904:	681c      	ldr	r4, [r3, #0]
 8009906:	4601      	mov	r1, r0
 8009908:	b134      	cbz	r4, 8009918 <putchar+0x18>
 800990a:	69a3      	ldr	r3, [r4, #24]
 800990c:	b923      	cbnz	r3, 8009918 <putchar+0x18>
 800990e:	9001      	str	r0, [sp, #4]
 8009910:	4620      	mov	r0, r4
 8009912:	f000 fb21 	bl	8009f58 <__sinit>
 8009916:	9901      	ldr	r1, [sp, #4]
 8009918:	68a2      	ldr	r2, [r4, #8]
 800991a:	4620      	mov	r0, r4
 800991c:	b002      	add	sp, #8
 800991e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009922:	f000 bfbd 	b.w	800a8a0 <_putc_r>
 8009926:	bf00      	nop
 8009928:	20001040 	.word	0x20001040

0800992c <_puts_r>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	460e      	mov	r6, r1
 8009930:	4605      	mov	r5, r0
 8009932:	b118      	cbz	r0, 800993c <_puts_r+0x10>
 8009934:	6983      	ldr	r3, [r0, #24]
 8009936:	b90b      	cbnz	r3, 800993c <_puts_r+0x10>
 8009938:	f000 fb0e 	bl	8009f58 <__sinit>
 800993c:	69ab      	ldr	r3, [r5, #24]
 800993e:	68ac      	ldr	r4, [r5, #8]
 8009940:	b913      	cbnz	r3, 8009948 <_puts_r+0x1c>
 8009942:	4628      	mov	r0, r5
 8009944:	f000 fb08 	bl	8009f58 <__sinit>
 8009948:	4b2c      	ldr	r3, [pc, #176]	; (80099fc <_puts_r+0xd0>)
 800994a:	429c      	cmp	r4, r3
 800994c:	d120      	bne.n	8009990 <_puts_r+0x64>
 800994e:	686c      	ldr	r4, [r5, #4]
 8009950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009952:	07db      	lsls	r3, r3, #31
 8009954:	d405      	bmi.n	8009962 <_puts_r+0x36>
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	0598      	lsls	r0, r3, #22
 800995a:	d402      	bmi.n	8009962 <_puts_r+0x36>
 800995c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800995e:	f000 fb99 	bl	800a094 <__retarget_lock_acquire_recursive>
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	0719      	lsls	r1, r3, #28
 8009966:	d51d      	bpl.n	80099a4 <_puts_r+0x78>
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	b1db      	cbz	r3, 80099a4 <_puts_r+0x78>
 800996c:	3e01      	subs	r6, #1
 800996e:	68a3      	ldr	r3, [r4, #8]
 8009970:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009974:	3b01      	subs	r3, #1
 8009976:	60a3      	str	r3, [r4, #8]
 8009978:	bb39      	cbnz	r1, 80099ca <_puts_r+0x9e>
 800997a:	2b00      	cmp	r3, #0
 800997c:	da38      	bge.n	80099f0 <_puts_r+0xc4>
 800997e:	4622      	mov	r2, r4
 8009980:	210a      	movs	r1, #10
 8009982:	4628      	mov	r0, r5
 8009984:	f000 f90e 	bl	8009ba4 <__swbuf_r>
 8009988:	3001      	adds	r0, #1
 800998a:	d011      	beq.n	80099b0 <_puts_r+0x84>
 800998c:	250a      	movs	r5, #10
 800998e:	e011      	b.n	80099b4 <_puts_r+0x88>
 8009990:	4b1b      	ldr	r3, [pc, #108]	; (8009a00 <_puts_r+0xd4>)
 8009992:	429c      	cmp	r4, r3
 8009994:	d101      	bne.n	800999a <_puts_r+0x6e>
 8009996:	68ac      	ldr	r4, [r5, #8]
 8009998:	e7da      	b.n	8009950 <_puts_r+0x24>
 800999a:	4b1a      	ldr	r3, [pc, #104]	; (8009a04 <_puts_r+0xd8>)
 800999c:	429c      	cmp	r4, r3
 800999e:	bf08      	it	eq
 80099a0:	68ec      	ldreq	r4, [r5, #12]
 80099a2:	e7d5      	b.n	8009950 <_puts_r+0x24>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f94e 	bl	8009c48 <__swsetup_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d0dd      	beq.n	800996c <_puts_r+0x40>
 80099b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80099b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099b6:	07da      	lsls	r2, r3, #31
 80099b8:	d405      	bmi.n	80099c6 <_puts_r+0x9a>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	059b      	lsls	r3, r3, #22
 80099be:	d402      	bmi.n	80099c6 <_puts_r+0x9a>
 80099c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c2:	f000 fb68 	bl	800a096 <__retarget_lock_release_recursive>
 80099c6:	4628      	mov	r0, r5
 80099c8:	bd70      	pop	{r4, r5, r6, pc}
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	da04      	bge.n	80099d8 <_puts_r+0xac>
 80099ce:	69a2      	ldr	r2, [r4, #24]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	dc06      	bgt.n	80099e2 <_puts_r+0xb6>
 80099d4:	290a      	cmp	r1, #10
 80099d6:	d004      	beq.n	80099e2 <_puts_r+0xb6>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	6022      	str	r2, [r4, #0]
 80099de:	7019      	strb	r1, [r3, #0]
 80099e0:	e7c5      	b.n	800996e <_puts_r+0x42>
 80099e2:	4622      	mov	r2, r4
 80099e4:	4628      	mov	r0, r5
 80099e6:	f000 f8dd 	bl	8009ba4 <__swbuf_r>
 80099ea:	3001      	adds	r0, #1
 80099ec:	d1bf      	bne.n	800996e <_puts_r+0x42>
 80099ee:	e7df      	b.n	80099b0 <_puts_r+0x84>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	250a      	movs	r5, #10
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	6022      	str	r2, [r4, #0]
 80099f8:	701d      	strb	r5, [r3, #0]
 80099fa:	e7db      	b.n	80099b4 <_puts_r+0x88>
 80099fc:	0800bdc0 	.word	0x0800bdc0
 8009a00:	0800bde0 	.word	0x0800bde0
 8009a04:	0800bda0 	.word	0x0800bda0

08009a08 <puts>:
 8009a08:	4b02      	ldr	r3, [pc, #8]	; (8009a14 <puts+0xc>)
 8009a0a:	4601      	mov	r1, r0
 8009a0c:	6818      	ldr	r0, [r3, #0]
 8009a0e:	f7ff bf8d 	b.w	800992c <_puts_r>
 8009a12:	bf00      	nop
 8009a14:	20001040 	.word	0x20001040

08009a18 <setvbuf>:
 8009a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	461d      	mov	r5, r3
 8009a1e:	4b5d      	ldr	r3, [pc, #372]	; (8009b94 <setvbuf+0x17c>)
 8009a20:	681f      	ldr	r7, [r3, #0]
 8009a22:	4604      	mov	r4, r0
 8009a24:	460e      	mov	r6, r1
 8009a26:	4690      	mov	r8, r2
 8009a28:	b127      	cbz	r7, 8009a34 <setvbuf+0x1c>
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	b913      	cbnz	r3, 8009a34 <setvbuf+0x1c>
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f000 fa92 	bl	8009f58 <__sinit>
 8009a34:	4b58      	ldr	r3, [pc, #352]	; (8009b98 <setvbuf+0x180>)
 8009a36:	429c      	cmp	r4, r3
 8009a38:	d167      	bne.n	8009b0a <setvbuf+0xf2>
 8009a3a:	687c      	ldr	r4, [r7, #4]
 8009a3c:	f1b8 0f02 	cmp.w	r8, #2
 8009a40:	d006      	beq.n	8009a50 <setvbuf+0x38>
 8009a42:	f1b8 0f01 	cmp.w	r8, #1
 8009a46:	f200 809f 	bhi.w	8009b88 <setvbuf+0x170>
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	f2c0 809c 	blt.w	8009b88 <setvbuf+0x170>
 8009a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a52:	07db      	lsls	r3, r3, #31
 8009a54:	d405      	bmi.n	8009a62 <setvbuf+0x4a>
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	0598      	lsls	r0, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <setvbuf+0x4a>
 8009a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5e:	f000 fb19 	bl	800a094 <__retarget_lock_acquire_recursive>
 8009a62:	4621      	mov	r1, r4
 8009a64:	4638      	mov	r0, r7
 8009a66:	f000 f9e3 	bl	8009e30 <_fflush_r>
 8009a6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a6c:	b141      	cbz	r1, 8009a80 <setvbuf+0x68>
 8009a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a72:	4299      	cmp	r1, r3
 8009a74:	d002      	beq.n	8009a7c <setvbuf+0x64>
 8009a76:	4638      	mov	r0, r7
 8009a78:	f000 fb7a 	bl	800a170 <_free_r>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	6363      	str	r3, [r4, #52]	; 0x34
 8009a80:	2300      	movs	r3, #0
 8009a82:	61a3      	str	r3, [r4, #24]
 8009a84:	6063      	str	r3, [r4, #4]
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	0619      	lsls	r1, r3, #24
 8009a8a:	d503      	bpl.n	8009a94 <setvbuf+0x7c>
 8009a8c:	6921      	ldr	r1, [r4, #16]
 8009a8e:	4638      	mov	r0, r7
 8009a90:	f000 fb6e 	bl	800a170 <_free_r>
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009a9a:	f023 0303 	bic.w	r3, r3, #3
 8009a9e:	f1b8 0f02 	cmp.w	r8, #2
 8009aa2:	81a3      	strh	r3, [r4, #12]
 8009aa4:	d06c      	beq.n	8009b80 <setvbuf+0x168>
 8009aa6:	ab01      	add	r3, sp, #4
 8009aa8:	466a      	mov	r2, sp
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4638      	mov	r0, r7
 8009aae:	f000 faf3 	bl	800a098 <__swhatbuf_r>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	4318      	orrs	r0, r3
 8009ab6:	81a0      	strh	r0, [r4, #12]
 8009ab8:	2d00      	cmp	r5, #0
 8009aba:	d130      	bne.n	8009b1e <setvbuf+0x106>
 8009abc:	9d00      	ldr	r5, [sp, #0]
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f000 fb4e 	bl	800a160 <malloc>
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d155      	bne.n	8009b76 <setvbuf+0x15e>
 8009aca:	f8dd 9000 	ldr.w	r9, [sp]
 8009ace:	45a9      	cmp	r9, r5
 8009ad0:	d14a      	bne.n	8009b68 <setvbuf+0x150>
 8009ad2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	60a2      	str	r2, [r4, #8]
 8009ada:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009ade:	6022      	str	r2, [r4, #0]
 8009ae0:	6122      	str	r2, [r4, #16]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae8:	6162      	str	r2, [r4, #20]
 8009aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009aec:	f043 0302 	orr.w	r3, r3, #2
 8009af0:	07d2      	lsls	r2, r2, #31
 8009af2:	81a3      	strh	r3, [r4, #12]
 8009af4:	d405      	bmi.n	8009b02 <setvbuf+0xea>
 8009af6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009afa:	d102      	bne.n	8009b02 <setvbuf+0xea>
 8009afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009afe:	f000 faca 	bl	800a096 <__retarget_lock_release_recursive>
 8009b02:	4628      	mov	r0, r5
 8009b04:	b003      	add	sp, #12
 8009b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b0a:	4b24      	ldr	r3, [pc, #144]	; (8009b9c <setvbuf+0x184>)
 8009b0c:	429c      	cmp	r4, r3
 8009b0e:	d101      	bne.n	8009b14 <setvbuf+0xfc>
 8009b10:	68bc      	ldr	r4, [r7, #8]
 8009b12:	e793      	b.n	8009a3c <setvbuf+0x24>
 8009b14:	4b22      	ldr	r3, [pc, #136]	; (8009ba0 <setvbuf+0x188>)
 8009b16:	429c      	cmp	r4, r3
 8009b18:	bf08      	it	eq
 8009b1a:	68fc      	ldreq	r4, [r7, #12]
 8009b1c:	e78e      	b.n	8009a3c <setvbuf+0x24>
 8009b1e:	2e00      	cmp	r6, #0
 8009b20:	d0cd      	beq.n	8009abe <setvbuf+0xa6>
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	b913      	cbnz	r3, 8009b2c <setvbuf+0x114>
 8009b26:	4638      	mov	r0, r7
 8009b28:	f000 fa16 	bl	8009f58 <__sinit>
 8009b2c:	f1b8 0f01 	cmp.w	r8, #1
 8009b30:	bf08      	it	eq
 8009b32:	89a3      	ldrheq	r3, [r4, #12]
 8009b34:	6026      	str	r6, [r4, #0]
 8009b36:	bf04      	itt	eq
 8009b38:	f043 0301 	orreq.w	r3, r3, #1
 8009b3c:	81a3      	strheq	r3, [r4, #12]
 8009b3e:	89a2      	ldrh	r2, [r4, #12]
 8009b40:	f012 0308 	ands.w	r3, r2, #8
 8009b44:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009b48:	d01c      	beq.n	8009b84 <setvbuf+0x16c>
 8009b4a:	07d3      	lsls	r3, r2, #31
 8009b4c:	bf41      	itttt	mi
 8009b4e:	2300      	movmi	r3, #0
 8009b50:	426d      	negmi	r5, r5
 8009b52:	60a3      	strmi	r3, [r4, #8]
 8009b54:	61a5      	strmi	r5, [r4, #24]
 8009b56:	bf58      	it	pl
 8009b58:	60a5      	strpl	r5, [r4, #8]
 8009b5a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009b5c:	f015 0501 	ands.w	r5, r5, #1
 8009b60:	d115      	bne.n	8009b8e <setvbuf+0x176>
 8009b62:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009b66:	e7c8      	b.n	8009afa <setvbuf+0xe2>
 8009b68:	4648      	mov	r0, r9
 8009b6a:	f000 faf9 	bl	800a160 <malloc>
 8009b6e:	4606      	mov	r6, r0
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0ae      	beq.n	8009ad2 <setvbuf+0xba>
 8009b74:	464d      	mov	r5, r9
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	e7d0      	b.n	8009b22 <setvbuf+0x10a>
 8009b80:	2500      	movs	r5, #0
 8009b82:	e7a8      	b.n	8009ad6 <setvbuf+0xbe>
 8009b84:	60a3      	str	r3, [r4, #8]
 8009b86:	e7e8      	b.n	8009b5a <setvbuf+0x142>
 8009b88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009b8c:	e7b9      	b.n	8009b02 <setvbuf+0xea>
 8009b8e:	2500      	movs	r5, #0
 8009b90:	e7b7      	b.n	8009b02 <setvbuf+0xea>
 8009b92:	bf00      	nop
 8009b94:	20001040 	.word	0x20001040
 8009b98:	0800bdc0 	.word	0x0800bdc0
 8009b9c:	0800bde0 	.word	0x0800bde0
 8009ba0:	0800bda0 	.word	0x0800bda0

08009ba4 <__swbuf_r>:
 8009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba6:	460e      	mov	r6, r1
 8009ba8:	4614      	mov	r4, r2
 8009baa:	4605      	mov	r5, r0
 8009bac:	b118      	cbz	r0, 8009bb6 <__swbuf_r+0x12>
 8009bae:	6983      	ldr	r3, [r0, #24]
 8009bb0:	b90b      	cbnz	r3, 8009bb6 <__swbuf_r+0x12>
 8009bb2:	f000 f9d1 	bl	8009f58 <__sinit>
 8009bb6:	4b21      	ldr	r3, [pc, #132]	; (8009c3c <__swbuf_r+0x98>)
 8009bb8:	429c      	cmp	r4, r3
 8009bba:	d12b      	bne.n	8009c14 <__swbuf_r+0x70>
 8009bbc:	686c      	ldr	r4, [r5, #4]
 8009bbe:	69a3      	ldr	r3, [r4, #24]
 8009bc0:	60a3      	str	r3, [r4, #8]
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	071a      	lsls	r2, r3, #28
 8009bc6:	d52f      	bpl.n	8009c28 <__swbuf_r+0x84>
 8009bc8:	6923      	ldr	r3, [r4, #16]
 8009bca:	b36b      	cbz	r3, 8009c28 <__swbuf_r+0x84>
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	6820      	ldr	r0, [r4, #0]
 8009bd0:	1ac0      	subs	r0, r0, r3
 8009bd2:	6963      	ldr	r3, [r4, #20]
 8009bd4:	b2f6      	uxtb	r6, r6
 8009bd6:	4283      	cmp	r3, r0
 8009bd8:	4637      	mov	r7, r6
 8009bda:	dc04      	bgt.n	8009be6 <__swbuf_r+0x42>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4628      	mov	r0, r5
 8009be0:	f000 f926 	bl	8009e30 <_fflush_r>
 8009be4:	bb30      	cbnz	r0, 8009c34 <__swbuf_r+0x90>
 8009be6:	68a3      	ldr	r3, [r4, #8]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	60a3      	str	r3, [r4, #8]
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	6022      	str	r2, [r4, #0]
 8009bf2:	701e      	strb	r6, [r3, #0]
 8009bf4:	6963      	ldr	r3, [r4, #20]
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	4283      	cmp	r3, r0
 8009bfa:	d004      	beq.n	8009c06 <__swbuf_r+0x62>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	07db      	lsls	r3, r3, #31
 8009c00:	d506      	bpl.n	8009c10 <__swbuf_r+0x6c>
 8009c02:	2e0a      	cmp	r6, #10
 8009c04:	d104      	bne.n	8009c10 <__swbuf_r+0x6c>
 8009c06:	4621      	mov	r1, r4
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f000 f911 	bl	8009e30 <_fflush_r>
 8009c0e:	b988      	cbnz	r0, 8009c34 <__swbuf_r+0x90>
 8009c10:	4638      	mov	r0, r7
 8009c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c14:	4b0a      	ldr	r3, [pc, #40]	; (8009c40 <__swbuf_r+0x9c>)
 8009c16:	429c      	cmp	r4, r3
 8009c18:	d101      	bne.n	8009c1e <__swbuf_r+0x7a>
 8009c1a:	68ac      	ldr	r4, [r5, #8]
 8009c1c:	e7cf      	b.n	8009bbe <__swbuf_r+0x1a>
 8009c1e:	4b09      	ldr	r3, [pc, #36]	; (8009c44 <__swbuf_r+0xa0>)
 8009c20:	429c      	cmp	r4, r3
 8009c22:	bf08      	it	eq
 8009c24:	68ec      	ldreq	r4, [r5, #12]
 8009c26:	e7ca      	b.n	8009bbe <__swbuf_r+0x1a>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f000 f80c 	bl	8009c48 <__swsetup_r>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d0cb      	beq.n	8009bcc <__swbuf_r+0x28>
 8009c34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c38:	e7ea      	b.n	8009c10 <__swbuf_r+0x6c>
 8009c3a:	bf00      	nop
 8009c3c:	0800bdc0 	.word	0x0800bdc0
 8009c40:	0800bde0 	.word	0x0800bde0
 8009c44:	0800bda0 	.word	0x0800bda0

08009c48 <__swsetup_r>:
 8009c48:	4b32      	ldr	r3, [pc, #200]	; (8009d14 <__swsetup_r+0xcc>)
 8009c4a:	b570      	push	{r4, r5, r6, lr}
 8009c4c:	681d      	ldr	r5, [r3, #0]
 8009c4e:	4606      	mov	r6, r0
 8009c50:	460c      	mov	r4, r1
 8009c52:	b125      	cbz	r5, 8009c5e <__swsetup_r+0x16>
 8009c54:	69ab      	ldr	r3, [r5, #24]
 8009c56:	b913      	cbnz	r3, 8009c5e <__swsetup_r+0x16>
 8009c58:	4628      	mov	r0, r5
 8009c5a:	f000 f97d 	bl	8009f58 <__sinit>
 8009c5e:	4b2e      	ldr	r3, [pc, #184]	; (8009d18 <__swsetup_r+0xd0>)
 8009c60:	429c      	cmp	r4, r3
 8009c62:	d10f      	bne.n	8009c84 <__swsetup_r+0x3c>
 8009c64:	686c      	ldr	r4, [r5, #4]
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c6c:	0719      	lsls	r1, r3, #28
 8009c6e:	d42c      	bmi.n	8009cca <__swsetup_r+0x82>
 8009c70:	06dd      	lsls	r5, r3, #27
 8009c72:	d411      	bmi.n	8009c98 <__swsetup_r+0x50>
 8009c74:	2309      	movs	r3, #9
 8009c76:	6033      	str	r3, [r6, #0]
 8009c78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c7c:	81a3      	strh	r3, [r4, #12]
 8009c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c82:	e03e      	b.n	8009d02 <__swsetup_r+0xba>
 8009c84:	4b25      	ldr	r3, [pc, #148]	; (8009d1c <__swsetup_r+0xd4>)
 8009c86:	429c      	cmp	r4, r3
 8009c88:	d101      	bne.n	8009c8e <__swsetup_r+0x46>
 8009c8a:	68ac      	ldr	r4, [r5, #8]
 8009c8c:	e7eb      	b.n	8009c66 <__swsetup_r+0x1e>
 8009c8e:	4b24      	ldr	r3, [pc, #144]	; (8009d20 <__swsetup_r+0xd8>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	bf08      	it	eq
 8009c94:	68ec      	ldreq	r4, [r5, #12]
 8009c96:	e7e6      	b.n	8009c66 <__swsetup_r+0x1e>
 8009c98:	0758      	lsls	r0, r3, #29
 8009c9a:	d512      	bpl.n	8009cc2 <__swsetup_r+0x7a>
 8009c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c9e:	b141      	cbz	r1, 8009cb2 <__swsetup_r+0x6a>
 8009ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ca4:	4299      	cmp	r1, r3
 8009ca6:	d002      	beq.n	8009cae <__swsetup_r+0x66>
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f000 fa61 	bl	800a170 <_free_r>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6363      	str	r3, [r4, #52]	; 0x34
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cb8:	81a3      	strh	r3, [r4, #12]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6063      	str	r3, [r4, #4]
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f043 0308 	orr.w	r3, r3, #8
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	6923      	ldr	r3, [r4, #16]
 8009ccc:	b94b      	cbnz	r3, 8009ce2 <__swsetup_r+0x9a>
 8009cce:	89a3      	ldrh	r3, [r4, #12]
 8009cd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cd8:	d003      	beq.n	8009ce2 <__swsetup_r+0x9a>
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f000 f9ff 	bl	800a0e0 <__smakebuf_r>
 8009ce2:	89a0      	ldrh	r0, [r4, #12]
 8009ce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ce8:	f010 0301 	ands.w	r3, r0, #1
 8009cec:	d00a      	beq.n	8009d04 <__swsetup_r+0xbc>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60a3      	str	r3, [r4, #8]
 8009cf2:	6963      	ldr	r3, [r4, #20]
 8009cf4:	425b      	negs	r3, r3
 8009cf6:	61a3      	str	r3, [r4, #24]
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	b943      	cbnz	r3, 8009d0e <__swsetup_r+0xc6>
 8009cfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d00:	d1ba      	bne.n	8009c78 <__swsetup_r+0x30>
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	0781      	lsls	r1, r0, #30
 8009d06:	bf58      	it	pl
 8009d08:	6963      	ldrpl	r3, [r4, #20]
 8009d0a:	60a3      	str	r3, [r4, #8]
 8009d0c:	e7f4      	b.n	8009cf8 <__swsetup_r+0xb0>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	e7f7      	b.n	8009d02 <__swsetup_r+0xba>
 8009d12:	bf00      	nop
 8009d14:	20001040 	.word	0x20001040
 8009d18:	0800bdc0 	.word	0x0800bdc0
 8009d1c:	0800bde0 	.word	0x0800bde0
 8009d20:	0800bda0 	.word	0x0800bda0

08009d24 <__sflush_r>:
 8009d24:	898a      	ldrh	r2, [r1, #12]
 8009d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	0710      	lsls	r0, r2, #28
 8009d2e:	460c      	mov	r4, r1
 8009d30:	d458      	bmi.n	8009de4 <__sflush_r+0xc0>
 8009d32:	684b      	ldr	r3, [r1, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dc05      	bgt.n	8009d44 <__sflush_r+0x20>
 8009d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	dc02      	bgt.n	8009d44 <__sflush_r+0x20>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d46:	2e00      	cmp	r6, #0
 8009d48:	d0f9      	beq.n	8009d3e <__sflush_r+0x1a>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d50:	682f      	ldr	r7, [r5, #0]
 8009d52:	602b      	str	r3, [r5, #0]
 8009d54:	d032      	beq.n	8009dbc <__sflush_r+0x98>
 8009d56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	075a      	lsls	r2, r3, #29
 8009d5c:	d505      	bpl.n	8009d6a <__sflush_r+0x46>
 8009d5e:	6863      	ldr	r3, [r4, #4]
 8009d60:	1ac0      	subs	r0, r0, r3
 8009d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d64:	b10b      	cbz	r3, 8009d6a <__sflush_r+0x46>
 8009d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d68:	1ac0      	subs	r0, r0, r3
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d70:	6a21      	ldr	r1, [r4, #32]
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b0      	blx	r6
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	d106      	bne.n	8009d8a <__sflush_r+0x66>
 8009d7c:	6829      	ldr	r1, [r5, #0]
 8009d7e:	291d      	cmp	r1, #29
 8009d80:	d82c      	bhi.n	8009ddc <__sflush_r+0xb8>
 8009d82:	4a2a      	ldr	r2, [pc, #168]	; (8009e2c <__sflush_r+0x108>)
 8009d84:	40ca      	lsrs	r2, r1
 8009d86:	07d6      	lsls	r6, r2, #31
 8009d88:	d528      	bpl.n	8009ddc <__sflush_r+0xb8>
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	6062      	str	r2, [r4, #4]
 8009d8e:	04d9      	lsls	r1, r3, #19
 8009d90:	6922      	ldr	r2, [r4, #16]
 8009d92:	6022      	str	r2, [r4, #0]
 8009d94:	d504      	bpl.n	8009da0 <__sflush_r+0x7c>
 8009d96:	1c42      	adds	r2, r0, #1
 8009d98:	d101      	bne.n	8009d9e <__sflush_r+0x7a>
 8009d9a:	682b      	ldr	r3, [r5, #0]
 8009d9c:	b903      	cbnz	r3, 8009da0 <__sflush_r+0x7c>
 8009d9e:	6560      	str	r0, [r4, #84]	; 0x54
 8009da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009da2:	602f      	str	r7, [r5, #0]
 8009da4:	2900      	cmp	r1, #0
 8009da6:	d0ca      	beq.n	8009d3e <__sflush_r+0x1a>
 8009da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d002      	beq.n	8009db6 <__sflush_r+0x92>
 8009db0:	4628      	mov	r0, r5
 8009db2:	f000 f9dd 	bl	800a170 <_free_r>
 8009db6:	2000      	movs	r0, #0
 8009db8:	6360      	str	r0, [r4, #52]	; 0x34
 8009dba:	e7c1      	b.n	8009d40 <__sflush_r+0x1c>
 8009dbc:	6a21      	ldr	r1, [r4, #32]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b0      	blx	r6
 8009dc4:	1c41      	adds	r1, r0, #1
 8009dc6:	d1c7      	bne.n	8009d58 <__sflush_r+0x34>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0c4      	beq.n	8009d58 <__sflush_r+0x34>
 8009dce:	2b1d      	cmp	r3, #29
 8009dd0:	d001      	beq.n	8009dd6 <__sflush_r+0xb2>
 8009dd2:	2b16      	cmp	r3, #22
 8009dd4:	d101      	bne.n	8009dda <__sflush_r+0xb6>
 8009dd6:	602f      	str	r7, [r5, #0]
 8009dd8:	e7b1      	b.n	8009d3e <__sflush_r+0x1a>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	e7ad      	b.n	8009d40 <__sflush_r+0x1c>
 8009de4:	690f      	ldr	r7, [r1, #16]
 8009de6:	2f00      	cmp	r7, #0
 8009de8:	d0a9      	beq.n	8009d3e <__sflush_r+0x1a>
 8009dea:	0793      	lsls	r3, r2, #30
 8009dec:	680e      	ldr	r6, [r1, #0]
 8009dee:	bf08      	it	eq
 8009df0:	694b      	ldreq	r3, [r1, #20]
 8009df2:	600f      	str	r7, [r1, #0]
 8009df4:	bf18      	it	ne
 8009df6:	2300      	movne	r3, #0
 8009df8:	eba6 0807 	sub.w	r8, r6, r7
 8009dfc:	608b      	str	r3, [r1, #8]
 8009dfe:	f1b8 0f00 	cmp.w	r8, #0
 8009e02:	dd9c      	ble.n	8009d3e <__sflush_r+0x1a>
 8009e04:	6a21      	ldr	r1, [r4, #32]
 8009e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e08:	4643      	mov	r3, r8
 8009e0a:	463a      	mov	r2, r7
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b0      	blx	r6
 8009e10:	2800      	cmp	r0, #0
 8009e12:	dc06      	bgt.n	8009e22 <__sflush_r+0xfe>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e20:	e78e      	b.n	8009d40 <__sflush_r+0x1c>
 8009e22:	4407      	add	r7, r0
 8009e24:	eba8 0800 	sub.w	r8, r8, r0
 8009e28:	e7e9      	b.n	8009dfe <__sflush_r+0xda>
 8009e2a:	bf00      	nop
 8009e2c:	20400001 	.word	0x20400001

08009e30 <_fflush_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	690b      	ldr	r3, [r1, #16]
 8009e34:	4605      	mov	r5, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	b913      	cbnz	r3, 8009e40 <_fflush_r+0x10>
 8009e3a:	2500      	movs	r5, #0
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	b118      	cbz	r0, 8009e4a <_fflush_r+0x1a>
 8009e42:	6983      	ldr	r3, [r0, #24]
 8009e44:	b90b      	cbnz	r3, 8009e4a <_fflush_r+0x1a>
 8009e46:	f000 f887 	bl	8009f58 <__sinit>
 8009e4a:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <_fflush_r+0x6c>)
 8009e4c:	429c      	cmp	r4, r3
 8009e4e:	d11b      	bne.n	8009e88 <_fflush_r+0x58>
 8009e50:	686c      	ldr	r4, [r5, #4]
 8009e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0ef      	beq.n	8009e3a <_fflush_r+0xa>
 8009e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e5c:	07d0      	lsls	r0, r2, #31
 8009e5e:	d404      	bmi.n	8009e6a <_fflush_r+0x3a>
 8009e60:	0599      	lsls	r1, r3, #22
 8009e62:	d402      	bmi.n	8009e6a <_fflush_r+0x3a>
 8009e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e66:	f000 f915 	bl	800a094 <__retarget_lock_acquire_recursive>
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	f7ff ff59 	bl	8009d24 <__sflush_r>
 8009e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e74:	07da      	lsls	r2, r3, #31
 8009e76:	4605      	mov	r5, r0
 8009e78:	d4e0      	bmi.n	8009e3c <_fflush_r+0xc>
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	059b      	lsls	r3, r3, #22
 8009e7e:	d4dd      	bmi.n	8009e3c <_fflush_r+0xc>
 8009e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e82:	f000 f908 	bl	800a096 <__retarget_lock_release_recursive>
 8009e86:	e7d9      	b.n	8009e3c <_fflush_r+0xc>
 8009e88:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <_fflush_r+0x70>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	d101      	bne.n	8009e92 <_fflush_r+0x62>
 8009e8e:	68ac      	ldr	r4, [r5, #8]
 8009e90:	e7df      	b.n	8009e52 <_fflush_r+0x22>
 8009e92:	4b04      	ldr	r3, [pc, #16]	; (8009ea4 <_fflush_r+0x74>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	bf08      	it	eq
 8009e98:	68ec      	ldreq	r4, [r5, #12]
 8009e9a:	e7da      	b.n	8009e52 <_fflush_r+0x22>
 8009e9c:	0800bdc0 	.word	0x0800bdc0
 8009ea0:	0800bde0 	.word	0x0800bde0
 8009ea4:	0800bda0 	.word	0x0800bda0

08009ea8 <std>:
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	4604      	mov	r4, r0
 8009eae:	e9c0 3300 	strd	r3, r3, [r0]
 8009eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009eb6:	6083      	str	r3, [r0, #8]
 8009eb8:	8181      	strh	r1, [r0, #12]
 8009eba:	6643      	str	r3, [r0, #100]	; 0x64
 8009ebc:	81c2      	strh	r2, [r0, #14]
 8009ebe:	6183      	str	r3, [r0, #24]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	2208      	movs	r2, #8
 8009ec4:	305c      	adds	r0, #92	; 0x5c
 8009ec6:	f7ff fcfb 	bl	80098c0 <memset>
 8009eca:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <std+0x38>)
 8009ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <std+0x3c>)
 8009ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ed2:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <std+0x40>)
 8009ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ed6:	4b05      	ldr	r3, [pc, #20]	; (8009eec <std+0x44>)
 8009ed8:	6224      	str	r4, [r4, #32]
 8009eda:	6323      	str	r3, [r4, #48]	; 0x30
 8009edc:	bd10      	pop	{r4, pc}
 8009ede:	bf00      	nop
 8009ee0:	0800a951 	.word	0x0800a951
 8009ee4:	0800a973 	.word	0x0800a973
 8009ee8:	0800a9ab 	.word	0x0800a9ab
 8009eec:	0800a9cf 	.word	0x0800a9cf

08009ef0 <_cleanup_r>:
 8009ef0:	4901      	ldr	r1, [pc, #4]	; (8009ef8 <_cleanup_r+0x8>)
 8009ef2:	f000 b8af 	b.w	800a054 <_fwalk_reent>
 8009ef6:	bf00      	nop
 8009ef8:	08009e31 	.word	0x08009e31

08009efc <__sfmoreglue>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	1e4a      	subs	r2, r1, #1
 8009f00:	2568      	movs	r5, #104	; 0x68
 8009f02:	4355      	muls	r5, r2
 8009f04:	460e      	mov	r6, r1
 8009f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f0a:	f000 f981 	bl	800a210 <_malloc_r>
 8009f0e:	4604      	mov	r4, r0
 8009f10:	b140      	cbz	r0, 8009f24 <__sfmoreglue+0x28>
 8009f12:	2100      	movs	r1, #0
 8009f14:	e9c0 1600 	strd	r1, r6, [r0]
 8009f18:	300c      	adds	r0, #12
 8009f1a:	60a0      	str	r0, [r4, #8]
 8009f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f20:	f7ff fcce 	bl	80098c0 <memset>
 8009f24:	4620      	mov	r0, r4
 8009f26:	bd70      	pop	{r4, r5, r6, pc}

08009f28 <__sfp_lock_acquire>:
 8009f28:	4801      	ldr	r0, [pc, #4]	; (8009f30 <__sfp_lock_acquire+0x8>)
 8009f2a:	f000 b8b3 	b.w	800a094 <__retarget_lock_acquire_recursive>
 8009f2e:	bf00      	nop
 8009f30:	20001a1c 	.word	0x20001a1c

08009f34 <__sfp_lock_release>:
 8009f34:	4801      	ldr	r0, [pc, #4]	; (8009f3c <__sfp_lock_release+0x8>)
 8009f36:	f000 b8ae 	b.w	800a096 <__retarget_lock_release_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	20001a1c 	.word	0x20001a1c

08009f40 <__sinit_lock_acquire>:
 8009f40:	4801      	ldr	r0, [pc, #4]	; (8009f48 <__sinit_lock_acquire+0x8>)
 8009f42:	f000 b8a7 	b.w	800a094 <__retarget_lock_acquire_recursive>
 8009f46:	bf00      	nop
 8009f48:	20001a17 	.word	0x20001a17

08009f4c <__sinit_lock_release>:
 8009f4c:	4801      	ldr	r0, [pc, #4]	; (8009f54 <__sinit_lock_release+0x8>)
 8009f4e:	f000 b8a2 	b.w	800a096 <__retarget_lock_release_recursive>
 8009f52:	bf00      	nop
 8009f54:	20001a17 	.word	0x20001a17

08009f58 <__sinit>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	f7ff fff0 	bl	8009f40 <__sinit_lock_acquire>
 8009f60:	69a3      	ldr	r3, [r4, #24]
 8009f62:	b11b      	cbz	r3, 8009f6c <__sinit+0x14>
 8009f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f68:	f7ff bff0 	b.w	8009f4c <__sinit_lock_release>
 8009f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f70:	6523      	str	r3, [r4, #80]	; 0x50
 8009f72:	4b13      	ldr	r3, [pc, #76]	; (8009fc0 <__sinit+0x68>)
 8009f74:	4a13      	ldr	r2, [pc, #76]	; (8009fc4 <__sinit+0x6c>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	bf04      	itt	eq
 8009f7e:	2301      	moveq	r3, #1
 8009f80:	61a3      	streq	r3, [r4, #24]
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f820 	bl	8009fc8 <__sfp>
 8009f88:	6060      	str	r0, [r4, #4]
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 f81c 	bl	8009fc8 <__sfp>
 8009f90:	60a0      	str	r0, [r4, #8]
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 f818 	bl	8009fc8 <__sfp>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	60e0      	str	r0, [r4, #12]
 8009f9c:	2104      	movs	r1, #4
 8009f9e:	6860      	ldr	r0, [r4, #4]
 8009fa0:	f7ff ff82 	bl	8009ea8 <std>
 8009fa4:	68a0      	ldr	r0, [r4, #8]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	2109      	movs	r1, #9
 8009faa:	f7ff ff7d 	bl	8009ea8 <std>
 8009fae:	68e0      	ldr	r0, [r4, #12]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	2112      	movs	r1, #18
 8009fb4:	f7ff ff78 	bl	8009ea8 <std>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	61a3      	str	r3, [r4, #24]
 8009fbc:	e7d2      	b.n	8009f64 <__sinit+0xc>
 8009fbe:	bf00      	nop
 8009fc0:	0800bd9c 	.word	0x0800bd9c
 8009fc4:	08009ef1 	.word	0x08009ef1

08009fc8 <__sfp>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	4607      	mov	r7, r0
 8009fcc:	f7ff ffac 	bl	8009f28 <__sfp_lock_acquire>
 8009fd0:	4b1e      	ldr	r3, [pc, #120]	; (800a04c <__sfp+0x84>)
 8009fd2:	681e      	ldr	r6, [r3, #0]
 8009fd4:	69b3      	ldr	r3, [r6, #24]
 8009fd6:	b913      	cbnz	r3, 8009fde <__sfp+0x16>
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f7ff ffbd 	bl	8009f58 <__sinit>
 8009fde:	3648      	adds	r6, #72	; 0x48
 8009fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	d503      	bpl.n	8009ff0 <__sfp+0x28>
 8009fe8:	6833      	ldr	r3, [r6, #0]
 8009fea:	b30b      	cbz	r3, 800a030 <__sfp+0x68>
 8009fec:	6836      	ldr	r6, [r6, #0]
 8009fee:	e7f7      	b.n	8009fe0 <__sfp+0x18>
 8009ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ff4:	b9d5      	cbnz	r5, 800a02c <__sfp+0x64>
 8009ff6:	4b16      	ldr	r3, [pc, #88]	; (800a050 <__sfp+0x88>)
 8009ff8:	60e3      	str	r3, [r4, #12]
 8009ffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ffe:	6665      	str	r5, [r4, #100]	; 0x64
 800a000:	f000 f847 	bl	800a092 <__retarget_lock_init_recursive>
 800a004:	f7ff ff96 	bl	8009f34 <__sfp_lock_release>
 800a008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a00c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a010:	6025      	str	r5, [r4, #0]
 800a012:	61a5      	str	r5, [r4, #24]
 800a014:	2208      	movs	r2, #8
 800a016:	4629      	mov	r1, r5
 800a018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a01c:	f7ff fc50 	bl	80098c0 <memset>
 800a020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a028:	4620      	mov	r0, r4
 800a02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02c:	3468      	adds	r4, #104	; 0x68
 800a02e:	e7d9      	b.n	8009fe4 <__sfp+0x1c>
 800a030:	2104      	movs	r1, #4
 800a032:	4638      	mov	r0, r7
 800a034:	f7ff ff62 	bl	8009efc <__sfmoreglue>
 800a038:	4604      	mov	r4, r0
 800a03a:	6030      	str	r0, [r6, #0]
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d1d5      	bne.n	8009fec <__sfp+0x24>
 800a040:	f7ff ff78 	bl	8009f34 <__sfp_lock_release>
 800a044:	230c      	movs	r3, #12
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	e7ee      	b.n	800a028 <__sfp+0x60>
 800a04a:	bf00      	nop
 800a04c:	0800bd9c 	.word	0x0800bd9c
 800a050:	ffff0001 	.word	0xffff0001

0800a054 <_fwalk_reent>:
 800a054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a058:	4606      	mov	r6, r0
 800a05a:	4688      	mov	r8, r1
 800a05c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a060:	2700      	movs	r7, #0
 800a062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a066:	f1b9 0901 	subs.w	r9, r9, #1
 800a06a:	d505      	bpl.n	800a078 <_fwalk_reent+0x24>
 800a06c:	6824      	ldr	r4, [r4, #0]
 800a06e:	2c00      	cmp	r4, #0
 800a070:	d1f7      	bne.n	800a062 <_fwalk_reent+0xe>
 800a072:	4638      	mov	r0, r7
 800a074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a078:	89ab      	ldrh	r3, [r5, #12]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d907      	bls.n	800a08e <_fwalk_reent+0x3a>
 800a07e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a082:	3301      	adds	r3, #1
 800a084:	d003      	beq.n	800a08e <_fwalk_reent+0x3a>
 800a086:	4629      	mov	r1, r5
 800a088:	4630      	mov	r0, r6
 800a08a:	47c0      	blx	r8
 800a08c:	4307      	orrs	r7, r0
 800a08e:	3568      	adds	r5, #104	; 0x68
 800a090:	e7e9      	b.n	800a066 <_fwalk_reent+0x12>

0800a092 <__retarget_lock_init_recursive>:
 800a092:	4770      	bx	lr

0800a094 <__retarget_lock_acquire_recursive>:
 800a094:	4770      	bx	lr

0800a096 <__retarget_lock_release_recursive>:
 800a096:	4770      	bx	lr

0800a098 <__swhatbuf_r>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	460e      	mov	r6, r1
 800a09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	b096      	sub	sp, #88	; 0x58
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	461d      	mov	r5, r3
 800a0a8:	da07      	bge.n	800a0ba <__swhatbuf_r+0x22>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	602b      	str	r3, [r5, #0]
 800a0ae:	89b3      	ldrh	r3, [r6, #12]
 800a0b0:	061a      	lsls	r2, r3, #24
 800a0b2:	d410      	bmi.n	800a0d6 <__swhatbuf_r+0x3e>
 800a0b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0b8:	e00e      	b.n	800a0d8 <__swhatbuf_r+0x40>
 800a0ba:	466a      	mov	r2, sp
 800a0bc:	f000 fcae 	bl	800aa1c <_fstat_r>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	dbf2      	blt.n	800a0aa <__swhatbuf_r+0x12>
 800a0c4:	9a01      	ldr	r2, [sp, #4]
 800a0c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0ce:	425a      	negs	r2, r3
 800a0d0:	415a      	adcs	r2, r3
 800a0d2:	602a      	str	r2, [r5, #0]
 800a0d4:	e7ee      	b.n	800a0b4 <__swhatbuf_r+0x1c>
 800a0d6:	2340      	movs	r3, #64	; 0x40
 800a0d8:	2000      	movs	r0, #0
 800a0da:	6023      	str	r3, [r4, #0]
 800a0dc:	b016      	add	sp, #88	; 0x58
 800a0de:	bd70      	pop	{r4, r5, r6, pc}

0800a0e0 <__smakebuf_r>:
 800a0e0:	898b      	ldrh	r3, [r1, #12]
 800a0e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0e4:	079d      	lsls	r5, r3, #30
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	d507      	bpl.n	800a0fc <__smakebuf_r+0x1c>
 800a0ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	6163      	str	r3, [r4, #20]
 800a0f8:	b002      	add	sp, #8
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}
 800a0fc:	ab01      	add	r3, sp, #4
 800a0fe:	466a      	mov	r2, sp
 800a100:	f7ff ffca 	bl	800a098 <__swhatbuf_r>
 800a104:	9900      	ldr	r1, [sp, #0]
 800a106:	4605      	mov	r5, r0
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 f881 	bl	800a210 <_malloc_r>
 800a10e:	b948      	cbnz	r0, 800a124 <__smakebuf_r+0x44>
 800a110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a114:	059a      	lsls	r2, r3, #22
 800a116:	d4ef      	bmi.n	800a0f8 <__smakebuf_r+0x18>
 800a118:	f023 0303 	bic.w	r3, r3, #3
 800a11c:	f043 0302 	orr.w	r3, r3, #2
 800a120:	81a3      	strh	r3, [r4, #12]
 800a122:	e7e3      	b.n	800a0ec <__smakebuf_r+0xc>
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <__smakebuf_r+0x7c>)
 800a126:	62b3      	str	r3, [r6, #40]	; 0x28
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	6020      	str	r0, [r4, #0]
 800a12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a130:	81a3      	strh	r3, [r4, #12]
 800a132:	9b00      	ldr	r3, [sp, #0]
 800a134:	6163      	str	r3, [r4, #20]
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	6120      	str	r0, [r4, #16]
 800a13a:	b15b      	cbz	r3, 800a154 <__smakebuf_r+0x74>
 800a13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a140:	4630      	mov	r0, r6
 800a142:	f000 fc7d 	bl	800aa40 <_isatty_r>
 800a146:	b128      	cbz	r0, 800a154 <__smakebuf_r+0x74>
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f023 0303 	bic.w	r3, r3, #3
 800a14e:	f043 0301 	orr.w	r3, r3, #1
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	89a0      	ldrh	r0, [r4, #12]
 800a156:	4305      	orrs	r5, r0
 800a158:	81a5      	strh	r5, [r4, #12]
 800a15a:	e7cd      	b.n	800a0f8 <__smakebuf_r+0x18>
 800a15c:	08009ef1 	.word	0x08009ef1

0800a160 <malloc>:
 800a160:	4b02      	ldr	r3, [pc, #8]	; (800a16c <malloc+0xc>)
 800a162:	4601      	mov	r1, r0
 800a164:	6818      	ldr	r0, [r3, #0]
 800a166:	f000 b853 	b.w	800a210 <_malloc_r>
 800a16a:	bf00      	nop
 800a16c:	20001040 	.word	0x20001040

0800a170 <_free_r>:
 800a170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a172:	2900      	cmp	r1, #0
 800a174:	d048      	beq.n	800a208 <_free_r+0x98>
 800a176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a17a:	9001      	str	r0, [sp, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f1a1 0404 	sub.w	r4, r1, #4
 800a182:	bfb8      	it	lt
 800a184:	18e4      	addlt	r4, r4, r3
 800a186:	f000 fc7d 	bl	800aa84 <__malloc_lock>
 800a18a:	4a20      	ldr	r2, [pc, #128]	; (800a20c <_free_r+0x9c>)
 800a18c:	9801      	ldr	r0, [sp, #4]
 800a18e:	6813      	ldr	r3, [r2, #0]
 800a190:	4615      	mov	r5, r2
 800a192:	b933      	cbnz	r3, 800a1a2 <_free_r+0x32>
 800a194:	6063      	str	r3, [r4, #4]
 800a196:	6014      	str	r4, [r2, #0]
 800a198:	b003      	add	sp, #12
 800a19a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a19e:	f000 bc77 	b.w	800aa90 <__malloc_unlock>
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	d90b      	bls.n	800a1be <_free_r+0x4e>
 800a1a6:	6821      	ldr	r1, [r4, #0]
 800a1a8:	1862      	adds	r2, r4, r1
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	bf04      	itt	eq
 800a1ae:	681a      	ldreq	r2, [r3, #0]
 800a1b0:	685b      	ldreq	r3, [r3, #4]
 800a1b2:	6063      	str	r3, [r4, #4]
 800a1b4:	bf04      	itt	eq
 800a1b6:	1852      	addeq	r2, r2, r1
 800a1b8:	6022      	streq	r2, [r4, #0]
 800a1ba:	602c      	str	r4, [r5, #0]
 800a1bc:	e7ec      	b.n	800a198 <_free_r+0x28>
 800a1be:	461a      	mov	r2, r3
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	b10b      	cbz	r3, 800a1c8 <_free_r+0x58>
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	d9fa      	bls.n	800a1be <_free_r+0x4e>
 800a1c8:	6811      	ldr	r1, [r2, #0]
 800a1ca:	1855      	adds	r5, r2, r1
 800a1cc:	42a5      	cmp	r5, r4
 800a1ce:	d10b      	bne.n	800a1e8 <_free_r+0x78>
 800a1d0:	6824      	ldr	r4, [r4, #0]
 800a1d2:	4421      	add	r1, r4
 800a1d4:	1854      	adds	r4, r2, r1
 800a1d6:	42a3      	cmp	r3, r4
 800a1d8:	6011      	str	r1, [r2, #0]
 800a1da:	d1dd      	bne.n	800a198 <_free_r+0x28>
 800a1dc:	681c      	ldr	r4, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	6053      	str	r3, [r2, #4]
 800a1e2:	4421      	add	r1, r4
 800a1e4:	6011      	str	r1, [r2, #0]
 800a1e6:	e7d7      	b.n	800a198 <_free_r+0x28>
 800a1e8:	d902      	bls.n	800a1f0 <_free_r+0x80>
 800a1ea:	230c      	movs	r3, #12
 800a1ec:	6003      	str	r3, [r0, #0]
 800a1ee:	e7d3      	b.n	800a198 <_free_r+0x28>
 800a1f0:	6825      	ldr	r5, [r4, #0]
 800a1f2:	1961      	adds	r1, r4, r5
 800a1f4:	428b      	cmp	r3, r1
 800a1f6:	bf04      	itt	eq
 800a1f8:	6819      	ldreq	r1, [r3, #0]
 800a1fa:	685b      	ldreq	r3, [r3, #4]
 800a1fc:	6063      	str	r3, [r4, #4]
 800a1fe:	bf04      	itt	eq
 800a200:	1949      	addeq	r1, r1, r5
 800a202:	6021      	streq	r1, [r4, #0]
 800a204:	6054      	str	r4, [r2, #4]
 800a206:	e7c7      	b.n	800a198 <_free_r+0x28>
 800a208:	b003      	add	sp, #12
 800a20a:	bd30      	pop	{r4, r5, pc}
 800a20c:	20001758 	.word	0x20001758

0800a210 <_malloc_r>:
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a212:	1ccd      	adds	r5, r1, #3
 800a214:	f025 0503 	bic.w	r5, r5, #3
 800a218:	3508      	adds	r5, #8
 800a21a:	2d0c      	cmp	r5, #12
 800a21c:	bf38      	it	cc
 800a21e:	250c      	movcc	r5, #12
 800a220:	2d00      	cmp	r5, #0
 800a222:	4606      	mov	r6, r0
 800a224:	db01      	blt.n	800a22a <_malloc_r+0x1a>
 800a226:	42a9      	cmp	r1, r5
 800a228:	d903      	bls.n	800a232 <_malloc_r+0x22>
 800a22a:	230c      	movs	r3, #12
 800a22c:	6033      	str	r3, [r6, #0]
 800a22e:	2000      	movs	r0, #0
 800a230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a232:	f000 fc27 	bl	800aa84 <__malloc_lock>
 800a236:	4921      	ldr	r1, [pc, #132]	; (800a2bc <_malloc_r+0xac>)
 800a238:	680a      	ldr	r2, [r1, #0]
 800a23a:	4614      	mov	r4, r2
 800a23c:	b99c      	cbnz	r4, 800a266 <_malloc_r+0x56>
 800a23e:	4f20      	ldr	r7, [pc, #128]	; (800a2c0 <_malloc_r+0xb0>)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	b923      	cbnz	r3, 800a24e <_malloc_r+0x3e>
 800a244:	4621      	mov	r1, r4
 800a246:	4630      	mov	r0, r6
 800a248:	f000 fb72 	bl	800a930 <_sbrk_r>
 800a24c:	6038      	str	r0, [r7, #0]
 800a24e:	4629      	mov	r1, r5
 800a250:	4630      	mov	r0, r6
 800a252:	f000 fb6d 	bl	800a930 <_sbrk_r>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	d123      	bne.n	800a2a2 <_malloc_r+0x92>
 800a25a:	230c      	movs	r3, #12
 800a25c:	6033      	str	r3, [r6, #0]
 800a25e:	4630      	mov	r0, r6
 800a260:	f000 fc16 	bl	800aa90 <__malloc_unlock>
 800a264:	e7e3      	b.n	800a22e <_malloc_r+0x1e>
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	1b5b      	subs	r3, r3, r5
 800a26a:	d417      	bmi.n	800a29c <_malloc_r+0x8c>
 800a26c:	2b0b      	cmp	r3, #11
 800a26e:	d903      	bls.n	800a278 <_malloc_r+0x68>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	441c      	add	r4, r3
 800a274:	6025      	str	r5, [r4, #0]
 800a276:	e004      	b.n	800a282 <_malloc_r+0x72>
 800a278:	6863      	ldr	r3, [r4, #4]
 800a27a:	42a2      	cmp	r2, r4
 800a27c:	bf0c      	ite	eq
 800a27e:	600b      	streq	r3, [r1, #0]
 800a280:	6053      	strne	r3, [r2, #4]
 800a282:	4630      	mov	r0, r6
 800a284:	f000 fc04 	bl	800aa90 <__malloc_unlock>
 800a288:	f104 000b 	add.w	r0, r4, #11
 800a28c:	1d23      	adds	r3, r4, #4
 800a28e:	f020 0007 	bic.w	r0, r0, #7
 800a292:	1ac2      	subs	r2, r0, r3
 800a294:	d0cc      	beq.n	800a230 <_malloc_r+0x20>
 800a296:	1a1b      	subs	r3, r3, r0
 800a298:	50a3      	str	r3, [r4, r2]
 800a29a:	e7c9      	b.n	800a230 <_malloc_r+0x20>
 800a29c:	4622      	mov	r2, r4
 800a29e:	6864      	ldr	r4, [r4, #4]
 800a2a0:	e7cc      	b.n	800a23c <_malloc_r+0x2c>
 800a2a2:	1cc4      	adds	r4, r0, #3
 800a2a4:	f024 0403 	bic.w	r4, r4, #3
 800a2a8:	42a0      	cmp	r0, r4
 800a2aa:	d0e3      	beq.n	800a274 <_malloc_r+0x64>
 800a2ac:	1a21      	subs	r1, r4, r0
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f000 fb3e 	bl	800a930 <_sbrk_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d1dd      	bne.n	800a274 <_malloc_r+0x64>
 800a2b8:	e7cf      	b.n	800a25a <_malloc_r+0x4a>
 800a2ba:	bf00      	nop
 800a2bc:	20001758 	.word	0x20001758
 800a2c0:	2000175c 	.word	0x2000175c

0800a2c4 <__sfputc_r>:
 800a2c4:	6893      	ldr	r3, [r2, #8]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	b410      	push	{r4}
 800a2cc:	6093      	str	r3, [r2, #8]
 800a2ce:	da08      	bge.n	800a2e2 <__sfputc_r+0x1e>
 800a2d0:	6994      	ldr	r4, [r2, #24]
 800a2d2:	42a3      	cmp	r3, r4
 800a2d4:	db01      	blt.n	800a2da <__sfputc_r+0x16>
 800a2d6:	290a      	cmp	r1, #10
 800a2d8:	d103      	bne.n	800a2e2 <__sfputc_r+0x1e>
 800a2da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2de:	f7ff bc61 	b.w	8009ba4 <__swbuf_r>
 800a2e2:	6813      	ldr	r3, [r2, #0]
 800a2e4:	1c58      	adds	r0, r3, #1
 800a2e6:	6010      	str	r0, [r2, #0]
 800a2e8:	7019      	strb	r1, [r3, #0]
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <__sfputs_r>:
 800a2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	460f      	mov	r7, r1
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	18d5      	adds	r5, r2, r3
 800a2fc:	42ac      	cmp	r4, r5
 800a2fe:	d101      	bne.n	800a304 <__sfputs_r+0x12>
 800a300:	2000      	movs	r0, #0
 800a302:	e007      	b.n	800a314 <__sfputs_r+0x22>
 800a304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a308:	463a      	mov	r2, r7
 800a30a:	4630      	mov	r0, r6
 800a30c:	f7ff ffda 	bl	800a2c4 <__sfputc_r>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d1f3      	bne.n	800a2fc <__sfputs_r+0xa>
 800a314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a318 <_vfiprintf_r>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	460d      	mov	r5, r1
 800a31e:	b09d      	sub	sp, #116	; 0x74
 800a320:	4614      	mov	r4, r2
 800a322:	4698      	mov	r8, r3
 800a324:	4606      	mov	r6, r0
 800a326:	b118      	cbz	r0, 800a330 <_vfiprintf_r+0x18>
 800a328:	6983      	ldr	r3, [r0, #24]
 800a32a:	b90b      	cbnz	r3, 800a330 <_vfiprintf_r+0x18>
 800a32c:	f7ff fe14 	bl	8009f58 <__sinit>
 800a330:	4b89      	ldr	r3, [pc, #548]	; (800a558 <_vfiprintf_r+0x240>)
 800a332:	429d      	cmp	r5, r3
 800a334:	d11b      	bne.n	800a36e <_vfiprintf_r+0x56>
 800a336:	6875      	ldr	r5, [r6, #4]
 800a338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a33a:	07d9      	lsls	r1, r3, #31
 800a33c:	d405      	bmi.n	800a34a <_vfiprintf_r+0x32>
 800a33e:	89ab      	ldrh	r3, [r5, #12]
 800a340:	059a      	lsls	r2, r3, #22
 800a342:	d402      	bmi.n	800a34a <_vfiprintf_r+0x32>
 800a344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a346:	f7ff fea5 	bl	800a094 <__retarget_lock_acquire_recursive>
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	071b      	lsls	r3, r3, #28
 800a34e:	d501      	bpl.n	800a354 <_vfiprintf_r+0x3c>
 800a350:	692b      	ldr	r3, [r5, #16]
 800a352:	b9eb      	cbnz	r3, 800a390 <_vfiprintf_r+0x78>
 800a354:	4629      	mov	r1, r5
 800a356:	4630      	mov	r0, r6
 800a358:	f7ff fc76 	bl	8009c48 <__swsetup_r>
 800a35c:	b1c0      	cbz	r0, 800a390 <_vfiprintf_r+0x78>
 800a35e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a360:	07dc      	lsls	r4, r3, #31
 800a362:	d50e      	bpl.n	800a382 <_vfiprintf_r+0x6a>
 800a364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a368:	b01d      	add	sp, #116	; 0x74
 800a36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36e:	4b7b      	ldr	r3, [pc, #492]	; (800a55c <_vfiprintf_r+0x244>)
 800a370:	429d      	cmp	r5, r3
 800a372:	d101      	bne.n	800a378 <_vfiprintf_r+0x60>
 800a374:	68b5      	ldr	r5, [r6, #8]
 800a376:	e7df      	b.n	800a338 <_vfiprintf_r+0x20>
 800a378:	4b79      	ldr	r3, [pc, #484]	; (800a560 <_vfiprintf_r+0x248>)
 800a37a:	429d      	cmp	r5, r3
 800a37c:	bf08      	it	eq
 800a37e:	68f5      	ldreq	r5, [r6, #12]
 800a380:	e7da      	b.n	800a338 <_vfiprintf_r+0x20>
 800a382:	89ab      	ldrh	r3, [r5, #12]
 800a384:	0598      	lsls	r0, r3, #22
 800a386:	d4ed      	bmi.n	800a364 <_vfiprintf_r+0x4c>
 800a388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a38a:	f7ff fe84 	bl	800a096 <__retarget_lock_release_recursive>
 800a38e:	e7e9      	b.n	800a364 <_vfiprintf_r+0x4c>
 800a390:	2300      	movs	r3, #0
 800a392:	9309      	str	r3, [sp, #36]	; 0x24
 800a394:	2320      	movs	r3, #32
 800a396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a39a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a39e:	2330      	movs	r3, #48	; 0x30
 800a3a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a564 <_vfiprintf_r+0x24c>
 800a3a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3a8:	f04f 0901 	mov.w	r9, #1
 800a3ac:	4623      	mov	r3, r4
 800a3ae:	469a      	mov	sl, r3
 800a3b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b4:	b10a      	cbz	r2, 800a3ba <_vfiprintf_r+0xa2>
 800a3b6:	2a25      	cmp	r2, #37	; 0x25
 800a3b8:	d1f9      	bne.n	800a3ae <_vfiprintf_r+0x96>
 800a3ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a3be:	d00b      	beq.n	800a3d8 <_vfiprintf_r+0xc0>
 800a3c0:	465b      	mov	r3, fp
 800a3c2:	4622      	mov	r2, r4
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f7ff ff93 	bl	800a2f2 <__sfputs_r>
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	f000 80aa 	beq.w	800a526 <_vfiprintf_r+0x20e>
 800a3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d4:	445a      	add	r2, fp
 800a3d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 80a2 	beq.w	800a526 <_vfiprintf_r+0x20e>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ec:	f10a 0a01 	add.w	sl, sl, #1
 800a3f0:	9304      	str	r3, [sp, #16]
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a3fa:	4654      	mov	r4, sl
 800a3fc:	2205      	movs	r2, #5
 800a3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a402:	4858      	ldr	r0, [pc, #352]	; (800a564 <_vfiprintf_r+0x24c>)
 800a404:	f7f9 fc1c 	bl	8003c40 <memchr>
 800a408:	9a04      	ldr	r2, [sp, #16]
 800a40a:	b9d8      	cbnz	r0, 800a444 <_vfiprintf_r+0x12c>
 800a40c:	06d1      	lsls	r1, r2, #27
 800a40e:	bf44      	itt	mi
 800a410:	2320      	movmi	r3, #32
 800a412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a416:	0713      	lsls	r3, r2, #28
 800a418:	bf44      	itt	mi
 800a41a:	232b      	movmi	r3, #43	; 0x2b
 800a41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a420:	f89a 3000 	ldrb.w	r3, [sl]
 800a424:	2b2a      	cmp	r3, #42	; 0x2a
 800a426:	d015      	beq.n	800a454 <_vfiprintf_r+0x13c>
 800a428:	9a07      	ldr	r2, [sp, #28]
 800a42a:	4654      	mov	r4, sl
 800a42c:	2000      	movs	r0, #0
 800a42e:	f04f 0c0a 	mov.w	ip, #10
 800a432:	4621      	mov	r1, r4
 800a434:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a438:	3b30      	subs	r3, #48	; 0x30
 800a43a:	2b09      	cmp	r3, #9
 800a43c:	d94e      	bls.n	800a4dc <_vfiprintf_r+0x1c4>
 800a43e:	b1b0      	cbz	r0, 800a46e <_vfiprintf_r+0x156>
 800a440:	9207      	str	r2, [sp, #28]
 800a442:	e014      	b.n	800a46e <_vfiprintf_r+0x156>
 800a444:	eba0 0308 	sub.w	r3, r0, r8
 800a448:	fa09 f303 	lsl.w	r3, r9, r3
 800a44c:	4313      	orrs	r3, r2
 800a44e:	9304      	str	r3, [sp, #16]
 800a450:	46a2      	mov	sl, r4
 800a452:	e7d2      	b.n	800a3fa <_vfiprintf_r+0xe2>
 800a454:	9b03      	ldr	r3, [sp, #12]
 800a456:	1d19      	adds	r1, r3, #4
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	9103      	str	r1, [sp, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	bfbb      	ittet	lt
 800a460:	425b      	neglt	r3, r3
 800a462:	f042 0202 	orrlt.w	r2, r2, #2
 800a466:	9307      	strge	r3, [sp, #28]
 800a468:	9307      	strlt	r3, [sp, #28]
 800a46a:	bfb8      	it	lt
 800a46c:	9204      	strlt	r2, [sp, #16]
 800a46e:	7823      	ldrb	r3, [r4, #0]
 800a470:	2b2e      	cmp	r3, #46	; 0x2e
 800a472:	d10c      	bne.n	800a48e <_vfiprintf_r+0x176>
 800a474:	7863      	ldrb	r3, [r4, #1]
 800a476:	2b2a      	cmp	r3, #42	; 0x2a
 800a478:	d135      	bne.n	800a4e6 <_vfiprintf_r+0x1ce>
 800a47a:	9b03      	ldr	r3, [sp, #12]
 800a47c:	1d1a      	adds	r2, r3, #4
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	9203      	str	r2, [sp, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	bfb8      	it	lt
 800a486:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a48a:	3402      	adds	r4, #2
 800a48c:	9305      	str	r3, [sp, #20]
 800a48e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a574 <_vfiprintf_r+0x25c>
 800a492:	7821      	ldrb	r1, [r4, #0]
 800a494:	2203      	movs	r2, #3
 800a496:	4650      	mov	r0, sl
 800a498:	f7f9 fbd2 	bl	8003c40 <memchr>
 800a49c:	b140      	cbz	r0, 800a4b0 <_vfiprintf_r+0x198>
 800a49e:	2340      	movs	r3, #64	; 0x40
 800a4a0:	eba0 000a 	sub.w	r0, r0, sl
 800a4a4:	fa03 f000 	lsl.w	r0, r3, r0
 800a4a8:	9b04      	ldr	r3, [sp, #16]
 800a4aa:	4303      	orrs	r3, r0
 800a4ac:	3401      	adds	r4, #1
 800a4ae:	9304      	str	r3, [sp, #16]
 800a4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b4:	482c      	ldr	r0, [pc, #176]	; (800a568 <_vfiprintf_r+0x250>)
 800a4b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ba:	2206      	movs	r2, #6
 800a4bc:	f7f9 fbc0 	bl	8003c40 <memchr>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d03f      	beq.n	800a544 <_vfiprintf_r+0x22c>
 800a4c4:	4b29      	ldr	r3, [pc, #164]	; (800a56c <_vfiprintf_r+0x254>)
 800a4c6:	bb1b      	cbnz	r3, 800a510 <_vfiprintf_r+0x1f8>
 800a4c8:	9b03      	ldr	r3, [sp, #12]
 800a4ca:	3307      	adds	r3, #7
 800a4cc:	f023 0307 	bic.w	r3, r3, #7
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	9303      	str	r3, [sp, #12]
 800a4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d6:	443b      	add	r3, r7
 800a4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4da:	e767      	b.n	800a3ac <_vfiprintf_r+0x94>
 800a4dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	2001      	movs	r0, #1
 800a4e4:	e7a5      	b.n	800a432 <_vfiprintf_r+0x11a>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	3401      	adds	r4, #1
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	f04f 0c0a 	mov.w	ip, #10
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f8:	3a30      	subs	r2, #48	; 0x30
 800a4fa:	2a09      	cmp	r2, #9
 800a4fc:	d903      	bls.n	800a506 <_vfiprintf_r+0x1ee>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0c5      	beq.n	800a48e <_vfiprintf_r+0x176>
 800a502:	9105      	str	r1, [sp, #20]
 800a504:	e7c3      	b.n	800a48e <_vfiprintf_r+0x176>
 800a506:	fb0c 2101 	mla	r1, ip, r1, r2
 800a50a:	4604      	mov	r4, r0
 800a50c:	2301      	movs	r3, #1
 800a50e:	e7f0      	b.n	800a4f2 <_vfiprintf_r+0x1da>
 800a510:	ab03      	add	r3, sp, #12
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	462a      	mov	r2, r5
 800a516:	4b16      	ldr	r3, [pc, #88]	; (800a570 <_vfiprintf_r+0x258>)
 800a518:	a904      	add	r1, sp, #16
 800a51a:	4630      	mov	r0, r6
 800a51c:	f3af 8000 	nop.w
 800a520:	4607      	mov	r7, r0
 800a522:	1c78      	adds	r0, r7, #1
 800a524:	d1d6      	bne.n	800a4d4 <_vfiprintf_r+0x1bc>
 800a526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a528:	07d9      	lsls	r1, r3, #31
 800a52a:	d405      	bmi.n	800a538 <_vfiprintf_r+0x220>
 800a52c:	89ab      	ldrh	r3, [r5, #12]
 800a52e:	059a      	lsls	r2, r3, #22
 800a530:	d402      	bmi.n	800a538 <_vfiprintf_r+0x220>
 800a532:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a534:	f7ff fdaf 	bl	800a096 <__retarget_lock_release_recursive>
 800a538:	89ab      	ldrh	r3, [r5, #12]
 800a53a:	065b      	lsls	r3, r3, #25
 800a53c:	f53f af12 	bmi.w	800a364 <_vfiprintf_r+0x4c>
 800a540:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a542:	e711      	b.n	800a368 <_vfiprintf_r+0x50>
 800a544:	ab03      	add	r3, sp, #12
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	462a      	mov	r2, r5
 800a54a:	4b09      	ldr	r3, [pc, #36]	; (800a570 <_vfiprintf_r+0x258>)
 800a54c:	a904      	add	r1, sp, #16
 800a54e:	4630      	mov	r0, r6
 800a550:	f000 f880 	bl	800a654 <_printf_i>
 800a554:	e7e4      	b.n	800a520 <_vfiprintf_r+0x208>
 800a556:	bf00      	nop
 800a558:	0800bdc0 	.word	0x0800bdc0
 800a55c:	0800bde0 	.word	0x0800bde0
 800a560:	0800bda0 	.word	0x0800bda0
 800a564:	0800be00 	.word	0x0800be00
 800a568:	0800be0a 	.word	0x0800be0a
 800a56c:	00000000 	.word	0x00000000
 800a570:	0800a2f3 	.word	0x0800a2f3
 800a574:	0800be06 	.word	0x0800be06

0800a578 <_printf_common>:
 800a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	4616      	mov	r6, r2
 800a57e:	4699      	mov	r9, r3
 800a580:	688a      	ldr	r2, [r1, #8]
 800a582:	690b      	ldr	r3, [r1, #16]
 800a584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a588:	4293      	cmp	r3, r2
 800a58a:	bfb8      	it	lt
 800a58c:	4613      	movlt	r3, r2
 800a58e:	6033      	str	r3, [r6, #0]
 800a590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a594:	4607      	mov	r7, r0
 800a596:	460c      	mov	r4, r1
 800a598:	b10a      	cbz	r2, 800a59e <_printf_common+0x26>
 800a59a:	3301      	adds	r3, #1
 800a59c:	6033      	str	r3, [r6, #0]
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	0699      	lsls	r1, r3, #26
 800a5a2:	bf42      	ittt	mi
 800a5a4:	6833      	ldrmi	r3, [r6, #0]
 800a5a6:	3302      	addmi	r3, #2
 800a5a8:	6033      	strmi	r3, [r6, #0]
 800a5aa:	6825      	ldr	r5, [r4, #0]
 800a5ac:	f015 0506 	ands.w	r5, r5, #6
 800a5b0:	d106      	bne.n	800a5c0 <_printf_common+0x48>
 800a5b2:	f104 0a19 	add.w	sl, r4, #25
 800a5b6:	68e3      	ldr	r3, [r4, #12]
 800a5b8:	6832      	ldr	r2, [r6, #0]
 800a5ba:	1a9b      	subs	r3, r3, r2
 800a5bc:	42ab      	cmp	r3, r5
 800a5be:	dc26      	bgt.n	800a60e <_printf_common+0x96>
 800a5c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5c4:	1e13      	subs	r3, r2, #0
 800a5c6:	6822      	ldr	r2, [r4, #0]
 800a5c8:	bf18      	it	ne
 800a5ca:	2301      	movne	r3, #1
 800a5cc:	0692      	lsls	r2, r2, #26
 800a5ce:	d42b      	bmi.n	800a628 <_printf_common+0xb0>
 800a5d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	47c0      	blx	r8
 800a5da:	3001      	adds	r0, #1
 800a5dc:	d01e      	beq.n	800a61c <_printf_common+0xa4>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	68e5      	ldr	r5, [r4, #12]
 800a5e2:	6832      	ldr	r2, [r6, #0]
 800a5e4:	f003 0306 	and.w	r3, r3, #6
 800a5e8:	2b04      	cmp	r3, #4
 800a5ea:	bf08      	it	eq
 800a5ec:	1aad      	subeq	r5, r5, r2
 800a5ee:	68a3      	ldr	r3, [r4, #8]
 800a5f0:	6922      	ldr	r2, [r4, #16]
 800a5f2:	bf0c      	ite	eq
 800a5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5f8:	2500      	movne	r5, #0
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	bfc4      	itt	gt
 800a5fe:	1a9b      	subgt	r3, r3, r2
 800a600:	18ed      	addgt	r5, r5, r3
 800a602:	2600      	movs	r6, #0
 800a604:	341a      	adds	r4, #26
 800a606:	42b5      	cmp	r5, r6
 800a608:	d11a      	bne.n	800a640 <_printf_common+0xc8>
 800a60a:	2000      	movs	r0, #0
 800a60c:	e008      	b.n	800a620 <_printf_common+0xa8>
 800a60e:	2301      	movs	r3, #1
 800a610:	4652      	mov	r2, sl
 800a612:	4649      	mov	r1, r9
 800a614:	4638      	mov	r0, r7
 800a616:	47c0      	blx	r8
 800a618:	3001      	adds	r0, #1
 800a61a:	d103      	bne.n	800a624 <_printf_common+0xac>
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a624:	3501      	adds	r5, #1
 800a626:	e7c6      	b.n	800a5b6 <_printf_common+0x3e>
 800a628:	18e1      	adds	r1, r4, r3
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	2030      	movs	r0, #48	; 0x30
 800a62e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a632:	4422      	add	r2, r4
 800a634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a63c:	3302      	adds	r3, #2
 800a63e:	e7c7      	b.n	800a5d0 <_printf_common+0x58>
 800a640:	2301      	movs	r3, #1
 800a642:	4622      	mov	r2, r4
 800a644:	4649      	mov	r1, r9
 800a646:	4638      	mov	r0, r7
 800a648:	47c0      	blx	r8
 800a64a:	3001      	adds	r0, #1
 800a64c:	d0e6      	beq.n	800a61c <_printf_common+0xa4>
 800a64e:	3601      	adds	r6, #1
 800a650:	e7d9      	b.n	800a606 <_printf_common+0x8e>
	...

0800a654 <_printf_i>:
 800a654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a658:	460c      	mov	r4, r1
 800a65a:	4691      	mov	r9, r2
 800a65c:	7e27      	ldrb	r7, [r4, #24]
 800a65e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a660:	2f78      	cmp	r7, #120	; 0x78
 800a662:	4680      	mov	r8, r0
 800a664:	469a      	mov	sl, r3
 800a666:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a66a:	d807      	bhi.n	800a67c <_printf_i+0x28>
 800a66c:	2f62      	cmp	r7, #98	; 0x62
 800a66e:	d80a      	bhi.n	800a686 <_printf_i+0x32>
 800a670:	2f00      	cmp	r7, #0
 800a672:	f000 80d8 	beq.w	800a826 <_printf_i+0x1d2>
 800a676:	2f58      	cmp	r7, #88	; 0x58
 800a678:	f000 80a3 	beq.w	800a7c2 <_printf_i+0x16e>
 800a67c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a684:	e03a      	b.n	800a6fc <_printf_i+0xa8>
 800a686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a68a:	2b15      	cmp	r3, #21
 800a68c:	d8f6      	bhi.n	800a67c <_printf_i+0x28>
 800a68e:	a001      	add	r0, pc, #4	; (adr r0, 800a694 <_printf_i+0x40>)
 800a690:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a694:	0800a6ed 	.word	0x0800a6ed
 800a698:	0800a701 	.word	0x0800a701
 800a69c:	0800a67d 	.word	0x0800a67d
 800a6a0:	0800a67d 	.word	0x0800a67d
 800a6a4:	0800a67d 	.word	0x0800a67d
 800a6a8:	0800a67d 	.word	0x0800a67d
 800a6ac:	0800a701 	.word	0x0800a701
 800a6b0:	0800a67d 	.word	0x0800a67d
 800a6b4:	0800a67d 	.word	0x0800a67d
 800a6b8:	0800a67d 	.word	0x0800a67d
 800a6bc:	0800a67d 	.word	0x0800a67d
 800a6c0:	0800a80d 	.word	0x0800a80d
 800a6c4:	0800a731 	.word	0x0800a731
 800a6c8:	0800a7ef 	.word	0x0800a7ef
 800a6cc:	0800a67d 	.word	0x0800a67d
 800a6d0:	0800a67d 	.word	0x0800a67d
 800a6d4:	0800a82f 	.word	0x0800a82f
 800a6d8:	0800a67d 	.word	0x0800a67d
 800a6dc:	0800a731 	.word	0x0800a731
 800a6e0:	0800a67d 	.word	0x0800a67d
 800a6e4:	0800a67d 	.word	0x0800a67d
 800a6e8:	0800a7f7 	.word	0x0800a7f7
 800a6ec:	680b      	ldr	r3, [r1, #0]
 800a6ee:	1d1a      	adds	r2, r3, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	600a      	str	r2, [r1, #0]
 800a6f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e0a3      	b.n	800a848 <_printf_i+0x1f4>
 800a700:	6825      	ldr	r5, [r4, #0]
 800a702:	6808      	ldr	r0, [r1, #0]
 800a704:	062e      	lsls	r6, r5, #24
 800a706:	f100 0304 	add.w	r3, r0, #4
 800a70a:	d50a      	bpl.n	800a722 <_printf_i+0xce>
 800a70c:	6805      	ldr	r5, [r0, #0]
 800a70e:	600b      	str	r3, [r1, #0]
 800a710:	2d00      	cmp	r5, #0
 800a712:	da03      	bge.n	800a71c <_printf_i+0xc8>
 800a714:	232d      	movs	r3, #45	; 0x2d
 800a716:	426d      	negs	r5, r5
 800a718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a71c:	485e      	ldr	r0, [pc, #376]	; (800a898 <_printf_i+0x244>)
 800a71e:	230a      	movs	r3, #10
 800a720:	e019      	b.n	800a756 <_printf_i+0x102>
 800a722:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a726:	6805      	ldr	r5, [r0, #0]
 800a728:	600b      	str	r3, [r1, #0]
 800a72a:	bf18      	it	ne
 800a72c:	b22d      	sxthne	r5, r5
 800a72e:	e7ef      	b.n	800a710 <_printf_i+0xbc>
 800a730:	680b      	ldr	r3, [r1, #0]
 800a732:	6825      	ldr	r5, [r4, #0]
 800a734:	1d18      	adds	r0, r3, #4
 800a736:	6008      	str	r0, [r1, #0]
 800a738:	0628      	lsls	r0, r5, #24
 800a73a:	d501      	bpl.n	800a740 <_printf_i+0xec>
 800a73c:	681d      	ldr	r5, [r3, #0]
 800a73e:	e002      	b.n	800a746 <_printf_i+0xf2>
 800a740:	0669      	lsls	r1, r5, #25
 800a742:	d5fb      	bpl.n	800a73c <_printf_i+0xe8>
 800a744:	881d      	ldrh	r5, [r3, #0]
 800a746:	4854      	ldr	r0, [pc, #336]	; (800a898 <_printf_i+0x244>)
 800a748:	2f6f      	cmp	r7, #111	; 0x6f
 800a74a:	bf0c      	ite	eq
 800a74c:	2308      	moveq	r3, #8
 800a74e:	230a      	movne	r3, #10
 800a750:	2100      	movs	r1, #0
 800a752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a756:	6866      	ldr	r6, [r4, #4]
 800a758:	60a6      	str	r6, [r4, #8]
 800a75a:	2e00      	cmp	r6, #0
 800a75c:	bfa2      	ittt	ge
 800a75e:	6821      	ldrge	r1, [r4, #0]
 800a760:	f021 0104 	bicge.w	r1, r1, #4
 800a764:	6021      	strge	r1, [r4, #0]
 800a766:	b90d      	cbnz	r5, 800a76c <_printf_i+0x118>
 800a768:	2e00      	cmp	r6, #0
 800a76a:	d04d      	beq.n	800a808 <_printf_i+0x1b4>
 800a76c:	4616      	mov	r6, r2
 800a76e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a772:	fb03 5711 	mls	r7, r3, r1, r5
 800a776:	5dc7      	ldrb	r7, [r0, r7]
 800a778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a77c:	462f      	mov	r7, r5
 800a77e:	42bb      	cmp	r3, r7
 800a780:	460d      	mov	r5, r1
 800a782:	d9f4      	bls.n	800a76e <_printf_i+0x11a>
 800a784:	2b08      	cmp	r3, #8
 800a786:	d10b      	bne.n	800a7a0 <_printf_i+0x14c>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	07df      	lsls	r7, r3, #31
 800a78c:	d508      	bpl.n	800a7a0 <_printf_i+0x14c>
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	6861      	ldr	r1, [r4, #4]
 800a792:	4299      	cmp	r1, r3
 800a794:	bfde      	ittt	le
 800a796:	2330      	movle	r3, #48	; 0x30
 800a798:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a79c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a7a0:	1b92      	subs	r2, r2, r6
 800a7a2:	6122      	str	r2, [r4, #16]
 800a7a4:	f8cd a000 	str.w	sl, [sp]
 800a7a8:	464b      	mov	r3, r9
 800a7aa:	aa03      	add	r2, sp, #12
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	f7ff fee2 	bl	800a578 <_printf_common>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d14c      	bne.n	800a852 <_printf_i+0x1fe>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7bc:	b004      	add	sp, #16
 800a7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c2:	4835      	ldr	r0, [pc, #212]	; (800a898 <_printf_i+0x244>)
 800a7c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	680e      	ldr	r6, [r1, #0]
 800a7cc:	061f      	lsls	r7, r3, #24
 800a7ce:	f856 5b04 	ldr.w	r5, [r6], #4
 800a7d2:	600e      	str	r6, [r1, #0]
 800a7d4:	d514      	bpl.n	800a800 <_printf_i+0x1ac>
 800a7d6:	07d9      	lsls	r1, r3, #31
 800a7d8:	bf44      	itt	mi
 800a7da:	f043 0320 	orrmi.w	r3, r3, #32
 800a7de:	6023      	strmi	r3, [r4, #0]
 800a7e0:	b91d      	cbnz	r5, 800a7ea <_printf_i+0x196>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	f023 0320 	bic.w	r3, r3, #32
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	2310      	movs	r3, #16
 800a7ec:	e7b0      	b.n	800a750 <_printf_i+0xfc>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	f043 0320 	orr.w	r3, r3, #32
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	2378      	movs	r3, #120	; 0x78
 800a7f8:	4828      	ldr	r0, [pc, #160]	; (800a89c <_printf_i+0x248>)
 800a7fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7fe:	e7e3      	b.n	800a7c8 <_printf_i+0x174>
 800a800:	065e      	lsls	r6, r3, #25
 800a802:	bf48      	it	mi
 800a804:	b2ad      	uxthmi	r5, r5
 800a806:	e7e6      	b.n	800a7d6 <_printf_i+0x182>
 800a808:	4616      	mov	r6, r2
 800a80a:	e7bb      	b.n	800a784 <_printf_i+0x130>
 800a80c:	680b      	ldr	r3, [r1, #0]
 800a80e:	6826      	ldr	r6, [r4, #0]
 800a810:	6960      	ldr	r0, [r4, #20]
 800a812:	1d1d      	adds	r5, r3, #4
 800a814:	600d      	str	r5, [r1, #0]
 800a816:	0635      	lsls	r5, r6, #24
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	d501      	bpl.n	800a820 <_printf_i+0x1cc>
 800a81c:	6018      	str	r0, [r3, #0]
 800a81e:	e002      	b.n	800a826 <_printf_i+0x1d2>
 800a820:	0671      	lsls	r1, r6, #25
 800a822:	d5fb      	bpl.n	800a81c <_printf_i+0x1c8>
 800a824:	8018      	strh	r0, [r3, #0]
 800a826:	2300      	movs	r3, #0
 800a828:	6123      	str	r3, [r4, #16]
 800a82a:	4616      	mov	r6, r2
 800a82c:	e7ba      	b.n	800a7a4 <_printf_i+0x150>
 800a82e:	680b      	ldr	r3, [r1, #0]
 800a830:	1d1a      	adds	r2, r3, #4
 800a832:	600a      	str	r2, [r1, #0]
 800a834:	681e      	ldr	r6, [r3, #0]
 800a836:	6862      	ldr	r2, [r4, #4]
 800a838:	2100      	movs	r1, #0
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7f9 fa00 	bl	8003c40 <memchr>
 800a840:	b108      	cbz	r0, 800a846 <_printf_i+0x1f2>
 800a842:	1b80      	subs	r0, r0, r6
 800a844:	6060      	str	r0, [r4, #4]
 800a846:	6863      	ldr	r3, [r4, #4]
 800a848:	6123      	str	r3, [r4, #16]
 800a84a:	2300      	movs	r3, #0
 800a84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a850:	e7a8      	b.n	800a7a4 <_printf_i+0x150>
 800a852:	6923      	ldr	r3, [r4, #16]
 800a854:	4632      	mov	r2, r6
 800a856:	4649      	mov	r1, r9
 800a858:	4640      	mov	r0, r8
 800a85a:	47d0      	blx	sl
 800a85c:	3001      	adds	r0, #1
 800a85e:	d0ab      	beq.n	800a7b8 <_printf_i+0x164>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	079b      	lsls	r3, r3, #30
 800a864:	d413      	bmi.n	800a88e <_printf_i+0x23a>
 800a866:	68e0      	ldr	r0, [r4, #12]
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	4298      	cmp	r0, r3
 800a86c:	bfb8      	it	lt
 800a86e:	4618      	movlt	r0, r3
 800a870:	e7a4      	b.n	800a7bc <_printf_i+0x168>
 800a872:	2301      	movs	r3, #1
 800a874:	4632      	mov	r2, r6
 800a876:	4649      	mov	r1, r9
 800a878:	4640      	mov	r0, r8
 800a87a:	47d0      	blx	sl
 800a87c:	3001      	adds	r0, #1
 800a87e:	d09b      	beq.n	800a7b8 <_printf_i+0x164>
 800a880:	3501      	adds	r5, #1
 800a882:	68e3      	ldr	r3, [r4, #12]
 800a884:	9903      	ldr	r1, [sp, #12]
 800a886:	1a5b      	subs	r3, r3, r1
 800a888:	42ab      	cmp	r3, r5
 800a88a:	dcf2      	bgt.n	800a872 <_printf_i+0x21e>
 800a88c:	e7eb      	b.n	800a866 <_printf_i+0x212>
 800a88e:	2500      	movs	r5, #0
 800a890:	f104 0619 	add.w	r6, r4, #25
 800a894:	e7f5      	b.n	800a882 <_printf_i+0x22e>
 800a896:	bf00      	nop
 800a898:	0800be11 	.word	0x0800be11
 800a89c:	0800be22 	.word	0x0800be22

0800a8a0 <_putc_r>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	460d      	mov	r5, r1
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	b118      	cbz	r0, 800a8b2 <_putc_r+0x12>
 800a8aa:	6983      	ldr	r3, [r0, #24]
 800a8ac:	b90b      	cbnz	r3, 800a8b2 <_putc_r+0x12>
 800a8ae:	f7ff fb53 	bl	8009f58 <__sinit>
 800a8b2:	4b1c      	ldr	r3, [pc, #112]	; (800a924 <_putc_r+0x84>)
 800a8b4:	429c      	cmp	r4, r3
 800a8b6:	d124      	bne.n	800a902 <_putc_r+0x62>
 800a8b8:	6874      	ldr	r4, [r6, #4]
 800a8ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8bc:	07d8      	lsls	r0, r3, #31
 800a8be:	d405      	bmi.n	800a8cc <_putc_r+0x2c>
 800a8c0:	89a3      	ldrh	r3, [r4, #12]
 800a8c2:	0599      	lsls	r1, r3, #22
 800a8c4:	d402      	bmi.n	800a8cc <_putc_r+0x2c>
 800a8c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8c8:	f7ff fbe4 	bl	800a094 <__retarget_lock_acquire_recursive>
 800a8cc:	68a3      	ldr	r3, [r4, #8]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	60a3      	str	r3, [r4, #8]
 800a8d4:	da05      	bge.n	800a8e2 <_putc_r+0x42>
 800a8d6:	69a2      	ldr	r2, [r4, #24]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	db1c      	blt.n	800a916 <_putc_r+0x76>
 800a8dc:	b2eb      	uxtb	r3, r5
 800a8de:	2b0a      	cmp	r3, #10
 800a8e0:	d019      	beq.n	800a916 <_putc_r+0x76>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	1c5a      	adds	r2, r3, #1
 800a8e6:	6022      	str	r2, [r4, #0]
 800a8e8:	701d      	strb	r5, [r3, #0]
 800a8ea:	b2ed      	uxtb	r5, r5
 800a8ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8ee:	07da      	lsls	r2, r3, #31
 800a8f0:	d405      	bmi.n	800a8fe <_putc_r+0x5e>
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	059b      	lsls	r3, r3, #22
 800a8f6:	d402      	bmi.n	800a8fe <_putc_r+0x5e>
 800a8f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8fa:	f7ff fbcc 	bl	800a096 <__retarget_lock_release_recursive>
 800a8fe:	4628      	mov	r0, r5
 800a900:	bd70      	pop	{r4, r5, r6, pc}
 800a902:	4b09      	ldr	r3, [pc, #36]	; (800a928 <_putc_r+0x88>)
 800a904:	429c      	cmp	r4, r3
 800a906:	d101      	bne.n	800a90c <_putc_r+0x6c>
 800a908:	68b4      	ldr	r4, [r6, #8]
 800a90a:	e7d6      	b.n	800a8ba <_putc_r+0x1a>
 800a90c:	4b07      	ldr	r3, [pc, #28]	; (800a92c <_putc_r+0x8c>)
 800a90e:	429c      	cmp	r4, r3
 800a910:	bf08      	it	eq
 800a912:	68f4      	ldreq	r4, [r6, #12]
 800a914:	e7d1      	b.n	800a8ba <_putc_r+0x1a>
 800a916:	4629      	mov	r1, r5
 800a918:	4622      	mov	r2, r4
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7ff f942 	bl	8009ba4 <__swbuf_r>
 800a920:	4605      	mov	r5, r0
 800a922:	e7e3      	b.n	800a8ec <_putc_r+0x4c>
 800a924:	0800bdc0 	.word	0x0800bdc0
 800a928:	0800bde0 	.word	0x0800bde0
 800a92c:	0800bda0 	.word	0x0800bda0

0800a930 <_sbrk_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4d06      	ldr	r5, [pc, #24]	; (800a94c <_sbrk_r+0x1c>)
 800a934:	2300      	movs	r3, #0
 800a936:	4604      	mov	r4, r0
 800a938:	4608      	mov	r0, r1
 800a93a:	602b      	str	r3, [r5, #0]
 800a93c:	f7fc fde8 	bl	8007510 <_sbrk>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_sbrk_r+0x1a>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_sbrk_r+0x1a>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	20001a20 	.word	0x20001a20

0800a950 <__sread>:
 800a950:	b510      	push	{r4, lr}
 800a952:	460c      	mov	r4, r1
 800a954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a958:	f000 f8a0 	bl	800aa9c <_read_r>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	bfab      	itete	ge
 800a960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a962:	89a3      	ldrhlt	r3, [r4, #12]
 800a964:	181b      	addge	r3, r3, r0
 800a966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a96a:	bfac      	ite	ge
 800a96c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a96e:	81a3      	strhlt	r3, [r4, #12]
 800a970:	bd10      	pop	{r4, pc}

0800a972 <__swrite>:
 800a972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a976:	461f      	mov	r7, r3
 800a978:	898b      	ldrh	r3, [r1, #12]
 800a97a:	05db      	lsls	r3, r3, #23
 800a97c:	4605      	mov	r5, r0
 800a97e:	460c      	mov	r4, r1
 800a980:	4616      	mov	r6, r2
 800a982:	d505      	bpl.n	800a990 <__swrite+0x1e>
 800a984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a988:	2302      	movs	r3, #2
 800a98a:	2200      	movs	r2, #0
 800a98c:	f000 f868 	bl	800aa60 <_lseek_r>
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a99a:	81a3      	strh	r3, [r4, #12]
 800a99c:	4632      	mov	r2, r6
 800a99e:	463b      	mov	r3, r7
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a6:	f000 b817 	b.w	800a9d8 <_write_r>

0800a9aa <__sseek>:
 800a9aa:	b510      	push	{r4, lr}
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b2:	f000 f855 	bl	800aa60 <_lseek_r>
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	bf15      	itete	ne
 800a9bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9c6:	81a3      	strheq	r3, [r4, #12]
 800a9c8:	bf18      	it	ne
 800a9ca:	81a3      	strhne	r3, [r4, #12]
 800a9cc:	bd10      	pop	{r4, pc}

0800a9ce <__sclose>:
 800a9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d2:	f000 b813 	b.w	800a9fc <_close_r>
	...

0800a9d8 <_write_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	4d07      	ldr	r5, [pc, #28]	; (800a9f8 <_write_r+0x20>)
 800a9dc:	4604      	mov	r4, r0
 800a9de:	4608      	mov	r0, r1
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	602a      	str	r2, [r5, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f7fc fd84 	bl	80074f4 <_write>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d102      	bne.n	800a9f6 <_write_r+0x1e>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	b103      	cbz	r3, 800a9f6 <_write_r+0x1e>
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	20001a20 	.word	0x20001a20

0800a9fc <_close_r>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	4d06      	ldr	r5, [pc, #24]	; (800aa18 <_close_r+0x1c>)
 800aa00:	2300      	movs	r3, #0
 800aa02:	4604      	mov	r4, r0
 800aa04:	4608      	mov	r0, r1
 800aa06:	602b      	str	r3, [r5, #0]
 800aa08:	f7fc fd9c 	bl	8007544 <_close>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_close_r+0x1a>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_close_r+0x1a>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	20001a20 	.word	0x20001a20

0800aa1c <_fstat_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d07      	ldr	r5, [pc, #28]	; (800aa3c <_fstat_r+0x20>)
 800aa20:	2300      	movs	r3, #0
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	f7fc fd8e 	bl	800754a <_fstat>
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	d102      	bne.n	800aa38 <_fstat_r+0x1c>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	b103      	cbz	r3, 800aa38 <_fstat_r+0x1c>
 800aa36:	6023      	str	r3, [r4, #0]
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20001a20 	.word	0x20001a20

0800aa40 <_isatty_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4d06      	ldr	r5, [pc, #24]	; (800aa5c <_isatty_r+0x1c>)
 800aa44:	2300      	movs	r3, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	602b      	str	r3, [r5, #0]
 800aa4c:	f7fc fd82 	bl	8007554 <_isatty>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_isatty_r+0x1a>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_isatty_r+0x1a>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	20001a20 	.word	0x20001a20

0800aa60 <_lseek_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d07      	ldr	r5, [pc, #28]	; (800aa80 <_lseek_r+0x20>)
 800aa64:	4604      	mov	r4, r0
 800aa66:	4608      	mov	r0, r1
 800aa68:	4611      	mov	r1, r2
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	602a      	str	r2, [r5, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f7fc fd72 	bl	8007558 <_lseek>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	d102      	bne.n	800aa7e <_lseek_r+0x1e>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	b103      	cbz	r3, 800aa7e <_lseek_r+0x1e>
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	20001a20 	.word	0x20001a20

0800aa84 <__malloc_lock>:
 800aa84:	4801      	ldr	r0, [pc, #4]	; (800aa8c <__malloc_lock+0x8>)
 800aa86:	f7ff bb05 	b.w	800a094 <__retarget_lock_acquire_recursive>
 800aa8a:	bf00      	nop
 800aa8c:	20001a18 	.word	0x20001a18

0800aa90 <__malloc_unlock>:
 800aa90:	4801      	ldr	r0, [pc, #4]	; (800aa98 <__malloc_unlock+0x8>)
 800aa92:	f7ff bb00 	b.w	800a096 <__retarget_lock_release_recursive>
 800aa96:	bf00      	nop
 800aa98:	20001a18 	.word	0x20001a18

0800aa9c <_read_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4d07      	ldr	r5, [pc, #28]	; (800aabc <_read_r+0x20>)
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	4608      	mov	r0, r1
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	602a      	str	r2, [r5, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f7fc fd15 	bl	80074da <_read>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d102      	bne.n	800aaba <_read_r+0x1e>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	b103      	cbz	r3, 800aaba <_read_r+0x1e>
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	20001a20 	.word	0x20001a20

0800aac0 <_init>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	bf00      	nop
 800aac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac6:	bc08      	pop	{r3}
 800aac8:	469e      	mov	lr, r3
 800aaca:	4770      	bx	lr

0800aacc <_fini>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr

Disassembly of section .RamFunc:

0800aad8 <FLASH_Program_Fast>:
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800aad8:	4b0a      	ldr	r3, [pc, #40]	; (800ab04 <FLASH_Program_Fast+0x2c>)
 800aada:	695a      	ldr	r2, [r3, #20]
 800aadc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
{
 800aae0:	b530      	push	{r4, r5, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800aae2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aae4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800aae8:	b672      	cpsid	i
}
 800aaea:	2200      	movs	r2, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800aaec:	588d      	ldr	r5, [r1, r2]
 800aaee:	5085      	str	r5, [r0, r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 800aaf0:	3204      	adds	r2, #4
 800aaf2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800aaf6:	d1f9      	bne.n	800aaec <FLASH_Program_Fast+0x14>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800aaf8:	691a      	ldr	r2, [r3, #16]
 800aafa:	03d2      	lsls	r2, r2, #15
 800aafc:	d4fc      	bmi.n	800aaf8 <FLASH_Program_Fast+0x20>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aafe:	f384 8810 	msr	PRIMASK, r4
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800ab02:	bd30      	pop	{r4, r5, pc}
 800ab04:	58004000 	.word	0x58004000
