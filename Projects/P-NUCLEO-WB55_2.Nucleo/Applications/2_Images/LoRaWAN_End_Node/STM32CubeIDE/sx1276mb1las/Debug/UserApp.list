
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000200  08018200  08018200  00008200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edd0  08018400  08018400  00008400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff8  080271d0  080271d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080281c8  080281c8  00028400  2**0
                  CONTENTS
  4 .ARM          00000008  080281c8  080281c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080281d0  080281d0  00028400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080281d0  080281d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080281d8  080281d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20001010  080281e0  00021010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .align16      00000010  080283f0  080283f0  000283f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000191c  20001220  20001220  00031220  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20002b3c  20002b3c  00031220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00028400  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006fad8  00000000  00000000  00028430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000dc61  00000000  00000000  00097f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  000a5b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000044d0  00000000  00000000  000a7fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ff8d  00000000  00000000  000ac4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045709  00000000  00000000  000bc42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011c471  00000000  00000000  00101b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0021dfa7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000685c  00000000  00000000  0021dffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000213df  00000000  00000000  00224858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08018400 <__do_global_dtors_aux>:
 8018400:	b510      	push	{r4, lr}
 8018402:	4c05      	ldr	r4, [pc, #20]	; (8018418 <__do_global_dtors_aux+0x18>)
 8018404:	7823      	ldrb	r3, [r4, #0]
 8018406:	b933      	cbnz	r3, 8018416 <__do_global_dtors_aux+0x16>
 8018408:	4b04      	ldr	r3, [pc, #16]	; (801841c <__do_global_dtors_aux+0x1c>)
 801840a:	b113      	cbz	r3, 8018412 <__do_global_dtors_aux+0x12>
 801840c:	4804      	ldr	r0, [pc, #16]	; (8018420 <__do_global_dtors_aux+0x20>)
 801840e:	f3af 8000 	nop.w
 8018412:	2301      	movs	r3, #1
 8018414:	7023      	strb	r3, [r4, #0]
 8018416:	bd10      	pop	{r4, pc}
 8018418:	20001220 	.word	0x20001220
 801841c:	00000000 	.word	0x00000000
 8018420:	080271b8 	.word	0x080271b8

08018424 <frame_dummy>:
 8018424:	b508      	push	{r3, lr}
 8018426:	4b03      	ldr	r3, [pc, #12]	; (8018434 <frame_dummy+0x10>)
 8018428:	b11b      	cbz	r3, 8018432 <frame_dummy+0xe>
 801842a:	4903      	ldr	r1, [pc, #12]	; (8018438 <frame_dummy+0x14>)
 801842c:	4803      	ldr	r0, [pc, #12]	; (801843c <frame_dummy+0x18>)
 801842e:	f3af 8000 	nop.w
 8018432:	bd08      	pop	{r3, pc}
 8018434:	00000000 	.word	0x00000000
 8018438:	20001224 	.word	0x20001224
 801843c:	080271b8 	.word	0x080271b8

08018440 <strlen>:
 8018440:	4603      	mov	r3, r0
 8018442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018446:	2a00      	cmp	r2, #0
 8018448:	d1fb      	bne.n	8018442 <strlen+0x2>
 801844a:	1a18      	subs	r0, r3, r0
 801844c:	3801      	subs	r0, #1
 801844e:	4770      	bx	lr

08018450 <__aeabi_drsub>:
 8018450:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8018454:	e002      	b.n	801845c <__adddf3>
 8018456:	bf00      	nop

08018458 <__aeabi_dsub>:
 8018458:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801845c <__adddf3>:
 801845c:	b530      	push	{r4, r5, lr}
 801845e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8018462:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8018466:	ea94 0f05 	teq	r4, r5
 801846a:	bf08      	it	eq
 801846c:	ea90 0f02 	teqeq	r0, r2
 8018470:	bf1f      	itttt	ne
 8018472:	ea54 0c00 	orrsne.w	ip, r4, r0
 8018476:	ea55 0c02 	orrsne.w	ip, r5, r2
 801847a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801847e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018482:	f000 80e2 	beq.w	801864a <__adddf3+0x1ee>
 8018486:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801848a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801848e:	bfb8      	it	lt
 8018490:	426d      	neglt	r5, r5
 8018492:	dd0c      	ble.n	80184ae <__adddf3+0x52>
 8018494:	442c      	add	r4, r5
 8018496:	ea80 0202 	eor.w	r2, r0, r2
 801849a:	ea81 0303 	eor.w	r3, r1, r3
 801849e:	ea82 0000 	eor.w	r0, r2, r0
 80184a2:	ea83 0101 	eor.w	r1, r3, r1
 80184a6:	ea80 0202 	eor.w	r2, r0, r2
 80184aa:	ea81 0303 	eor.w	r3, r1, r3
 80184ae:	2d36      	cmp	r5, #54	; 0x36
 80184b0:	bf88      	it	hi
 80184b2:	bd30      	pophi	{r4, r5, pc}
 80184b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80184b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80184bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80184c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80184c4:	d002      	beq.n	80184cc <__adddf3+0x70>
 80184c6:	4240      	negs	r0, r0
 80184c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80184cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80184d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80184d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80184d8:	d002      	beq.n	80184e0 <__adddf3+0x84>
 80184da:	4252      	negs	r2, r2
 80184dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80184e0:	ea94 0f05 	teq	r4, r5
 80184e4:	f000 80a7 	beq.w	8018636 <__adddf3+0x1da>
 80184e8:	f1a4 0401 	sub.w	r4, r4, #1
 80184ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80184f0:	db0d      	blt.n	801850e <__adddf3+0xb2>
 80184f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80184f6:	fa22 f205 	lsr.w	r2, r2, r5
 80184fa:	1880      	adds	r0, r0, r2
 80184fc:	f141 0100 	adc.w	r1, r1, #0
 8018500:	fa03 f20e 	lsl.w	r2, r3, lr
 8018504:	1880      	adds	r0, r0, r2
 8018506:	fa43 f305 	asr.w	r3, r3, r5
 801850a:	4159      	adcs	r1, r3
 801850c:	e00e      	b.n	801852c <__adddf3+0xd0>
 801850e:	f1a5 0520 	sub.w	r5, r5, #32
 8018512:	f10e 0e20 	add.w	lr, lr, #32
 8018516:	2a01      	cmp	r2, #1
 8018518:	fa03 fc0e 	lsl.w	ip, r3, lr
 801851c:	bf28      	it	cs
 801851e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8018522:	fa43 f305 	asr.w	r3, r3, r5
 8018526:	18c0      	adds	r0, r0, r3
 8018528:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801852c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018530:	d507      	bpl.n	8018542 <__adddf3+0xe6>
 8018532:	f04f 0e00 	mov.w	lr, #0
 8018536:	f1dc 0c00 	rsbs	ip, ip, #0
 801853a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801853e:	eb6e 0101 	sbc.w	r1, lr, r1
 8018542:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8018546:	d31b      	bcc.n	8018580 <__adddf3+0x124>
 8018548:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801854c:	d30c      	bcc.n	8018568 <__adddf3+0x10c>
 801854e:	0849      	lsrs	r1, r1, #1
 8018550:	ea5f 0030 	movs.w	r0, r0, rrx
 8018554:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8018558:	f104 0401 	add.w	r4, r4, #1
 801855c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8018560:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8018564:	f080 809a 	bcs.w	801869c <__adddf3+0x240>
 8018568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801856c:	bf08      	it	eq
 801856e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018572:	f150 0000 	adcs.w	r0, r0, #0
 8018576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801857a:	ea41 0105 	orr.w	r1, r1, r5
 801857e:	bd30      	pop	{r4, r5, pc}
 8018580:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8018584:	4140      	adcs	r0, r0
 8018586:	eb41 0101 	adc.w	r1, r1, r1
 801858a:	3c01      	subs	r4, #1
 801858c:	bf28      	it	cs
 801858e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8018592:	d2e9      	bcs.n	8018568 <__adddf3+0x10c>
 8018594:	f091 0f00 	teq	r1, #0
 8018598:	bf04      	itt	eq
 801859a:	4601      	moveq	r1, r0
 801859c:	2000      	moveq	r0, #0
 801859e:	fab1 f381 	clz	r3, r1
 80185a2:	bf08      	it	eq
 80185a4:	3320      	addeq	r3, #32
 80185a6:	f1a3 030b 	sub.w	r3, r3, #11
 80185aa:	f1b3 0220 	subs.w	r2, r3, #32
 80185ae:	da0c      	bge.n	80185ca <__adddf3+0x16e>
 80185b0:	320c      	adds	r2, #12
 80185b2:	dd08      	ble.n	80185c6 <__adddf3+0x16a>
 80185b4:	f102 0c14 	add.w	ip, r2, #20
 80185b8:	f1c2 020c 	rsb	r2, r2, #12
 80185bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80185c0:	fa21 f102 	lsr.w	r1, r1, r2
 80185c4:	e00c      	b.n	80185e0 <__adddf3+0x184>
 80185c6:	f102 0214 	add.w	r2, r2, #20
 80185ca:	bfd8      	it	le
 80185cc:	f1c2 0c20 	rsble	ip, r2, #32
 80185d0:	fa01 f102 	lsl.w	r1, r1, r2
 80185d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80185d8:	bfdc      	itt	le
 80185da:	ea41 010c 	orrle.w	r1, r1, ip
 80185de:	4090      	lslle	r0, r2
 80185e0:	1ae4      	subs	r4, r4, r3
 80185e2:	bfa2      	ittt	ge
 80185e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80185e8:	4329      	orrge	r1, r5
 80185ea:	bd30      	popge	{r4, r5, pc}
 80185ec:	ea6f 0404 	mvn.w	r4, r4
 80185f0:	3c1f      	subs	r4, #31
 80185f2:	da1c      	bge.n	801862e <__adddf3+0x1d2>
 80185f4:	340c      	adds	r4, #12
 80185f6:	dc0e      	bgt.n	8018616 <__adddf3+0x1ba>
 80185f8:	f104 0414 	add.w	r4, r4, #20
 80185fc:	f1c4 0220 	rsb	r2, r4, #32
 8018600:	fa20 f004 	lsr.w	r0, r0, r4
 8018604:	fa01 f302 	lsl.w	r3, r1, r2
 8018608:	ea40 0003 	orr.w	r0, r0, r3
 801860c:	fa21 f304 	lsr.w	r3, r1, r4
 8018610:	ea45 0103 	orr.w	r1, r5, r3
 8018614:	bd30      	pop	{r4, r5, pc}
 8018616:	f1c4 040c 	rsb	r4, r4, #12
 801861a:	f1c4 0220 	rsb	r2, r4, #32
 801861e:	fa20 f002 	lsr.w	r0, r0, r2
 8018622:	fa01 f304 	lsl.w	r3, r1, r4
 8018626:	ea40 0003 	orr.w	r0, r0, r3
 801862a:	4629      	mov	r1, r5
 801862c:	bd30      	pop	{r4, r5, pc}
 801862e:	fa21 f004 	lsr.w	r0, r1, r4
 8018632:	4629      	mov	r1, r5
 8018634:	bd30      	pop	{r4, r5, pc}
 8018636:	f094 0f00 	teq	r4, #0
 801863a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801863e:	bf06      	itte	eq
 8018640:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8018644:	3401      	addeq	r4, #1
 8018646:	3d01      	subne	r5, #1
 8018648:	e74e      	b.n	80184e8 <__adddf3+0x8c>
 801864a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801864e:	bf18      	it	ne
 8018650:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018654:	d029      	beq.n	80186aa <__adddf3+0x24e>
 8018656:	ea94 0f05 	teq	r4, r5
 801865a:	bf08      	it	eq
 801865c:	ea90 0f02 	teqeq	r0, r2
 8018660:	d005      	beq.n	801866e <__adddf3+0x212>
 8018662:	ea54 0c00 	orrs.w	ip, r4, r0
 8018666:	bf04      	itt	eq
 8018668:	4619      	moveq	r1, r3
 801866a:	4610      	moveq	r0, r2
 801866c:	bd30      	pop	{r4, r5, pc}
 801866e:	ea91 0f03 	teq	r1, r3
 8018672:	bf1e      	ittt	ne
 8018674:	2100      	movne	r1, #0
 8018676:	2000      	movne	r0, #0
 8018678:	bd30      	popne	{r4, r5, pc}
 801867a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801867e:	d105      	bne.n	801868c <__adddf3+0x230>
 8018680:	0040      	lsls	r0, r0, #1
 8018682:	4149      	adcs	r1, r1
 8018684:	bf28      	it	cs
 8018686:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801868a:	bd30      	pop	{r4, r5, pc}
 801868c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8018690:	bf3c      	itt	cc
 8018692:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8018696:	bd30      	popcc	{r4, r5, pc}
 8018698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801869c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80186a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80186a4:	f04f 0000 	mov.w	r0, #0
 80186a8:	bd30      	pop	{r4, r5, pc}
 80186aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80186ae:	bf1a      	itte	ne
 80186b0:	4619      	movne	r1, r3
 80186b2:	4610      	movne	r0, r2
 80186b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80186b8:	bf1c      	itt	ne
 80186ba:	460b      	movne	r3, r1
 80186bc:	4602      	movne	r2, r0
 80186be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80186c2:	bf06      	itte	eq
 80186c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80186c8:	ea91 0f03 	teqeq	r1, r3
 80186cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80186d0:	bd30      	pop	{r4, r5, pc}
 80186d2:	bf00      	nop

080186d4 <__aeabi_ui2d>:
 80186d4:	f090 0f00 	teq	r0, #0
 80186d8:	bf04      	itt	eq
 80186da:	2100      	moveq	r1, #0
 80186dc:	4770      	bxeq	lr
 80186de:	b530      	push	{r4, r5, lr}
 80186e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80186e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80186e8:	f04f 0500 	mov.w	r5, #0
 80186ec:	f04f 0100 	mov.w	r1, #0
 80186f0:	e750      	b.n	8018594 <__adddf3+0x138>
 80186f2:	bf00      	nop

080186f4 <__aeabi_i2d>:
 80186f4:	f090 0f00 	teq	r0, #0
 80186f8:	bf04      	itt	eq
 80186fa:	2100      	moveq	r1, #0
 80186fc:	4770      	bxeq	lr
 80186fe:	b530      	push	{r4, r5, lr}
 8018700:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018704:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018708:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801870c:	bf48      	it	mi
 801870e:	4240      	negmi	r0, r0
 8018710:	f04f 0100 	mov.w	r1, #0
 8018714:	e73e      	b.n	8018594 <__adddf3+0x138>
 8018716:	bf00      	nop

08018718 <__aeabi_f2d>:
 8018718:	0042      	lsls	r2, r0, #1
 801871a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801871e:	ea4f 0131 	mov.w	r1, r1, rrx
 8018722:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8018726:	bf1f      	itttt	ne
 8018728:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801872c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018730:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8018734:	4770      	bxne	lr
 8018736:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801873a:	bf08      	it	eq
 801873c:	4770      	bxeq	lr
 801873e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8018742:	bf04      	itt	eq
 8018744:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8018748:	4770      	bxeq	lr
 801874a:	b530      	push	{r4, r5, lr}
 801874c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8018750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018758:	e71c      	b.n	8018594 <__adddf3+0x138>
 801875a:	bf00      	nop

0801875c <__aeabi_ul2d>:
 801875c:	ea50 0201 	orrs.w	r2, r0, r1
 8018760:	bf08      	it	eq
 8018762:	4770      	bxeq	lr
 8018764:	b530      	push	{r4, r5, lr}
 8018766:	f04f 0500 	mov.w	r5, #0
 801876a:	e00a      	b.n	8018782 <__aeabi_l2d+0x16>

0801876c <__aeabi_l2d>:
 801876c:	ea50 0201 	orrs.w	r2, r0, r1
 8018770:	bf08      	it	eq
 8018772:	4770      	bxeq	lr
 8018774:	b530      	push	{r4, r5, lr}
 8018776:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801877a:	d502      	bpl.n	8018782 <__aeabi_l2d+0x16>
 801877c:	4240      	negs	r0, r0
 801877e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018782:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018786:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801878a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801878e:	f43f aed8 	beq.w	8018542 <__adddf3+0xe6>
 8018792:	f04f 0203 	mov.w	r2, #3
 8018796:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801879a:	bf18      	it	ne
 801879c:	3203      	addne	r2, #3
 801879e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80187a2:	bf18      	it	ne
 80187a4:	3203      	addne	r2, #3
 80187a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80187aa:	f1c2 0320 	rsb	r3, r2, #32
 80187ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80187b2:	fa20 f002 	lsr.w	r0, r0, r2
 80187b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80187ba:	ea40 000e 	orr.w	r0, r0, lr
 80187be:	fa21 f102 	lsr.w	r1, r1, r2
 80187c2:	4414      	add	r4, r2
 80187c4:	e6bd      	b.n	8018542 <__adddf3+0xe6>
 80187c6:	bf00      	nop

080187c8 <__aeabi_dmul>:
 80187c8:	b570      	push	{r4, r5, r6, lr}
 80187ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80187ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80187d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80187d6:	bf1d      	ittte	ne
 80187d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80187dc:	ea94 0f0c 	teqne	r4, ip
 80187e0:	ea95 0f0c 	teqne	r5, ip
 80187e4:	f000 f8de 	bleq	80189a4 <__aeabi_dmul+0x1dc>
 80187e8:	442c      	add	r4, r5
 80187ea:	ea81 0603 	eor.w	r6, r1, r3
 80187ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80187f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80187f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80187fa:	bf18      	it	ne
 80187fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8018800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018808:	d038      	beq.n	801887c <__aeabi_dmul+0xb4>
 801880a:	fba0 ce02 	umull	ip, lr, r0, r2
 801880e:	f04f 0500 	mov.w	r5, #0
 8018812:	fbe1 e502 	umlal	lr, r5, r1, r2
 8018816:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801881a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801881e:	f04f 0600 	mov.w	r6, #0
 8018822:	fbe1 5603 	umlal	r5, r6, r1, r3
 8018826:	f09c 0f00 	teq	ip, #0
 801882a:	bf18      	it	ne
 801882c:	f04e 0e01 	orrne.w	lr, lr, #1
 8018830:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8018834:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8018838:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801883c:	d204      	bcs.n	8018848 <__aeabi_dmul+0x80>
 801883e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8018842:	416d      	adcs	r5, r5
 8018844:	eb46 0606 	adc.w	r6, r6, r6
 8018848:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801884c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8018850:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8018854:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8018858:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801885c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018860:	bf88      	it	hi
 8018862:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018866:	d81e      	bhi.n	80188a6 <__aeabi_dmul+0xde>
 8018868:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801886c:	bf08      	it	eq
 801886e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8018872:	f150 0000 	adcs.w	r0, r0, #0
 8018876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801887a:	bd70      	pop	{r4, r5, r6, pc}
 801887c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8018880:	ea46 0101 	orr.w	r1, r6, r1
 8018884:	ea40 0002 	orr.w	r0, r0, r2
 8018888:	ea81 0103 	eor.w	r1, r1, r3
 801888c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8018890:	bfc2      	ittt	gt
 8018892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801889a:	bd70      	popgt	{r4, r5, r6, pc}
 801889c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80188a0:	f04f 0e00 	mov.w	lr, #0
 80188a4:	3c01      	subs	r4, #1
 80188a6:	f300 80ab 	bgt.w	8018a00 <__aeabi_dmul+0x238>
 80188aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80188ae:	bfde      	ittt	le
 80188b0:	2000      	movle	r0, #0
 80188b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80188b6:	bd70      	pople	{r4, r5, r6, pc}
 80188b8:	f1c4 0400 	rsb	r4, r4, #0
 80188bc:	3c20      	subs	r4, #32
 80188be:	da35      	bge.n	801892c <__aeabi_dmul+0x164>
 80188c0:	340c      	adds	r4, #12
 80188c2:	dc1b      	bgt.n	80188fc <__aeabi_dmul+0x134>
 80188c4:	f104 0414 	add.w	r4, r4, #20
 80188c8:	f1c4 0520 	rsb	r5, r4, #32
 80188cc:	fa00 f305 	lsl.w	r3, r0, r5
 80188d0:	fa20 f004 	lsr.w	r0, r0, r4
 80188d4:	fa01 f205 	lsl.w	r2, r1, r5
 80188d8:	ea40 0002 	orr.w	r0, r0, r2
 80188dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80188e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80188e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80188e8:	fa21 f604 	lsr.w	r6, r1, r4
 80188ec:	eb42 0106 	adc.w	r1, r2, r6
 80188f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80188f4:	bf08      	it	eq
 80188f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80188fa:	bd70      	pop	{r4, r5, r6, pc}
 80188fc:	f1c4 040c 	rsb	r4, r4, #12
 8018900:	f1c4 0520 	rsb	r5, r4, #32
 8018904:	fa00 f304 	lsl.w	r3, r0, r4
 8018908:	fa20 f005 	lsr.w	r0, r0, r5
 801890c:	fa01 f204 	lsl.w	r2, r1, r4
 8018910:	ea40 0002 	orr.w	r0, r0, r2
 8018914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018918:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801891c:	f141 0100 	adc.w	r1, r1, #0
 8018920:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018924:	bf08      	it	eq
 8018926:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801892a:	bd70      	pop	{r4, r5, r6, pc}
 801892c:	f1c4 0520 	rsb	r5, r4, #32
 8018930:	fa00 f205 	lsl.w	r2, r0, r5
 8018934:	ea4e 0e02 	orr.w	lr, lr, r2
 8018938:	fa20 f304 	lsr.w	r3, r0, r4
 801893c:	fa01 f205 	lsl.w	r2, r1, r5
 8018940:	ea43 0302 	orr.w	r3, r3, r2
 8018944:	fa21 f004 	lsr.w	r0, r1, r4
 8018948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801894c:	fa21 f204 	lsr.w	r2, r1, r4
 8018950:	ea20 0002 	bic.w	r0, r0, r2
 8018954:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8018958:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801895c:	bf08      	it	eq
 801895e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018962:	bd70      	pop	{r4, r5, r6, pc}
 8018964:	f094 0f00 	teq	r4, #0
 8018968:	d10f      	bne.n	801898a <__aeabi_dmul+0x1c2>
 801896a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801896e:	0040      	lsls	r0, r0, #1
 8018970:	eb41 0101 	adc.w	r1, r1, r1
 8018974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018978:	bf08      	it	eq
 801897a:	3c01      	subeq	r4, #1
 801897c:	d0f7      	beq.n	801896e <__aeabi_dmul+0x1a6>
 801897e:	ea41 0106 	orr.w	r1, r1, r6
 8018982:	f095 0f00 	teq	r5, #0
 8018986:	bf18      	it	ne
 8018988:	4770      	bxne	lr
 801898a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801898e:	0052      	lsls	r2, r2, #1
 8018990:	eb43 0303 	adc.w	r3, r3, r3
 8018994:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8018998:	bf08      	it	eq
 801899a:	3d01      	subeq	r5, #1
 801899c:	d0f7      	beq.n	801898e <__aeabi_dmul+0x1c6>
 801899e:	ea43 0306 	orr.w	r3, r3, r6
 80189a2:	4770      	bx	lr
 80189a4:	ea94 0f0c 	teq	r4, ip
 80189a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80189ac:	bf18      	it	ne
 80189ae:	ea95 0f0c 	teqne	r5, ip
 80189b2:	d00c      	beq.n	80189ce <__aeabi_dmul+0x206>
 80189b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80189b8:	bf18      	it	ne
 80189ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80189be:	d1d1      	bne.n	8018964 <__aeabi_dmul+0x19c>
 80189c0:	ea81 0103 	eor.w	r1, r1, r3
 80189c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80189c8:	f04f 0000 	mov.w	r0, #0
 80189cc:	bd70      	pop	{r4, r5, r6, pc}
 80189ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80189d2:	bf06      	itte	eq
 80189d4:	4610      	moveq	r0, r2
 80189d6:	4619      	moveq	r1, r3
 80189d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80189dc:	d019      	beq.n	8018a12 <__aeabi_dmul+0x24a>
 80189de:	ea94 0f0c 	teq	r4, ip
 80189e2:	d102      	bne.n	80189ea <__aeabi_dmul+0x222>
 80189e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80189e8:	d113      	bne.n	8018a12 <__aeabi_dmul+0x24a>
 80189ea:	ea95 0f0c 	teq	r5, ip
 80189ee:	d105      	bne.n	80189fc <__aeabi_dmul+0x234>
 80189f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80189f4:	bf1c      	itt	ne
 80189f6:	4610      	movne	r0, r2
 80189f8:	4619      	movne	r1, r3
 80189fa:	d10a      	bne.n	8018a12 <__aeabi_dmul+0x24a>
 80189fc:	ea81 0103 	eor.w	r1, r1, r3
 8018a00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018a04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8018a08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018a0c:	f04f 0000 	mov.w	r0, #0
 8018a10:	bd70      	pop	{r4, r5, r6, pc}
 8018a12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8018a16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8018a1a:	bd70      	pop	{r4, r5, r6, pc}

08018a1c <__aeabi_ddiv>:
 8018a1c:	b570      	push	{r4, r5, r6, lr}
 8018a1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018a22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018a26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8018a2a:	bf1d      	ittte	ne
 8018a2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8018a30:	ea94 0f0c 	teqne	r4, ip
 8018a34:	ea95 0f0c 	teqne	r5, ip
 8018a38:	f000 f8a7 	bleq	8018b8a <__aeabi_ddiv+0x16e>
 8018a3c:	eba4 0405 	sub.w	r4, r4, r5
 8018a40:	ea81 0e03 	eor.w	lr, r1, r3
 8018a44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8018a48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8018a4c:	f000 8088 	beq.w	8018b60 <__aeabi_ddiv+0x144>
 8018a50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018a54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8018a58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8018a5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8018a60:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8018a64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8018a68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8018a6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8018a70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8018a74:	429d      	cmp	r5, r3
 8018a76:	bf08      	it	eq
 8018a78:	4296      	cmpeq	r6, r2
 8018a7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8018a7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8018a82:	d202      	bcs.n	8018a8a <__aeabi_ddiv+0x6e>
 8018a84:	085b      	lsrs	r3, r3, #1
 8018a86:	ea4f 0232 	mov.w	r2, r2, rrx
 8018a8a:	1ab6      	subs	r6, r6, r2
 8018a8c:	eb65 0503 	sbc.w	r5, r5, r3
 8018a90:	085b      	lsrs	r3, r3, #1
 8018a92:	ea4f 0232 	mov.w	r2, r2, rrx
 8018a96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8018a9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8018a9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8018aa2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018aa6:	bf22      	ittt	cs
 8018aa8:	1ab6      	subcs	r6, r6, r2
 8018aaa:	4675      	movcs	r5, lr
 8018aac:	ea40 000c 	orrcs.w	r0, r0, ip
 8018ab0:	085b      	lsrs	r3, r3, #1
 8018ab2:	ea4f 0232 	mov.w	r2, r2, rrx
 8018ab6:	ebb6 0e02 	subs.w	lr, r6, r2
 8018aba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018abe:	bf22      	ittt	cs
 8018ac0:	1ab6      	subcs	r6, r6, r2
 8018ac2:	4675      	movcs	r5, lr
 8018ac4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8018ac8:	085b      	lsrs	r3, r3, #1
 8018aca:	ea4f 0232 	mov.w	r2, r2, rrx
 8018ace:	ebb6 0e02 	subs.w	lr, r6, r2
 8018ad2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018ad6:	bf22      	ittt	cs
 8018ad8:	1ab6      	subcs	r6, r6, r2
 8018ada:	4675      	movcs	r5, lr
 8018adc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8018ae0:	085b      	lsrs	r3, r3, #1
 8018ae2:	ea4f 0232 	mov.w	r2, r2, rrx
 8018ae6:	ebb6 0e02 	subs.w	lr, r6, r2
 8018aea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018aee:	bf22      	ittt	cs
 8018af0:	1ab6      	subcs	r6, r6, r2
 8018af2:	4675      	movcs	r5, lr
 8018af4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8018af8:	ea55 0e06 	orrs.w	lr, r5, r6
 8018afc:	d018      	beq.n	8018b30 <__aeabi_ddiv+0x114>
 8018afe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8018b02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8018b06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8018b0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018b0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8018b12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018b16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8018b1a:	d1c0      	bne.n	8018a9e <__aeabi_ddiv+0x82>
 8018b1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018b20:	d10b      	bne.n	8018b3a <__aeabi_ddiv+0x11e>
 8018b22:	ea41 0100 	orr.w	r1, r1, r0
 8018b26:	f04f 0000 	mov.w	r0, #0
 8018b2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8018b2e:	e7b6      	b.n	8018a9e <__aeabi_ddiv+0x82>
 8018b30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018b34:	bf04      	itt	eq
 8018b36:	4301      	orreq	r1, r0
 8018b38:	2000      	moveq	r0, #0
 8018b3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018b3e:	bf88      	it	hi
 8018b40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018b44:	f63f aeaf 	bhi.w	80188a6 <__aeabi_dmul+0xde>
 8018b48:	ebb5 0c03 	subs.w	ip, r5, r3
 8018b4c:	bf04      	itt	eq
 8018b4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8018b52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018b56:	f150 0000 	adcs.w	r0, r0, #0
 8018b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018b5e:	bd70      	pop	{r4, r5, r6, pc}
 8018b60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8018b64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8018b68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8018b6c:	bfc2      	ittt	gt
 8018b6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018b72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018b76:	bd70      	popgt	{r4, r5, r6, pc}
 8018b78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018b7c:	f04f 0e00 	mov.w	lr, #0
 8018b80:	3c01      	subs	r4, #1
 8018b82:	e690      	b.n	80188a6 <__aeabi_dmul+0xde>
 8018b84:	ea45 0e06 	orr.w	lr, r5, r6
 8018b88:	e68d      	b.n	80188a6 <__aeabi_dmul+0xde>
 8018b8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8018b8e:	ea94 0f0c 	teq	r4, ip
 8018b92:	bf08      	it	eq
 8018b94:	ea95 0f0c 	teqeq	r5, ip
 8018b98:	f43f af3b 	beq.w	8018a12 <__aeabi_dmul+0x24a>
 8018b9c:	ea94 0f0c 	teq	r4, ip
 8018ba0:	d10a      	bne.n	8018bb8 <__aeabi_ddiv+0x19c>
 8018ba2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018ba6:	f47f af34 	bne.w	8018a12 <__aeabi_dmul+0x24a>
 8018baa:	ea95 0f0c 	teq	r5, ip
 8018bae:	f47f af25 	bne.w	80189fc <__aeabi_dmul+0x234>
 8018bb2:	4610      	mov	r0, r2
 8018bb4:	4619      	mov	r1, r3
 8018bb6:	e72c      	b.n	8018a12 <__aeabi_dmul+0x24a>
 8018bb8:	ea95 0f0c 	teq	r5, ip
 8018bbc:	d106      	bne.n	8018bcc <__aeabi_ddiv+0x1b0>
 8018bbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8018bc2:	f43f aefd 	beq.w	80189c0 <__aeabi_dmul+0x1f8>
 8018bc6:	4610      	mov	r0, r2
 8018bc8:	4619      	mov	r1, r3
 8018bca:	e722      	b.n	8018a12 <__aeabi_dmul+0x24a>
 8018bcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018bd0:	bf18      	it	ne
 8018bd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8018bd6:	f47f aec5 	bne.w	8018964 <__aeabi_dmul+0x19c>
 8018bda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8018bde:	f47f af0d 	bne.w	80189fc <__aeabi_dmul+0x234>
 8018be2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8018be6:	f47f aeeb 	bne.w	80189c0 <__aeabi_dmul+0x1f8>
 8018bea:	e712      	b.n	8018a12 <__aeabi_dmul+0x24a>

08018bec <__gedf2>:
 8018bec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8018bf0:	e006      	b.n	8018c00 <__cmpdf2+0x4>
 8018bf2:	bf00      	nop

08018bf4 <__ledf2>:
 8018bf4:	f04f 0c01 	mov.w	ip, #1
 8018bf8:	e002      	b.n	8018c00 <__cmpdf2+0x4>
 8018bfa:	bf00      	nop

08018bfc <__cmpdf2>:
 8018bfc:	f04f 0c01 	mov.w	ip, #1
 8018c00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8018c04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018c08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8018c10:	bf18      	it	ne
 8018c12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8018c16:	d01b      	beq.n	8018c50 <__cmpdf2+0x54>
 8018c18:	b001      	add	sp, #4
 8018c1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8018c1e:	bf0c      	ite	eq
 8018c20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8018c24:	ea91 0f03 	teqne	r1, r3
 8018c28:	bf02      	ittt	eq
 8018c2a:	ea90 0f02 	teqeq	r0, r2
 8018c2e:	2000      	moveq	r0, #0
 8018c30:	4770      	bxeq	lr
 8018c32:	f110 0f00 	cmn.w	r0, #0
 8018c36:	ea91 0f03 	teq	r1, r3
 8018c3a:	bf58      	it	pl
 8018c3c:	4299      	cmppl	r1, r3
 8018c3e:	bf08      	it	eq
 8018c40:	4290      	cmpeq	r0, r2
 8018c42:	bf2c      	ite	cs
 8018c44:	17d8      	asrcs	r0, r3, #31
 8018c46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8018c4a:	f040 0001 	orr.w	r0, r0, #1
 8018c4e:	4770      	bx	lr
 8018c50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018c54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018c58:	d102      	bne.n	8018c60 <__cmpdf2+0x64>
 8018c5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8018c5e:	d107      	bne.n	8018c70 <__cmpdf2+0x74>
 8018c60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8018c64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018c68:	d1d6      	bne.n	8018c18 <__cmpdf2+0x1c>
 8018c6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8018c6e:	d0d3      	beq.n	8018c18 <__cmpdf2+0x1c>
 8018c70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8018c74:	4770      	bx	lr
 8018c76:	bf00      	nop

08018c78 <__aeabi_cdrcmple>:
 8018c78:	4684      	mov	ip, r0
 8018c7a:	4610      	mov	r0, r2
 8018c7c:	4662      	mov	r2, ip
 8018c7e:	468c      	mov	ip, r1
 8018c80:	4619      	mov	r1, r3
 8018c82:	4663      	mov	r3, ip
 8018c84:	e000      	b.n	8018c88 <__aeabi_cdcmpeq>
 8018c86:	bf00      	nop

08018c88 <__aeabi_cdcmpeq>:
 8018c88:	b501      	push	{r0, lr}
 8018c8a:	f7ff ffb7 	bl	8018bfc <__cmpdf2>
 8018c8e:	2800      	cmp	r0, #0
 8018c90:	bf48      	it	mi
 8018c92:	f110 0f00 	cmnmi.w	r0, #0
 8018c96:	bd01      	pop	{r0, pc}

08018c98 <__aeabi_dcmpeq>:
 8018c98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018c9c:	f7ff fff4 	bl	8018c88 <__aeabi_cdcmpeq>
 8018ca0:	bf0c      	ite	eq
 8018ca2:	2001      	moveq	r0, #1
 8018ca4:	2000      	movne	r0, #0
 8018ca6:	f85d fb08 	ldr.w	pc, [sp], #8
 8018caa:	bf00      	nop

08018cac <__aeabi_dcmplt>:
 8018cac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018cb0:	f7ff ffea 	bl	8018c88 <__aeabi_cdcmpeq>
 8018cb4:	bf34      	ite	cc
 8018cb6:	2001      	movcc	r0, #1
 8018cb8:	2000      	movcs	r0, #0
 8018cba:	f85d fb08 	ldr.w	pc, [sp], #8
 8018cbe:	bf00      	nop

08018cc0 <__aeabi_dcmple>:
 8018cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018cc4:	f7ff ffe0 	bl	8018c88 <__aeabi_cdcmpeq>
 8018cc8:	bf94      	ite	ls
 8018cca:	2001      	movls	r0, #1
 8018ccc:	2000      	movhi	r0, #0
 8018cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8018cd2:	bf00      	nop

08018cd4 <__aeabi_dcmpge>:
 8018cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018cd8:	f7ff ffce 	bl	8018c78 <__aeabi_cdrcmple>
 8018cdc:	bf94      	ite	ls
 8018cde:	2001      	movls	r0, #1
 8018ce0:	2000      	movhi	r0, #0
 8018ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 8018ce6:	bf00      	nop

08018ce8 <__aeabi_dcmpgt>:
 8018ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018cec:	f7ff ffc4 	bl	8018c78 <__aeabi_cdrcmple>
 8018cf0:	bf34      	ite	cc
 8018cf2:	2001      	movcc	r0, #1
 8018cf4:	2000      	movcs	r0, #0
 8018cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8018cfa:	bf00      	nop

08018cfc <__aeabi_d2iz>:
 8018cfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8018d00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8018d04:	d215      	bcs.n	8018d32 <__aeabi_d2iz+0x36>
 8018d06:	d511      	bpl.n	8018d2c <__aeabi_d2iz+0x30>
 8018d08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8018d0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8018d10:	d912      	bls.n	8018d38 <__aeabi_d2iz+0x3c>
 8018d12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8018d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018d1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8018d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018d22:	fa23 f002 	lsr.w	r0, r3, r2
 8018d26:	bf18      	it	ne
 8018d28:	4240      	negne	r0, r0
 8018d2a:	4770      	bx	lr
 8018d2c:	f04f 0000 	mov.w	r0, #0
 8018d30:	4770      	bx	lr
 8018d32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8018d36:	d105      	bne.n	8018d44 <__aeabi_d2iz+0x48>
 8018d38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8018d3c:	bf08      	it	eq
 8018d3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8018d42:	4770      	bx	lr
 8018d44:	f04f 0000 	mov.w	r0, #0
 8018d48:	4770      	bx	lr
 8018d4a:	bf00      	nop

08018d4c <__aeabi_d2uiz>:
 8018d4c:	004a      	lsls	r2, r1, #1
 8018d4e:	d211      	bcs.n	8018d74 <__aeabi_d2uiz+0x28>
 8018d50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8018d54:	d211      	bcs.n	8018d7a <__aeabi_d2uiz+0x2e>
 8018d56:	d50d      	bpl.n	8018d74 <__aeabi_d2uiz+0x28>
 8018d58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8018d5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8018d60:	d40e      	bmi.n	8018d80 <__aeabi_d2uiz+0x34>
 8018d62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8018d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018d6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8018d6e:	fa23 f002 	lsr.w	r0, r3, r2
 8018d72:	4770      	bx	lr
 8018d74:	f04f 0000 	mov.w	r0, #0
 8018d78:	4770      	bx	lr
 8018d7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8018d7e:	d102      	bne.n	8018d86 <__aeabi_d2uiz+0x3a>
 8018d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d84:	4770      	bx	lr
 8018d86:	f04f 0000 	mov.w	r0, #0
 8018d8a:	4770      	bx	lr

08018d8c <__aeabi_uldivmod>:
 8018d8c:	b953      	cbnz	r3, 8018da4 <__aeabi_uldivmod+0x18>
 8018d8e:	b94a      	cbnz	r2, 8018da4 <__aeabi_uldivmod+0x18>
 8018d90:	2900      	cmp	r1, #0
 8018d92:	bf08      	it	eq
 8018d94:	2800      	cmpeq	r0, #0
 8018d96:	bf1c      	itt	ne
 8018d98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8018d9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8018da0:	f000 b96e 	b.w	8019080 <__aeabi_idiv0>
 8018da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8018da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8018dac:	f000 f806 	bl	8018dbc <__udivmoddi4>
 8018db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018db8:	b004      	add	sp, #16
 8018dba:	4770      	bx	lr

08018dbc <__udivmoddi4>:
 8018dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dc0:	9d08      	ldr	r5, [sp, #32]
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	468c      	mov	ip, r1
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	f040 8083 	bne.w	8018ed2 <__udivmoddi4+0x116>
 8018dcc:	428a      	cmp	r2, r1
 8018dce:	4617      	mov	r7, r2
 8018dd0:	d947      	bls.n	8018e62 <__udivmoddi4+0xa6>
 8018dd2:	fab2 f282 	clz	r2, r2
 8018dd6:	b142      	cbz	r2, 8018dea <__udivmoddi4+0x2e>
 8018dd8:	f1c2 0020 	rsb	r0, r2, #32
 8018ddc:	fa24 f000 	lsr.w	r0, r4, r0
 8018de0:	4091      	lsls	r1, r2
 8018de2:	4097      	lsls	r7, r2
 8018de4:	ea40 0c01 	orr.w	ip, r0, r1
 8018de8:	4094      	lsls	r4, r2
 8018dea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8018dee:	0c23      	lsrs	r3, r4, #16
 8018df0:	fbbc f6f8 	udiv	r6, ip, r8
 8018df4:	fa1f fe87 	uxth.w	lr, r7
 8018df8:	fb08 c116 	mls	r1, r8, r6, ip
 8018dfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8018e00:	fb06 f10e 	mul.w	r1, r6, lr
 8018e04:	4299      	cmp	r1, r3
 8018e06:	d909      	bls.n	8018e1c <__udivmoddi4+0x60>
 8018e08:	18fb      	adds	r3, r7, r3
 8018e0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8018e0e:	f080 8119 	bcs.w	8019044 <__udivmoddi4+0x288>
 8018e12:	4299      	cmp	r1, r3
 8018e14:	f240 8116 	bls.w	8019044 <__udivmoddi4+0x288>
 8018e18:	3e02      	subs	r6, #2
 8018e1a:	443b      	add	r3, r7
 8018e1c:	1a5b      	subs	r3, r3, r1
 8018e1e:	b2a4      	uxth	r4, r4
 8018e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8018e24:	fb08 3310 	mls	r3, r8, r0, r3
 8018e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8018e2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8018e30:	45a6      	cmp	lr, r4
 8018e32:	d909      	bls.n	8018e48 <__udivmoddi4+0x8c>
 8018e34:	193c      	adds	r4, r7, r4
 8018e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018e3a:	f080 8105 	bcs.w	8019048 <__udivmoddi4+0x28c>
 8018e3e:	45a6      	cmp	lr, r4
 8018e40:	f240 8102 	bls.w	8019048 <__udivmoddi4+0x28c>
 8018e44:	3802      	subs	r0, #2
 8018e46:	443c      	add	r4, r7
 8018e48:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8018e4c:	eba4 040e 	sub.w	r4, r4, lr
 8018e50:	2600      	movs	r6, #0
 8018e52:	b11d      	cbz	r5, 8018e5c <__udivmoddi4+0xa0>
 8018e54:	40d4      	lsrs	r4, r2
 8018e56:	2300      	movs	r3, #0
 8018e58:	e9c5 4300 	strd	r4, r3, [r5]
 8018e5c:	4631      	mov	r1, r6
 8018e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e62:	b902      	cbnz	r2, 8018e66 <__udivmoddi4+0xaa>
 8018e64:	deff      	udf	#255	; 0xff
 8018e66:	fab2 f282 	clz	r2, r2
 8018e6a:	2a00      	cmp	r2, #0
 8018e6c:	d150      	bne.n	8018f10 <__udivmoddi4+0x154>
 8018e6e:	1bcb      	subs	r3, r1, r7
 8018e70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8018e74:	fa1f f887 	uxth.w	r8, r7
 8018e78:	2601      	movs	r6, #1
 8018e7a:	fbb3 fcfe 	udiv	ip, r3, lr
 8018e7e:	0c21      	lsrs	r1, r4, #16
 8018e80:	fb0e 331c 	mls	r3, lr, ip, r3
 8018e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8018e88:	fb08 f30c 	mul.w	r3, r8, ip
 8018e8c:	428b      	cmp	r3, r1
 8018e8e:	d907      	bls.n	8018ea0 <__udivmoddi4+0xe4>
 8018e90:	1879      	adds	r1, r7, r1
 8018e92:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8018e96:	d202      	bcs.n	8018e9e <__udivmoddi4+0xe2>
 8018e98:	428b      	cmp	r3, r1
 8018e9a:	f200 80e9 	bhi.w	8019070 <__udivmoddi4+0x2b4>
 8018e9e:	4684      	mov	ip, r0
 8018ea0:	1ac9      	subs	r1, r1, r3
 8018ea2:	b2a3      	uxth	r3, r4
 8018ea4:	fbb1 f0fe 	udiv	r0, r1, lr
 8018ea8:	fb0e 1110 	mls	r1, lr, r0, r1
 8018eac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8018eb0:	fb08 f800 	mul.w	r8, r8, r0
 8018eb4:	45a0      	cmp	r8, r4
 8018eb6:	d907      	bls.n	8018ec8 <__udivmoddi4+0x10c>
 8018eb8:	193c      	adds	r4, r7, r4
 8018eba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018ebe:	d202      	bcs.n	8018ec6 <__udivmoddi4+0x10a>
 8018ec0:	45a0      	cmp	r8, r4
 8018ec2:	f200 80d9 	bhi.w	8019078 <__udivmoddi4+0x2bc>
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	eba4 0408 	sub.w	r4, r4, r8
 8018ecc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8018ed0:	e7bf      	b.n	8018e52 <__udivmoddi4+0x96>
 8018ed2:	428b      	cmp	r3, r1
 8018ed4:	d909      	bls.n	8018eea <__udivmoddi4+0x12e>
 8018ed6:	2d00      	cmp	r5, #0
 8018ed8:	f000 80b1 	beq.w	801903e <__udivmoddi4+0x282>
 8018edc:	2600      	movs	r6, #0
 8018ede:	e9c5 0100 	strd	r0, r1, [r5]
 8018ee2:	4630      	mov	r0, r6
 8018ee4:	4631      	mov	r1, r6
 8018ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eea:	fab3 f683 	clz	r6, r3
 8018eee:	2e00      	cmp	r6, #0
 8018ef0:	d14a      	bne.n	8018f88 <__udivmoddi4+0x1cc>
 8018ef2:	428b      	cmp	r3, r1
 8018ef4:	d302      	bcc.n	8018efc <__udivmoddi4+0x140>
 8018ef6:	4282      	cmp	r2, r0
 8018ef8:	f200 80b8 	bhi.w	801906c <__udivmoddi4+0x2b0>
 8018efc:	1a84      	subs	r4, r0, r2
 8018efe:	eb61 0103 	sbc.w	r1, r1, r3
 8018f02:	2001      	movs	r0, #1
 8018f04:	468c      	mov	ip, r1
 8018f06:	2d00      	cmp	r5, #0
 8018f08:	d0a8      	beq.n	8018e5c <__udivmoddi4+0xa0>
 8018f0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8018f0e:	e7a5      	b.n	8018e5c <__udivmoddi4+0xa0>
 8018f10:	f1c2 0320 	rsb	r3, r2, #32
 8018f14:	fa20 f603 	lsr.w	r6, r0, r3
 8018f18:	4097      	lsls	r7, r2
 8018f1a:	fa01 f002 	lsl.w	r0, r1, r2
 8018f1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8018f22:	40d9      	lsrs	r1, r3
 8018f24:	4330      	orrs	r0, r6
 8018f26:	0c03      	lsrs	r3, r0, #16
 8018f28:	fbb1 f6fe 	udiv	r6, r1, lr
 8018f2c:	fa1f f887 	uxth.w	r8, r7
 8018f30:	fb0e 1116 	mls	r1, lr, r6, r1
 8018f34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8018f38:	fb06 f108 	mul.w	r1, r6, r8
 8018f3c:	4299      	cmp	r1, r3
 8018f3e:	fa04 f402 	lsl.w	r4, r4, r2
 8018f42:	d909      	bls.n	8018f58 <__udivmoddi4+0x19c>
 8018f44:	18fb      	adds	r3, r7, r3
 8018f46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8018f4a:	f080 808d 	bcs.w	8019068 <__udivmoddi4+0x2ac>
 8018f4e:	4299      	cmp	r1, r3
 8018f50:	f240 808a 	bls.w	8019068 <__udivmoddi4+0x2ac>
 8018f54:	3e02      	subs	r6, #2
 8018f56:	443b      	add	r3, r7
 8018f58:	1a5b      	subs	r3, r3, r1
 8018f5a:	b281      	uxth	r1, r0
 8018f5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8018f60:	fb0e 3310 	mls	r3, lr, r0, r3
 8018f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8018f68:	fb00 f308 	mul.w	r3, r0, r8
 8018f6c:	428b      	cmp	r3, r1
 8018f6e:	d907      	bls.n	8018f80 <__udivmoddi4+0x1c4>
 8018f70:	1879      	adds	r1, r7, r1
 8018f72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8018f76:	d273      	bcs.n	8019060 <__udivmoddi4+0x2a4>
 8018f78:	428b      	cmp	r3, r1
 8018f7a:	d971      	bls.n	8019060 <__udivmoddi4+0x2a4>
 8018f7c:	3802      	subs	r0, #2
 8018f7e:	4439      	add	r1, r7
 8018f80:	1acb      	subs	r3, r1, r3
 8018f82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8018f86:	e778      	b.n	8018e7a <__udivmoddi4+0xbe>
 8018f88:	f1c6 0c20 	rsb	ip, r6, #32
 8018f8c:	fa03 f406 	lsl.w	r4, r3, r6
 8018f90:	fa22 f30c 	lsr.w	r3, r2, ip
 8018f94:	431c      	orrs	r4, r3
 8018f96:	fa20 f70c 	lsr.w	r7, r0, ip
 8018f9a:	fa01 f306 	lsl.w	r3, r1, r6
 8018f9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8018fa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8018fa6:	431f      	orrs	r7, r3
 8018fa8:	0c3b      	lsrs	r3, r7, #16
 8018faa:	fbb1 f9fe 	udiv	r9, r1, lr
 8018fae:	fa1f f884 	uxth.w	r8, r4
 8018fb2:	fb0e 1119 	mls	r1, lr, r9, r1
 8018fb6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8018fba:	fb09 fa08 	mul.w	sl, r9, r8
 8018fbe:	458a      	cmp	sl, r1
 8018fc0:	fa02 f206 	lsl.w	r2, r2, r6
 8018fc4:	fa00 f306 	lsl.w	r3, r0, r6
 8018fc8:	d908      	bls.n	8018fdc <__udivmoddi4+0x220>
 8018fca:	1861      	adds	r1, r4, r1
 8018fcc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8018fd0:	d248      	bcs.n	8019064 <__udivmoddi4+0x2a8>
 8018fd2:	458a      	cmp	sl, r1
 8018fd4:	d946      	bls.n	8019064 <__udivmoddi4+0x2a8>
 8018fd6:	f1a9 0902 	sub.w	r9, r9, #2
 8018fda:	4421      	add	r1, r4
 8018fdc:	eba1 010a 	sub.w	r1, r1, sl
 8018fe0:	b2bf      	uxth	r7, r7
 8018fe2:	fbb1 f0fe 	udiv	r0, r1, lr
 8018fe6:	fb0e 1110 	mls	r1, lr, r0, r1
 8018fea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8018fee:	fb00 f808 	mul.w	r8, r0, r8
 8018ff2:	45b8      	cmp	r8, r7
 8018ff4:	d907      	bls.n	8019006 <__udivmoddi4+0x24a>
 8018ff6:	19e7      	adds	r7, r4, r7
 8018ff8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8018ffc:	d22e      	bcs.n	801905c <__udivmoddi4+0x2a0>
 8018ffe:	45b8      	cmp	r8, r7
 8019000:	d92c      	bls.n	801905c <__udivmoddi4+0x2a0>
 8019002:	3802      	subs	r0, #2
 8019004:	4427      	add	r7, r4
 8019006:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 801900a:	eba7 0708 	sub.w	r7, r7, r8
 801900e:	fba0 8902 	umull	r8, r9, r0, r2
 8019012:	454f      	cmp	r7, r9
 8019014:	46c6      	mov	lr, r8
 8019016:	4649      	mov	r1, r9
 8019018:	d31a      	bcc.n	8019050 <__udivmoddi4+0x294>
 801901a:	d017      	beq.n	801904c <__udivmoddi4+0x290>
 801901c:	b15d      	cbz	r5, 8019036 <__udivmoddi4+0x27a>
 801901e:	ebb3 020e 	subs.w	r2, r3, lr
 8019022:	eb67 0701 	sbc.w	r7, r7, r1
 8019026:	fa07 fc0c 	lsl.w	ip, r7, ip
 801902a:	40f2      	lsrs	r2, r6
 801902c:	ea4c 0202 	orr.w	r2, ip, r2
 8019030:	40f7      	lsrs	r7, r6
 8019032:	e9c5 2700 	strd	r2, r7, [r5]
 8019036:	2600      	movs	r6, #0
 8019038:	4631      	mov	r1, r6
 801903a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801903e:	462e      	mov	r6, r5
 8019040:	4628      	mov	r0, r5
 8019042:	e70b      	b.n	8018e5c <__udivmoddi4+0xa0>
 8019044:	4606      	mov	r6, r0
 8019046:	e6e9      	b.n	8018e1c <__udivmoddi4+0x60>
 8019048:	4618      	mov	r0, r3
 801904a:	e6fd      	b.n	8018e48 <__udivmoddi4+0x8c>
 801904c:	4543      	cmp	r3, r8
 801904e:	d2e5      	bcs.n	801901c <__udivmoddi4+0x260>
 8019050:	ebb8 0e02 	subs.w	lr, r8, r2
 8019054:	eb69 0104 	sbc.w	r1, r9, r4
 8019058:	3801      	subs	r0, #1
 801905a:	e7df      	b.n	801901c <__udivmoddi4+0x260>
 801905c:	4608      	mov	r0, r1
 801905e:	e7d2      	b.n	8019006 <__udivmoddi4+0x24a>
 8019060:	4660      	mov	r0, ip
 8019062:	e78d      	b.n	8018f80 <__udivmoddi4+0x1c4>
 8019064:	4681      	mov	r9, r0
 8019066:	e7b9      	b.n	8018fdc <__udivmoddi4+0x220>
 8019068:	4666      	mov	r6, ip
 801906a:	e775      	b.n	8018f58 <__udivmoddi4+0x19c>
 801906c:	4630      	mov	r0, r6
 801906e:	e74a      	b.n	8018f06 <__udivmoddi4+0x14a>
 8019070:	f1ac 0c02 	sub.w	ip, ip, #2
 8019074:	4439      	add	r1, r7
 8019076:	e713      	b.n	8018ea0 <__udivmoddi4+0xe4>
 8019078:	3802      	subs	r0, #2
 801907a:	443c      	add	r4, r7
 801907c:	e724      	b.n	8018ec8 <__udivmoddi4+0x10c>
 801907e:	bf00      	nop

08019080 <__aeabi_idiv0>:
 8019080:	4770      	bx	lr
 8019082:	bf00      	nop

08019084 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8019084:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8019086:	f000 fea9 	bl	8019ddc <SystemApp_Init>
  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 801908a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LoRaWAN_Init();
 801908e:	f000 b9c5 	b.w	801941c <LoRaWAN_Init>

08019092 <MX_LoRaWAN_Process>:
  /* USER CODE END MX_LoRaWAN_Process_1 */
  /* start the sequencer  - uncomment if using sequencer */
  /*UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);*/

  /* if using serquencer then comment this line*/
  LoRaWAN_Process();
 8019092:	f000 ba33 	b.w	80194fc <LoRaWAN_Process>
	...

08019098 <OnSysTimeUpdate>:
}


static void OnSysTimeUpdate(void)
{
  IsClockSynched = true;
 8019098:	4b01      	ldr	r3, [pc, #4]	; (80190a0 <OnSysTimeUpdate+0x8>)
 801909a:	2201      	movs	r2, #1
 801909c:	701a      	strb	r2, [r3, #0]
}
 801909e:	4770      	bx	lr
 80190a0:	2000123c 	.word	0x2000123c

080190a4 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
  /* if using sequencer comment this line*/
  IsMacProcessPending = 1;
 80190a4:	4b01      	ldr	r3, [pc, #4]	; (80190ac <OnMacProcessNotify+0x8>)
 80190a6:	2201      	movs	r2, #1
 80190a8:	705a      	strb	r2, [r3, #1]

  /* To notify to the sequencer - task is ready to be executed - uncomment if using sequencer*/
  /*UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaWAN_Process), CFG_SEQ_Prio_0); */
}
 80190aa:	4770      	bx	lr
 80190ac:	2000123c 	.word	0x2000123c

080190b0 <OnFragProgress>:



static void OnFragProgress(uint16_t fragCounter, uint16_t fragNb, uint8_t fragSize, uint16_t fragNbLost)
{
 80190b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190b2:	4614      	mov	r4, r2
  /* Switch LED 3 OFF for each received downlink */
#if (INTEROP_TEST_MODE == 1)
  LED_Off(LED_BLUE) ;
#endif

  APP_PRINTF("\r\n....... FRAG_DECODER in Progress .......\r\n");
 80190b4:	2200      	movs	r2, #0
{
 80190b6:	4606      	mov	r6, r0
 80190b8:	460d      	mov	r5, r1
 80190ba:	461f      	mov	r7, r3
  APP_PRINTF("\r\n....... FRAG_DECODER in Progress .......\r\n");
 80190bc:	4611      	mov	r1, r2
 80190be:	4b0f      	ldr	r3, [pc, #60]	; (80190fc <OnFragProgress+0x4c>)
 80190c0:	4610      	mov	r0, r2
 80190c2:	f00d fbfd 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  APP_PRINTF("RECEIVED    : %5d / %5d Fragments\r\n", fragCounter, fragNb);
 80190c6:	2200      	movs	r2, #0
 80190c8:	e9cd 6500 	strd	r6, r5, [sp]
 80190cc:	4611      	mov	r1, r2
 80190ce:	4b0c      	ldr	r3, [pc, #48]	; (8019100 <OnFragProgress+0x50>)
 80190d0:	4610      	mov	r0, r2
 80190d2:	f00d fbf5 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  APP_PRINTF("              %5d / %5d Bytes\r\n", fragCounter * fragSize, fragNb * fragSize);
 80190d6:	4365      	muls	r5, r4
 80190d8:	2200      	movs	r2, #0
 80190da:	4374      	muls	r4, r6
 80190dc:	4611      	mov	r1, r2
 80190de:	4b09      	ldr	r3, [pc, #36]	; (8019104 <OnFragProgress+0x54>)
 80190e0:	9501      	str	r5, [sp, #4]
 80190e2:	9400      	str	r4, [sp, #0]
 80190e4:	4610      	mov	r0, r2
 80190e6:	f00d fbeb 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  APP_PRINTF("LOST        :       %7d Fragments\r\n\r\n", fragNbLost);
 80190ea:	2200      	movs	r2, #0
 80190ec:	4b06      	ldr	r3, [pc, #24]	; (8019108 <OnFragProgress+0x58>)
 80190ee:	9700      	str	r7, [sp, #0]
 80190f0:	4611      	mov	r1, r2
 80190f2:	4610      	mov	r0, r2
 80190f4:	f00d fbe4 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
}
 80190f8:	b003      	add	sp, #12
 80190fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190fc:	08027994 	.word	0x08027994
 8019100:	080279c1 	.word	0x080279c1
 8019104:	080279e5 	.word	0x080279e5
 8019108:	08027a05 	.word	0x08027a05

0801910c <OnTxTimerEvent>:
  IsTxFramePending = 1;
 801910c:	4802      	ldr	r0, [pc, #8]	; (8019118 <OnTxTimerEvent+0xc>)
 801910e:	2301      	movs	r3, #1
 8019110:	7083      	strb	r3, [r0, #2]
  UTIL_TIMER_Start(&TxTimer);
 8019112:	3004      	adds	r0, #4
 8019114:	f00d be36 	b.w	8026d84 <UTIL_TIMER_Start>
 8019118:	2000123c 	.word	0x2000123c

0801911c <FragDecoderErase>:



static uint8_t FragDecoderErase(uint32_t addr, uint32_t size)
{
  if (size >= UNFRAGMENTED_DATA_SIZE)
 801911c:	f240 4319 	movw	r3, #1049	; 0x419
 8019120:	4299      	cmp	r1, r3
 8019122:	d80b      	bhi.n	801913c <FragDecoderErase+0x20>
 8019124:	4b06      	ldr	r3, [pc, #24]	; (8019140 <FragDecoderErase+0x24>)
  }

#if (INTEROP_TEST_MODE == 1)
  for (uint32_t i = 0; i < size; i++)
  {
    UnfragmentedData[addr + i] = 0xFF;
 8019126:	22ff      	movs	r2, #255	; 0xff
 8019128:	4418      	add	r0, r3
  for (uint32_t i = 0; i < size; i++)
 801912a:	2300      	movs	r3, #0
 801912c:	4299      	cmp	r1, r3
 801912e:	d101      	bne.n	8019134 <FragDecoderErase+0x18>
 8019130:	2000      	movs	r0, #0
 8019132:	4770      	bx	lr
    UnfragmentedData[addr + i] = 0xFF;
 8019134:	f800 2b01 	strb.w	r2, [r0], #1
  for (uint32_t i = 0; i < size; i++)
 8019138:	3301      	adds	r3, #1
 801913a:	e7f7      	b.n	801912c <FragDecoderErase+0x10>
    return (uint8_t) - 1; /* Fail */
 801913c:	20ff      	movs	r0, #255	; 0xff
  {
    return -1;
  }
#endif /* INTEROP_TEST_MODE */
  return 0; /* Success */
}
 801913e:	4770      	bx	lr
 8019140:	20001258 	.word	0x20001258

08019144 <FragDecoderWrite>:

static uint8_t FragDecoderWrite(uint32_t addr, uint8_t *data, uint32_t size)
{
  if (size >= UNFRAGMENTED_DATA_SIZE)
 8019144:	f240 4319 	movw	r3, #1049	; 0x419
 8019148:	429a      	cmp	r2, r3
 801914a:	d80b      	bhi.n	8019164 <FragDecoderWrite+0x20>
 801914c:	4b06      	ldr	r3, [pc, #24]	; (8019168 <FragDecoderWrite+0x24>)
 801914e:	440a      	add	r2, r1
 8019150:	4418      	add	r0, r3
  {
    return (uint8_t) - 1; /* Fail */
  }

#if (INTEROP_TEST_MODE == 1)  /*write fragment in RAM - Caching mode*/
  for (uint32_t i = 0; i < size; i++)
 8019152:	4291      	cmp	r1, r2
 8019154:	d101      	bne.n	801915a <FragDecoderWrite+0x16>
 8019156:	2000      	movs	r0, #0
 8019158:	4770      	bx	lr
  {
    UnfragmentedData[addr + i] = data[i];
 801915a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801915e:	f800 3b01 	strb.w	r3, [r0], #1
  for (uint32_t i = 0; i < size; i++)
 8019162:	e7f6      	b.n	8019152 <FragDecoderWrite+0xe>
    return (uint8_t) - 1; /* Fail */
 8019164:	20ff      	movs	r0, #255	; 0xff
#else
  FlashMemHandler_Write((void *)addr, (uint8_t *)data, size);
#endif

  return 0; // Success
}
 8019166:	4770      	bx	lr
 8019168:	20001258 	.word	0x20001258

0801916c <FragDecoderRead>:

static uint8_t FragDecoderRead(uint32_t addr, uint8_t *data, uint32_t size)
{
  if (size >= UNFRAGMENTED_DATA_SIZE)
 801916c:	f240 4319 	movw	r3, #1049	; 0x419
 8019170:	429a      	cmp	r2, r3
 8019172:	d80b      	bhi.n	801918c <FragDecoderRead+0x20>
 8019174:	4b06      	ldr	r3, [pc, #24]	; (8019190 <FragDecoderRead+0x24>)
 8019176:	440a      	add	r2, r1
 8019178:	4418      	add	r0, r3
  {
    return (uint8_t) - 1; /* Fail */
  }

#if (INTEROP_TEST_MODE == 1)   /*Read fragment in RAM - Caching mode*/
  for (uint32_t i = 0; i < size; i++)
 801917a:	4291      	cmp	r1, r2
 801917c:	d101      	bne.n	8019182 <FragDecoderRead+0x16>
 801917e:	2000      	movs	r0, #0
 8019180:	4770      	bx	lr
  {
    data[i] = UnfragmentedData[addr + i];
 8019182:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019186:	f801 3b01 	strb.w	r3, [r1], #1
  for (uint32_t i = 0; i < size; i++)
 801918a:	e7f6      	b.n	801917a <FragDecoderRead+0xe>
    return (uint8_t) - 1; /* Fail */
 801918c:	20ff      	movs	r0, #255	; 0xff
#else
  FlashMemHandler_Read((void *)addr, data, size);
#endif

  return 0; // Success
}
 801918e:	4770      	bx	lr
 8019190:	20001258 	.word	0x20001258

08019194 <OnTxData>:
{
 8019194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8019196:	4604      	mov	r4, r0
 8019198:	b368      	cbz	r0, 80191f6 <OnTxData+0x62>
 801919a:	7803      	ldrb	r3, [r0, #0]
 801919c:	b35b      	cbz	r3, 80191f6 <OnTxData+0x62>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 801919e:	2200      	movs	r2, #0
 80191a0:	4611      	mov	r1, r2
 80191a2:	4b1a      	ldr	r3, [pc, #104]	; (801920c <OnTxData+0x78>)
 80191a4:	2002      	movs	r0, #2
 80191a6:	f00d fb8b 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80191aa:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80191ae:	9303      	str	r3, [sp, #12]
 80191b0:	f994 3004 	ldrsb.w	r3, [r4, #4]
 80191b4:	9302      	str	r3, [sp, #8]
 80191b6:	7b23      	ldrb	r3, [r4, #12]
 80191b8:	9301      	str	r3, [sp, #4]
 80191ba:	68a3      	ldr	r3, [r4, #8]
 80191bc:	9300      	str	r3, [sp, #0]
 80191be:	2200      	movs	r2, #0
 80191c0:	4611      	mov	r1, r2
 80191c2:	4b13      	ldr	r3, [pc, #76]	; (8019210 <OnTxData+0x7c>)
 80191c4:	2003      	movs	r0, #3
 80191c6:	f00d fb7b 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80191ca:	2200      	movs	r2, #0
 80191cc:	4b11      	ldr	r3, [pc, #68]	; (8019214 <OnTxData+0x80>)
 80191ce:	4611      	mov	r1, r2
 80191d0:	2003      	movs	r0, #3
 80191d2:	f00d fb75 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80191d6:	78a3      	ldrb	r3, [r4, #2]
 80191d8:	2b01      	cmp	r3, #1
 80191da:	d10e      	bne.n	80191fa <OnTxData+0x66>
      APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80191dc:	78e1      	ldrb	r1, [r4, #3]
 80191de:	4a0e      	ldr	r2, [pc, #56]	; (8019218 <OnTxData+0x84>)
 80191e0:	4b0e      	ldr	r3, [pc, #56]	; (801921c <OnTxData+0x88>)
 80191e2:	2900      	cmp	r1, #0
 80191e4:	bf08      	it	eq
 80191e6:	4613      	moveq	r3, r2
 80191e8:	2200      	movs	r2, #0
 80191ea:	9300      	str	r3, [sp, #0]
 80191ec:	4611      	mov	r1, r2
 80191ee:	4b0c      	ldr	r3, [pc, #48]	; (8019220 <OnTxData+0x8c>)
 80191f0:	2003      	movs	r0, #3
 80191f2:	f00d fb65 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
}
 80191f6:	b004      	add	sp, #16
 80191f8:	bd10      	pop	{r4, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80191fa:	2200      	movs	r2, #0
 80191fc:	4b09      	ldr	r3, [pc, #36]	; (8019224 <OnTxData+0x90>)
 80191fe:	4611      	mov	r1, r2
 8019200:	2003      	movs	r0, #3
}
 8019202:	b004      	add	sp, #16
 8019204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8019208:	f00d bb5a 	b.w	80268c0 <UTIL_ADV_TRACE_COND_FSend>
 801920c:	08027a30 	.word	0x08027a30
 8019210:	08027a61 	.word	0x08027a61
 8019214:	08027a92 	.word	0x08027a92
 8019218:	08027a2b 	.word	0x08027a2b
 801921c:	08027a2c 	.word	0x08027a2c
 8019220:	08027a9f 	.word	0x08027a9f
 8019224:	08027ab0 	.word	0x08027ab0

08019228 <OnJoinRequest>:
{
 8019228:	b513      	push	{r0, r1, r4, lr}
  if (joinParams != NULL)
 801922a:	4604      	mov	r4, r0
 801922c:	b1c0      	cbz	r0, 8019260 <OnJoinRequest+0x38>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 801922e:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8019232:	b992      	cbnz	r2, 801925a <OnJoinRequest+0x32>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8019234:	4b0b      	ldr	r3, [pc, #44]	; (8019264 <OnJoinRequest+0x3c>)
 8019236:	9201      	str	r2, [sp, #4]
 8019238:	4611      	mov	r1, r2
 801923a:	2002      	movs	r0, #2
 801923c:	f00d fb40 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8019240:	78a3      	ldrb	r3, [r4, #2]
 8019242:	9a01      	ldr	r2, [sp, #4]
 8019244:	2b01      	cmp	r3, #1
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8019246:	bf0c      	ite	eq
 8019248:	4b07      	ldreq	r3, [pc, #28]	; (8019268 <OnJoinRequest+0x40>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 801924a:	4b08      	ldrne	r3, [pc, #32]	; (801926c <OnJoinRequest+0x44>)
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 801924c:	4611      	mov	r1, r2
 801924e:	2002      	movs	r0, #2
}
 8019250:	b002      	add	sp, #8
 8019252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8019256:	f00d bb33 	b.w	80268c0 <UTIL_ADV_TRACE_COND_FSend>
 801925a:	4b05      	ldr	r3, [pc, #20]	; (8019270 <OnJoinRequest+0x48>)
 801925c:	2200      	movs	r2, #0
 801925e:	e7f5      	b.n	801924c <OnJoinRequest+0x24>
}
 8019260:	b002      	add	sp, #8
 8019262:	bd10      	pop	{r4, pc}
 8019264:	08027abe 	.word	0x08027abe
 8019268:	08027ad3 	.word	0x08027ad3
 801926c:	08027af0 	.word	0x08027af0
 8019270:	08027b0d 	.word	0x08027b0d

08019274 <OnClassChange>:
{
 8019274:	b530      	push	{r4, r5, lr}
  APP_PRINTF("\r\n...... Switch to Class %c done. .......\r\n", "ABC"[deviceClass]);
 8019276:	4b11      	ldr	r3, [pc, #68]	; (80192bc <OnClassChange+0x48>)
 8019278:	4d11      	ldr	r5, [pc, #68]	; (80192c0 <OnClassChange+0x4c>)
 801927a:	5c1b      	ldrb	r3, [r3, r0]
{
 801927c:	b085      	sub	sp, #20
  APP_PRINTF("\r\n...... Switch to Class %c done. .......\r\n", "ABC"[deviceClass]);
 801927e:	2200      	movs	r2, #0
{
 8019280:	4604      	mov	r4, r0
  APP_PRINTF("\r\n...... Switch to Class %c done. .......\r\n", "ABC"[deviceClass]);
 8019282:	9300      	str	r3, [sp, #0]
 8019284:	4611      	mov	r1, r2
 8019286:	4b0f      	ldr	r3, [pc, #60]	; (80192c4 <OnClassChange+0x50>)
 8019288:	4610      	mov	r0, r2
 801928a:	f00d fb19 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  switch (deviceClass)
 801928e:	2c01      	cmp	r4, #1
 8019290:	d005      	beq.n	801929e <OnClassChange+0x2a>
 8019292:	2c02      	cmp	r4, #2
 8019294:	d010      	beq.n	80192b8 <OnClassChange+0x44>
      IsMcSessionStarted = false;
 8019296:	2300      	movs	r3, #0
      IsMcSessionStarted = true;
 8019298:	f885 3436 	strb.w	r3, [r5, #1078]	; 0x436
}
 801929c:	e00a      	b.n	80192b4 <OnClassChange+0x40>
      LmHandlerAppData_t appData =
 801929e:	2200      	movs	r2, #0
      LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80192a0:	4623      	mov	r3, r4
 80192a2:	4611      	mov	r1, r2
 80192a4:	a802      	add	r0, sp, #8
      LmHandlerAppData_t appData =
 80192a6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80192aa:	9203      	str	r2, [sp, #12]
      LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80192ac:	f005 ff72 	bl	801f194 <LmHandlerSend>
      IsMcSessionStarted = true;
 80192b0:	f885 4436 	strb.w	r4, [r5, #1078]	; 0x436
}
 80192b4:	b005      	add	sp, #20
 80192b6:	bd30      	pop	{r4, r5, pc}
      IsMcSessionStarted = true;
 80192b8:	2301      	movs	r3, #1
 80192ba:	e7ed      	b.n	8019298 <OnClassChange+0x24>
 80192bc:	08027b52 	.word	0x08027b52
 80192c0:	2000123c 	.word	0x2000123c
 80192c4:	08027b26 	.word	0x08027b26

080192c8 <OnRxData>:
{
 80192c8:	b530      	push	{r4, r5, lr}
 80192ca:	460d      	mov	r5, r1
 80192cc:	b087      	sub	sp, #28
  if ((appData != NULL) && (params != NULL))
 80192ce:	4604      	mov	r4, r0
 80192d0:	2800      	cmp	r0, #0
 80192d2:	d046      	beq.n	8019362 <OnRxData+0x9a>
 80192d4:	2900      	cmp	r1, #0
 80192d6:	d044      	beq.n	8019362 <OnRxData+0x9a>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 80192d8:	2200      	movs	r2, #0
 80192da:	4611      	mov	r1, r2
 80192dc:	4b22      	ldr	r3, [pc, #136]	; (8019368 <OnRxData+0xa0>)
 80192de:	2002      	movs	r0, #2
 80192e0:	f00d faee 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 80192e4:	f995 3004 	ldrsb.w	r3, [r5, #4]
 80192e8:	9305      	str	r3, [sp, #20]
 80192ea:	f995 3003 	ldrsb.w	r3, [r5, #3]
 80192ee:	9304      	str	r3, [sp, #16]
 80192f0:	f995 3002 	ldrsb.w	r3, [r5, #2]
 80192f4:	9303      	str	r3, [sp, #12]
 80192f6:	7823      	ldrb	r3, [r4, #0]
 80192f8:	f995 200c 	ldrsb.w	r2, [r5, #12]
 80192fc:	9302      	str	r3, [sp, #8]
 80192fe:	4b1b      	ldr	r3, [pc, #108]	; (801936c <OnRxData+0xa4>)
 8019300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019304:	9301      	str	r3, [sp, #4]
 8019306:	2200      	movs	r2, #0
 8019308:	68ab      	ldr	r3, [r5, #8]
 801930a:	9300      	str	r3, [sp, #0]
 801930c:	4611      	mov	r1, r2
 801930e:	4b18      	ldr	r3, [pc, #96]	; (8019370 <OnRxData+0xa8>)
 8019310:	2003      	movs	r0, #3
 8019312:	f00d fad5 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8019316:	7823      	ldrb	r3, [r4, #0]
 8019318:	2b02      	cmp	r3, #2
 801931a:	d010      	beq.n	801933e <OnRxData+0x76>
 801931c:	2b03      	cmp	r3, #3
 801931e:	d120      	bne.n	8019362 <OnRxData+0x9a>
        if (appData->BufferSize == 1)
 8019320:	7863      	ldrb	r3, [r4, #1]
 8019322:	2b01      	cmp	r3, #1
 8019324:	d11d      	bne.n	8019362 <OnRxData+0x9a>
          switch (appData->Buffer[0])
 8019326:	6863      	ldr	r3, [r4, #4]
 8019328:	7818      	ldrb	r0, [r3, #0]
 801932a:	2801      	cmp	r0, #1
 801932c:	d002      	beq.n	8019334 <OnRxData+0x6c>
 801932e:	2802      	cmp	r0, #2
 8019330:	d000      	beq.n	8019334 <OnRxData+0x6c>
 8019332:	b9b0      	cbnz	r0, 8019362 <OnRxData+0x9a>
}
 8019334:	b007      	add	sp, #28
 8019336:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              LmHandlerRequestClass(CLASS_C);
 801933a:	f005 be5d 	b.w	801eff8 <LmHandlerRequestClass>
        if (appData->BufferSize == 1)
 801933e:	7863      	ldrb	r3, [r4, #1]
 8019340:	2b01      	cmp	r3, #1
 8019342:	d10e      	bne.n	8019362 <OnRxData+0x9a>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8019344:	6863      	ldr	r3, [r4, #4]
 8019346:	781a      	ldrb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8019348:	f012 0201 	ands.w	r2, r2, #1
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 801934c:	bf16      	itet	ne
 801934e:	2200      	movne	r2, #0
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8019350:	4b08      	ldreq	r3, [pc, #32]	; (8019374 <OnRxData+0xac>)
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8019352:	4b09      	ldrne	r3, [pc, #36]	; (8019378 <OnRxData+0xb0>)
 8019354:	4611      	mov	r1, r2
 8019356:	2003      	movs	r0, #3
}
 8019358:	b007      	add	sp, #28
 801935a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 801935e:	f00d baaf 	b.w	80268c0 <UTIL_ADV_TRACE_COND_FSend>
}
 8019362:	b007      	add	sp, #28
 8019364:	bd30      	pop	{r4, r5, pc}
 8019366:	bf00      	nop
 8019368:	08027b56 	.word	0x08027b56
 801936c:	080271d0 	.word	0x080271d0
 8019370:	08027b87 	.word	0x08027b87
 8019374:	08027bce 	.word	0x08027bce
 8019378:	08027bd8 	.word	0x08027bd8

0801937c <OnFragDone>:
{
 801937c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  APP_PRINTF("\r\n....... FRAG_DECODER Finished .......\r\n");
 801937e:	2200      	movs	r2, #0
{
 8019380:	4605      	mov	r5, r0
  APP_PRINTF("\r\n....... FRAG_DECODER Finished .......\r\n");
 8019382:	4b1f      	ldr	r3, [pc, #124]	; (8019400 <OnFragDone+0x84>)
      crc = (crc >> 1) ^ (reversedPolynom & ~((crc & 0x01) - 1));
 8019384:	4f1f      	ldr	r7, [pc, #124]	; (8019404 <OnFragDone+0x88>)
{
 8019386:	460c      	mov	r4, r1
  APP_PRINTF("\r\n....... FRAG_DECODER Finished .......\r\n");
 8019388:	4610      	mov	r0, r2
 801938a:	4611      	mov	r1, r2
 801938c:	f00d fa98 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  APP_PRINTF("STATUS      : %d\r\n", status);
 8019390:	2200      	movs	r2, #0
 8019392:	4b1d      	ldr	r3, [pc, #116]	; (8019408 <OnFragDone+0x8c>)
 8019394:	9500      	str	r5, [sp, #0]
 8019396:	4611      	mov	r1, r2
 8019398:	4610      	mov	r0, r2
 801939a:	4d1c      	ldr	r5, [pc, #112]	; (801940c <OnFragDone+0x90>)
 801939c:	f00d fa90 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  FileRxCrc = Crc32(UnfragmentedData, size);
 80193a0:	b2a6      	uxth	r6, r4
 80193a2:	2100      	movs	r1, #0
  uint32_t crc = 0xFFFFFFFF;
 80193a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (uint16_t i = 0; i < length; ++i)
 80193a8:	b28a      	uxth	r2, r1
 80193aa:	4296      	cmp	r6, r2
 80193ac:	d818      	bhi.n	80193e0 <OnFragDone+0x64>
  FileRxCrc = Crc32(UnfragmentedData, size);
 80193ae:	4d18      	ldr	r5, [pc, #96]	; (8019410 <OnFragDone+0x94>)
  return ~crc;
 80193b0:	43db      	mvns	r3, r3
  FileRxCrc = Crc32(UnfragmentedData, size);
 80193b2:	f8c5 3438 	str.w	r3, [r5, #1080]	; 0x438
  APP_PRINTF("Size      : %d\r\n", size);
 80193b6:	2200      	movs	r2, #0
  IsFileTransferDone = true;
 80193b8:	2301      	movs	r3, #1
 80193ba:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
  APP_PRINTF("Size      : %d\r\n", size);
 80193be:	4611      	mov	r1, r2
 80193c0:	4b14      	ldr	r3, [pc, #80]	; (8019414 <OnFragDone+0x98>)
 80193c2:	9400      	str	r4, [sp, #0]
 80193c4:	4610      	mov	r0, r2
 80193c6:	f00d fa7b 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  APP_PRINTF("CRC         : %08X\r\n\r\n", FileRxCrc);
 80193ca:	f8d5 3438 	ldr.w	r3, [r5, #1080]	; 0x438
 80193ce:	9300      	str	r3, [sp, #0]
 80193d0:	2200      	movs	r2, #0
 80193d2:	4b11      	ldr	r3, [pc, #68]	; (8019418 <OnFragDone+0x9c>)
 80193d4:	4611      	mov	r1, r2
 80193d6:	4610      	mov	r0, r2
 80193d8:	f00d fa72 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
}
 80193dc:	b003      	add	sp, #12
 80193de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    crc ^= (uint32_t)buffer[i];
 80193e0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80193e4:	4053      	eors	r3, r2
 80193e6:	2208      	movs	r2, #8
      crc = (crc >> 1) ^ (reversedPolynom & ~((crc & 0x01) - 1));
 80193e8:	f343 0000 	sbfx	r0, r3, #0, #1
 80193ec:	3a01      	subs	r2, #1
 80193ee:	4038      	ands	r0, r7
 80193f0:	b292      	uxth	r2, r2
 80193f2:	ea80 0353 	eor.w	r3, r0, r3, lsr #1
    for (uint16_t i = 0; i < 8; i++)
 80193f6:	2a00      	cmp	r2, #0
 80193f8:	d1f6      	bne.n	80193e8 <OnFragDone+0x6c>
  for (uint16_t i = 0; i < length; ++i)
 80193fa:	3101      	adds	r1, #1
 80193fc:	e7d4      	b.n	80193a8 <OnFragDone+0x2c>
 80193fe:	bf00      	nop
 8019400:	08027be1 	.word	0x08027be1
 8019404:	edb88320 	.word	0xedb88320
 8019408:	08027c0b 	.word	0x08027c0b
 801940c:	20001258 	.word	0x20001258
 8019410:	2000123c 	.word	0x2000123c
 8019414:	08027c1e 	.word	0x08027c1e
 8019418:	08027c2f 	.word	0x08027c2f

0801941c <LoRaWAN_Init>:
{
 801941c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801941e:	b085      	sub	sp, #20
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8019420:	2400      	movs	r4, #0
 8019422:	2601      	movs	r6, #1
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8019424:	2502      	movs	r5, #2
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8019426:	9600      	str	r6, [sp, #0]
 8019428:	4622      	mov	r2, r4
 801942a:	4621      	mov	r1, r4
 801942c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8019430:	4b2a      	ldr	r3, [pc, #168]	; (80194dc <LoRaWAN_Init+0xc0>)
  LmHandlerInit(&LmHandlerCallbacks);
 8019432:	4f2b      	ldr	r7, [pc, #172]	; (80194e0 <LoRaWAN_Init+0xc4>)
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8019434:	2002      	movs	r0, #2
 8019436:	f00d fa43 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 801943a:	9602      	str	r6, [sp, #8]
 801943c:	4622      	mov	r2, r4
 801943e:	4621      	mov	r1, r4
 8019440:	e9cd 5500 	strd	r5, r5, [sp]
 8019444:	4b27      	ldr	r3, [pc, #156]	; (80194e4 <LoRaWAN_Init+0xc8>)
 8019446:	4628      	mov	r0, r5
 8019448:	f00d fa3a 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 801944c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8019450:	4622      	mov	r2, r4
 8019452:	4621      	mov	r1, r4
 8019454:	4b24      	ldr	r3, [pc, #144]	; (80194e8 <LoRaWAN_Init+0xcc>)
 8019456:	9400      	str	r4, [sp, #0]
 8019458:	4628      	mov	r0, r5
 801945a:	f00d fa31 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "\n\rTAG to VALIDATE new FW upgrade %d\n\r", __APP_VERSION_RC);
 801945e:	4622      	mov	r2, r4
 8019460:	4b22      	ldr	r3, [pc, #136]	; (80194ec <LoRaWAN_Init+0xd0>)
 8019462:	9400      	str	r4, [sp, #0]
 8019464:	4621      	mov	r1, r4
 8019466:	4628      	mov	r0, r5
 8019468:	f00d fa2a 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  LoraInfo_Init();
 801946c:	f000 f8dc 	bl	8019628 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8019470:	4638      	mov	r0, r7
 8019472:	f005 ff2d 	bl	801f2d0 <LmHandlerInit>
  LmHandlerPackageRegister(PACKAGE_ID_CLOCK_SYNC, NULL);
 8019476:	4621      	mov	r1, r4
 8019478:	4630      	mov	r0, r6
 801947a:	f005 fefd 	bl	801f278 <LmHandlerPackageRegister>
  LmHandlerPackageRegister(PACKAGE_ID_REMOTE_MCAST_SETUP, NULL);
 801947e:	4621      	mov	r1, r4
 8019480:	4628      	mov	r0, r5
 8019482:	f005 fef9 	bl	801f278 <LmHandlerPackageRegister>
  IsClockSynched = false;
 8019486:	4e1a      	ldr	r6, [pc, #104]	; (80194f0 <LoRaWAN_Init+0xd4>)
  LmHandlerPackageRegister(PACKAGE_ID_FRAGMENTATION, &FragmentationParams);
 8019488:	f107 0120 	add.w	r1, r7, #32
 801948c:	2003      	movs	r0, #3
 801948e:	f005 fef3 	bl	801f278 <LmHandlerPackageRegister>
  LmHandlerConfigure(&LmHandlerParams);
 8019492:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8019496:	f005 fcc9 	bl	801ee2c <LmHandlerConfigure>
  UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 801949a:	3604      	adds	r6, #4
  LmHandlerJoin(ActivationType);
 801949c:	4628      	mov	r0, r5
  IsClockSynched = false;
 801949e:	f806 4c04 	strb.w	r4, [r6, #-4]
  IsFileTransferDone = false;
 80194a2:	f886 4438 	strb.w	r4, [r6, #1080]	; 0x438
  LmHandlerJoin(ActivationType);
 80194a6:	f005 fdfd 	bl	801f0a4 <LmHandlerJoin>
  UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80194aa:	4b12      	ldr	r3, [pc, #72]	; (80194f4 <LoRaWAN_Init+0xd8>)
 80194ac:	9400      	str	r4, [sp, #0]
 80194ae:	4622      	mov	r2, r4
 80194b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80194b4:	4630      	mov	r0, r6
 80194b6:	f00d fbb7 	bl	8026c28 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE + randr(-APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND));
 80194ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80194be:	480e      	ldr	r0, [pc, #56]	; (80194f8 <LoRaWAN_Init+0xdc>)
 80194c0:	f00b fe50 	bl	8025164 <randr>
 80194c4:	f500 511c 	add.w	r1, r0, #9984	; 0x2700
 80194c8:	3110      	adds	r1, #16
 80194ca:	4630      	mov	r0, r6
 80194cc:	f00d fc94 	bl	8026df8 <UTIL_TIMER_SetPeriod>
  OnTxTimerEvent(NULL);
 80194d0:	4620      	mov	r0, r4
}
 80194d2:	b005      	add	sp, #20
 80194d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  OnTxTimerEvent(NULL);
 80194d8:	f7ff be18 	b.w	801910c <OnTxTimerEvent>
 80194dc:	08027c46 	.word	0x08027c46
 80194e0:	20001010 	.word	0x20001010
 80194e4:	08027c66 	.word	0x08027c66
 80194e8:	08027c86 	.word	0x08027c86
 80194ec:	08027ca6 	.word	0x08027ca6
 80194f0:	2000123c 	.word	0x2000123c
 80194f4:	0801910d 	.word	0x0801910d
 80194f8:	ffffec78 	.word	0xffffec78

080194fc <LoRaWAN_Process>:
{
 80194fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019500:	b088      	sub	sp, #32
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019502:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8019506:	b672      	cpsid	i
  isPending = IsTxFramePending;
 8019508:	4c41      	ldr	r4, [pc, #260]	; (8019610 <LoRaWAN_Process+0x114>)
 801950a:	78a6      	ldrb	r6, [r4, #2]
  IsTxFramePending = 0;
 801950c:	2200      	movs	r2, #0
  isPending = IsTxFramePending;
 801950e:	b2f6      	uxtb	r6, r6
  IsTxFramePending = 0;
 8019510:	70a2      	strb	r2, [r4, #2]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019512:	f383 8810 	msr	PRIMASK, r3
  if (isPending == 1)
 8019516:	2e01      	cmp	r6, #1
 8019518:	d12c      	bne.n	8019574 <LoRaWAN_Process+0x78>
    if (LmHandlerIsBusy() == true)
 801951a:	f005 fe21 	bl	801f160 <LmHandlerIsBusy>
 801951e:	4602      	mov	r2, r0
 8019520:	bb40      	cbnz	r0, 8019574 <LoRaWAN_Process+0x78>
    if (IsMcSessionStarted == false)    /* we are in Class A*/
 8019522:	f894 3436 	ldrb.w	r3, [r4, #1078]	; 0x436
 8019526:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 801952a:	2b00      	cmp	r3, #0
 801952c:	d143      	bne.n	80195b6 <LoRaWAN_Process+0xba>
      if (IsClockSynched == false)    /* we request AppTimeReq to allow FUOTA */
 801952e:	7823      	ldrb	r3, [r4, #0]
 8019530:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8019624 <LoRaWAN_Process+0x128>
 8019534:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8019538:	ad03      	add	r5, sp, #12
 801953a:	bb53      	cbnz	r3, 8019592 <LoRaWAN_Process+0x96>
        APP_PRINTF(" not sync \n\r");
 801953c:	4611      	mov	r1, r2
 801953e:	4b35      	ldr	r3, [pc, #212]	; (8019614 <LoRaWAN_Process+0x118>)
 8019540:	9201      	str	r2, [sp, #4]
 8019542:	f00d f9bd 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
static LmHandlerErrorStatus_t Lora_App_DeviceTimeReq(void)
{
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 8019546:	230a      	movs	r3, #10

  status = LoRaMacMlmeRequest(&mlmeReq);
 8019548:	4628      	mov	r0, r5
  mlmeReq.Type = MLME_DEVICE_TIME;
 801954a:	f88d 300c 	strb.w	r3, [sp, #12]
  status = LoRaMacMlmeRequest(&mlmeReq);
 801954e:	f009 faf3 	bl	8022b38 <LoRaMacMlmeRequest>
        AppDataBuffer[0] = randr(0, 255);
 8019552:	9a01      	ldr	r2, [sp, #4]
 8019554:	21ff      	movs	r1, #255	; 0xff
 8019556:	4610      	mov	r0, r2
 8019558:	f00b fe04 	bl	8025164 <randr>
 801955c:	f884 043d 	strb.w	r0, [r4, #1085]	; 0x43d
        LmHandlerAppData_t appData =
 8019560:	e898 0003 	ldmia.w	r8, {r0, r1}
 8019564:	e885 0003 	stmia.w	r5, {r0, r1}
        status = LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8019568:	9a01      	ldr	r2, [sp, #4]
 801956a:	4633      	mov	r3, r6
        status = LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 801956c:	4611      	mov	r1, r2
 801956e:	4628      	mov	r0, r5
 8019570:	f005 fe10 	bl	801f194 <LmHandlerSend>
  LmHandlerProcess();
 8019574:	f005 fd0e 	bl	801ef94 <LmHandlerProcess>
  __ASM volatile ("cpsid i" : : : "memory");
 8019578:	b672      	cpsid	i
  if ((IsMacProcessPending != 1) && (IsTxFramePending != 1))
 801957a:	7863      	ldrb	r3, [r4, #1]
 801957c:	2b01      	cmp	r3, #1
 801957e:	d002      	beq.n	8019586 <LoRaWAN_Process+0x8a>
 8019580:	78a3      	ldrb	r3, [r4, #2]
 8019582:	2b01      	cmp	r3, #1
 8019584:	d101      	bne.n	801958a <LoRaWAN_Process+0x8e>
    IsMacProcessPending = 0;
 8019586:	2300      	movs	r3, #0
 8019588:	7063      	strb	r3, [r4, #1]
  __ASM volatile ("cpsie i" : : : "memory");
 801958a:	b662      	cpsie	i
}
 801958c:	b008      	add	sp, #32
 801958e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_PRINTF("  sync \n\r");
 8019592:	4b21      	ldr	r3, [pc, #132]	; (8019618 <LoRaWAN_Process+0x11c>)
 8019594:	463a      	mov	r2, r7
 8019596:	4639      	mov	r1, r7
 8019598:	f00d f992 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
        AppDataBuffer[0] = randr(0, 255);
 801959c:	21ff      	movs	r1, #255	; 0xff
 801959e:	4638      	mov	r0, r7
 80195a0:	f00b fde0 	bl	8025164 <randr>
 80195a4:	f884 043d 	strb.w	r0, [r4, #1085]	; 0x43d
        LmHandlerAppData_t appData =
 80195a8:	e898 0003 	ldmia.w	r8, {r0, r1}
        status = LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80195ac:	4633      	mov	r3, r6
        LmHandlerAppData_t appData =
 80195ae:	e885 0003 	stmia.w	r5, {r0, r1}
        status = LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80195b2:	463a      	mov	r2, r7
 80195b4:	e7da      	b.n	801956c <LoRaWAN_Process+0x70>
      if (IsFileTransferDone == false)
 80195b6:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d0da      	beq.n	8019574 <LoRaWAN_Process+0x78>
        AppDataBuffer[0] = 0x05; // FragDataBlockAuthReq
 80195be:	2305      	movs	r3, #5
 80195c0:	f884 343d 	strb.w	r3, [r4, #1085]	; 0x43d
        AppDataBuffer[1] = FileRxCrc & 0x000000FF;
 80195c4:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
 80195c8:	f884 343e 	strb.w	r3, [r4, #1086]	; 0x43e
        AppDataBuffer[2] = (FileRxCrc >> 8) & 0x000000FF;
 80195cc:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
 80195d0:	0a1b      	lsrs	r3, r3, #8
 80195d2:	f884 343f 	strb.w	r3, [r4, #1087]	; 0x43f
        AppDataBuffer[3] = (FileRxCrc >> 16) & 0x000000FF;
 80195d6:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
 80195da:	0c1b      	lsrs	r3, r3, #16
 80195dc:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
        AppDataBuffer[4] = (FileRxCrc >> 24) & 0x000000FF;
 80195e0:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
 80195e4:	0e1b      	lsrs	r3, r3, #24
 80195e6:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
        LmHandlerAppData_t appData =
 80195ea:	4b0c      	ldr	r3, [pc, #48]	; (801961c <LoRaWAN_Process+0x120>)
 80195ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80195f0:	af03      	add	r7, sp, #12
 80195f2:	e887 0003 	stmia.w	r7, {r0, r1}
        status = LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80195f6:	4633      	mov	r3, r6
 80195f8:	4611      	mov	r1, r2
 80195fa:	4638      	mov	r0, r7
 80195fc:	f005 fdca 	bl	801f194 <LmHandlerSend>
      if (status == LORAMAC_HANDLER_SUCCESS)
 8019600:	4602      	mov	r2, r0
 8019602:	2800      	cmp	r0, #0
 8019604:	d1b6      	bne.n	8019574 <LoRaWAN_Process+0x78>
        APP_PRINTF(" CRC send \n\r");
 8019606:	4b06      	ldr	r3, [pc, #24]	; (8019620 <LoRaWAN_Process+0x124>)
 8019608:	4601      	mov	r1, r0
 801960a:	f00d f959 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
 801960e:	e7b1      	b.n	8019574 <LoRaWAN_Process+0x78>
 8019610:	2000123c 	.word	0x2000123c
 8019614:	08027ccc 	.word	0x08027ccc
 8019618:	08027cd9 	.word	0x08027cd9
 801961c:	080271f0 	.word	0x080271f0
 8019620:	08027ce3 	.word	0x08027ce3
 8019624:	080271e8 	.word	0x080271e8

08019628 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8019628:	4b04      	ldr	r3, [pc, #16]	; (801963c <LoraInfo_Init+0x14>)
 801962a:	2200      	movs	r2, #0
  loraInfo.Kms = 0;
 801962c:	e9c3 2202 	strd	r2, r2, [r3, #8]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8019630:	2120      	movs	r1, #32
 8019632:	2203      	movs	r2, #3
 8019634:	e9c3 2100 	strd	r2, r1, [r3]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8019638:	4770      	bx	lr
 801963a:	bf00      	nop
 801963c:	2000176c 	.word	0x2000176c

08019640 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8019640:	4800      	ldr	r0, [pc, #0]	; (8019644 <LoraInfo_GetPtr+0x4>)
 8019642:	4770      	bx	lr
 8019644:	2000176c 	.word	0x2000176c

08019648 <MX_ADC_Init>:

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;

  hadc1.Init.OversamplingMode      = DISABLE;
 8019648:	4811      	ldr	r0, [pc, #68]	; (8019690 <MX_ADC_Init+0x48>)

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 801964a:	4912      	ldr	r1, [pc, #72]	; (8019694 <MX_ADC_Init+0x4c>)
{
 801964c:	b508      	push	{r3, lr}
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 801964e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc1.Init.OversamplingMode      = DISABLE;
 8019652:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 8019654:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 8019658:	8303      	strh	r3, [r0, #24]
  hadc1.Init.ScanConvMode          = ADC_SCAN_DISABLE;
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ContinuousConvMode    = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 801965a:	2204      	movs	r2, #4
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 801965c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc1.Init.OversamplingMode      = DISABLE;
 8019660:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8019664:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8019668:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ScanConvMode          = ADC_SCAN_DISABLE;
 801966a:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 801966c:	6142      	str	r2, [r0, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801966e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8019672:	f001 f867 	bl	801a744 <HAL_ADC_Init>
 8019676:	b108      	cbz	r0, 801967c <MX_ADC_Init+0x34>
  {
    Error_Handler();
 8019678:	f000 f910 	bl	801989c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 801967c:	4804      	ldr	r0, [pc, #16]	; (8019690 <MX_ADC_Init+0x48>)
 801967e:	217f      	movs	r1, #127	; 0x7f
 8019680:	f001 fd0c 	bl	801b09c <HAL_ADCEx_Calibration_Start>
 8019684:	b118      	cbz	r0, 801968e <MX_ADC_Init+0x46>
  {
    Error_Handler();
  }
}
 8019686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801968a:	f000 b907 	b.w	801989c <Error_Handler>
}
 801968e:	bd08      	pop	{r3, pc}
 8019690:	200027c0 	.word	0x200027c0
 8019694:	50040000 	.word	0x50040000

08019698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8019698:	6802      	ldr	r2, [r0, #0]
 801969a:	4b08      	ldr	r3, [pc, #32]	; (80196bc <HAL_ADC_MspInit+0x24>)
 801969c:	429a      	cmp	r2, r3
{
 801969e:	b082      	sub	sp, #8
  if (adcHandle->Instance == ADC1)
 80196a0:	d10a      	bne.n	80196b8 <HAL_ADC_MspInit+0x20>
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80196a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80196a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80196a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80196ac:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80196ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80196b4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80196b6:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 80196b8:	b002      	add	sp, #8
 80196ba:	4770      	bx	lr
 80196bc:	50040000 	.word	0x50040000

080196c0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 80196c0:	6802      	ldr	r2, [r0, #0]
 80196c2:	4b05      	ldr	r3, [pc, #20]	; (80196d8 <HAL_ADC_MspDeInit+0x18>)
 80196c4:	429a      	cmp	r2, r3
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80196c6:	bf01      	itttt	eq
 80196c8:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
 80196cc:	6cd3      	ldreq	r3, [r2, #76]	; 0x4c
 80196ce:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
 80196d2:	64d3      	streq	r3, [r2, #76]	; 0x4c
    __HAL_RCC_ADC_CLK_DISABLE();
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80196d4:	4770      	bx	lr
 80196d6:	bf00      	nop
 80196d8:	50040000 	.word	0x50040000

080196dc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80196dc:	b510      	push	{r4, lr}
 80196de:	b088      	sub	sp, #32
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 80196e0:	2218      	movs	r2, #24
 80196e2:	2100      	movs	r1, #0
{
 80196e4:	4604      	mov	r4, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 80196e6:	a802      	add	r0, sp, #8
 80196e8:	f00d fcdc 	bl	80270a4 <memset>

  MX_ADC_Init();
 80196ec:	f7ff ffac 	bl	8019648 <MX_ADC_Init>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80196f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  __HAL_RCC_ADC_CLK_ENABLE();

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80196f4:	217f      	movs	r1, #127	; 0x7f
 80196f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80196f8:	481a      	ldr	r0, [pc, #104]	; (8019764 <ADC_ReadChannels+0x88>)
 80196fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80196fe:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8019700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019706:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8019708:	9b01      	ldr	r3, [sp, #4]
 801970a:	f001 fcc7 	bl	801b09c <HAL_ADCEx_Calibration_Start>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 801970e:	2206      	movs	r2, #6
 8019710:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8019712:	4814      	ldr	r0, [pc, #80]	; (8019764 <ADC_ReadChannels+0x88>)
  sConfig.Channel = channel;
 8019714:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8019716:	a902      	add	r1, sp, #8
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8019718:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801971c:	f001 f938 	bl	801a990 <HAL_ADC_ConfigChannel>
 8019720:	b108      	cbz	r0, 8019726 <ADC_ReadChannels+0x4a>
  {
    Error_Handler();
 8019722:	f000 f8bb 	bl	801989c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8019726:	480f      	ldr	r0, [pc, #60]	; (8019764 <ADC_ReadChannels+0x88>)
 8019728:	f001 fb88 	bl	801ae3c <HAL_ADC_Start>
 801972c:	b108      	cbz	r0, 8019732 <ADC_ReadChannels+0x56>
  {
    /* Start Error */
    Error_Handler();
 801972e:	f000 f8b5 	bl	801989c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8019732:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019736:	480b      	ldr	r0, [pc, #44]	; (8019764 <ADC_ReadChannels+0x88>)
 8019738:	f001 f8d6 	bl	801a8e8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 801973c:	4809      	ldr	r0, [pc, #36]	; (8019764 <ADC_ReadChannels+0x88>)
 801973e:	f001 fc8d 	bl	801b05c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8019742:	4808      	ldr	r0, [pc, #32]	; (8019764 <ADC_ReadChannels+0x88>)
 8019744:	f001 f921 	bl	801a98a <HAL_ADC_GetValue>
 8019748:	4604      	mov	r4, r0

  HAL_ADC_DeInit(&hadc1);
 801974a:	4806      	ldr	r0, [pc, #24]	; (8019764 <ADC_ReadChannels+0x88>)
 801974c:	f001 fbe0 	bl	801af10 <HAL_ADC_DeInit>
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8019750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8019754:	4620      	mov	r0, r4
 8019756:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8019758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801975c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801975e:	b008      	add	sp, #32
 8019760:	bd10      	pop	{r4, pc}
 8019762:	bf00      	nop
 8019764:	200027c0 	.word	0x200027c0

08019768 <SYS_InitMeasurement>:
  hadc1.Instance = ADC1;
 8019768:	4b01      	ldr	r3, [pc, #4]	; (8019770 <SYS_InitMeasurement+0x8>)
 801976a:	4a02      	ldr	r2, [pc, #8]	; (8019774 <SYS_InitMeasurement+0xc>)
 801976c:	601a      	str	r2, [r3, #0]
}
 801976e:	4770      	bx	lr
 8019770:	200027c0 	.word	0x200027c0
 8019774:	50040000 	.word	0x50040000

08019778 <SYS_GetBatteryLevel>:
{
 8019778:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 801977a:	4806      	ldr	r0, [pc, #24]	; (8019794 <SYS_GetBatteryLevel+0x1c>)
 801977c:	f7ff ffae 	bl	80196dc <ADC_ReadChannels>
  if (measuredLevel == 0)
 8019780:	b138      	cbz	r0, 8019792 <SYS_GetBatteryLevel+0x1a>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8019782:	4b05      	ldr	r3, [pc, #20]	; (8019798 <SYS_GetBatteryLevel+0x20>)
 8019784:	881a      	ldrh	r2, [r3, #0]
 8019786:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801978a:	4353      	muls	r3, r2
 801978c:	fbb3 f0f0 	udiv	r0, r3, r0
 8019790:	b280      	uxth	r0, r0
}
 8019792:	bd08      	pop	{r3, pc}
 8019794:	80000001 	.word	0x80000001
 8019798:	1fff75aa 	.word	0x1fff75aa

0801979c <SYS_GetTemperatureLevel>:
{
 801979c:	b513      	push	{r0, r1, r4, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 801979e:	f7ff ffeb 	bl	8019778 <SYS_GetBatteryLevel>
 80197a2:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80197a4:	4810      	ldr	r0, [pc, #64]	; (80197e8 <SYS_GetTemperatureLevel+0x4c>)
 80197a6:	f7ff ff99 	bl	80196dc <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 80197aa:	4b10      	ldr	r3, [pc, #64]	; (80197ec <SYS_GetTemperatureLevel+0x50>)
 80197ac:	4a10      	ldr	r2, [pc, #64]	; (80197f0 <SYS_GetTemperatureLevel+0x54>)
 80197ae:	8819      	ldrh	r1, [r3, #0]
 80197b0:	8812      	ldrh	r2, [r2, #0]
 80197b2:	4360      	muls	r0, r4
 80197b4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80197b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80197bc:	1a58      	subs	r0, r3, r1
 80197be:	2350      	movs	r3, #80	; 0x50
 80197c0:	4343      	muls	r3, r0
 80197c2:	1a52      	subs	r2, r2, r1
 80197c4:	021b      	lsls	r3, r3, #8
 80197c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80197ca:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80197ce:	b21c      	sxth	r4, r3
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 80197d0:	2201      	movs	r2, #1
 80197d2:	f343 2307 	sbfx	r3, r3, #8, #8
 80197d6:	9300      	str	r3, [sp, #0]
 80197d8:	2100      	movs	r1, #0
 80197da:	4b06      	ldr	r3, [pc, #24]	; (80197f4 <SYS_GetTemperatureLevel+0x58>)
 80197dc:	4610      	mov	r0, r2
 80197de:	f00d f86f 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
}
 80197e2:	4620      	mov	r0, r4
 80197e4:	b002      	add	sp, #8
 80197e6:	bd10      	pop	{r4, pc}
 80197e8:	c7520000 	.word	0xc7520000
 80197ec:	1fff75a8 	.word	0x1fff75a8
 80197f0:	1fff75ca 	.word	0x1fff75ca
 80197f4:	08027d22 	.word	0x08027d22

080197f8 <MX_DMA_Init>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 80197f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80197fc:	b507      	push	{r0, r1, r2, lr}
 80197fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019800:	f042 0201 	orr.w	r2, r2, #1
 8019804:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8019806:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8019808:	2200      	movs	r2, #0
 801980a:	f003 0301 	and.w	r3, r3, #1
 801980e:	9301      	str	r3, [sp, #4]
 8019810:	4611      	mov	r1, r2
 8019812:	2011      	movs	r0, #17
  (void)tmpreg;
 8019814:	9b01      	ldr	r3, [sp, #4]
 8019816:	f001 fc9f 	bl	801b158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 801981a:	2011      	movs	r0, #17

}
 801981c:	b003      	add	sp, #12
 801981e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8019822:	f001 bccb 	b.w	801b1bc <HAL_NVIC_EnableIRQ>

08019826 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8019826:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8019828:	2528      	movs	r5, #40	; 0x28
{
 801982a:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801982c:	462a      	mov	r2, r5
 801982e:	2100      	movs	r1, #0
 8019830:	a809      	add	r0, sp, #36	; 0x24
 8019832:	f00d fc37 	bl	80270a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8019836:	221c      	movs	r2, #28
 8019838:	2100      	movs	r1, #0
 801983a:	a801      	add	r0, sp, #4
 801983c:	f00d fc32 	bl	80270a4 <memset>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8019840:	2320      	movs	r3, #32
 8019842:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8019844:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8019846:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8019848:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801984a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 801984c:	2007      	movs	r0, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 801984e:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8019852:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8019854:	2304      	movs	r3, #4
 8019856:	e9cd 0317 	strd	r0, r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801985a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 40;
 801985c:	e9cd 4515 	strd	r4, r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8019860:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8019862:	f002 f871 	bl	801b948 <HAL_RCC_OscConfig>
 8019866:	b100      	cbz	r0, 801986a <SystemClock_Config+0x44>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8019868:	e7fe      	b.n	8019868 <SystemClock_Config+0x42>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801986a:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801986e:	220f      	movs	r2, #15
 8019870:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8019872:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8019874:	4621      	mov	r1, r4
 8019876:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8019878:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 801987c:	f002 fb38 	bl	801bef0 <HAL_RCC_ClockConfig>
 8019880:	b100      	cbz	r0, 8019884 <SystemClock_Config+0x5e>
  while (1)
 8019882:	e7fe      	b.n	8019882 <SystemClock_Config+0x5c>
}
 8019884:	b01b      	add	sp, #108	; 0x6c
 8019886:	bd30      	pop	{r4, r5, pc}

08019888 <main>:
{
 8019888:	b508      	push	{r3, lr}
  HAL_Init();
 801988a:	f000 fef9 	bl	801a680 <HAL_Init>
  SystemClock_Config();
 801988e:	f7ff ffca 	bl	8019826 <SystemClock_Config>
  MX_LoRaWAN_Init();
 8019892:	f7ff fbf7 	bl	8019084 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 8019896:	f7ff fbfc 	bl	8019092 <MX_LoRaWAN_Process>
  while (1)
 801989a:	e7fc      	b.n	8019896 <main+0xe>

0801989c <Error_Handler>:
  while (1)
 801989c:	e7fe      	b.n	801989c <Error_Handler>
	...

080198a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80198a0:	b510      	push	{r4, lr}
 80198a2:	b090      	sub	sp, #64	; 0x40
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80198a4:	2400      	movs	r4, #0
  RTC_TimeTypeDef sTime = {0};
 80198a6:	2214      	movs	r2, #20
 80198a8:	2100      	movs	r1, #0
 80198aa:	a801      	add	r0, sp, #4
 80198ac:	f00d fbfa 	bl	80270a4 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80198b0:	2228      	movs	r2, #40	; 0x28
 80198b2:	4621      	mov	r1, r4
 80198b4:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 80198b6:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80198b8:	f00d fbf4 	bl	80270a4 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80198bc:	4822      	ldr	r0, [pc, #136]	; (8019948 <MX_RTC_Init+0xa8>)
 80198be:	4b23      	ldr	r3, [pc, #140]	; (801994c <MX_RTC_Init+0xac>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80198c0:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80198c2:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80198c6:	221f      	movs	r2, #31
 80198c8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80198cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80198d0:	e9c0 4406 	strd	r4, r4, [r0, #24]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80198d4:	f002 fe9e 	bl	801c614 <HAL_RTC_Init>
 80198d8:	b108      	cbz	r0, 80198de <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80198da:	f7ff ffdf 	bl	801989c <Error_Handler>
  sTime.Hours = 0;
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80198de:	481a      	ldr	r0, [pc, #104]	; (8019948 <MX_RTC_Init+0xa8>)
  sTime.Hours = 0;
 80198e0:	f8ad 4004 	strh.w	r4, [sp, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80198e4:	2200      	movs	r2, #0
 80198e6:	a901      	add	r1, sp, #4
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80198e8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  sTime.Seconds = 0;
 80198ec:	f88d 4006 	strb.w	r4, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80198f0:	f002 fef7 	bl	801c6e2 <HAL_RTC_SetTime>
 80198f4:	b108      	cbz	r0, 80198fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80198f6:	f7ff ffd1 	bl	801989c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80198fa:	4b15      	ldr	r3, [pc, #84]	; (8019950 <MX_RTC_Init+0xb0>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80198fc:	4812      	ldr	r0, [pc, #72]	; (8019948 <MX_RTC_Init+0xa8>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80198fe:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8019900:	2200      	movs	r2, #0
 8019902:	4669      	mov	r1, sp
 8019904:	f002 ff67 	bl	801c7d6 <HAL_RTC_SetDate>
 8019908:	b108      	cbz	r0, 801990e <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 801990a:	f7ff ffc7 	bl	801989c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 801990e:	2200      	movs	r2, #0
  sAlarm.AlarmTime.Seconds = 0;
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8019910:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8019914:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDay = 30;
 8019918:	231e      	movs	r3, #30
 801991a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  sAlarm.Alarm = RTC_ALARM_A;
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 801991e:	480a      	ldr	r0, [pc, #40]	; (8019948 <MX_RTC_Init+0xa8>)
  sAlarm.AlarmTime.Hours = 0;
 8019920:	f8ad 2018 	strh.w	r2, [sp, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8019924:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8019928:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801992a:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
  sAlarm.AlarmTime.Seconds = 0;
 801992e:	f88d 201a 	strb.w	r2, [sp, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
 8019932:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8019934:	920b      	str	r2, [sp, #44]	; 0x2c
  sAlarm.Alarm = RTC_ALARM_A;
 8019936:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8019938:	f002 ffb6 	bl	801c8a8 <HAL_RTC_SetAlarm_IT>
 801993c:	b108      	cbz	r0, 8019942 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 801993e:	f7ff ffad 	bl	801989c <Error_Handler>
  }

}
 8019942:	b010      	add	sp, #64	; 0x40
 8019944:	bd10      	pop	{r4, pc}
 8019946:	bf00      	nop
 8019948:	20002884 	.word	0x20002884
 801994c:	40002800 	.word	0x40002800
 8019950:	00010101 	.word	0x00010101

08019954 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8019954:	b510      	push	{r4, lr}
 8019956:	4604      	mov	r4, r0
 8019958:	b092      	sub	sp, #72	; 0x48

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801995a:	2248      	movs	r2, #72	; 0x48
 801995c:	2100      	movs	r1, #0
 801995e:	4668      	mov	r0, sp
 8019960:	f00d fba0 	bl	80270a4 <memset>
  if (rtcHandle->Instance == RTC)
 8019964:	6822      	ldr	r2, [r4, #0]
 8019966:	4b11      	ldr	r3, [pc, #68]	; (80199ac <HAL_RTC_MspInit+0x58>)
 8019968:	429a      	cmp	r2, r3
 801996a:	d11d      	bne.n	80199a8 <HAL_RTC_MspInit+0x54>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 801996c:	2304      	movs	r3, #4
 801996e:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8019970:	2301      	movs	r3, #1
 8019972:	9302      	str	r3, [sp, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8019974:	4668      	mov	r0, sp
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8019976:	2300      	movs	r3, #0
 8019978:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 801997a:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 801997c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801997e:	f001 ffe3 	bl	801b948 <HAL_RCC_OscConfig>
 8019982:	b108      	cbz	r0, 8019988 <HAL_RTC_MspInit+0x34>
    {
      Error_Handler();
 8019984:	f7ff ff8a 	bl	801989c <Error_Handler>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8019988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 801998c:	2029      	movs	r0, #41	; 0x29
 801998e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8019992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801999a:	2200      	movs	r2, #0
 801999c:	4611      	mov	r1, r2
 801999e:	f001 fbdb 	bl	801b158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80199a2:	2029      	movs	r0, #41	; 0x29
 80199a4:	f001 fc0a 	bl	801b1bc <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80199a8:	b012      	add	sp, #72	; 0x48
 80199aa:	bd10      	pop	{r4, pc}
 80199ac:	40002800 	.word	0x40002800

080199b0 <RTC_IF_GetTimerContext>:
uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
}
 80199b0:	4b01      	ldr	r3, [pc, #4]	; (80199b8 <RTC_IF_GetTimerContext+0x8>)
 80199b2:	6818      	ldr	r0, [r3, #0]
 80199b4:	4770      	bx	lr
 80199b6:	bf00      	nop
 80199b8:	2000177c 	.word	0x2000177c

080199bc <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 80199bc:	2003      	movs	r0, #3
 80199be:	4770      	bx	lr

080199c0 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80199c0:	b508      	push	{r3, lr}
 80199c2:	4601      	mov	r1, r0
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80199c4:	227d      	movs	r2, #125	; 0x7d
 80199c6:	2300      	movs	r3, #0
 80199c8:	01c0      	lsls	r0, r0, #7
 80199ca:	0e49      	lsrs	r1, r1, #25
 80199cc:	f7ff f9de 	bl	8018d8c <__aeabi_uldivmod>
}
 80199d0:	bd08      	pop	{r3, pc}

080199d2 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80199d2:	237d      	movs	r3, #125	; 0x7d
 80199d4:	fba0 2303 	umull	r2, r3, r0, r3
 80199d8:	09d0      	lsrs	r0, r2, #7
}
 80199da:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80199de:	4770      	bx	lr

080199e0 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80199e0:	4806      	ldr	r0, [pc, #24]	; (80199fc <RTC_IF_StopTimer+0x1c>)
 80199e2:	6802      	ldr	r2, [r0, #0]
{
 80199e4:	b508      	push	{r3, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80199e6:	68d3      	ldr	r3, [r2, #12]
 80199e8:	b2db      	uxtb	r3, r3
 80199ea:	f463 73c0 	orn	r3, r3, #384	; 0x180
 80199ee:	60d3      	str	r3, [r2, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80199f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80199f4:	f002 fd88 	bl	801c508 <HAL_RTC_DeactivateAlarm>
}
 80199f8:	2000      	movs	r0, #0
 80199fa:	bd08      	pop	{r3, pc}
 80199fc:	20002884 	.word	0x20002884

08019a00 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8019a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8019a04:	2200      	movs	r2, #0
{
 8019a06:	4605      	mov	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8019a08:	4825      	ldr	r0, [pc, #148]	; (8019aa0 <RTC_GetCalendarValue+0xa0>)
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8019a0a:	4f26      	ldr	r7, [pc, #152]	; (8019aa4 <RTC_GetCalendarValue+0xa4>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8019a0c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8019aa0 <RTC_GetCalendarValue+0xa0>
{
 8019a10:	460c      	mov	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8019a12:	f003 f810 	bl	801ca36 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8019a16:	2200      	movs	r2, #0
 8019a18:	4629      	mov	r1, r5
 8019a1a:	4640      	mov	r0, r8
 8019a1c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8019a1e:	f003 f82f 	bl	801ca80 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8019a22:	2200      	movs	r2, #0
 8019a24:	4621      	mov	r1, r4
 8019a26:	4640      	mov	r0, r8
 8019a28:	f003 f805 	bl	801ca36 <HAL_RTC_GetTime>
 8019a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a2e:	b2b6      	uxth	r6, r6
 8019a30:	b29b      	uxth	r3, r3

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8019a32:	42b3      	cmp	r3, r6
 8019a34:	d1ef      	bne.n	8019a16 <RTC_GetCalendarValue+0x16>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8019a36:	78eb      	ldrb	r3, [r5, #3]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8019a38:	4a1b      	ldr	r2, [pc, #108]	; (8019aa8 <RTC_GetCalendarValue+0xa8>)
 8019a3a:	491c      	ldr	r1, [pc, #112]	; (8019aac <RTC_GetCalendarValue+0xac>)
 8019a3c:	f013 0f03 	tst.w	r3, #3
 8019a40:	bf08      	it	eq
 8019a42:	4611      	moveq	r1, r2
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8019a44:	f240 50b5 	movw	r0, #1461	; 0x5b5

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8019a48:	786a      	ldrb	r2, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8019a4a:	4358      	muls	r0, r3
 8019a4c:	1cc6      	adds	r6, r0, #3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8019a4e:	3a01      	subs	r2, #1
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

  calendarValue += (RTC_DateStruct->Date - 1);
 8019a50:	78a8      	ldrb	r0, [r5, #2]
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8019a52:	233d      	movs	r3, #61	; 0x3d
 8019a54:	4353      	muls	r3, r2
 8019a56:	3301      	adds	r3, #1
 8019a58:	3801      	subs	r0, #1
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8019a5a:	0052      	lsls	r2, r2, #1
 8019a5c:	fa21 f202 	lsr.w	r2, r1, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8019a60:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8019a64:	eb00 0096 	add.w	r0, r0, r6, lsr #2
 8019a68:	eb00 0063 	add.w	r0, r0, r3, asr #1
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8019a6c:	f002 0303 	and.w	r3, r2, #3

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8019a70:	7862      	ldrb	r2, [r4, #1]
  calendarValue += (RTC_DateStruct->Date - 1);
 8019a72:	1ac0      	subs	r0, r0, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8019a74:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8019a78:	7823      	ldrb	r3, [r4, #0]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8019a7a:	0092      	lsls	r2, r2, #2
 8019a7c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8019a80:	fb01 2303 	mla	r3, r1, r3, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8019a84:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8019a86:	4413      	add	r3, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8019a88:	4a09      	ldr	r2, [pc, #36]	; (8019ab0 <RTC_GetCalendarValue+0xb0>)
 8019a8a:	fb02 3300 	mla	r3, r2, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8019a8e:	6860      	ldr	r0, [r4, #4]
 8019a90:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 8019a94:	3003      	adds	r0, #3

  return (calendarValue);
}
 8019a96:	eb00 2083 	add.w	r0, r0, r3, lsl #10
 8019a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a9e:	bf00      	nop
 8019aa0:	20002884 	.word	0x20002884
 8019aa4:	40002800 	.word	0x40002800
 8019aa8:	00445550 	.word	0x00445550
 8019aac:	0099aaa0 	.word	0x0099aaa0
 8019ab0:	00015180 	.word	0x00015180

08019ab4 <RTC_IF_SetTimerContext>:
{
 8019ab4:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8019ab6:	4c04      	ldr	r4, [pc, #16]	; (8019ac8 <RTC_IF_SetTimerContext+0x14>)
 8019ab8:	1d21      	adds	r1, r4, #4
 8019aba:	f104 0018 	add.w	r0, r4, #24
 8019abe:	f7ff ff9f 	bl	8019a00 <RTC_GetCalendarValue>
 8019ac2:	6020      	str	r0, [r4, #0]
}
 8019ac4:	bd10      	pop	{r4, pc}
 8019ac6:	bf00      	nop
 8019ac8:	2000177c 	.word	0x2000177c

08019acc <RTC_IF_GetTimerElapsedTime>:
{
 8019acc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8019ace:	a901      	add	r1, sp, #4
 8019ad0:	4668      	mov	r0, sp
 8019ad2:	f7ff ff95 	bl	8019a00 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8019ad6:	4b03      	ldr	r3, [pc, #12]	; (8019ae4 <RTC_IF_GetTimerElapsedTime+0x18>)
 8019ad8:	681b      	ldr	r3, [r3, #0]
}
 8019ada:	1ac0      	subs	r0, r0, r3
 8019adc:	b007      	add	sp, #28
 8019ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ae2:	bf00      	nop
 8019ae4:	2000177c 	.word	0x2000177c

08019ae8 <RTC_IF_StartTimer>:
{
 8019ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aec:	4604      	mov	r4, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8019aee:	f7ff ffed 	bl	8019acc <RTC_IF_GetTimerElapsedTime>
 8019af2:	1a20      	subs	r0, r4, r0
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8019af4:	f8df b164 	ldr.w	fp, [pc, #356]	; 8019c5c <RTC_IF_StartTimer+0x174>
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8019af8:	2803      	cmp	r0, #3
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8019afa:	bf8c      	ite	hi
 8019afc:	2100      	movhi	r1, #0
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8019afe:	2101      	movls	r1, #1
 8019b00:	2002      	movs	r0, #2
 8019b02:	f00c ff9b 	bl	8026a3c <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8019b06:	f00c ffc5 	bl	8026a94 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8019b0a:	f8db 1008 	ldr.w	r1, [fp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8019b0e:	f89b 201a 	ldrb.w	r2, [fp, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8019b12:	9101      	str	r1, [sp, #4]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8019b14:	9200      	str	r2, [sp, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8019b16:	f89b a004 	ldrb.w	sl, [fp, #4]
 8019b1a:	f89b 9005 	ldrb.w	r9, [fp, #5]
 8019b1e:	f89b 8006 	ldrb.w	r8, [fp, #6]
 8019b22:	f89b 6007 	ldrb.w	r6, [fp, #7]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8019b26:	f89b 5019 	ldrb.w	r5, [fp, #25]
 8019b2a:	f89b 701b 	ldrb.w	r7, [fp, #27]
  RTC_IF_StopTimer();
 8019b2e:	f7ff ff57 	bl	80199e0 <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8019b32:	9901      	ldr	r1, [sp, #4]
  rtcAlarmDays =  RTC_DateStruct.Date;
 8019b34:	9a00      	ldr	r2, [sp, #0]
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8019b36:	f5c1 717f 	rsb	r1, r1, #1020	; 0x3fc
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8019b3a:	f3c4 0309 	ubfx	r3, r4, #0, #10
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8019b3e:	3103      	adds	r1, #3
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8019b40:	fa13 f181 	uxtah	r1, r3, r1
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8019b44:	0aa0      	lsrs	r0, r4, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8019b46:	4c41      	ldr	r4, [pc, #260]	; (8019c4c <RTC_IF_StartTimer+0x164>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8019b48:	b289      	uxth	r1, r1
  rtcAlarmDays =  RTC_DateStruct.Date;
 8019b4a:	b292      	uxth	r2, r2
  while (timeoutValue >= SECONDS_IN_1DAY)
 8019b4c:	465b      	mov	r3, fp
 8019b4e:	42a0      	cmp	r0, r4
 8019b50:	d847      	bhi.n	8019be2 <RTC_IF_StartTimer+0xfa>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8019b52:	fa1f fc8a 	uxth.w	ip, sl
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8019b56:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
 8019b5a:	d249      	bcs.n	8019bf0 <RTC_IF_StartTimer+0x108>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8019b5c:	fa1f fe89 	uxth.w	lr, r9
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8019b60:	283b      	cmp	r0, #59	; 0x3b
 8019b62:	d84c      	bhi.n	8019bfe <RTC_IF_StartTimer+0x116>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8019b64:	0a8c      	lsrs	r4, r1, #10
 8019b66:	ebc4 1984 	rsb	r9, r4, r4, lsl #6
 8019b6a:	4444      	add	r4, r8
 8019b6c:	eb01 2189 	add.w	r1, r1, r9, lsl #10
 8019b70:	4420      	add	r0, r4
 8019b72:	b289      	uxth	r1, r1
 8019b74:	b280      	uxth	r0, r0
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8019b76:	283b      	cmp	r0, #59	; 0x3b
 8019b78:	d847      	bhi.n	8019c0a <RTC_IF_StartTimer+0x122>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8019b7a:	f1be 0f3b 	cmp.w	lr, #59	; 0x3b
 8019b7e:	d84b      	bhi.n	8019c18 <RTC_IF_StartTimer+0x130>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8019b80:	f1bc 0f17 	cmp.w	ip, #23
 8019b84:	d851      	bhi.n	8019c2a <RTC_IF_StartTimer+0x142>
  if (RTC_DateStruct.Year % 4 == 0)
 8019b86:	f017 0f03 	tst.w	r7, #3
 8019b8a:	4c31      	ldr	r4, [pc, #196]	; (8019c50 <RTC_IF_StartTimer+0x168>)
 8019b8c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8019b90:	d152      	bne.n	8019c38 <RTC_IF_StartTimer+0x150>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8019b92:	5d67      	ldrb	r7, [r4, r5]
 8019b94:	42ba      	cmp	r2, r7
 8019b96:	d904      	bls.n	8019ba2 <RTC_IF_StartTimer+0xba>
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8019b98:	fbb2 f4f7 	udiv	r4, r2, r7
 8019b9c:	fb07 2214 	mls	r2, r7, r4, r2
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8019ba0:	b292      	uxth	r2, r2
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8019ba2:	f5c1 717f 	rsb	r1, r1, #1020	; 0x3fc
 8019ba6:	3103      	adds	r1, #3
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8019ba8:	2400      	movs	r4, #0
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8019baa:	6219      	str	r1, [r3, #32]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8019bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8019bb0:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8019bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8019bb8:	6359      	str	r1, [r3, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8019bba:	7798      	strb	r0, [r3, #30]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8019bbc:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8019bbe:	4925      	ldr	r1, [pc, #148]	; (8019c54 <RTC_IF_StartTimer+0x16c>)
 8019bc0:	4825      	ldr	r0, [pc, #148]	; (8019c58 <RTC_IF_StartTimer+0x170>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8019bc2:	f883 e01d 	strb.w	lr, [r3, #29]
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8019bc6:	4622      	mov	r2, r4
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8019bc8:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8019bcc:	f883 c01c 	strb.w	ip, [r3, #28]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8019bd0:	77de      	strb	r6, [r3, #31]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8019bd2:	639c      	str	r4, [r3, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8019bd4:	631c      	str	r4, [r3, #48]	; 0x30
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8019bd6:	f002 fe67 	bl	801c8a8 <HAL_RTC_SetAlarm_IT>
}
 8019bda:	4620      	mov	r0, r4
 8019bdc:	b003      	add	sp, #12
 8019bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8019be2:	f5a0 30a8 	sub.w	r0, r0, #86016	; 0x15000
    rtcAlarmDays++;
 8019be6:	3201      	adds	r2, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8019be8:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
    rtcAlarmDays++;
 8019bec:	b292      	uxth	r2, r2
 8019bee:	e7ae      	b.n	8019b4e <RTC_IF_StartTimer+0x66>
    rtcAlarmHours++;
 8019bf0:	f10c 0c01 	add.w	ip, ip, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8019bf4:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
    rtcAlarmHours++;
 8019bf8:	fa1f fc8c 	uxth.w	ip, ip
 8019bfc:	e7ab      	b.n	8019b56 <RTC_IF_StartTimer+0x6e>
    rtcAlarmMinutes++;
 8019bfe:	f10e 0e01 	add.w	lr, lr, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8019c02:	383c      	subs	r0, #60	; 0x3c
    rtcAlarmMinutes++;
 8019c04:	fa1f fe8e 	uxth.w	lr, lr
 8019c08:	e7aa      	b.n	8019b60 <RTC_IF_StartTimer+0x78>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8019c0a:	383c      	subs	r0, #60	; 0x3c
    rtcAlarmMinutes++;
 8019c0c:	f10e 0e01 	add.w	lr, lr, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8019c10:	b280      	uxth	r0, r0
    rtcAlarmMinutes++;
 8019c12:	fa1f fe8e 	uxth.w	lr, lr
 8019c16:	e7ae      	b.n	8019b76 <RTC_IF_StartTimer+0x8e>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8019c18:	f1ae 0e3c 	sub.w	lr, lr, #60	; 0x3c
    rtcAlarmHours++;
 8019c1c:	f10c 0c01 	add.w	ip, ip, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8019c20:	fa1f fe8e 	uxth.w	lr, lr
    rtcAlarmHours++;
 8019c24:	fa1f fc8c 	uxth.w	ip, ip
 8019c28:	e7a7      	b.n	8019b7a <RTC_IF_StartTimer+0x92>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8019c2a:	f1ac 0c18 	sub.w	ip, ip, #24
    rtcAlarmDays++;
 8019c2e:	3201      	adds	r2, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8019c30:	fa1f fc8c 	uxth.w	ip, ip
    rtcAlarmDays++;
 8019c34:	b292      	uxth	r2, r2
 8019c36:	e7a3      	b.n	8019b80 <RTC_IF_StartTimer+0x98>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8019c38:	442c      	add	r4, r5
 8019c3a:	7b25      	ldrb	r5, [r4, #12]
 8019c3c:	42aa      	cmp	r2, r5
 8019c3e:	d9b0      	bls.n	8019ba2 <RTC_IF_StartTimer+0xba>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8019c40:	fbb2 f4f5 	udiv	r4, r2, r5
 8019c44:	fb05 2214 	mls	r2, r5, r4, r2
 8019c48:	e7aa      	b.n	8019ba0 <RTC_IF_StartTimer+0xb8>
 8019c4a:	bf00      	nop
 8019c4c:	0001517f 	.word	0x0001517f
 8019c50:	080271f8 	.word	0x080271f8
 8019c54:	20001798 	.word	0x20001798
 8019c58:	20002884 	.word	0x20002884
 8019c5c:	2000177c 	.word	0x2000177c

08019c60 <RTC_IF_GetTime>:
{
 8019c60:	b510      	push	{r4, lr}
 8019c62:	b086      	sub	sp, #24
 8019c64:	4604      	mov	r4, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8019c66:	a901      	add	r1, sp, #4
 8019c68:	4668      	mov	r0, sp
 8019c6a:	f7ff fec9 	bl	8019a00 <RTC_GetCalendarValue>
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8019c6e:	237d      	movs	r3, #125	; 0x7d
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8019c70:	f3c0 0209 	ubfx	r2, r0, #0, #10
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8019c74:	fba2 2303 	umull	r2, r3, r2, r3
 8019c78:	09d2      	lsrs	r2, r2, #7
}
 8019c7a:	0a80      	lsrs	r0, r0, #10
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8019c7c:	8022      	strh	r2, [r4, #0]
}
 8019c7e:	b006      	add	sp, #24
 8019c80:	bd10      	pop	{r4, pc}
	...

08019c84 <RTC_IF_BkUp_Write_Seconds>:
{
 8019c84:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8019c86:	2100      	movs	r1, #0
 8019c88:	4801      	ldr	r0, [pc, #4]	; (8019c90 <RTC_IF_BkUp_Write_Seconds+0xc>)
 8019c8a:	f002 bf16 	b.w	801caba <HAL_RTCEx_BKUPWrite>
 8019c8e:	bf00      	nop
 8019c90:	20002884 	.word	0x20002884

08019c94 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8019c94:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8019c96:	2101      	movs	r1, #1
 8019c98:	4801      	ldr	r0, [pc, #4]	; (8019ca0 <RTC_IF_BkUp_Write_SubSeconds+0xc>)
 8019c9a:	f002 bf0e 	b.w	801caba <HAL_RTCEx_BKUPWrite>
 8019c9e:	bf00      	nop
 8019ca0:	20002884 	.word	0x20002884

08019ca4 <RTC_IF_BkUp_Read_Seconds>:
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8019ca4:	4801      	ldr	r0, [pc, #4]	; (8019cac <RTC_IF_BkUp_Read_Seconds+0x8>)
 8019ca6:	2100      	movs	r1, #0
 8019ca8:	f002 bf0c 	b.w	801cac4 <HAL_RTCEx_BKUPRead>
 8019cac:	20002884 	.word	0x20002884

08019cb0 <RTC_IF_BkUp_Read_SubSeconds>:
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8019cb0:	4801      	ldr	r0, [pc, #4]	; (8019cb8 <RTC_IF_BkUp_Read_SubSeconds+0x8>)
 8019cb2:	2101      	movs	r1, #1
 8019cb4:	f002 bf06 	b.w	801cac4 <HAL_RTCEx_BKUPRead>
 8019cb8:	20002884 	.word	0x20002884

08019cbc <RTC_IF_Init>:
{
 8019cbc:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 8019cbe:	4c10      	ldr	r4, [pc, #64]	; (8019d00 <RTC_IF_Init+0x44>)
 8019cc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
{
 8019cc4:	b095      	sub	sp, #84	; 0x54
  if (RTC_Initalized == false)
 8019cc6:	b9c3      	cbnz	r3, 8019cfa <RTC_IF_Init+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8019cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8019ccc:	f44f 7580 	mov.w	r5, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8019cd0:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8019cd2:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8019cd4:	9510      	str	r5, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8019cd6:	f002 fa52 	bl	801c17e <HAL_RCCEx_PeriphCLKConfig>
 8019cda:	b100      	cbz	r0, 8019cde <RTC_IF_Init+0x22>
      while (1);
 8019cdc:	e7fe      	b.n	8019cdc <RTC_IF_Init+0x20>
    MX_RTC_Init();
 8019cde:	f7ff fddf 	bl	80198a0 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8019ce2:	4629      	mov	r1, r5
 8019ce4:	4807      	ldr	r0, [pc, #28]	; (8019d04 <RTC_IF_Init+0x48>)
 8019ce6:	f002 fc0f 	bl	801c508 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8019cea:	4806      	ldr	r0, [pc, #24]	; (8019d04 <RTC_IF_Init+0x48>)
 8019cec:	f002 feef 	bl	801cace <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8019cf0:	f7ff fee0 	bl	8019ab4 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8019cf4:	2301      	movs	r3, #1
 8019cf6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8019cfa:	2000      	movs	r0, #0
 8019cfc:	b015      	add	sp, #84	; 0x54
 8019cfe:	bd30      	pop	{r4, r5, pc}
 8019d00:	2000177c 	.word	0x2000177c
 8019d04:	20002884 	.word	0x20002884

08019d08 <RTC_IF_GetTimerValue>:
{
 8019d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (RTC_Initalized == true)
 8019d0a:	4b05      	ldr	r3, [pc, #20]	; (8019d20 <RTC_IF_GetTimerValue+0x18>)
 8019d0c:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 8019d10:	b118      	cbz	r0, 8019d1a <RTC_IF_GetTimerValue+0x12>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8019d12:	a901      	add	r1, sp, #4
 8019d14:	4668      	mov	r0, sp
 8019d16:	f7ff fe73 	bl	8019a00 <RTC_GetCalendarValue>
}
 8019d1a:	b007      	add	sp, #28
 8019d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d20:	2000177c 	.word	0x2000177c

08019d24 <RTC_IF_DelayMs>:
{
 8019d24:	4601      	mov	r1, r0
 8019d26:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8019d28:	227d      	movs	r2, #125	; 0x7d
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	01c0      	lsls	r0, r0, #7
 8019d2e:	0e49      	lsrs	r1, r1, #25
 8019d30:	f7ff f82c 	bl	8018d8c <__aeabi_uldivmod>
 8019d34:	4604      	mov	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8019d36:	f7ff ffe7 	bl	8019d08 <RTC_IF_GetTimerValue>
 8019d3a:	4605      	mov	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8019d3c:	f7ff ffe4 	bl	8019d08 <RTC_IF_GetTimerValue>
 8019d40:	1b43      	subs	r3, r0, r5
 8019d42:	42a3      	cmp	r3, r4
 8019d44:	d300      	bcc.n	8019d48 <RTC_IF_DelayMs+0x24>
}
 8019d46:	bd38      	pop	{r3, r4, r5, pc}
    __NOP();
 8019d48:	bf00      	nop
 8019d4a:	e7f7      	b.n	8019d3c <RTC_IF_DelayMs+0x18>

08019d4c <HAL_MspInit>:
 8019d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019d50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8019d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019d58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8019d5c:	689a      	ldr	r2, [r3, #8]
 8019d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8019d62:	609a      	str	r2, [r3, #8]
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8019d64:	4770      	bx	lr

08019d66 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8019d66:	e7fe      	b.n	8019d66 <BusFault_Handler>

08019d68 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8019d68:	e7fe      	b.n	8019d68 <UsageFault_Handler>

08019d6a <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8019d6a:	4770      	bx	lr

08019d6c <DebugMon_Handler>:
 8019d6c:	4770      	bx	lr

08019d6e <PendSV_Handler>:
 8019d6e:	4770      	bx	lr

08019d70 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8019d70:	f000 bc96 	b.w	801a6a0 <HAL_IncTick>

08019d74 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8019d78:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019d7c:	4302      	orrs	r2, r0
 8019d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8019d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019d82:	4018      	ands	r0, r3
 8019d84:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8019d86:	9b01      	ldr	r3, [sp, #4]
}
 8019d88:	b002      	add	sp, #8
 8019d8a:	4770      	bx	lr

08019d8c <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8019d8c:	b40c      	push	{r2, r3}
 8019d8e:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8019d90:	4a05      	ldr	r2, [pc, #20]	; (8019da8 <tiny_snprintf_like.constprop.0+0x1c>)
  va_start(vaArgs, strFormat);
 8019d92:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8019d94:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8019d96:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8019d98:	f00d f846 	bl	8026e28 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8019d9c:	b003      	add	sp, #12
 8019d9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8019da2:	b002      	add	sp, #8
 8019da4:	4770      	bx	lr
 8019da6:	bf00      	nop
 8019da8:	08027d2d 	.word	0x08027d2d

08019dac <TimestampNow>:
{
 8019dac:	b530      	push	{r4, r5, lr}
 8019dae:	b085      	sub	sp, #20
 8019db0:	4604      	mov	r4, r0
  SysTime_t curtime = SysTimeGet();
 8019db2:	a802      	add	r0, sp, #8
{
 8019db4:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8019db6:	f00c fef1 	bl	8026b9c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8019dba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019dbe:	4a06      	ldr	r2, [pc, #24]	; (8019dd8 <TimestampNow+0x2c>)
 8019dc0:	9300      	str	r3, [sp, #0]
 8019dc2:	2110      	movs	r1, #16
 8019dc4:	9b02      	ldr	r3, [sp, #8]
 8019dc6:	4620      	mov	r0, r4
 8019dc8:	f7ff ffe0 	bl	8019d8c <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8019dcc:	4620      	mov	r0, r4
 8019dce:	f7fe fb37 	bl	8018440 <strlen>
 8019dd2:	8028      	strh	r0, [r5, #0]
}
 8019dd4:	b005      	add	sp, #20
 8019dd6:	bd30      	pop	{r4, r5, pc}
 8019dd8:	08027d2d 	.word	0x08027d2d

08019ddc <SystemApp_Init>:
{
 8019ddc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  UTIL_TIMER_Init();
 8019dde:	f00c ff19 	bl	8026c14 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019de2:	2214      	movs	r2, #20
 8019de4:	2100      	movs	r1, #0
 8019de6:	a801      	add	r0, sp, #4
 8019de8:	f00d f95c 	bl	80270a4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8019dec:	2001      	movs	r0, #1
 8019dee:	f7ff ffc1 	bl	8019d74 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8019df2:	2002      	movs	r0, #2
 8019df4:	f7ff ffbe 	bl	8019d74 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8019df8:	2004      	movs	r0, #4
 8019dfa:	f7ff ffbb 	bl	8019d74 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8019dfe:	2080      	movs	r0, #128	; 0x80
 8019e00:	f7ff ffb8 	bl	8019d74 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019e04:	2203      	movs	r2, #3
 8019e06:	2300      	movs	r3, #0
 8019e08:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019e0c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8019e0e:	f649 73ff 	movw	r3, #40959	; 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8019e16:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019e18:	f001 fb46 	bl	801b4a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8019e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019e20:	a901      	add	r1, sp, #4
 8019e22:	481c      	ldr	r0, [pc, #112]	; (8019e94 <SystemApp_Init+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8019e24:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019e26:	f001 fb3f 	bl	801b4a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8019e2a:	a901      	add	r1, sp, #4
 8019e2c:	481a      	ldr	r0, [pc, #104]	; (8019e98 <SystemApp_Init+0xbc>)
 8019e2e:	f001 fb3b 	bl	801b4a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8019e32:	a901      	add	r1, sp, #4
 8019e34:	4819      	ldr	r0, [pc, #100]	; (8019e9c <SystemApp_Init+0xc0>)
 8019e36:	f001 fb37 	bl	801b4a8 <HAL_GPIO_Init>
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8019e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019e40:	f022 0201 	bic.w	r2, r2, #1
 8019e44:	64da      	str	r2, [r3, #76]	; 0x4c
 8019e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019e48:	f022 0202 	bic.w	r2, r2, #2
 8019e4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8019e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019e50:	f022 0204 	bic.w	r2, r2, #4
 8019e54:	64da      	str	r2, [r3, #76]	; 0x4c
 8019e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  DBG_Init();
 8019e5e:	f000 f884 	bl	8019f6a <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8019e62:	f00c fcc3 	bl	80267ec <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8019e66:	480e      	ldr	r0, [pc, #56]	; (8019ea0 <SystemApp_Init+0xc4>)
 8019e68:	f00c fcda 	bl	8026820 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8019e6c:	2002      	movs	r0, #2
 8019e6e:	f00c fcdd 	bl	802682c <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8019e72:	f7ff fc79 	bl	8019768 <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8019e76:	f000 fbae 	bl	801a5d6 <SX1276MB1LAS_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8019e7a:	f000 faa3 	bl	801a3c4 <SX1276MB1LAS_RADIO_IoInit>
  EnvSensors_Init();
 8019e7e:	f000 f89b 	bl	8019fb8 <EnvSensors_Init>
  UTIL_LPM_Init();
 8019e82:	f00c fdd3 	bl	8026a2c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8019e86:	2101      	movs	r1, #1
 8019e88:	4608      	mov	r0, r1
 8019e8a:	f00c fded 	bl	8026a68 <UTIL_LPM_SetOffMode>
}
 8019e8e:	b007      	add	sp, #28
 8019e90:	f85d fb04 	ldr.w	pc, [sp], #4
 8019e94:	48000400 	.word	0x48000400
 8019e98:	48000800 	.word	0x48000800
 8019e9c:	48001c00 	.word	0x48001c00
 8019ea0:	08019dad 	.word	0x08019dad

08019ea4 <GetBatteryLevel>:
{
 8019ea4:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8019ea6:	f7ff fc67 	bl	8019778 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8019eaa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8019eae:	4298      	cmp	r0, r3
 8019eb0:	d815      	bhi.n	8019ede <GetBatteryLevel+0x3a>
  else if (batteryLevelmV < VDD_MIN)
 8019eb2:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8019eb6:	d314      	bcc.n	8019ee2 <GetBatteryLevel+0x3e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8019eb8:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8019ebc:	24fe      	movs	r4, #254	; 0xfe
 8019ebe:	4344      	muls	r4, r0
 8019ec0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8019ec4:	fbb4 f4f3 	udiv	r4, r4, r3
 8019ec8:	b2e4      	uxtb	r4, r4
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8019eca:	4b07      	ldr	r3, [pc, #28]	; (8019ee8 <GetBatteryLevel+0x44>)
 8019ecc:	9400      	str	r4, [sp, #0]
 8019ece:	2201      	movs	r2, #1
 8019ed0:	2100      	movs	r1, #0
 8019ed2:	2002      	movs	r0, #2
 8019ed4:	f00c fcf4 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
}
 8019ed8:	4620      	mov	r0, r4
 8019eda:	b002      	add	sp, #8
 8019edc:	bd10      	pop	{r4, pc}
    batteryLevel = LORAWAN_MAX_BAT;
 8019ede:	24fe      	movs	r4, #254	; 0xfe
 8019ee0:	e7f3      	b.n	8019eca <GetBatteryLevel+0x26>
    batteryLevel = 0;
 8019ee2:	2400      	movs	r4, #0
 8019ee4:	e7f1      	b.n	8019eca <GetBatteryLevel+0x26>
 8019ee6:	bf00      	nop
 8019ee8:	08027d36 	.word	0x08027d36

08019eec <GetTemperatureLevel>:
{
 8019eec:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8019eee:	f7ff fc55 	bl	801979c <SYS_GetTemperatureLevel>
 8019ef2:	2800      	cmp	r0, #0
 8019ef4:	bfb8      	it	lt
 8019ef6:	30ff      	addlt	r0, #255	; 0xff
}
 8019ef8:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8019efc:	bd08      	pop	{r3, pc}

08019efe <GetUniqueId>:
{
 8019efe:	b538      	push	{r3, r4, r5, lr}
 8019f00:	4604      	mov	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8019f02:	f000 fbdf 	bl	801a6c4 <HAL_GetUIDw0>
 8019f06:	4605      	mov	r5, r0
 8019f08:	f000 fbe8 	bl	801a6dc <HAL_GetUIDw2>
 8019f0c:	4405      	add	r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 8019f0e:	f000 fbdf 	bl	801a6d0 <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 8019f12:	0e2b      	lsrs	r3, r5, #24
 8019f14:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 8019f16:	0c2b      	lsrs	r3, r5, #16
 8019f18:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 8019f1a:	0a2b      	lsrs	r3, r5, #8
 8019f1c:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 8019f1e:	0e03      	lsrs	r3, r0, #24
 8019f20:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 8019f22:	0c03      	lsrs	r3, r0, #16
 8019f24:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 8019f26:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 8019f28:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 8019f2a:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 8019f2c:	7020      	strb	r0, [r4, #0]
}
 8019f2e:	bd38      	pop	{r3, r4, r5, pc}

08019f30 <GetDevAddr>:
{
 8019f30:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8019f32:	f000 fbc7 	bl	801a6c4 <HAL_GetUIDw0>
 8019f36:	4604      	mov	r4, r0
 8019f38:	f000 fbca 	bl	801a6d0 <HAL_GetUIDw1>
 8019f3c:	4044      	eors	r4, r0
 8019f3e:	f000 fbcd 	bl	801a6dc <HAL_GetUIDw2>
}
 8019f42:	4060      	eors	r0, r4
 8019f44:	bd10      	pop	{r4, pc}

08019f46 <UTIL_ADV_TRACE_PreSendHook>:
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8019f46:	2101      	movs	r1, #1
 8019f48:	2004      	movs	r0, #4
 8019f4a:	f00c bd77 	b.w	8026a3c <UTIL_LPM_SetStopMode>

08019f4e <UTIL_ADV_TRACE_PostSendHook>:
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8019f4e:	2100      	movs	r1, #0
 8019f50:	2004      	movs	r0, #4
 8019f52:	f00c bd73 	b.w	8026a3c <UTIL_LPM_SetStopMode>

08019f56 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8019f56:	2000      	movs	r0, #0
 8019f58:	4770      	bx	lr

08019f5a <HAL_GetTick>:
uint32_t HAL_GetTick(void)
{
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8019f5a:	f7ff bed5 	b.w	8019d08 <RTC_IF_GetTimerValue>

08019f5e <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8019f5e:	b082      	sub	sp, #8
 8019f60:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8019f62:	9801      	ldr	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8019f64:	b002      	add	sp, #8
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8019f66:	f7ff bedd 	b.w	8019d24 <RTC_IF_DelayMs>

08019f6a <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 8019f6a:	b510      	push	{r4, lr}

#elif defined (DEBUGGER_ON) && (DEBUGGER_ON == 0) /* DEBUGGER_OFF */
  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
  /* The 4 debug lines above are simply not set in this case */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8019f6c:	2203      	movs	r2, #3
{
 8019f6e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019f70:	2300      	movs	r3, #0
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8019f72:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019f76:	e9cd 3304 	strd	r3, r3, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019f7a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8019f7e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8019f82:	9301      	str	r3, [sp, #4]
 8019f84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019f86:	f043 0301 	orr.w	r3, r3, #1
 8019f8a:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8019f8c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019f8e:	f003 0301 	and.w	r3, r3, #1
  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019f92:	a901      	add	r1, sp, #4
 8019f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019f98:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8019f9a:	9b00      	ldr	r3, [sp, #0]
 8019f9c:	f001 fa84 	bl	801b4a8 <HAL_GPIO_Init>
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8019fa0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019fa2:	f023 0301 	bic.w	r3, r3, #1
 8019fa6:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_DISABLE() ;

  HAL_DBGMCU_DisableDBGSleepMode();
 8019fa8:	f000 fb9e 	bl	801a6e8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8019fac:	f000 fba4 	bl	801a6f8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8019fb0:	f000 fbaa 	bl	801a708 <HAL_DBGMCU_DisableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8019fb4:	b006      	add	sp, #24
 8019fb6:	bd10      	pop	{r4, pc}

08019fb8 <EnvSensors_Init>:
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8019fb8:	4770      	bx	lr
	...

08019fbc <MX_USART1_Init>:
/* USART1 init function */

void MX_USART1_Init(void)
{

	husart1.Instance        = USART1;
 8019fbc:	480a      	ldr	r0, [pc, #40]	; (8019fe8 <MX_USART1_Init+0x2c>)
	husart1.Init.BaudRate   = USART_BAUDRATE;
 8019fbe:	4a0b      	ldr	r2, [pc, #44]	; (8019fec <MX_USART1_Init+0x30>)
{
 8019fc0:	b508      	push	{r3, lr}
	husart1.Init.BaudRate   = USART_BAUDRATE;
 8019fc2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8019fc6:	e9c0 2300 	strd	r2, r3, [r0]
	husart1.Init.WordLength = UART_WORDLENGTH_8B;
 8019fca:	2300      	movs	r3, #0
	husart1.Init.StopBits   = UART_STOPBITS_1;
	husart1.Init.Parity     = UART_PARITY_NONE;
	husart1.Init.Mode       = UART_MODE_TX;
 8019fcc:	2208      	movs	r2, #8
	husart1.Init.StopBits   = UART_STOPBITS_1;
 8019fce:	e9c0 3302 	strd	r3, r3, [r0, #8]
	husart1.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8019fd2:	e9c0 2305 	strd	r2, r3, [r0, #20]
	husart1.Init.Parity     = UART_PARITY_NONE;
 8019fd6:	6103      	str	r3, [r0, #16]

	if (HAL_UART_Init(&husart1) != HAL_OK)
 8019fd8:	f003 fce3 	bl	801d9a2 <HAL_UART_Init>
 8019fdc:	b118      	cbz	r0, 8019fe6 <MX_USART1_Init+0x2a>
	{
		Error_Handler();
	}
}
 8019fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8019fe2:	f7ff bc5b 	b.w	801989c <Error_Handler>
}
 8019fe6:	bd08      	pop	{r3, pc}
 8019fe8:	20002908 	.word	0x20002908
 8019fec:	40013800 	.word	0x40013800

08019ff0 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8019ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019ff4:	2214      	movs	r2, #20
{
 8019ff6:	b09f      	sub	sp, #124	; 0x7c
 8019ff8:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019ffa:	2100      	movs	r1, #0
 8019ffc:	eb0d 0002 	add.w	r0, sp, r2
 801a000:	f00d f850 	bl	80270a4 <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 801a004:	2250      	movs	r2, #80	; 0x50
 801a006:	2100      	movs	r1, #0
 801a008:	a80a      	add	r0, sp, #40	; 0x28
 801a00a:	f00d f84b 	bl	80270a4 <memset>

  if (uartHandle->Instance == USART1)
 801a00e:	6832      	ldr	r2, [r6, #0]
 801a010:	4b3e      	ldr	r3, [pc, #248]	; (801a10c <HAL_UART_MspInit+0x11c>)
 801a012:	429a      	cmp	r2, r3
 801a014:	d176      	bne.n	801a104 <HAL_UART_MspInit+0x114>
  SET_BIT(RCC->AHB2ENR, Periphs);
 801a016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_USART1_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a01a:	a80a      	add	r0, sp, #40	; 0x28
 801a01c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a01e:	f042 0202 	orr.w	r2, r2, #2
 801a022:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801a024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a026:	f002 0202 	and.w	r2, r2, #2
 801a02a:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 801a02c:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801a02e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a030:	f042 0202 	orr.w	r2, r2, #2
 801a034:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801a036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a038:	f002 0202 	and.w	r2, r2, #2
 801a03c:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 801a03e:	9a03      	ldr	r2, [sp, #12]
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 801a040:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801a042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a046:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801a048:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801a04a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801a04e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 801a050:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 801a052:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a054:	f042 0201 	orr.w	r2, r2, #1
 801a058:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 801a05a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a05c:	f002 0201 	and.w	r2, r2, #1
 801a060:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 801a062:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 801a064:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801a066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a06a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801a06c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a06e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a072:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 801a074:	9b00      	ldr	r3, [sp, #0]
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801a076:	2301      	movs	r3, #1
 801a078:	930a      	str	r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 801a07a:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a07c:	f002 f87f 	bl	801c17e <HAL_RCCEx_PeriphCLKConfig>
 801a080:	b108      	cbz	r0, 801a086 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 801a082:	f7ff fc0b 	bl	801989c <Error_Handler>
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 801a086:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a088:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 801a08a:	2407      	movs	r4, #7
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 801a08c:	4820      	ldr	r0, [pc, #128]	; (801a110 <HAL_UART_MspInit+0x120>)
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 801a08e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a090:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 801a094:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 801a098:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a09a:	e9cd 3905 	strd	r3, r9, [sp, #20]

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 801a09e:	2780      	movs	r7, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 801a0a0:	e9cd 5807 	strd	r5, r8, [sp, #28]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 801a0a4:	f001 fa00 	bl	801b4a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 801a0a8:	4819      	ldr	r0, [pc, #100]	; (801a110 <HAL_UART_MspInit+0x120>)
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 801a0aa:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 801a0ac:	a905      	add	r1, sp, #20


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_usart1_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 801a0ae:	4c19      	ldr	r4, [pc, #100]	; (801a114 <HAL_UART_MspInit+0x124>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a0b0:	e9cd 7905 	strd	r7, r9, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 801a0b4:	e9cd 5807 	strd	r5, r8, [sp, #28]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 801a0b8:	f001 f9f6 	bl	801b4a8 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 801a0bc:	4a16      	ldr	r2, [pc, #88]	; (801a118 <HAL_UART_MspInit+0x128>)
    hdma_usart1_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode                = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority            = DMA_PRIORITY_LOW;
 801a0be:	6225      	str	r5, [r4, #32]
    hdma_usart1_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 801a0c0:	230f      	movs	r3, #15
 801a0c2:	e9c4 2300 	strd	r2, r3, [r4]

    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 801a0c6:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 801a0c8:	2310      	movs	r3, #16
    hdma_usart1_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 801a0ca:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801a0ce:	e9c4 7504 	strd	r7, r5, [r4, #16]
    hdma_usart1_tx.Init.Mode                = DMA_NORMAL;
 801a0d2:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 801a0d6:	f001 f8d1 	bl	801b27c <HAL_DMA_Init>
 801a0da:	b108      	cbz	r0, 801a0e0 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 801a0dc:	f7ff fbde 	bl	801989c <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart1_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 801a0e0:	2201      	movs	r2, #1
 801a0e2:	2100      	movs	r1, #0
 801a0e4:	203a      	movs	r0, #58	; 0x3a
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart1_tx);
 801a0e6:	67b4      	str	r4, [r6, #120]	; 0x78
 801a0e8:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 801a0ea:	f001 f835 	bl	801b158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 801a0ee:	203a      	movs	r0, #58	; 0x3a
 801a0f0:	f001 f864 	bl	801b1bc <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 801a0f4:	2024      	movs	r0, #36	; 0x24
 801a0f6:	2201      	movs	r2, #1
 801a0f8:	2100      	movs	r1, #0
 801a0fa:	f001 f82d 	bl	801b158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 801a0fe:	2024      	movs	r0, #36	; 0x24
 801a100:	f001 f85c 	bl	801b1bc <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 801a104:	b01f      	add	sp, #124	; 0x7c
 801a106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a10a:	bf00      	nop
 801a10c:	40013800 	.word	0x40013800
 801a110:	48000400 	.word	0x48000400
 801a114:	200028a8 	.word	0x200028a8
 801a118:	40020444 	.word	0x40020444

0801a11c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART1)
 801a11c:	6802      	ldr	r2, [r0, #0]
 801a11e:	4b0c      	ldr	r3, [pc, #48]	; (801a150 <HAL_UART_MspDeInit+0x34>)
 801a120:	429a      	cmp	r2, r3
{
 801a122:	b510      	push	{r4, lr}
 801a124:	4604      	mov	r4, r0
  if (uartHandle->Instance == USART1)
 801a126:	d111      	bne.n	801a14c <HAL_UART_MspDeInit+0x30>
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 801a128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin | USARTx_TX_Pin);
 801a12c:	4809      	ldr	r0, [pc, #36]	; (801a154 <HAL_UART_MspDeInit+0x38>)
 801a12e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801a130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a134:	6613      	str	r3, [r2, #96]	; 0x60
 801a136:	21c0      	movs	r1, #192	; 0xc0
 801a138:	f001 fa6c 	bl	801b614 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 801a13c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 801a13e:	f001 f90d 	bl	801b35c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 801a142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 801a146:	2024      	movs	r0, #36	; 0x24
 801a148:	f001 b846 	b.w	801b1d8 <HAL_NVIC_DisableIRQ>
}
 801a14c:	bd10      	pop	{r4, pc}
 801a14e:	bf00      	nop
 801a150:	40013800 	.word	0x40013800
 801a154:	48000400 	.word	0x48000400

0801a158 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 801a158:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 801a15a:	4b04      	ldr	r3, [pc, #16]	; (801a16c <vcom_Init+0x14>)
 801a15c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 801a15e:	f7ff fb4b 	bl	80197f8 <MX_DMA_Init>
  MX_USART1_Init();
 801a162:	f7ff ff2b 	bl	8019fbc <MX_USART1_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 801a166:	2000      	movs	r0, #0
 801a168:	bd08      	pop	{r3, pc}
 801a16a:	bf00      	nop
 801a16c:	200017c4 	.word	0x200017c4

0801a170 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 801a170:	b508      	push	{r3, lr}
 801a172:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 801a174:	4601      	mov	r1, r0
 801a176:	4802      	ldr	r0, [pc, #8]	; (801a180 <vcom_Trace_DMA+0x10>)
 801a178:	f002 fffe 	bl	801d178 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 801a17c:	2000      	movs	r0, #0
 801a17e:	bd08      	pop	{r3, pc}
 801a180:	20002908 	.word	0x20002908

0801a184 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 801a184:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE END vcom_ReceiveInit_1 */

  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 801a186:	4b11      	ldr	r3, [pc, #68]	; (801a1cc <vcom_ReceiveInit+0x48>)

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 801a188:	4c11      	ldr	r4, [pc, #68]	; (801a1d0 <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 801a18a:	6058      	str	r0, [r3, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 801a18c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801a190:	9300      	str	r3, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 801a192:	ab02      	add	r3, sp, #8
 801a194:	e913 0006 	ldmdb	r3, {r1, r2}
 801a198:	4620      	mov	r0, r4
 801a19a:	f003 fcc5 	bl	801db28 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 801a19e:	6823      	ldr	r3, [r4, #0]
 801a1a0:	69da      	ldr	r2, [r3, #28]
 801a1a2:	03d1      	lsls	r1, r2, #15
 801a1a4:	d4fc      	bmi.n	801a1a0 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 801a1a6:	69da      	ldr	r2, [r3, #28]
 801a1a8:	0252      	lsls	r2, r2, #9
 801a1aa:	d5fc      	bpl.n	801a1a6 <vcom_ReceiveInit+0x22>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 801a1ac:	689a      	ldr	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 801a1ae:	4808      	ldr	r0, [pc, #32]	; (801a1d0 <vcom_ReceiveInit+0x4c>)
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 801a1b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801a1b4:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 801a1b6:	f003 fcfe 	bl	801dbb6 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 801a1ba:	4906      	ldr	r1, [pc, #24]	; (801a1d4 <vcom_ReceiveInit+0x50>)
 801a1bc:	4804      	ldr	r0, [pc, #16]	; (801a1d0 <vcom_ReceiveInit+0x4c>)
 801a1be:	2201      	movs	r2, #1
 801a1c0:	f003 fc8a 	bl	801dad8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 801a1c4:	2000      	movs	r0, #0
 801a1c6:	b002      	add	sp, #8
 801a1c8:	bd10      	pop	{r4, pc}
 801a1ca:	bf00      	nop
 801a1cc:	200017c4 	.word	0x200017c4
 801a1d0:	20002908 	.word	0x20002908
 801a1d4:	20002998 	.word	0x20002998

0801a1d8 <vcom_DeInit>:
{
 801a1d8:	b508      	push	{r3, lr}
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB2RSTR, Periphs);
 801a1da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  HAL_UART_MspDeInit(&UartHandle);
 801a1de:	4808      	ldr	r0, [pc, #32]	; (801a200 <vcom_DeInit+0x28>)
 801a1e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a1e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a1e6:	641a      	str	r2, [r3, #64]	; 0x40
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 801a1e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a1ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a1ee:	641a      	str	r2, [r3, #64]	; 0x40
 801a1f0:	f7ff ff94 	bl	801a11c <HAL_UART_MspDeInit>
  HAL_NVIC_DisableIRQ(DMA1_Channel7_IRQn);
 801a1f4:	2011      	movs	r0, #17
 801a1f6:	f000 ffef 	bl	801b1d8 <HAL_NVIC_DisableIRQ>
}
 801a1fa:	2000      	movs	r0, #0
 801a1fc:	bd08      	pop	{r3, pc}
 801a1fe:	bf00      	nop
 801a200:	20002908 	.word	0x20002908

0801a204 <HAL_UART_TxCpltCallback>:
{
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 801a204:	4b01      	ldr	r3, [pc, #4]	; (801a20c <HAL_UART_TxCpltCallback+0x8>)
 801a206:	2000      	movs	r0, #0
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	4718      	bx	r3
 801a20c:	200017c4 	.word	0x200017c4

0801a210 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 801a210:	4b08      	ldr	r3, [pc, #32]	; (801a234 <HAL_UART_RxCpltCallback+0x24>)
 801a212:	685b      	ldr	r3, [r3, #4]
{
 801a214:	b510      	push	{r4, lr}
 801a216:	4604      	mov	r4, r0
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 801a218:	b12b      	cbz	r3, 801a226 <HAL_UART_RxCpltCallback+0x16>
 801a21a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 801a21e:	b912      	cbnz	r2, 801a226 <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 801a220:	4805      	ldr	r0, [pc, #20]	; (801a238 <HAL_UART_RxCpltCallback+0x28>)
 801a222:	2101      	movs	r1, #1
 801a224:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 801a226:	4620      	mov	r0, r4
 801a228:	4903      	ldr	r1, [pc, #12]	; (801a238 <HAL_UART_RxCpltCallback+0x28>)
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 801a22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 801a22e:	2201      	movs	r2, #1
 801a230:	f003 bc52 	b.w	801dad8 <HAL_UART_Receive_IT>
 801a234:	200017c4 	.word	0x200017c4
 801a238:	20002998 	.word	0x20002998

0801a23c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801a23c:	480d      	ldr	r0, [pc, #52]	; (801a274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801a23e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801a240:	480d      	ldr	r0, [pc, #52]	; (801a278 <LoopForever+0x6>)
  ldr r1, =_edata
 801a242:	490e      	ldr	r1, [pc, #56]	; (801a27c <LoopForever+0xa>)
  ldr r2, =_sidata
 801a244:	4a0e      	ldr	r2, [pc, #56]	; (801a280 <LoopForever+0xe>)
  movs r3, #0
 801a246:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801a248:	e002      	b.n	801a250 <LoopCopyDataInit>

0801a24a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801a24a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801a24c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801a24e:	3304      	adds	r3, #4

0801a250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801a250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801a252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801a254:	d3f9      	bcc.n	801a24a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801a256:	4a0b      	ldr	r2, [pc, #44]	; (801a284 <LoopForever+0x12>)
  ldr r4, =_ebss
 801a258:	4c0b      	ldr	r4, [pc, #44]	; (801a288 <LoopForever+0x16>)
  movs r3, #0
 801a25a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801a25c:	e001      	b.n	801a262 <LoopFillZerobss>

0801a25e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801a25e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801a260:	3204      	adds	r2, #4

0801a262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801a262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801a264:	d3fb      	bcc.n	801a25e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801a266:	f000 f9d9 	bl	801a61c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 801a26a:	f00c fef7 	bl	802705c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 801a26e:	f7ff fb0b 	bl	8019888 <main>

0801a272 <LoopForever>:

LoopForever:
  b LoopForever
 801a272:	e7fe      	b.n	801a272 <LoopForever>
  ldr   r0, =_estack
 801a274:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 801a278:	20001010 	.word	0x20001010
  ldr r1, =_edata
 801a27c:	20001220 	.word	0x20001220
  ldr r2, =_sidata
 801a280:	080281e0 	.word	0x080281e0
  ldr r2, =_sbss
 801a284:	20001220 	.word	0x20001220
  ldr r4, =_ebss
 801a288:	20002b3c 	.word	0x20002b3c

0801a28c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801a28c:	e7fe      	b.n	801a28c <ADC1_IRQHandler>
	...

0801a290 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 801a290:	b513      	push	{r0, r1, r4, lr}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 801a292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 801a296:	4614      	mov	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 801a298:	9300      	str	r3, [sp, #0]
 801a29a:	4613      	mov	r3, r2
 801a29c:	460a      	mov	r2, r1
 801a29e:	4601      	mov	r1, r0
 801a2a0:	4804      	ldr	r0, [pc, #16]	; (801a2b4 <BSP_SPI1_SendRecv+0x24>)
 801a2a2:	f002 fd99 	bl	801cdd8 <HAL_SPI_TransmitReceive>
 801a2a6:	2800      	cmp	r0, #0
  {
    ret = len;
  }
  return ret;
}
 801a2a8:	bf0c      	ite	eq
 801a2aa:	4620      	moveq	r0, r4
 801a2ac:	f06f 0005 	mvnne.w	r0, #5
 801a2b0:	b002      	add	sp, #8
 801a2b2:	bd10      	pop	{r4, pc}
 801a2b4:	200029e8 	.word	0x200029e8

0801a2b8 <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 801a2b8:	4a16      	ldr	r2, [pc, #88]	; (801a314 <MX_SPI1_Init+0x5c>)
{
 801a2ba:	b538      	push	{r3, r4, r5, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 801a2bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 801a2c0:	e9c0 2300 	strd	r2, r3, [r0]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 801a2c4:	2500      	movs	r5, #0
 801a2c6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801a2ca:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 801a2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a2d2:	6183      	str	r3, [r0, #24]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 801a2d4:	e9c0 5504 	strd	r5, r5, [r0, #16]
{
 801a2d8:	4604      	mov	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 801a2da:	f001 ff13 	bl	801c104 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
 801a2de:	4a0e      	ldr	r2, [pc, #56]	; (801a318 <MX_SPI1_Init+0x60>)
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 801a2e0:	490e      	ldr	r1, [pc, #56]	; (801a31c <MX_SPI1_Init+0x64>)
  uint32_t divisor = 0;
 801a2e2:	462b      	mov	r3, r5
  while (spi_clk > baudrate_mbps)
 801a2e4:	4288      	cmp	r0, r1
 801a2e6:	d80d      	bhi.n	801a304 <MX_SPI1_Init+0x4c>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 801a2e8:	2300      	movs	r3, #0
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 801a2ea:	e9c4 3308 	strd	r3, r3, [r4, #32]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801a2ee:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 801a2f0:	2307      	movs	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 801a2f2:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 801a2f4:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 801a2f6:	4620      	mov	r0, r4
 801a2f8:	f002 fcea 	bl	801ccd0 <HAL_SPI_Init>
}
 801a2fc:	3800      	subs	r0, #0
 801a2fe:	bf18      	it	ne
 801a300:	2001      	movne	r0, #1
 801a302:	bd38      	pop	{r3, r4, r5, pc}
  {
    presc = baudrate[divisor];
    if (++divisor > 7)
 801a304:	3301      	adds	r3, #1
 801a306:	2b08      	cmp	r3, #8
    presc = baudrate[divisor];
 801a308:	f852 5b04 	ldr.w	r5, [r2], #4
    if (++divisor > 7)
 801a30c:	d0ec      	beq.n	801a2e8 <MX_SPI1_Init+0x30>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 801a30e:	0840      	lsrs	r0, r0, #1
 801a310:	e7e8      	b.n	801a2e4 <MX_SPI1_Init+0x2c>
 801a312:	bf00      	nop
 801a314:	40013000 	.word	0x40013000
 801a318:	08027260 	.word	0x08027260
 801a31c:	00989680 	.word	0x00989680

0801a320 <BSP_SPI1_Init>:
{
 801a320:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 801a322:	4c1e      	ldr	r4, [pc, #120]	; (801a39c <BSP_SPI1_Init+0x7c>)
 801a324:	4b1e      	ldr	r3, [pc, #120]	; (801a3a0 <BSP_SPI1_Init+0x80>)
 801a326:	6023      	str	r3, [r4, #0]
{
 801a328:	b087      	sub	sp, #28
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 801a32a:	4620      	mov	r0, r4
 801a32c:	f002 ff07 	bl	801d13e <HAL_SPI_GetState>
 801a330:	b110      	cbz	r0, 801a338 <BSP_SPI1_Init+0x18>
  int32_t ret = BSP_ERROR_NONE;
 801a332:	2000      	movs	r0, #0
}
 801a334:	b007      	add	sp, #28
 801a336:	bd30      	pop	{r4, r5, pc}
  SET_BIT(RCC->APB2ENR, Periphs);
 801a338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 801a33c:	2505      	movs	r5, #5
 801a33e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801a340:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a344:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801a346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a34c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 801a34e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a350:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a352:	e9cd 3002 	strd	r3, r0, [sp, #8]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 801a356:	2303      	movs	r3, #3
 801a358:	e9cd 3504 	strd	r3, r5, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 801a35c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 801a35e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 801a360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 801a364:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 801a366:	f001 f89f 	bl	801b4a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 801a36a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 801a36c:	a901      	add	r1, sp, #4
 801a36e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 801a372:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 801a374:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 801a376:	f001 f897 	bl	801b4a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 801a37a:	2320      	movs	r3, #32
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 801a37c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a380:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 801a382:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 801a384:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 801a386:	f001 f88f 	bl	801b4a8 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 801a38a:	4620      	mov	r0, r4
 801a38c:	f7ff ff94 	bl	801a2b8 <MX_SPI1_Init>
 801a390:	2800      	cmp	r0, #0
 801a392:	d0ce      	beq.n	801a332 <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 801a394:	f06f 0007 	mvn.w	r0, #7
  return ret;
 801a398:	e7cc      	b.n	801a334 <BSP_SPI1_Init+0x14>
 801a39a:	bf00      	nop
 801a39c:	200029e8 	.word	0x200029e8
 801a3a0:	40013000 	.word	0x40013000

0801a3a4 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 801a3a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 801a3a8:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 801a3aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a3ac:	4302      	orrs	r2, r0
 801a3ae:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801a3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a3b2:	4018      	ands	r0, r3
 801a3b4:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 801a3b6:	9b01      	ldr	r3, [sp, #4]
}
 801a3b8:	b002      	add	sp, #8
 801a3ba:	4770      	bx	lr

0801a3bc <SX1276MB1LAS_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t SX1276MB1LAS_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 801a3bc:	2000      	movs	r0, #0
 801a3be:	4770      	bx	lr

0801a3c0 <SX1276MB1LAS_RADIO_SetXO>:

void SX1276MB1LAS_RADIO_SetXO(uint8_t state)
{
}
 801a3c0:	4770      	bx	lr
	...

0801a3c4 <SX1276MB1LAS_RADIO_IoInit>:

void SX1276MB1LAS_RADIO_IoInit(void)
{
 801a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c8:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 801a3ca:	2214      	movs	r2, #20
 801a3cc:	2100      	movs	r1, #0
 801a3ce:	4668      	mov	r0, sp
 801a3d0:	f00c fe68 	bl	80270a4 <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 801a3d4:	2001      	movs	r0, #1
 801a3d6:	f7ff ffe5 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 801a3da:	2002      	movs	r0, #2
 801a3dc:	f7ff ffe2 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 801a3e0:	2002      	movs	r0, #2
 801a3e2:	f7ff ffdf 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
  initStruct.Speed = GPIO_SPEED_HIGH;

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 801a3e6:	4c40      	ldr	r4, [pc, #256]	; (801a4e8 <SX1276MB1LAS_RADIO_IoInit+0x124>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 801a3e8:	4e40      	ldr	r6, [pc, #256]	; (801a4ec <SX1276MB1LAS_RADIO_IoInit+0x128>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN;
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;

  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 801a3ea:	f8df a108 	ldr.w	sl, [pc, #264]	; 801a4f4 <SX1276MB1LAS_RADIO_IoInit+0x130>
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 801a3ee:	2002      	movs	r0, #2
 801a3f0:	f7ff ffd8 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
  initStruct.Speed = GPIO_SPEED_HIGH;
 801a3f4:	2502      	movs	r5, #2
 801a3f6:	2703      	movs	r7, #3
    initStruct.Pin = RADIO_DIO_PIN[i];
 801a3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 801a3fc:	4669      	mov	r1, sp
 801a3fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    initStruct.Pin = RADIO_DIO_PIN[i];
 801a402:	e9cd 3400 	strd	r3, r4, [sp]
  initStruct.Speed = GPIO_SPEED_HIGH;
 801a406:	e9cd 5702 	strd	r5, r7, [sp, #8]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 801a40a:	f001 f84d 	bl	801b4a8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 801a40e:	4a38      	ldr	r2, [pc, #224]	; (801a4f0 <SX1276MB1LAS_RADIO_IoInit+0x12c>)
 801a410:	2308      	movs	r3, #8
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 801a412:	4669      	mov	r1, sp
 801a414:	4630      	mov	r0, r6
    initStruct.Pin = RADIO_DIO_PIN[i];
 801a416:	e9cd 3200 	strd	r3, r2, [sp]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 801a41a:	f001 f845 	bl	801b4a8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 801a41e:	2320      	movs	r3, #32
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 801a420:	4669      	mov	r1, sp
 801a422:	4630      	mov	r0, r6
    initStruct.Pin = RADIO_DIO_PIN[i];
 801a424:	9300      	str	r3, [sp, #0]
    initStruct.Mode = RADIO_DIO_MODE[i];
 801a426:	9401      	str	r4, [sp, #4]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 801a428:	f001 f83e 	bl	801b4a8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 801a42c:	2210      	movs	r2, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 801a42e:	4669      	mov	r1, sp
 801a430:	4630      	mov	r0, r6
    initStruct.Pin = RADIO_DIO_PIN[i];
 801a432:	9200      	str	r2, [sp, #0]
    initStruct.Mode = RADIO_DIO_MODE[i];
 801a434:	9401      	str	r4, [sp, #4]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 801a436:	f001 f837 	bl	801b4a8 <HAL_GPIO_Init>
  RADIO_ANT_CLK_ENABLE();
 801a43a:	2004      	movs	r0, #4
 801a43c:	f7ff ffb2 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
  initStruct.Pull = GPIO_NOPULL;
 801a440:	2401      	movs	r4, #1
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 801a442:	4669      	mov	r1, sp
  initStruct.Pull = GPIO_NOPULL;
 801a444:	f04f 0b00 	mov.w	fp, #0
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 801a448:	4650      	mov	r0, sl
  initStruct.Pull = GPIO_NOPULL;
 801a44a:	e9cd 4b01 	strd	r4, fp, [sp, #4]
  initStruct.Pin = RADIO_ANT_SWITCH_PIN;
 801a44e:	9500      	str	r5, [sp, #0]
  initStruct.Speed = GPIO_SPEED_HIGH;
 801a450:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 801a452:	f001 f829 	bl	801b4a8 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 801a456:	4620      	mov	r0, r4
 801a458:	f7ff ffa4 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 801a45c:	4620      	mov	r0, r4
 801a45e:	f7ff ffa1 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 801a462:	4620      	mov	r0, r4
 801a464:	f7ff ff9e 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 801a468:	f04f 0905 	mov.w	r9, #5
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 801a46c:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 801a46e:	a905      	add	r1, sp, #20
 801a470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 801a474:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 801a476:	f04f 0840 	mov.w	r8, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801a47a:	e9cd 5506 	strd	r5, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a47e:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 801a480:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 801a484:	f001 f810 	bl	801b4a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 801a488:	a905      	add	r1, sp, #20
 801a48a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 801a48e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 801a492:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 801a496:	f001 f807 	bl	801b4a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 801a49a:	2320      	movs	r3, #32
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 801a49c:	a905      	add	r1, sp, #20
 801a49e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 801a4a2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 801a4a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 801a4a8:	f000 fffe 	bl	801b4a8 <HAL_GPIO_Init>
  RADIO_NSS_CLK_ENABLE();
 801a4ac:	4628      	mov	r0, r5
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801a4ae:	e9cd 8400 	strd	r8, r4, [sp]
  initStruct.Pull = GPIO_PULLUP;
 801a4b2:	9402      	str	r4, [sp, #8]
  RADIO_NSS_CLK_ENABLE();
 801a4b4:	f7ff ff76 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 801a4b8:	4669      	mov	r1, sp
 801a4ba:	4630      	mov	r0, r6
 801a4bc:	f000 fff4 	bl	801b4a8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 801a4c0:	4622      	mov	r2, r4
 801a4c2:	4641      	mov	r1, r8
 801a4c4:	4630      	mov	r0, r6
 801a4c6:	f001 f929 	bl	801b71c <HAL_GPIO_WritePin>
  RADIO_ANT_CLK_ENABLE();
 801a4ca:	2004      	movs	r0, #4
 801a4cc:	f7ff ff6a 	bl	801a3a4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 801a4d0:	4669      	mov	r1, sp
 801a4d2:	4650      	mov	r0, sl
  initStruct.Pull = GPIO_NOPULL;
 801a4d4:	e9cd 4b01 	strd	r4, fp, [sp, #4]
  initStruct.Speed = GPIO_SPEED_HIGH;
 801a4d8:	9703      	str	r7, [sp, #12]
  initStruct.Pin = RADIO_ANT_SWITCH_PIN;
 801a4da:	9500      	str	r5, [sp, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 801a4dc:	f000 ffe4 	bl	801b4a8 <HAL_GPIO_Init>
}
 801a4e0:	b00b      	add	sp, #44	; 0x2c
 801a4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4e6:	bf00      	nop
 801a4e8:	10110000 	.word	0x10110000
 801a4ec:	48000400 	.word	0x48000400
 801a4f0:	10310000 	.word	0x10310000
 801a4f4:	48000800 	.word	0x48000800

0801a4f8 <SX1276MB1LAS_RADIO_IoIrqInit>:
{
 801a4f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a4fc:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801a500:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 801a502:	4e14      	ldr	r6, [pc, #80]	; (801a554 <SX1276MB1LAS_RADIO_IoIrqInit+0x5c>)
 801a504:	4d14      	ldr	r5, [pc, #80]	; (801a558 <SX1276MB1LAS_RADIO_IoIrqInit+0x60>)
 801a506:	1f07      	subs	r7, r0, #4
 801a508:	f106 0910 	add.w	r9, r6, #16
 801a50c:	f106 0814 	add.w	r8, r6, #20
 801a510:	f100 040c 	add.w	r4, r0, #12
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 801a514:	f856 1b04 	ldr.w	r1, [r6], #4
 801a518:	4628      	mov	r0, r5
 801a51a:	f000 ffbf 	bl	801b49c <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 801a51e:	f857 2f04 	ldr.w	r2, [r7, #4]!
 801a522:	2100      	movs	r1, #0
 801a524:	4628      	mov	r0, r5
 801a526:	f000 ffb3 	bl	801b490 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 801a52a:	f919 0b01 	ldrsb.w	r0, [r9], #1
 801a52e:	f858 1b04 	ldr.w	r1, [r8], #4
 801a532:	9001      	str	r0, [sp, #4]
 801a534:	2200      	movs	r2, #0
 801a536:	f000 fe0f 	bl	801b158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 801a53a:	9801      	ldr	r0, [sp, #4]
 801a53c:	f000 fe3e 	bl	801b1bc <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 801a540:	42a7      	cmp	r7, r4
 801a542:	f105 0508 	add.w	r5, r5, #8
 801a546:	d1e5      	bne.n	801a514 <SX1276MB1LAS_RADIO_IoIrqInit+0x1c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a548:	f38a 8810 	msr	PRIMASK, sl
}
 801a54c:	b002      	add	sp, #8
 801a54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a552:	bf00      	nop
 801a554:	08027280 	.word	0x08027280
 801a558:	20002a4c 	.word	0x20002a4c

0801a55c <SX1276MB1LAS_RADIO_GetPaSelect>:
}
 801a55c:	4b02      	ldr	r3, [pc, #8]	; (801a568 <SX1276MB1LAS_RADIO_GetPaSelect+0xc>)
 801a55e:	4298      	cmp	r0, r3
 801a560:	bf8c      	ite	hi
 801a562:	2002      	movhi	r0, #2
 801a564:	2003      	movls	r0, #3
 801a566:	4770      	bx	lr
 801a568:	1f4add40 	.word	0x1f4add40

0801a56c <SX1276MB1LAS_RADIO_SetAntSw>:
  switch (state)
 801a56c:	2802      	cmp	r0, #2
{
 801a56e:	4601      	mov	r1, r0
  switch (state)
 801a570:	d007      	beq.n	801a582 <SX1276MB1LAS_RADIO_SetAntSw+0x16>
 801a572:	3803      	subs	r0, #3
 801a574:	2801      	cmp	r0, #1
 801a576:	d906      	bls.n	801a586 <SX1276MB1LAS_RADIO_SetAntSw+0x1a>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, GPIO_PIN_RESET);
 801a578:	2200      	movs	r2, #0
 801a57a:	2102      	movs	r1, #2
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, GPIO_PIN_SET);
 801a57c:	4802      	ldr	r0, [pc, #8]	; (801a588 <SX1276MB1LAS_RADIO_SetAntSw+0x1c>)
 801a57e:	f001 b8cd 	b.w	801b71c <HAL_GPIO_WritePin>
 801a582:	2201      	movs	r2, #1
 801a584:	e7fa      	b.n	801a57c <SX1276MB1LAS_RADIO_SetAntSw+0x10>
}
 801a586:	4770      	bx	lr
 801a588:	48000800 	.word	0x48000800

0801a58c <SX1276MB1LAS_RADIO_CheckRfFrequency>:
}
 801a58c:	2001      	movs	r0, #1
 801a58e:	4770      	bx	lr

0801a590 <SX1276MB1LAS_RADIO_Reset>:
{
 801a590:	b530      	push	{r4, r5, lr}
 801a592:	b087      	sub	sp, #28
  initStruct.Speed = GPIO_SPEED_HIGH;
 801a594:	2303      	movs	r3, #3
  GPIO_InitTypeDef initStruct = { 0 };
 801a596:	2400      	movs	r4, #0
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801a598:	2501      	movs	r5, #1
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 801a59a:	a901      	add	r1, sp, #4
 801a59c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  initStruct.Speed = GPIO_SPEED_HIGH;
 801a5a0:	9304      	str	r3, [sp, #16]
  initStruct.Pull = GPIO_NOPULL;
 801a5a2:	e9cd 5402 	strd	r5, r4, [sp, #8]
  GPIO_InitTypeDef initStruct = { 0 };
 801a5a6:	9405      	str	r4, [sp, #20]
  initStruct.Pin = RADIO_RESET_PIN;
 801a5a8:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 801a5aa:	f000 ff7d 	bl	801b4a8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 801a5ae:	4622      	mov	r2, r4
 801a5b0:	4629      	mov	r1, r5
 801a5b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a5b6:	f001 f8b1 	bl	801b71c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 801a5ba:	4628      	mov	r0, r5
 801a5bc:	f7ff fccf 	bl	8019f5e <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 801a5c0:	a901      	add	r1, sp, #4
 801a5c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  initStruct.Mode = GPIO_NOPULL;
 801a5c6:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 801a5c8:	f000 ff6e 	bl	801b4a8 <HAL_GPIO_Init>
  HAL_Delay(6);
 801a5cc:	2006      	movs	r0, #6
 801a5ce:	f7ff fcc6 	bl	8019f5e <HAL_Delay>
}
 801a5d2:	b007      	add	sp, #28
 801a5d4:	bd30      	pop	{r4, r5, pc}

0801a5d6 <SX1276MB1LAS_RADIO_Bus_Init>:
  RADIO_SPI_Init();
 801a5d6:	f7ff bea3 	b.w	801a320 <BSP_SPI1_Init>

0801a5da <SX1276MB1LAS_RADIO_SendRecv>:
{
 801a5da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 801a5dc:	2201      	movs	r2, #1
{
 801a5de:	f8ad 0006 	strh.w	r0, [sp, #6]
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 801a5e2:	f10d 010e 	add.w	r1, sp, #14
 801a5e6:	f10d 0006 	add.w	r0, sp, #6
 801a5ea:	f7ff fe51 	bl	801a290 <BSP_SPI1_SendRecv>
}
 801a5ee:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801a5f2:	b005      	add	sp, #20
 801a5f4:	f85d fb04 	ldr.w	pc, [sp], #4

0801a5f8 <SX1276MB1LAS_RADIO_ChipSelect>:
  if (state == 0)
 801a5f8:	4602      	mov	r2, r0
 801a5fa:	b918      	cbnz	r0, 801a604 <SX1276MB1LAS_RADIO_ChipSelect+0xc>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 801a5fc:	4802      	ldr	r0, [pc, #8]	; (801a608 <SX1276MB1LAS_RADIO_ChipSelect+0x10>)
 801a5fe:	2140      	movs	r1, #64	; 0x40
 801a600:	f001 b88c 	b.w	801b71c <HAL_GPIO_WritePin>
 801a604:	2201      	movs	r2, #1
 801a606:	e7f9      	b.n	801a5fc <SX1276MB1LAS_RADIO_ChipSelect+0x4>
 801a608:	48000400 	.word	0x48000400

0801a60c <SX1276MB1LAS_RADIO_GetDio1PinState>:
{
 801a60c:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 801a60e:	2108      	movs	r1, #8
 801a610:	4801      	ldr	r0, [pc, #4]	; (801a618 <SX1276MB1LAS_RADIO_GetDio1PinState+0xc>)
 801a612:	f001 f87d 	bl	801b710 <HAL_GPIO_ReadPin>
}
 801a616:	bd08      	pop	{r3, pc}
 801a618:	48000400 	.word	0x48000400

0801a61c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 801a61c:	4a16      	ldr	r2, [pc, #88]	; (801a678 <SystemInit+0x5c>)
 801a61e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 801a622:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a626:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801a62a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 801a62e:	f46f 7082 	mvn.w	r0, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 801a632:	681a      	ldr	r2, [r3, #0]
 801a634:	f042 0201 	orr.w	r2, r2, #1
 801a638:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 801a63a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 801a63e:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 801a640:	6819      	ldr	r1, [r3, #0]
 801a642:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 801a646:	4402      	add	r2, r0
 801a648:	400a      	ands	r2, r1
 801a64a:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 801a64c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801a650:	f022 0205 	bic.w	r2, r2, #5
 801a654:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 801a658:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801a65c:	f022 0201 	bic.w	r2, r2, #1
 801a660:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 801a664:	4a05      	ldr	r2, [pc, #20]	; (801a67c <SystemInit+0x60>)
 801a666:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 801a668:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801a66a:	681a      	ldr	r2, [r3, #0]
 801a66c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801a670:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 801a672:	2200      	movs	r2, #0
 801a674:	619a      	str	r2, [r3, #24]
}
 801a676:	4770      	bx	lr
 801a678:	e000ed00 	.word	0xe000ed00
 801a67c:	22041000 	.word	0x22041000

0801a680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a680:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a682:	2003      	movs	r0, #3
 801a684:	f000 fd56 	bl	801b134 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801a688:	200f      	movs	r0, #15
 801a68a:	f7ff fc64 	bl	8019f56 <HAL_InitTick>
 801a68e:	4604      	mov	r4, r0
 801a690:	b918      	cbnz	r0, 801a69a <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801a692:	f7ff fb5b 	bl	8019d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 801a696:	4620      	mov	r0, r4
 801a698:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 801a69a:	2401      	movs	r4, #1
 801a69c:	e7fb      	b.n	801a696 <HAL_Init+0x16>
	...

0801a6a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 801a6a0:	4a03      	ldr	r2, [pc, #12]	; (801a6b0 <HAL_IncTick+0x10>)
 801a6a2:	4b04      	ldr	r3, [pc, #16]	; (801a6b4 <HAL_IncTick+0x14>)
 801a6a4:	6811      	ldr	r1, [r2, #0]
 801a6a6:	781b      	ldrb	r3, [r3, #0]
 801a6a8:	440b      	add	r3, r1
 801a6aa:	6013      	str	r3, [r2, #0]
}
 801a6ac:	4770      	bx	lr
 801a6ae:	bf00      	nop
 801a6b0:	20002a6c 	.word	0x20002a6c
 801a6b4:	20001050 	.word	0x20001050

0801a6b8 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 801a6b8:	4b01      	ldr	r3, [pc, #4]	; (801a6c0 <HAL_GetTickPrio+0x8>)
 801a6ba:	6858      	ldr	r0, [r3, #4]
 801a6bc:	4770      	bx	lr
 801a6be:	bf00      	nop
 801a6c0:	20001050 	.word	0x20001050

0801a6c4 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
}
 801a6c4:	4b01      	ldr	r3, [pc, #4]	; (801a6cc <HAL_GetUIDw0+0x8>)
 801a6c6:	6818      	ldr	r0, [r3, #0]
 801a6c8:	4770      	bx	lr
 801a6ca:	bf00      	nop
 801a6cc:	1fff7590 	.word	0x1fff7590

0801a6d0 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 801a6d0:	4b01      	ldr	r3, [pc, #4]	; (801a6d8 <HAL_GetUIDw1+0x8>)
 801a6d2:	6818      	ldr	r0, [r3, #0]
 801a6d4:	4770      	bx	lr
 801a6d6:	bf00      	nop
 801a6d8:	1fff7594 	.word	0x1fff7594

0801a6dc <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 801a6dc:	4b01      	ldr	r3, [pc, #4]	; (801a6e4 <HAL_GetUIDw2+0x8>)
 801a6de:	6818      	ldr	r0, [r3, #0]
 801a6e0:	4770      	bx	lr
 801a6e2:	bf00      	nop
 801a6e4:	1fff7598 	.word	0x1fff7598

0801a6e8 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 801a6e8:	4a02      	ldr	r2, [pc, #8]	; (801a6f4 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 801a6ea:	6853      	ldr	r3, [r2, #4]
 801a6ec:	f023 0301 	bic.w	r3, r3, #1
 801a6f0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 801a6f2:	4770      	bx	lr
 801a6f4:	e0042000 	.word	0xe0042000

0801a6f8 <HAL_DBGMCU_DisableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 801a6f8:	4a02      	ldr	r2, [pc, #8]	; (801a704 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 801a6fa:	6853      	ldr	r3, [r2, #4]
 801a6fc:	f023 0302 	bic.w	r3, r3, #2
 801a700:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 801a702:	4770      	bx	lr
 801a704:	e0042000 	.word	0xe0042000

0801a708 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 801a708:	4a02      	ldr	r2, [pc, #8]	; (801a714 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 801a70a:	6853      	ldr	r3, [r2, #4]
 801a70c:	f023 0304 	bic.w	r3, r3, #4
 801a710:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 801a712:	4770      	bx	lr
 801a714:	e0042000 	.word	0xe0042000

0801a718 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 801a718:	b530      	push	{r4, r5, lr}
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801a71a:	0dcc      	lsrs	r4, r1, #23
 801a71c:	f004 0404 	and.w	r4, r4, #4
 801a720:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 801a722:	f3c1 5104 	ubfx	r1, r1, #20, #5
 801a726:	5823      	ldr	r3, [r4, r0]
 801a728:	2507      	movs	r5, #7
 801a72a:	408d      	lsls	r5, r1
 801a72c:	ea23 0305 	bic.w	r3, r3, r5
 801a730:	fa02 f101 	lsl.w	r1, r2, r1
 801a734:	430b      	orrs	r3, r1
 801a736:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 801a738:	bd30      	pop	{r4, r5, pc}

0801a73a <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801a73a:	6880      	ldr	r0, [r0, #8]
}
 801a73c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 801a740:	4770      	bx	lr
	...

0801a744 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 801a744:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801a746:	2300      	movs	r3, #0
 801a748:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 801a74a:	4604      	mov	r4, r0
 801a74c:	2800      	cmp	r0, #0
 801a74e:	f000 80bf 	beq.w	801a8d0 <HAL_ADC_Init+0x18c>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801a752:	6d45      	ldr	r5, [r0, #84]	; 0x54
 801a754:	b925      	cbnz	r5, 801a760 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801a756:	f7fe ff9f 	bl	8019698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801a75a:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 801a75c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 801a760:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 801a762:	6883      	ldr	r3, [r0, #8]
 801a764:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 801a766:	bf41      	itttt	mi
 801a768:	6883      	ldrmi	r3, [r0, #8]
 801a76a:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 801a76e:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 801a772:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 801a774:	6883      	ldr	r3, [r0, #8]
 801a776:	00dd      	lsls	r5, r3, #3
 801a778:	f140 808a 	bpl.w	801a890 <HAL_ADC_Init+0x14c>
 801a77c:	6883      	ldr	r3, [r0, #8]
 801a77e:	00d9      	lsls	r1, r3, #3
 801a780:	f100 809d 	bmi.w	801a8be <HAL_ADC_Init+0x17a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a784:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801a786:	f043 0310 	orr.w	r3, r3, #16
 801a78a:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a78c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a78e:	f043 0301 	orr.w	r3, r3, #1
 801a792:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 801a794:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a796:	f7ff ffd0 	bl	801a73a <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a79a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801a79c:	f003 0310 	and.w	r3, r3, #16
 801a7a0:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801a7a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a7a4:	f040 8091 	bne.w	801a8ca <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 801a7a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 801a7ac:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a7b0:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 801a7b2:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801a7b4:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a7b6:	07da      	lsls	r2, r3, #31
 801a7b8:	d40a      	bmi.n	801a7d0 <HAL_ADC_Init+0x8c>
 801a7ba:	4b46      	ldr	r3, [pc, #280]	; (801a8d4 <HAL_ADC_Init+0x190>)
 801a7bc:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801a7be:	07db      	lsls	r3, r3, #31
 801a7c0:	d406      	bmi.n	801a7d0 <HAL_ADC_Init+0x8c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 801a7c2:	4a45      	ldr	r2, [pc, #276]	; (801a8d8 <HAL_ADC_Init+0x194>)
 801a7c4:	6865      	ldr	r5, [r4, #4]
 801a7c6:	6893      	ldr	r3, [r2, #8]
 801a7c8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 801a7cc:	432b      	orrs	r3, r5
 801a7ce:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 801a7d0:	68e5      	ldr	r5, [r4, #12]
 801a7d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801a7d4:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 801a7d8:	432b      	orrs	r3, r5
 801a7da:	68a5      	ldr	r5, [r4, #8]
 801a7dc:	432b      	orrs	r3, r5
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801a7de:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801a7e0:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 801a7e2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                hadc->Init.Resolution                                                  |
 801a7e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 801a7ea:	bf02      	ittt	eq
 801a7ec:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 801a7ee:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 801a7f2:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801a7f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a7f8:	b122      	cbz	r2, 801a804 <HAL_ADC_Init+0xc0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 801a7fa:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801a7fc:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 801a800:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801a802:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801a804:	68c5      	ldr	r5, [r0, #12]
 801a806:	4a35      	ldr	r2, [pc, #212]	; (801a8dc <HAL_ADC_Init+0x198>)
 801a808:	402a      	ands	r2, r5
 801a80a:	4313      	orrs	r3, r2
 801a80c:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a80e:	f7ff ff94 	bl	801a73a <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a812:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801a814:	689a      	ldr	r2, [r3, #8]
 801a816:	f002 0208 	and.w	r2, r2, #8
 801a81a:	4302      	orrs	r2, r0
 801a81c:	d120      	bne.n	801a860 <HAL_ADC_Init+0x11c>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 801a81e:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 801a820:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801a824:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 801a826:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 801a828:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 801a82c:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 801a830:	f020 0002 	bic.w	r0, r0, #2
 801a834:	4302      	orrs	r2, r0
 801a836:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 801a838:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a83c:	2a01      	cmp	r2, #1
 801a83e:	d140      	bne.n	801a8c2 <HAL_ADC_Init+0x17e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801a840:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 801a844:	6918      	ldr	r0, [r3, #16]
 801a846:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 801a84a:	f020 0004 	bic.w	r0, r0, #4
 801a84e:	432a      	orrs	r2, r5
 801a850:	4302      	orrs	r2, r0
 801a852:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801a854:	4302      	orrs	r2, r0
 801a856:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801a858:	4302      	orrs	r2, r0
 801a85a:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801a85e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801a860:	6922      	ldr	r2, [r4, #16]
 801a862:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 801a864:	bf05      	ittet	eq
 801a866:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 801a868:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801a86a:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 801a86c:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 801a870:	bf06      	itte	eq
 801a872:	f020 000f 	biceq.w	r0, r0, #15
 801a876:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801a878:	f022 020f 	bicne.w	r2, r2, #15
 801a87c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801a87e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801a880:	f023 0303 	bic.w	r3, r3, #3
 801a884:	f043 0301 	orr.w	r3, r3, #1
 801a888:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 801a88a:	4608      	mov	r0, r1
 801a88c:	b003      	add	sp, #12
 801a88e:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 801a890:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801a892:	4a13      	ldr	r2, [pc, #76]	; (801a8e0 <HAL_ADC_Init+0x19c>)
 801a894:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 801a898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801a89c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a8a0:	6083      	str	r3, [r0, #8]
 801a8a2:	4b10      	ldr	r3, [pc, #64]	; (801a8e4 <HAL_ADC_Init+0x1a0>)
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	fbb3 f3f2 	udiv	r3, r3, r2
 801a8aa:	3301      	adds	r3, #1
 801a8ac:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 801a8ae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 801a8b0:	9b01      	ldr	r3, [sp, #4]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	f43f af62 	beq.w	801a77c <HAL_ADC_Init+0x38>
      wait_loop_index--;
 801a8b8:	9b01      	ldr	r3, [sp, #4]
 801a8ba:	3b01      	subs	r3, #1
 801a8bc:	e7f7      	b.n	801a8ae <HAL_ADC_Init+0x16a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801a8be:	2100      	movs	r1, #0
 801a8c0:	e769      	b.n	801a796 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801a8c2:	691a      	ldr	r2, [r3, #16]
 801a8c4:	f022 0201 	bic.w	r2, r2, #1
 801a8c8:	e7c9      	b.n	801a85e <HAL_ADC_Init+0x11a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a8ca:	f043 0310 	orr.w	r3, r3, #16
 801a8ce:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 801a8d0:	2101      	movs	r1, #1
 801a8d2:	e7da      	b.n	801a88a <HAL_ADC_Init+0x146>
 801a8d4:	50040000 	.word	0x50040000
 801a8d8:	50040300 	.word	0x50040300
 801a8dc:	fff0c007 	.word	0xfff0c007
 801a8e0:	00030d40 	.word	0x00030d40
 801a8e4:	2000104c 	.word	0x2000104c

0801a8e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801a8ea:	6945      	ldr	r5, [r0, #20]
 801a8ec:	2d08      	cmp	r5, #8
{
 801a8ee:	4604      	mov	r4, r0
 801a8f0:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801a8f2:	d00a      	beq.n	801a90a <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801a8f4:	6803      	ldr	r3, [r0, #0]
 801a8f6:	68db      	ldr	r3, [r3, #12]
 801a8f8:	07dd      	lsls	r5, r3, #31
 801a8fa:	d505      	bpl.n	801a908 <HAL_ADC_PollForConversion+0x20>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a8fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801a8fe:	f043 0320 	orr.w	r3, r3, #32
 801a902:	6543      	str	r3, [r0, #84]	; 0x54

      return HAL_ERROR;
 801a904:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 801a906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp_Flag_End = (ADC_FLAG_EOC);
 801a908:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 801a90a:	f7ff fb26 	bl	8019f5a <HAL_GetTick>
 801a90e:	4607      	mov	r7, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a910:	6823      	ldr	r3, [r4, #0]
 801a912:	681a      	ldr	r2, [r3, #0]
 801a914:	422a      	tst	r2, r5
 801a916:	d01c      	beq.n	801a952 <HAL_ADC_PollForConversion+0x6a>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a918:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801a91a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a91e:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 801a920:	68da      	ldr	r2, [r3, #12]
 801a922:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 801a926:	d10f      	bne.n	801a948 <HAL_ADC_PollForConversion+0x60>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 801a928:	7e62      	ldrb	r2, [r4, #25]
 801a92a:	b96a      	cbnz	r2, 801a948 <HAL_ADC_PollForConversion+0x60>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801a92c:	681a      	ldr	r2, [r3, #0]
 801a92e:	0711      	lsls	r1, r2, #28
 801a930:	d50a      	bpl.n	801a948 <HAL_ADC_PollForConversion+0x60>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a932:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801a934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a938:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a93a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801a93c:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a93e:	bf5e      	ittt	pl
 801a940:	6d62      	ldrpl	r2, [r4, #84]	; 0x54
 801a942:	f042 0201 	orrpl.w	r2, r2, #1
 801a946:	6562      	strpl	r2, [r4, #84]	; 0x54
  if (tmp_Flag_End == ADC_FLAG_EOS)
 801a948:	2d08      	cmp	r5, #8
 801a94a:	d117      	bne.n	801a97c <HAL_ADC_PollForConversion+0x94>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801a94c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 801a94e:	2000      	movs	r0, #0
 801a950:	e7d9      	b.n	801a906 <HAL_ADC_PollForConversion+0x1e>
    if (Timeout != HAL_MAX_DELAY)
 801a952:	1c70      	adds	r0, r6, #1
 801a954:	d0dd      	beq.n	801a912 <HAL_ADC_PollForConversion+0x2a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801a956:	f7ff fb00 	bl	8019f5a <HAL_GetTick>
 801a95a:	1bc0      	subs	r0, r0, r7
 801a95c:	42b0      	cmp	r0, r6
 801a95e:	d801      	bhi.n	801a964 <HAL_ADC_PollForConversion+0x7c>
 801a960:	2e00      	cmp	r6, #0
 801a962:	d1d5      	bne.n	801a910 <HAL_ADC_PollForConversion+0x28>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a964:	6823      	ldr	r3, [r4, #0]
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	402b      	ands	r3, r5
 801a96a:	d1d1      	bne.n	801a910 <HAL_ADC_PollForConversion+0x28>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801a96c:	6d62      	ldr	r2, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 801a96e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801a972:	f042 0204 	orr.w	r2, r2, #4
 801a976:	6562      	str	r2, [r4, #84]	; 0x54
          return HAL_TIMEOUT;
 801a978:	2003      	movs	r0, #3
 801a97a:	e7c4      	b.n	801a906 <HAL_ADC_PollForConversion+0x1e>
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 801a97c:	68d8      	ldr	r0, [r3, #12]
 801a97e:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 801a982:	d1e4      	bne.n	801a94e <HAL_ADC_PollForConversion+0x66>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801a984:	220c      	movs	r2, #12
 801a986:	601a      	str	r2, [r3, #0]
 801a988:	e7bd      	b.n	801a906 <HAL_ADC_PollForConversion+0x1e>

0801a98a <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801a98a:	6803      	ldr	r3, [r0, #0]
 801a98c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 801a98e:	4770      	bx	lr

0801a990 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801a990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 801a992:	2300      	movs	r3, #0
 801a994:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801a996:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 801a99a:	2b01      	cmp	r3, #1
{
 801a99c:	4604      	mov	r4, r0
 801a99e:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 801a9a0:	f000 817a 	beq.w	801ac98 <HAL_ADC_ConfigChannel+0x308>
 801a9a4:	2301      	movs	r3, #1
 801a9a6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a9aa:	6800      	ldr	r0, [r0, #0]
 801a9ac:	f7ff fec5 	bl	801a73a <LL_ADC_REG_IsConversionOngoing>
 801a9b0:	2800      	cmp	r0, #0
 801a9b2:	f040 816b 	bne.w	801ac8c <HAL_ADC_ConfigChannel+0x2fc>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801a9b6:	684a      	ldr	r2, [r1, #4]
 801a9b8:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 801a9ba:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801a9bc:	0991      	lsrs	r1, r2, #6
 801a9be:	f001 010c 	and.w	r1, r1, #12
 801a9c2:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 801a9c6:	f002 021f 	and.w	r2, r2, #31
 801a9ca:	59ce      	ldr	r6, [r1, r7]
 801a9cc:	f04f 0c1f 	mov.w	ip, #31
 801a9d0:	f3c3 6384 	ubfx	r3, r3, #26, #5
 801a9d4:	4093      	lsls	r3, r2
 801a9d6:	fa0c f202 	lsl.w	r2, ip, r2
 801a9da:	ea26 0202 	bic.w	r2, r6, r2
 801a9de:	4313      	orrs	r3, r2
 801a9e0:	51cb      	str	r3, [r1, r7]
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a9e2:	f7ff feaa 	bl	801a73a <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a9e6:	6826      	ldr	r6, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801a9e8:	68b3      	ldr	r3, [r6, #8]
 801a9ea:	f003 0308 	and.w	r3, r3, #8
 801a9ee:	4303      	orrs	r3, r0
 801a9f0:	d11d      	bne.n	801aa2e <HAL_ADC_ConfigChannel+0x9e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801a9f2:	4630      	mov	r0, r6
 801a9f4:	68aa      	ldr	r2, [r5, #8]
 801a9f6:	6829      	ldr	r1, [r5, #0]
 801a9f8:	f7ff fe8e 	bl	801a718 <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801a9fc:	692e      	ldr	r6, [r5, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801a9fe:	6821      	ldr	r1, [r4, #0]
 801aa00:	682b      	ldr	r3, [r5, #0]
 801aa02:	68c8      	ldr	r0, [r1, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801aa04:	2e04      	cmp	r6, #4
 801aa06:	f101 0260 	add.w	r2, r1, #96	; 0x60
 801aa0a:	d01a      	beq.n	801aa42 <HAL_ADC_ConfigChannel+0xb2>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801aa0c:	f3c0 01c1 	ubfx	r1, r0, #3, #2
 801aa10:	0048      	lsls	r0, r1, #1
 801aa12:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(*preg,
 801aa14:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801aa18:	4081      	lsls	r1, r0
 801aa1a:	48a0      	ldr	r0, [pc, #640]	; (801ac9c <HAL_ADC_ConfigChannel+0x30c>)
 801aa1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 801aa20:	4038      	ands	r0, r7
 801aa22:	4303      	orrs	r3, r0
 801aa24:	4319      	orrs	r1, r3
 801aa26:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 801aa2a:	f842 1026 	str.w	r1, [r2, r6, lsl #2]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801aa2e:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801aa30:	6883      	ldr	r3, [r0, #8]
 801aa32:	07df      	lsls	r7, r3, #31
 801aa34:	d55a      	bpl.n	801aaec <HAL_ADC_ConfigChannel+0x15c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801aa36:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801aa38:	2300      	movs	r3, #0
 801aa3a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
}
 801aa3e:	b003      	add	sp, #12
 801aa40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 801aa42:	6e08      	ldr	r0, [r1, #96]	; 0x60
 801aa44:	6e08      	ldr	r0, [r1, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aa46:	f3c3 0612 	ubfx	r6, r3, #0, #19
 801aa4a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 801aa4e:	2e00      	cmp	r6, #0
 801aa50:	d138      	bne.n	801aac4 <HAL_ADC_ConfigChannel+0x134>
 801aa52:	f3c3 6384 	ubfx	r3, r3, #26, #5
 801aa56:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 801aa58:	bf02      	ittt	eq
 801aa5a:	6e0b      	ldreq	r3, [r1, #96]	; 0x60
 801aa5c:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 801aa60:	660b      	streq	r3, [r1, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 801aa62:	6e4b      	ldr	r3, [r1, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aa64:	682b      	ldr	r3, [r5, #0]
 801aa66:	6e48      	ldr	r0, [r1, #100]	; 0x64
 801aa68:	f3c3 0612 	ubfx	r6, r3, #0, #19
 801aa6c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 801aa70:	bb6e      	cbnz	r6, 801aace <HAL_ADC_ConfigChannel+0x13e>
 801aa72:	f3c3 6384 	ubfx	r3, r3, #26, #5
 801aa76:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 801aa78:	bf02      	ittt	eq
 801aa7a:	6e4b      	ldreq	r3, [r1, #100]	; 0x64
 801aa7c:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 801aa80:	664b      	streq	r3, [r1, #100]	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 801aa82:	6893      	ldr	r3, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aa84:	682b      	ldr	r3, [r5, #0]
 801aa86:	6891      	ldr	r1, [r2, #8]
 801aa88:	f3c3 0012 	ubfx	r0, r3, #0, #19
 801aa8c:	f3c1 6184 	ubfx	r1, r1, #26, #5
 801aa90:	bb10      	cbnz	r0, 801aad8 <HAL_ADC_ConfigChannel+0x148>
 801aa92:	f3c3 6384 	ubfx	r3, r3, #26, #5
 801aa96:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 801aa98:	bf02      	ittt	eq
 801aa9a:	6893      	ldreq	r3, [r2, #8]
 801aa9c:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 801aaa0:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 801aaa2:	68d3      	ldr	r3, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aaa4:	682b      	ldr	r3, [r5, #0]
 801aaa6:	68d1      	ldr	r1, [r2, #12]
 801aaa8:	f3c3 0012 	ubfx	r0, r3, #0, #19
 801aaac:	f3c1 6184 	ubfx	r1, r1, #26, #5
 801aab0:	b9b8      	cbnz	r0, 801aae2 <HAL_ADC_ConfigChannel+0x152>
 801aab2:	f3c3 6384 	ubfx	r3, r3, #26, #5
 801aab6:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 801aab8:	bf02      	ittt	eq
 801aaba:	68d3      	ldreq	r3, [r2, #12]
 801aabc:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 801aac0:	60d3      	streq	r3, [r2, #12]
}
 801aac2:	e7b4      	b.n	801aa2e <HAL_ADC_ConfigChannel+0x9e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aac4:	fa93 f3a3 	rbit	r3, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aac8:	fab3 f383 	clz	r3, r3
 801aacc:	e7c3      	b.n	801aa56 <HAL_ADC_ConfigChannel+0xc6>
 801aace:	fa93 f3a3 	rbit	r3, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aad2:	fab3 f383 	clz	r3, r3
 801aad6:	e7ce      	b.n	801aa76 <HAL_ADC_ConfigChannel+0xe6>
 801aad8:	fa93 f3a3 	rbit	r3, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aadc:	fab3 f383 	clz	r3, r3
 801aae0:	e7d9      	b.n	801aa96 <HAL_ADC_ConfigChannel+0x106>
 801aae2:	fa93 f3a3 	rbit	r3, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aae6:	fab3 f383 	clz	r3, r3
 801aaea:	e7e4      	b.n	801aab6 <HAL_ADC_ConfigChannel+0x126>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801aaec:	68ee      	ldr	r6, [r5, #12]
 801aaee:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(ADCx->DIFSEL,
 801aaf0:	4a6b      	ldr	r2, [pc, #428]	; (801aca0 <HAL_ADC_ConfigChannel+0x310>)
 801aaf2:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 801aaf6:	f006 0c18 	and.w	ip, r6, #24
 801aafa:	f3c3 0712 	ubfx	r7, r3, #0, #19
 801aafe:	fa22 f20c 	lsr.w	r2, r2, ip
 801ab02:	401a      	ands	r2, r3
 801ab04:	ea21 0107 	bic.w	r1, r1, r7
 801ab08:	430a      	orrs	r2, r1
 801ab0a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801ab0e:	4a65      	ldr	r2, [pc, #404]	; (801aca4 <HAL_ADC_ConfigChannel+0x314>)
 801ab10:	4296      	cmp	r6, r2
 801ab12:	d11c      	bne.n	801ab4e <HAL_ADC_ConfigChannel+0x1be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801ab14:	2f00      	cmp	r7, #0
 801ab16:	d149      	bne.n	801abac <HAL_ADC_ConfigChannel+0x21c>
 801ab18:	0e99      	lsrs	r1, r3, #26
 801ab1a:	3101      	adds	r1, #1
 801ab1c:	f001 061f 	and.w	r6, r1, #31
 801ab20:	0689      	lsls	r1, r1, #26
 801ab22:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801ab26:	2e09      	cmp	r6, #9
 801ab28:	f04f 0101 	mov.w	r1, #1
 801ab2c:	fa01 f106 	lsl.w	r1, r1, r6
 801ab30:	d86d      	bhi.n	801ac0e <HAL_ADC_ConfigChannel+0x27e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801ab32:	4311      	orrs	r1, r2
 801ab34:	2f00      	cmp	r7, #0
 801ab36:	d154      	bne.n	801abe2 <HAL_ADC_ConfigChannel+0x252>
 801ab38:	0e9e      	lsrs	r6, r3, #26
 801ab3a:	3601      	adds	r6, #1
 801ab3c:	f006 061f 	and.w	r6, r6, #31
 801ab40:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ab44:	0536      	lsls	r6, r6, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801ab46:	4331      	orrs	r1, r6
 801ab48:	68aa      	ldr	r2, [r5, #8]
 801ab4a:	f7ff fde5 	bl	801a718 <LL_ADC_SetChannelSamplingTime>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801ab4e:	6829      	ldr	r1, [r5, #0]
 801ab50:	4b55      	ldr	r3, [pc, #340]	; (801aca8 <HAL_ADC_ConfigChannel+0x318>)
 801ab52:	4219      	tst	r1, r3
 801ab54:	f43f af6f 	beq.w	801aa36 <HAL_ADC_ConfigChannel+0xa6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 801ab58:	4b54      	ldr	r3, [pc, #336]	; (801acac <HAL_ADC_ConfigChannel+0x31c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801ab5a:	4d55      	ldr	r5, [pc, #340]	; (801acb0 <HAL_ADC_ConfigChannel+0x320>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 801ab5c:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801ab5e:	68aa      	ldr	r2, [r5, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801ab60:	07d6      	lsls	r6, r2, #31
 801ab62:	f100 808d 	bmi.w	801ac80 <HAL_ADC_ConfigChannel+0x2f0>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801ab66:	4a53      	ldr	r2, [pc, #332]	; (801acb4 <HAL_ADC_ConfigChannel+0x324>)
 801ab68:	4291      	cmp	r1, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 801ab6a:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 801ab6e:	d161      	bne.n	801ac34 <HAL_ADC_ConfigChannel+0x2a4>
 801ab70:	0202      	lsls	r2, r0, #8
 801ab72:	f53f af60 	bmi.w	801aa36 <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801ab76:	6822      	ldr	r2, [r4, #0]
 801ab78:	42aa      	cmp	r2, r5
 801ab7a:	f47f af5c 	bne.w	801aa36 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 801ab7e:	689a      	ldr	r2, [r3, #8]
 801ab80:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 801ab84:	4332      	orrs	r2, r6
 801ab86:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 801ab8a:	609a      	str	r2, [r3, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801ab8c:	4b4a      	ldr	r3, [pc, #296]	; (801acb8 <HAL_ADC_ConfigChannel+0x328>)
 801ab8e:	4a4b      	ldr	r2, [pc, #300]	; (801acbc <HAL_ADC_ConfigChannel+0x32c>)
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	fbb3 f2f2 	udiv	r2, r3, r2
 801ab96:	230c      	movs	r3, #12
 801ab98:	fb02 3303 	mla	r3, r2, r3, r3
                wait_loop_index--;
 801ab9c:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 801ab9e:	9b01      	ldr	r3, [sp, #4]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	f43f af48 	beq.w	801aa36 <HAL_ADC_ConfigChannel+0xa6>
                wait_loop_index--;
 801aba6:	9b01      	ldr	r3, [sp, #4]
 801aba8:	3b01      	subs	r3, #1
 801abaa:	e7f7      	b.n	801ab9c <HAL_ADC_ConfigChannel+0x20c>
 801abac:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801abb0:	fab2 f282 	clz	r2, r2
 801abb4:	3201      	adds	r2, #1
 801abb6:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801abba:	2a09      	cmp	r2, #9
 801abbc:	d816      	bhi.n	801abec <HAL_ADC_ConfigChannel+0x25c>
 801abbe:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801abc2:	fab1 f181 	clz	r1, r1
 801abc6:	3101      	adds	r1, #1
 801abc8:	0689      	lsls	r1, r1, #26
 801abca:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
 801abce:	fa93 f1a3 	rbit	r1, r3
 801abd2:	fab1 f181 	clz	r1, r1
 801abd6:	3101      	adds	r1, #1
 801abd8:	f001 061f 	and.w	r6, r1, #31
 801abdc:	2101      	movs	r1, #1
 801abde:	40b1      	lsls	r1, r6
 801abe0:	e7a7      	b.n	801ab32 <HAL_ADC_ConfigChannel+0x1a2>
 801abe2:	fa93 f6a3 	rbit	r6, r3
 801abe6:	fab6 f686 	clz	r6, r6
 801abea:	e7a6      	b.n	801ab3a <HAL_ADC_ConfigChannel+0x1aa>
 801abec:	fa93 f1a3 	rbit	r1, r3
 801abf0:	fab1 f181 	clz	r1, r1
 801abf4:	3101      	adds	r1, #1
 801abf6:	0689      	lsls	r1, r1, #26
 801abf8:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
 801abfc:	fa93 f1a3 	rbit	r1, r3
 801ac00:	fab1 f181 	clz	r1, r1
 801ac04:	3101      	adds	r1, #1
 801ac06:	f001 061f 	and.w	r6, r1, #31
 801ac0a:	2101      	movs	r1, #1
 801ac0c:	40b1      	lsls	r1, r6
 801ac0e:	4311      	orrs	r1, r2
 801ac10:	b95f      	cbnz	r7, 801ac2a <HAL_ADC_ConfigChannel+0x29a>
 801ac12:	0e9a      	lsrs	r2, r3, #26
 801ac14:	3201      	adds	r2, #1
 801ac16:	f002 021f 	and.w	r2, r2, #31
 801ac1a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801ac1e:	3b1e      	subs	r3, #30
 801ac20:	051b      	lsls	r3, r3, #20
 801ac22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801ac26:	4319      	orrs	r1, r3
 801ac28:	e78e      	b.n	801ab48 <HAL_ADC_ConfigChannel+0x1b8>
 801ac2a:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801ac2e:	fab2 f282 	clz	r2, r2
 801ac32:	e7ef      	b.n	801ac14 <HAL_ADC_ConfigChannel+0x284>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801ac34:	4a22      	ldr	r2, [pc, #136]	; (801acc0 <HAL_ADC_ConfigChannel+0x330>)
 801ac36:	4291      	cmp	r1, r2
 801ac38:	d10f      	bne.n	801ac5a <HAL_ADC_ConfigChannel+0x2ca>
 801ac3a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 801ac3e:	f47f aefa 	bne.w	801aa36 <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801ac42:	6822      	ldr	r2, [r4, #0]
 801ac44:	42aa      	cmp	r2, r5
 801ac46:	f47f aef6 	bne.w	801aa36 <HAL_ADC_ConfigChannel+0xa6>
 801ac4a:	689a      	ldr	r2, [r3, #8]
 801ac4c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 801ac50:	4332      	orrs	r2, r6
 801ac52:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 801ac56:	609a      	str	r2, [r3, #8]
}
 801ac58:	e6ee      	b.n	801aa38 <HAL_ADC_ConfigChannel+0xa8>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801ac5a:	4a1a      	ldr	r2, [pc, #104]	; (801acc4 <HAL_ADC_ConfigChannel+0x334>)
 801ac5c:	4291      	cmp	r1, r2
 801ac5e:	f47f aeea 	bne.w	801aa36 <HAL_ADC_ConfigChannel+0xa6>
 801ac62:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 801ac66:	f47f aee6 	bne.w	801aa36 <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_VREFINT_INSTANCE(hadc))
 801ac6a:	6822      	ldr	r2, [r4, #0]
 801ac6c:	42aa      	cmp	r2, r5
 801ac6e:	f47f aee2 	bne.w	801aa36 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 801ac72:	689a      	ldr	r2, [r3, #8]
 801ac74:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 801ac78:	4332      	orrs	r2, r6
 801ac7a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801ac7e:	e7ea      	b.n	801ac56 <HAL_ADC_ConfigChannel+0x2c6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801ac80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801ac82:	f043 0320 	orr.w	r3, r3, #32
 801ac86:	6563      	str	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 801ac88:	2001      	movs	r0, #1
 801ac8a:	e6d5      	b.n	801aa38 <HAL_ADC_ConfigChannel+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801ac8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801ac8e:	f042 0220 	orr.w	r2, r2, #32
 801ac92:	6562      	str	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 801ac94:	4618      	mov	r0, r3
 801ac96:	e6cf      	b.n	801aa38 <HAL_ADC_ConfigChannel+0xa8>
  __HAL_LOCK(hadc);
 801ac98:	2002      	movs	r0, #2
 801ac9a:	e6d0      	b.n	801aa3e <HAL_ADC_ConfigChannel+0xae>
 801ac9c:	03fff000 	.word	0x03fff000
 801aca0:	0007ffff 	.word	0x0007ffff
 801aca4:	407f0000 	.word	0x407f0000
 801aca8:	80080000 	.word	0x80080000
 801acac:	50040300 	.word	0x50040300
 801acb0:	50040000 	.word	0x50040000
 801acb4:	c7520000 	.word	0xc7520000
 801acb8:	2000104c 	.word	0x2000104c
 801acbc:	00030d40 	.word	0x00030d40
 801acc0:	cb840000 	.word	0xcb840000
 801acc4:	80000001 	.word	0x80000001

0801acc8 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801acc8:	b570      	push	{r4, r5, r6, lr}
 801acca:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801accc:	6800      	ldr	r0, [r0, #0]
 801acce:	f7ff fd34 	bl	801a73a <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801acd2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801acd4:	689a      	ldr	r2, [r3, #8]
 801acd6:	f002 0208 	and.w	r2, r2, #8
 801acda:	4302      	orrs	r2, r0
 801acdc:	d101      	bne.n	801ace2 <ADC_ConversionStop+0x1a>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 801acde:	2000      	movs	r0, #0
}
 801ace0:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801ace2:	68da      	ldr	r2, [r3, #12]
 801ace4:	0190      	lsls	r0, r2, #6
 801ace6:	d52b      	bpl.n	801ad40 <ADC_ConversionStop+0x78>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801ace8:	8b20      	ldrh	r0, [r4, #24]
 801acea:	f240 1201 	movw	r2, #257	; 0x101
 801acee:	4290      	cmp	r0, r2
 801acf0:	d126      	bne.n	801ad40 <ADC_ConversionStop+0x78>
 801acf2:	4a28      	ldr	r2, [pc, #160]	; (801ad94 <ADC_ConversionStop+0xcc>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801acf4:	6819      	ldr	r1, [r3, #0]
 801acf6:	0649      	lsls	r1, r1, #25
 801acf8:	d516      	bpl.n	801ad28 <ADC_ConversionStop+0x60>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801acfa:	2240      	movs	r2, #64	; 0x40
 801acfc:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801acfe:	2101      	movs	r1, #1
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801ad00:	4618      	mov	r0, r3
 801ad02:	f7ff fd1a 	bl	801a73a <LL_ADC_REG_IsConversionOngoing>
 801ad06:	b158      	cbz	r0, 801ad20 <ADC_ConversionStop+0x58>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801ad08:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 801ad0a:	6893      	ldr	r3, [r2, #8]
 801ad0c:	079e      	lsls	r6, r3, #30
 801ad0e:	d407      	bmi.n	801ad20 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 801ad10:	6893      	ldr	r3, [r2, #8]
 801ad12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ad16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ad1a:	f043 0310 	orr.w	r3, r3, #16
 801ad1e:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801ad20:	2901      	cmp	r1, #1
 801ad22:	d10f      	bne.n	801ad44 <ADC_ConversionStop+0x7c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801ad24:	2504      	movs	r5, #4
 801ad26:	e022      	b.n	801ad6e <ADC_ConversionStop+0xa6>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801ad28:	3a01      	subs	r2, #1
 801ad2a:	d1e3      	bne.n	801acf4 <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ad2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801ad2e:	f043 0310 	orr.w	r3, r3, #16
 801ad32:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ad34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ad36:	f043 0301 	orr.w	r3, r3, #1
 801ad3a:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 801ad3c:	2001      	movs	r0, #1
 801ad3e:	e7cf      	b.n	801ace0 <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801ad40:	2902      	cmp	r1, #2
 801ad42:	d1dd      	bne.n	801ad00 <ADC_ConversionStop+0x38>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801ad44:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801ad46:	6893      	ldr	r3, [r2, #8]
 801ad48:	0718      	lsls	r0, r3, #28
 801ad4a:	d50a      	bpl.n	801ad62 <ADC_ConversionStop+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 801ad4c:	6893      	ldr	r3, [r2, #8]
 801ad4e:	079b      	lsls	r3, r3, #30
 801ad50:	d407      	bmi.n	801ad62 <ADC_ConversionStop+0x9a>
  MODIFY_REG(ADCx->CR,
 801ad52:	6893      	ldr	r3, [r2, #8]
 801ad54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ad58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ad5c:	f043 0320 	orr.w	r3, r3, #32
 801ad60:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 801ad62:	2902      	cmp	r1, #2
 801ad64:	d014      	beq.n	801ad90 <ADC_ConversionStop+0xc8>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801ad66:	2903      	cmp	r1, #3
 801ad68:	bf14      	ite	ne
 801ad6a:	2504      	movne	r5, #4
 801ad6c:	250c      	moveq	r5, #12
    tickstart = HAL_GetTick();
 801ad6e:	f7ff f8f4 	bl	8019f5a <HAL_GetTick>
 801ad72:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801ad74:	6823      	ldr	r3, [r4, #0]
 801ad76:	689b      	ldr	r3, [r3, #8]
 801ad78:	422b      	tst	r3, r5
 801ad7a:	d0b0      	beq.n	801acde <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801ad7c:	f7ff f8ed 	bl	8019f5a <HAL_GetTick>
 801ad80:	1b80      	subs	r0, r0, r6
 801ad82:	2805      	cmp	r0, #5
 801ad84:	d9f6      	bls.n	801ad74 <ADC_ConversionStop+0xac>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801ad86:	6823      	ldr	r3, [r4, #0]
 801ad88:	689b      	ldr	r3, [r3, #8]
 801ad8a:	422b      	tst	r3, r5
 801ad8c:	d0f2      	beq.n	801ad74 <ADC_ConversionStop+0xac>
 801ad8e:	e7cd      	b.n	801ad2c <ADC_ConversionStop+0x64>
    switch (conversion_group_reassigned)
 801ad90:	2508      	movs	r5, #8
 801ad92:	e7ec      	b.n	801ad6e <ADC_ConversionStop+0xa6>
 801ad94:	a3400001 	.word	0xa3400001

0801ad98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801ad98:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 801ad9a:	2300      	movs	r3, #0

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801ad9c:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 801ad9e:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801ada0:	6893      	ldr	r3, [r2, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801ada2:	07dd      	lsls	r5, r3, #31
{
 801ada4:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801ada6:	d502      	bpl.n	801adae <ADC_Enable+0x16>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801ada8:	2000      	movs	r0, #0
}
 801adaa:	b002      	add	sp, #8
 801adac:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 801adae:	6891      	ldr	r1, [r2, #8]
 801adb0:	4b1d      	ldr	r3, [pc, #116]	; (801ae28 <ADC_Enable+0x90>)
 801adb2:	4219      	tst	r1, r3
 801adb4:	d009      	beq.n	801adca <ADC_Enable+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801adb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801adb8:	f043 0310 	orr.w	r3, r3, #16
 801adbc:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801adbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801adc0:	f043 0301 	orr.w	r3, r3, #1
 801adc4:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 801adc6:	2001      	movs	r0, #1
 801adc8:	e7ef      	b.n	801adaa <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 801adca:	6893      	ldr	r3, [r2, #8]
 801adcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801add0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801add4:	f043 0301 	orr.w	r3, r3, #1
 801add8:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 801adda:	4b14      	ldr	r3, [pc, #80]	; (801ae2c <ADC_Enable+0x94>)
 801addc:	689b      	ldr	r3, [r3, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 801adde:	0218      	lsls	r0, r3, #8
 801ade0:	d415      	bmi.n	801ae0e <ADC_Enable+0x76>
      tickstart = HAL_GetTick();
 801ade2:	f7ff f8ba 	bl	8019f5a <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 801ade6:	4e12      	ldr	r6, [pc, #72]	; (801ae30 <ADC_Enable+0x98>)
 801ade8:	4605      	mov	r5, r0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801adea:	6822      	ldr	r2, [r4, #0]
 801adec:	6813      	ldr	r3, [r2, #0]
 801adee:	07db      	lsls	r3, r3, #31
 801adf0:	d4da      	bmi.n	801ada8 <ADC_Enable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801adf2:	6893      	ldr	r3, [r2, #8]
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801adf4:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 801adf6:	bf5f      	itttt	pl
 801adf8:	6893      	ldrpl	r3, [r2, #8]
 801adfa:	4033      	andpl	r3, r6
 801adfc:	f043 0301 	orrpl.w	r3, r3, #1
 801ae00:	6093      	strpl	r3, [r2, #8]
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801ae02:	f7ff f8aa 	bl	8019f5a <HAL_GetTick>
 801ae06:	1b40      	subs	r0, r0, r5
 801ae08:	2802      	cmp	r0, #2
 801ae0a:	d9ee      	bls.n	801adea <ADC_Enable+0x52>
 801ae0c:	e7d3      	b.n	801adb6 <ADC_Enable+0x1e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801ae0e:	4b09      	ldr	r3, [pc, #36]	; (801ae34 <ADC_Enable+0x9c>)
 801ae10:	4a09      	ldr	r2, [pc, #36]	; (801ae38 <ADC_Enable+0xa0>)
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	fbb3 f3f2 	udiv	r3, r3, r2
 801ae18:	3301      	adds	r3, #1
        wait_loop_index--;
 801ae1a:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 801ae1c:	9b01      	ldr	r3, [sp, #4]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d0df      	beq.n	801ade2 <ADC_Enable+0x4a>
        wait_loop_index--;
 801ae22:	9b01      	ldr	r3, [sp, #4]
 801ae24:	3b01      	subs	r3, #1
 801ae26:	e7f8      	b.n	801ae1a <ADC_Enable+0x82>
 801ae28:	8000003f 	.word	0x8000003f
 801ae2c:	50040300 	.word	0x50040300
 801ae30:	7fffffc0 	.word	0x7fffffc0
 801ae34:	2000104c 	.word	0x2000104c
 801ae38:	00030d40 	.word	0x00030d40

0801ae3c <HAL_ADC_Start>:
{
 801ae3c:	b538      	push	{r3, r4, r5, lr}
 801ae3e:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801ae40:	6800      	ldr	r0, [r0, #0]
 801ae42:	f7ff fc7a 	bl	801a73a <LL_ADC_REG_IsConversionOngoing>
 801ae46:	4605      	mov	r5, r0
 801ae48:	bb60      	cbnz	r0, 801aea4 <HAL_ADC_Start+0x68>
    __HAL_LOCK(hadc);
 801ae4a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801ae4e:	2b01      	cmp	r3, #1
 801ae50:	d028      	beq.n	801aea4 <HAL_ADC_Start+0x68>
 801ae52:	2301      	movs	r3, #1
 801ae54:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 801ae58:	4620      	mov	r0, r4
 801ae5a:	f7ff ff9d 	bl	801ad98 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 801ae5e:	b9f0      	cbnz	r0, 801ae9e <HAL_ADC_Start+0x62>
      ADC_STATE_CLR_SET(hadc->State,
 801ae60:	6d63      	ldr	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801ae62:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 801ae64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801ae68:	f023 0301 	bic.w	r3, r3, #1
 801ae6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ae70:	6563      	str	r3, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801ae72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801ae74:	04db      	lsls	r3, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801ae76:	bf49      	itett	mi
 801ae78:	6da3      	ldrmi	r3, [r4, #88]	; 0x58
        ADC_CLEAR_ERRORCODE(hadc);
 801ae7a:	65a0      	strpl	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801ae7c:	f023 0306 	bicmi.w	r3, r3, #6
 801ae80:	65a3      	strmi	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801ae82:	231c      	movs	r3, #28
 801ae84:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 801ae86:	2300      	movs	r3, #0
 801ae88:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  MODIFY_REG(ADCx->CR,
 801ae8c:	6893      	ldr	r3, [r2, #8]
 801ae8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ae92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ae96:	f043 0304 	orr.w	r3, r3, #4
 801ae9a:	6093      	str	r3, [r2, #8]
}
 801ae9c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 801ae9e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 801aea2:	e7fb      	b.n	801ae9c <HAL_ADC_Start+0x60>
    tmp_hal_status = HAL_BUSY;
 801aea4:	2002      	movs	r0, #2
 801aea6:	e7f9      	b.n	801ae9c <HAL_ADC_Start+0x60>

0801aea8 <ADC_Disable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801aea8:	6802      	ldr	r2, [r0, #0]
{
 801aeaa:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 801aeac:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801aeae:	6891      	ldr	r1, [r2, #8]
 801aeb0:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801aeb2:	07c8      	lsls	r0, r1, #31
 801aeb4:	d401      	bmi.n	801aeba <ADC_Disable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801aeb6:	2000      	movs	r0, #0
}
 801aeb8:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 801aeba:	0799      	lsls	r1, r3, #30
 801aebc:	d4fb      	bmi.n	801aeb6 <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801aebe:	6893      	ldr	r3, [r2, #8]
 801aec0:	f003 030d 	and.w	r3, r3, #13
 801aec4:	2b01      	cmp	r3, #1
 801aec6:	d119      	bne.n	801aefc <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 801aec8:	6893      	ldr	r3, [r2, #8]
 801aeca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801aece:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801aed2:	f043 0302 	orr.w	r3, r3, #2
 801aed6:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801aed8:	2303      	movs	r3, #3
 801aeda:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 801aedc:	f7ff f83d 	bl	8019f5a <HAL_GetTick>
 801aee0:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801aee2:	6823      	ldr	r3, [r4, #0]
 801aee4:	689b      	ldr	r3, [r3, #8]
 801aee6:	07db      	lsls	r3, r3, #31
 801aee8:	d5e5      	bpl.n	801aeb6 <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801aeea:	f7ff f836 	bl	8019f5a <HAL_GetTick>
 801aeee:	1b40      	subs	r0, r0, r5
 801aef0:	2802      	cmp	r0, #2
 801aef2:	d9f6      	bls.n	801aee2 <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801aef4:	6823      	ldr	r3, [r4, #0]
 801aef6:	689b      	ldr	r3, [r3, #8]
 801aef8:	07da      	lsls	r2, r3, #31
 801aefa:	d5f2      	bpl.n	801aee2 <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aefc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801aefe:	f043 0310 	orr.w	r3, r3, #16
 801af02:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801af04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801af06:	f043 0301 	orr.w	r3, r3, #1
 801af0a:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 801af0c:	2001      	movs	r0, #1
 801af0e:	e7d3      	b.n	801aeb8 <ADC_Disable+0x10>

0801af10 <HAL_ADC_DeInit>:
{
 801af10:	b538      	push	{r3, r4, r5, lr}
  if (hadc == NULL)
 801af12:	4604      	mov	r4, r0
 801af14:	2800      	cmp	r0, #0
 801af16:	f000 808f 	beq.w	801b038 <HAL_ADC_DeInit+0x128>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 801af1a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801af1c:	f043 0302 	orr.w	r3, r3, #2
 801af20:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801af22:	2103      	movs	r1, #3
 801af24:	f7ff fed0 	bl	801acc8 <ADC_ConversionStop>
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 801af28:	6822      	ldr	r2, [r4, #0]
 801af2a:	68d3      	ldr	r3, [r2, #12]
 801af2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801af30:	60d3      	str	r3, [r2, #12]
  if (tmp_hal_status == HAL_OK)
 801af32:	4605      	mov	r5, r0
 801af34:	b930      	cbnz	r0, 801af44 <HAL_ADC_DeInit+0x34>
    tmp_hal_status = ADC_Disable(hadc);
 801af36:	4620      	mov	r0, r4
 801af38:	f7ff ffb6 	bl	801aea8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 801af3c:	4605      	mov	r5, r0
 801af3e:	b908      	cbnz	r0, 801af44 <HAL_ADC_DeInit+0x34>
      hadc->State = HAL_ADC_STATE_READY;
 801af40:	2301      	movs	r3, #1
 801af42:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_ADC_DISABLE_IT(hadc, (
 801af44:	6823      	ldr	r3, [r4, #0]
 801af46:	483d      	ldr	r0, [pc, #244]	; (801b03c <HAL_ADC_DeInit+0x12c>)
 801af48:	6859      	ldr	r1, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (
 801af4a:	f240 72ff 	movw	r2, #2047	; 0x7ff
  __HAL_ADC_DISABLE_IT(hadc, (
 801af4e:	4001      	ands	r1, r0
 801af50:	6059      	str	r1, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (
 801af52:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 801af54:	6899      	ldr	r1, [r3, #8]
 801af56:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 801af5a:	6099      	str	r1, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 801af5c:	6899      	ldr	r1, [r3, #8]
 801af5e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801af62:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 801af64:	68da      	ldr	r2, [r3, #12]
 801af66:	4936      	ldr	r1, [pc, #216]	; (801b040 <HAL_ADC_DeInit+0x130>)
 801af68:	4011      	ands	r1, r2
 801af6a:	60d9      	str	r1, [r3, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 801af6c:	68d9      	ldr	r1, [r3, #12]
 801af6e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 801af72:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 801af74:	691a      	ldr	r2, [r3, #16]
 801af76:	4002      	ands	r2, r0
 801af78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 801af7a:	695a      	ldr	r2, [r3, #20]
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 801af7c:	4831      	ldr	r0, [pc, #196]	; (801b044 <HAL_ADC_DeInit+0x134>)
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 801af7e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 801af82:	615a      	str	r2, [r3, #20]
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 801af84:	699a      	ldr	r2, [r3, #24]
 801af86:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 801af8a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 801af8c:	6a1a      	ldr	r2, [r3, #32]
 801af8e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 801af92:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 801af94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801af96:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 801af9a:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 801af9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801af9e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 801afa2:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 801afa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801afa6:	4a28      	ldr	r2, [pc, #160]	; (801b048 <HAL_ADC_DeInit+0x138>)
 801afa8:	400a      	ands	r2, r1
 801afaa:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 801afac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801afae:	4001      	ands	r1, r0
 801afb0:	6359      	str	r1, [r3, #52]	; 0x34
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 801afb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801afb4:	4002      	ands	r2, r0
 801afb6:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 801afb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801afba:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 801afbe:	f022 0207 	bic.w	r2, r2, #7
 801afc2:	63da      	str	r2, [r3, #60]	; 0x3c
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 801afc4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 801afc6:	4a21      	ldr	r2, [pc, #132]	; (801b04c <HAL_ADC_DeInit+0x13c>)
 801afc8:	4011      	ands	r1, r2
 801afca:	6619      	str	r1, [r3, #96]	; 0x60
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 801afcc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801afce:	4011      	ands	r1, r2
 801afd0:	6659      	str	r1, [r3, #100]	; 0x64
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 801afd2:	6e99      	ldr	r1, [r3, #104]	; 0x68
 801afd4:	4011      	ands	r1, r2
 801afd6:	6699      	str	r1, [r3, #104]	; 0x68
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 801afd8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801afda:	400a      	ands	r2, r1
 801afdc:	66da      	str	r2, [r3, #108]	; 0x6c
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 801afde:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801afe2:	491b      	ldr	r1, [pc, #108]	; (801b050 <HAL_ADC_DeInit+0x140>)
 801afe4:	400a      	ands	r2, r1
 801afe6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 801afea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801afee:	400a      	ands	r2, r1
 801aff0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 801aff4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801aff8:	400a      	ands	r2, r1
 801affa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 801affe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 801b002:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 801b006:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801b00a:	4b12      	ldr	r3, [pc, #72]	; (801b054 <HAL_ADC_DeInit+0x144>)
 801b00c:	689b      	ldr	r3, [r3, #8]
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b00e:	07db      	lsls	r3, r3, #31
 801b010:	d406      	bmi.n	801b020 <HAL_ADC_DeInit+0x110>
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 801b012:	4a11      	ldr	r2, [pc, #68]	; (801b058 <HAL_ADC_DeInit+0x148>)
 801b014:	6893      	ldr	r3, [r2, #8]
 801b016:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 801b01a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b01e:	6093      	str	r3, [r2, #8]
  HAL_ADC_MspDeInit(hadc);
 801b020:	4620      	mov	r0, r4
 801b022:	f7fe fb4d 	bl	80196c0 <HAL_ADC_MspDeInit>
  ADC_CLEAR_ERRORCODE(hadc);
 801b026:	2300      	movs	r3, #0
  hadc->InjectionConfig.ChannelCount = 0;
 801b028:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(hadc);
 801b02c:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 801b02e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  hadc->State = HAL_ADC_STATE_RESET;
 801b032:	6563      	str	r3, [r4, #84]	; 0x54
}
 801b034:	4628      	mov	r0, r5
 801b036:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801b038:	2501      	movs	r5, #1
 801b03a:	e7fb      	b.n	801b034 <HAL_ADC_DeInit+0x124>
 801b03c:	fffff800 	.word	0xfffff800
 801b040:	80008004 	.word	0x80008004
 801b044:	e0820820 	.word	0xe0820820
 801b048:	e0820830 	.word	0xe0820830
 801b04c:	03fff000 	.word	0x03fff000
 801b050:	fff80000 	.word	0xfff80000
 801b054:	50040000 	.word	0x50040000
 801b058:	50040300 	.word	0x50040300

0801b05c <HAL_ADC_Stop>:
{
 801b05c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 801b05e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 801b062:	2b01      	cmp	r3, #1
{
 801b064:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 801b066:	d016      	beq.n	801b096 <HAL_ADC_Stop+0x3a>
 801b068:	2301      	movs	r3, #1
 801b06a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801b06e:	2103      	movs	r1, #3
 801b070:	f7ff fe2a 	bl	801acc8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 801b074:	b958      	cbnz	r0, 801b08e <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 801b076:	4620      	mov	r0, r4
 801b078:	f7ff ff16 	bl	801aea8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 801b07c:	b938      	cbnz	r0, 801b08e <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 801b07e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801b080:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801b084:	f023 0301 	bic.w	r3, r3, #1
 801b088:	f043 0301 	orr.w	r3, r3, #1
 801b08c:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 801b08e:	2300      	movs	r3, #0
 801b090:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 801b094:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 801b096:	2002      	movs	r0, #2
 801b098:	e7fc      	b.n	801b094 <HAL_ADC_Stop+0x38>
	...

0801b09c <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801b09c:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if defined (ADC_SUPPORT_2_5_MSPS)
  UNUSED(SingleDiff);
#endif
  
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801b09e:	2300      	movs	r3, #0
 801b0a0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801b0a2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 801b0a6:	2b01      	cmp	r3, #1
{
 801b0a8:	4604      	mov	r4, r0
 801b0aa:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 801b0ac:	d03e      	beq.n	801b12c <HAL_ADCEx_Calibration_Start+0x90>
 801b0ae:	2301      	movs	r3, #1
 801b0b0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801b0b4:	f7ff fef8 	bl	801aea8 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801b0b8:	2800      	cmp	r0, #0
 801b0ba:	d133      	bne.n	801b124 <HAL_ADCEx_Calibration_Start+0x88>
#if defined (ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 801b0bc:	6d62      	ldr	r2, [r4, #84]	; 0x54

    /* Start ADC calibration in mode single-ended or differential */
#if defined (ADC_SUPPORT_2_5_MSPS)
    LL_ADC_StartCalibration(hadc->Instance);
#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801b0be:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 801b0c0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 801b0c4:	f022 0202 	bic.w	r2, r2, #2
 801b0c8:	f042 0202 	orr.w	r2, r2, #2
 801b0cc:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 801b0ce:	68b3      	ldr	r3, [r6, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801b0d0:	4a17      	ldr	r2, [pc, #92]	; (801b130 <HAL_ADCEx_Calibration_Start+0x94>)
 801b0d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b0d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801b0da:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 801b0de:	432b      	orrs	r3, r5
 801b0e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b0e4:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801b0e6:	68b3      	ldr	r3, [r6, #8]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	da11      	bge.n	801b110 <HAL_ADCEx_Calibration_Start+0x74>
      wait_loop_index++;
 801b0ec:	9b01      	ldr	r3, [sp, #4]
 801b0ee:	3301      	adds	r3, #1
 801b0f0:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801b0f2:	9b01      	ldr	r3, [sp, #4]
 801b0f4:	4293      	cmp	r3, r2
 801b0f6:	d9f6      	bls.n	801b0e6 <HAL_ADCEx_Calibration_Start+0x4a>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801b0f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801b0fa:	f023 0312 	bic.w	r3, r3, #18
 801b0fe:	f043 0310 	orr.w	r3, r3, #16
 801b102:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801b104:	2300      	movs	r3, #0
 801b106:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 801b10a:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 801b10c:	b002      	add	sp, #8
 801b10e:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 801b110:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801b112:	f023 0303 	bic.w	r3, r3, #3
 801b116:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b11a:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 801b11c:	2300      	movs	r3, #0
 801b11e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 801b122:	e7f3      	b.n	801b10c <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b124:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801b126:	f043 0310 	orr.w	r3, r3, #16
 801b12a:	e7f6      	b.n	801b11a <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 801b12c:	2002      	movs	r0, #2
 801b12e:	e7ed      	b.n	801b10c <HAL_ADCEx_Calibration_Start+0x70>
 801b130:	00026aaa 	.word	0x00026aaa

0801b134 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b134:	4907      	ldr	r1, [pc, #28]	; (801b154 <HAL_NVIC_SetPriorityGrouping+0x20>)
 801b136:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b138:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b13c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b13e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b144:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801b148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801b14c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 801b150:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 801b152:	4770      	bx	lr
 801b154:	e000ed00 	.word	0xe000ed00

0801b158 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b158:	4b16      	ldr	r3, [pc, #88]	; (801b1b4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b15a:	b530      	push	{r4, r5, lr}
 801b15c:	68dc      	ldr	r4, [r3, #12]
 801b15e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b162:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b166:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b168:	2d04      	cmp	r5, #4
 801b16a:	bf28      	it	cs
 801b16c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b16e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b174:	bf8c      	ite	hi
 801b176:	3c03      	subhi	r4, #3
 801b178:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b17a:	fa03 f505 	lsl.w	r5, r3, r5
 801b17e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b182:	40a3      	lsls	r3, r4
 801b184:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b188:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 801b18a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b18c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b190:	bfac      	ite	ge
 801b192:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b196:	4a08      	ldrlt	r2, [pc, #32]	; (801b1b8 <HAL_NVIC_SetPriority+0x60>)
 801b198:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801b19c:	bfb8      	it	lt
 801b19e:	f000 000f 	andlt.w	r0, r0, #15
 801b1a2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b1a4:	bfaa      	itet	ge
 801b1a6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b1aa:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b1ac:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 801b1b0:	bd30      	pop	{r4, r5, pc}
 801b1b2:	bf00      	nop
 801b1b4:	e000ed00 	.word	0xe000ed00
 801b1b8:	e000ed14 	.word	0xe000ed14

0801b1bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 801b1bc:	2800      	cmp	r0, #0
 801b1be:	db08      	blt.n	801b1d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b1c0:	0942      	lsrs	r2, r0, #5
 801b1c2:	2301      	movs	r3, #1
 801b1c4:	f000 001f 	and.w	r0, r0, #31
 801b1c8:	fa03 f000 	lsl.w	r0, r3, r0
 801b1cc:	4b01      	ldr	r3, [pc, #4]	; (801b1d4 <HAL_NVIC_EnableIRQ+0x18>)
 801b1ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 801b1d2:	4770      	bx	lr
 801b1d4:	e000e100 	.word	0xe000e100

0801b1d8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 801b1d8:	2800      	cmp	r0, #0
 801b1da:	db0d      	blt.n	801b1f8 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b1dc:	0943      	lsrs	r3, r0, #5
 801b1de:	2201      	movs	r2, #1
 801b1e0:	f000 001f 	and.w	r0, r0, #31
 801b1e4:	fa02 f000 	lsl.w	r0, r2, r0
 801b1e8:	3320      	adds	r3, #32
 801b1ea:	4a04      	ldr	r2, [pc, #16]	; (801b1fc <HAL_NVIC_DisableIRQ+0x24>)
 801b1ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801b1f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801b1f4:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 801b1f8:	4770      	bx	lr
 801b1fa:	bf00      	nop
 801b1fc:	e000e100 	.word	0xe000e100

0801b200 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b200:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b202:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 801b206:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801b208:	6d44      	ldr	r4, [r0, #84]	; 0x54
 801b20a:	b114      	cbz	r4, 801b212 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b20c:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 801b210:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801b212:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 801b216:	f004 061c 	and.w	r6, r4, #28
 801b21a:	2401      	movs	r4, #1
 801b21c:	40b4      	lsls	r4, r6
 801b21e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801b220:	6804      	ldr	r4, [r0, #0]
 801b222:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b224:	6883      	ldr	r3, [r0, #8]
 801b226:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801b228:	bf0b      	itete	eq
 801b22a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 801b22c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 801b22e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 801b230:	60e2      	strne	r2, [r4, #12]
  }
}
 801b232:	bd70      	pop	{r4, r5, r6, pc}

0801b234 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801b234:	4a0e      	ldr	r2, [pc, #56]	; (801b270 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 801b236:	6803      	ldr	r3, [r0, #0]
 801b238:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801b23a:	4293      	cmp	r3, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 801b23c:	bf88      	it	hi
 801b23e:	4a0d      	ldrhi	r2, [pc, #52]	; (801b274 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 801b240:	f021 0103 	bic.w	r1, r1, #3
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 801b244:	bf9a      	itte	ls
 801b246:	f101 4280 	addls.w	r2, r1, #1073741824	; 0x40000000
 801b24a:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 801b24e:	1852      	addhi	r2, r2, r1
 801b250:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801b252:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b254:	4a08      	ldr	r2, [pc, #32]	; (801b278 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 801b256:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801b258:	3b08      	subs	r3, #8
 801b25a:	2214      	movs	r2, #20
 801b25c:	fbb3 f3f2 	udiv	r3, r3, r2

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801b260:	2201      	movs	r2, #1
 801b262:	f003 031f 	and.w	r3, r3, #31
 801b266:	fa02 f303 	lsl.w	r3, r2, r3
 801b26a:	6503      	str	r3, [r0, #80]	; 0x50
}
 801b26c:	4770      	bx	lr
 801b26e:	bf00      	nop
 801b270:	40020407 	.word	0x40020407
 801b274:	4002081c 	.word	0x4002081c
 801b278:	40020880 	.word	0x40020880

0801b27c <HAL_DMA_Init>:
{
 801b27c:	b510      	push	{r4, lr}
  if (hdma == NULL)
 801b27e:	2800      	cmp	r0, #0
 801b280:	d05e      	beq.n	801b340 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801b282:	6801      	ldr	r1, [r0, #0]
 801b284:	4b2f      	ldr	r3, [pc, #188]	; (801b344 <HAL_DMA_Init+0xc8>)
 801b286:	4299      	cmp	r1, r3
 801b288:	f04f 0414 	mov.w	r4, #20
 801b28c:	d84b      	bhi.n	801b326 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801b28e:	4a2e      	ldr	r2, [pc, #184]	; (801b348 <HAL_DMA_Init+0xcc>)
 801b290:	440a      	add	r2, r1
 801b292:	fbb2 f2f4 	udiv	r2, r2, r4
 801b296:	0092      	lsls	r2, r2, #2
 801b298:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801b29a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 801b29e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 801b2a0:	2302      	movs	r3, #2
 801b2a2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 801b2a6:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
 801b2aa:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b2ac:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 801b2ae:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b2b0:	4323      	orrs	r3, r4
 801b2b2:	6944      	ldr	r4, [r0, #20]
 801b2b4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b2b6:	6984      	ldr	r4, [r0, #24]
 801b2b8:	4323      	orrs	r3, r4
 801b2ba:	69c4      	ldr	r4, [r0, #28]
 801b2bc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 801b2be:	6a04      	ldr	r4, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801b2c0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 801b2c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 801b2c8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 801b2ca:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 801b2cc:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b2ce:	f7ff ffb1 	bl	801b234 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b2d2:	6883      	ldr	r3, [r0, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b2d4:	6c81      	ldr	r1, [r0, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b2d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b2da:	bf04      	itt	eq
 801b2dc:	2300      	moveq	r3, #0
 801b2de:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b2e0:	6842      	ldr	r2, [r0, #4]
 801b2e2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 801b2e6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b2e8:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b2ec:	3a01      	subs	r2, #1
 801b2ee:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b2f0:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b2f2:	d820      	bhi.n	801b336 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b2f4:	4a15      	ldr	r2, [pc, #84]	; (801b34c <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b2f6:	4c16      	ldr	r4, [pc, #88]	; (801b350 <HAL_DMA_Init+0xd4>)
 801b2f8:	6584      	str	r4, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b2fa:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801b2fc:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b2fe:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801b300:	2101      	movs	r1, #1
 801b302:	f003 0303 	and.w	r3, r3, #3
 801b306:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801b30a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b30c:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801b30e:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801b310:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b312:	6063      	str	r3, [r4, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b314:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 801b316:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b318:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 801b31a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 801b31e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 801b322:	4618      	mov	r0, r3
}
 801b324:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 801b326:	4b0b      	ldr	r3, [pc, #44]	; (801b354 <HAL_DMA_Init+0xd8>)
 801b328:	440b      	add	r3, r1
 801b32a:	fbb3 f3f4 	udiv	r3, r3, r4
 801b32e:	009b      	lsls	r3, r3, #2
 801b330:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801b332:	4b09      	ldr	r3, [pc, #36]	; (801b358 <HAL_DMA_Init+0xdc>)
 801b334:	e7b3      	b.n	801b29e <HAL_DMA_Init+0x22>
    hdma->DMAmuxRequestGen = 0U;
 801b336:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 801b338:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801b33c:	65c3      	str	r3, [r0, #92]	; 0x5c
 801b33e:	e7e9      	b.n	801b314 <HAL_DMA_Init+0x98>
    return HAL_ERROR;
 801b340:	2001      	movs	r0, #1
 801b342:	e7ef      	b.n	801b324 <HAL_DMA_Init+0xa8>
 801b344:	40020407 	.word	0x40020407
 801b348:	bffdfff8 	.word	0xbffdfff8
 801b34c:	1000823f 	.word	0x1000823f
 801b350:	40020940 	.word	0x40020940
 801b354:	bffdfbf8 	.word	0xbffdfbf8
 801b358:	40020400 	.word	0x40020400

0801b35c <HAL_DMA_DeInit>:
{
 801b35c:	b538      	push	{r3, r4, r5, lr}
  if (NULL == hdma)
 801b35e:	2800      	cmp	r0, #0
 801b360:	d045      	beq.n	801b3ee <HAL_DMA_DeInit+0x92>
  __HAL_DMA_DISABLE(hdma);
 801b362:	6801      	ldr	r1, [r0, #0]
 801b364:	680b      	ldr	r3, [r1, #0]
 801b366:	f023 0301 	bic.w	r3, r3, #1
 801b36a:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801b36c:	4b21      	ldr	r3, [pc, #132]	; (801b3f4 <HAL_DMA_DeInit+0x98>)
 801b36e:	4299      	cmp	r1, r3
 801b370:	f04f 0414 	mov.w	r4, #20
 801b374:	d833      	bhi.n	801b3de <HAL_DMA_DeInit+0x82>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801b376:	4a20      	ldr	r2, [pc, #128]	; (801b3f8 <HAL_DMA_DeInit+0x9c>)
 801b378:	440a      	add	r2, r1
 801b37a:	fbb2 f2f4 	udiv	r2, r2, r4
 801b37e:	0092      	lsls	r2, r2, #2
 801b380:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801b382:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 801b386:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801b388:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 801b38c:	2401      	movs	r4, #1
 801b38e:	f003 031c 	and.w	r3, r3, #28
 801b392:	fa04 f303 	lsl.w	r3, r4, r3
  hdma->Instance->CCR  = 0U;
 801b396:	2500      	movs	r5, #0
 801b398:	600d      	str	r5, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801b39a:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b39c:	f7ff ff4a 	bl	801b234 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 801b3a0:	6c83      	ldr	r3, [r0, #72]	; 0x48
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b3a2:	6841      	ldr	r1, [r0, #4]
  hdma->DMAmuxChannel->CCR = 0U;
 801b3a4:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b3a6:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 801b3aa:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b3ac:	1e4a      	subs	r2, r1, #1
 801b3ae:	2a03      	cmp	r2, #3
 801b3b0:	d806      	bhi.n	801b3c0 <HAL_DMA_DeInit+0x64>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b3b2:	4b12      	ldr	r3, [pc, #72]	; (801b3fc <HAL_DMA_DeInit+0xa0>)
 801b3b4:	440b      	add	r3, r1
 801b3b6:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801b3b8:	4094      	lsls	r4, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801b3ba:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b3bc:	4b10      	ldr	r3, [pc, #64]	; (801b400 <HAL_DMA_DeInit+0xa4>)
 801b3be:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxRequestGen = 0U;
 801b3c0:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b3c2:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->DMAmuxRequestGenStatus = 0U;
 801b3c4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hdma->XferHalfCpltCallback = NULL;
 801b3c8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hdma->XferAbortCallback = NULL;
 801b3cc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hdma->DMAmuxRequestGenStatusMask = 0U;
 801b3d0:	65c3      	str	r3, [r0, #92]	; 0x5c
  hdma->State = HAL_DMA_STATE_RESET;
 801b3d2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 801b3d6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return HAL_OK;
 801b3da:	4618      	mov	r0, r3
}
 801b3dc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 801b3de:	4b09      	ldr	r3, [pc, #36]	; (801b404 <HAL_DMA_DeInit+0xa8>)
 801b3e0:	440b      	add	r3, r1
 801b3e2:	fbb3 f3f4 	udiv	r3, r3, r4
 801b3e6:	009b      	lsls	r3, r3, #2
 801b3e8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801b3ea:	4b07      	ldr	r3, [pc, #28]	; (801b408 <HAL_DMA_DeInit+0xac>)
 801b3ec:	e7cb      	b.n	801b386 <HAL_DMA_DeInit+0x2a>
    return HAL_ERROR;
 801b3ee:	2001      	movs	r0, #1
 801b3f0:	e7f4      	b.n	801b3dc <HAL_DMA_DeInit+0x80>
 801b3f2:	bf00      	nop
 801b3f4:	40020407 	.word	0x40020407
 801b3f8:	bffdfff8 	.word	0xbffdfff8
 801b3fc:	1000823f 	.word	0x1000823f
 801b400:	40020940 	.word	0x40020940
 801b404:	bffdfbf8 	.word	0xbffdfbf8
 801b408:	40020400 	.word	0x40020400

0801b40c <HAL_DMA_Start_IT>:
{
 801b40c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 801b40e:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 801b412:	2d01      	cmp	r5, #1
{
 801b414:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 801b416:	d039      	beq.n	801b48c <HAL_DMA_Start_IT+0x80>
 801b418:	2501      	movs	r5, #1
 801b41a:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 801b41e:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 801b422:	2d01      	cmp	r5, #1
 801b424:	f04f 0600 	mov.w	r6, #0
 801b428:	f04f 0502 	mov.w	r5, #2
 801b42c:	d12c      	bne.n	801b488 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 801b42e:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b432:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 801b434:	6806      	ldr	r6, [r0, #0]
 801b436:	6835      	ldr	r5, [r6, #0]
 801b438:	f025 0501 	bic.w	r5, r5, #1
 801b43c:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b43e:	f7ff fedf 	bl	801b200 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 801b442:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801b444:	6803      	ldr	r3, [r0, #0]
 801b446:	b1ba      	cbz	r2, 801b478 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b448:	681a      	ldr	r2, [r3, #0]
 801b44a:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801b44e:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801b450:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801b452:	6811      	ldr	r1, [r2, #0]
 801b454:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801b456:	bf42      	ittt	mi
 801b458:	6811      	ldrmi	r1, [r2, #0]
 801b45a:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 801b45e:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 801b460:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801b462:	b11a      	cbz	r2, 801b46c <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801b464:	6811      	ldr	r1, [r2, #0]
 801b466:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801b46a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 801b46c:	681a      	ldr	r2, [r3, #0]
 801b46e:	f042 0201 	orr.w	r2, r2, #1
 801b472:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b474:	2000      	movs	r0, #0
}
 801b476:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b478:	681a      	ldr	r2, [r3, #0]
 801b47a:	f022 0204 	bic.w	r2, r2, #4
 801b47e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801b480:	681a      	ldr	r2, [r3, #0]
 801b482:	f042 020a 	orr.w	r2, r2, #10
 801b486:	e7e2      	b.n	801b44e <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 801b488:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 801b48c:	2002      	movs	r0, #2
 801b48e:	e7f2      	b.n	801b476 <HAL_DMA_Start_IT+0x6a>

0801b490 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 801b490:	b911      	cbnz	r1, 801b498 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 801b492:	6042      	str	r2, [r0, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 801b494:	4608      	mov	r0, r1
 801b496:	4770      	bx	lr
      status = HAL_ERROR;
 801b498:	2101      	movs	r1, #1
 801b49a:	e7fb      	b.n	801b494 <HAL_EXTI_RegisterCallback+0x4>

0801b49c <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 801b49c:	b110      	cbz	r0, 801b4a4 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 801b49e:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 801b4a0:	2000      	movs	r0, #0
 801b4a2:	4770      	bx	lr
    return HAL_ERROR;
 801b4a4:	2001      	movs	r0, #1
  }
}
 801b4a6:	4770      	bx	lr

0801b4a8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801b4ac:	4c57      	ldr	r4, [pc, #348]	; (801b60c <HAL_GPIO_Init+0x164>)
  uint32_t position = 0x00u;
 801b4ae:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801b4b0:	f04f 0901 	mov.w	r9, #1
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801b4b4:	f04f 080f 	mov.w	r8, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801b4b8:	680a      	ldr	r2, [r1, #0]
 801b4ba:	fa32 f503 	lsrs.w	r5, r2, r3
 801b4be:	d101      	bne.n	801b4c4 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 801b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801b4c4:	fa09 fe03 	lsl.w	lr, r9, r3
    if (iocurrent != 0x00u)
 801b4c8:	ea1e 0202 	ands.w	r2, lr, r2
 801b4cc:	f000 8094 	beq.w	801b5f8 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801b4d0:	684d      	ldr	r5, [r1, #4]
 801b4d2:	f025 0a10 	bic.w	sl, r5, #16
 801b4d6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801b4da:	2603      	movs	r6, #3
 801b4dc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 801b4e0:	fa06 f60c 	lsl.w	r6, r6, ip
 801b4e4:	2f01      	cmp	r7, #1
 801b4e6:	ea6f 0606 	mvn.w	r6, r6
 801b4ea:	d811      	bhi.n	801b510 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 801b4ec:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801b4ee:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 801b4f2:	68cf      	ldr	r7, [r1, #12]
 801b4f4:	fa07 f70c 	lsl.w	r7, r7, ip
 801b4f8:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 801b4fc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 801b4fe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801b500:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 801b504:	f3c5 1700 	ubfx	r7, r5, #4, #1
 801b508:	409f      	lsls	r7, r3
 801b50a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 801b50e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 801b510:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801b512:	ea07 0e06 	and.w	lr, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 801b516:	688f      	ldr	r7, [r1, #8]
 801b518:	fa07 f70c 	lsl.w	r7, r7, ip
 801b51c:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801b520:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 801b524:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801b526:	d114      	bne.n	801b552 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3u];
 801b528:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 801b52c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801b530:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 801b534:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801b538:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801b53c:	fa08 fb0a 	lsl.w	fp, r8, sl
 801b540:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801b544:	690f      	ldr	r7, [r1, #16]
 801b546:	fa07 f70a 	lsl.w	r7, r7, sl
 801b54a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 801b54e:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 801b552:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801b554:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801b556:	f005 0703 	and.w	r7, r5, #3
 801b55a:	fa07 fc0c 	lsl.w	ip, r7, ip
 801b55e:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 801b562:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801b564:	00ee      	lsls	r6, r5, #3
 801b566:	d547      	bpl.n	801b5f8 <HAL_GPIO_Init+0x150>
        temp = SYSCFG->EXTICR[position >> 2u];
 801b568:	f023 0703 	bic.w	r7, r3, #3
 801b56c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 801b570:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801b574:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 801b578:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801b57a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801b57e:	fa08 fe0c 	lsl.w	lr, r8, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801b582:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801b586:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801b58a:	d037      	beq.n	801b5fc <HAL_GPIO_Init+0x154>
 801b58c:	4e20      	ldr	r6, [pc, #128]	; (801b610 <HAL_GPIO_Init+0x168>)
 801b58e:	42b0      	cmp	r0, r6
 801b590:	d036      	beq.n	801b600 <HAL_GPIO_Init+0x158>
 801b592:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801b596:	42b0      	cmp	r0, r6
 801b598:	d034      	beq.n	801b604 <HAL_GPIO_Init+0x15c>
 801b59a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801b59e:	42b0      	cmp	r0, r6
 801b5a0:	d032      	beq.n	801b608 <HAL_GPIO_Init+0x160>
 801b5a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801b5a6:	42b0      	cmp	r0, r6
 801b5a8:	bf0c      	ite	eq
 801b5aa:	2604      	moveq	r6, #4
 801b5ac:	2607      	movne	r6, #7
 801b5ae:	fa06 f60c 	lsl.w	r6, r6, ip
 801b5b2:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 801b5b6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 801b5b8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 801b5bc:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801b5be:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 801b5c2:	bf0c      	ite	eq
 801b5c4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 801b5c6:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 801b5c8:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        temp = EXTI->EMR1;
 801b5cc:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801b5d0:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 801b5d4:	bf0c      	ite	eq
 801b5d6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 801b5d8:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 801b5da:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        temp = EXTI->RTSR1;
 801b5de:	6826      	ldr	r6, [r4, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801b5e0:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 801b5e4:	bf0c      	ite	eq
 801b5e6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 801b5e8:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 801b5ea:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 801b5ec:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801b5ee:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 801b5f0:	bf54      	ite	pl
 801b5f2:	403e      	andpl	r6, r7
          temp |= iocurrent;
 801b5f4:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 801b5f6:	6066      	str	r6, [r4, #4]
    position++;
 801b5f8:	3301      	adds	r3, #1
 801b5fa:	e75d      	b.n	801b4b8 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801b5fc:	2600      	movs	r6, #0
 801b5fe:	e7d6      	b.n	801b5ae <HAL_GPIO_Init+0x106>
 801b600:	2601      	movs	r6, #1
 801b602:	e7d4      	b.n	801b5ae <HAL_GPIO_Init+0x106>
 801b604:	2602      	movs	r6, #2
 801b606:	e7d2      	b.n	801b5ae <HAL_GPIO_Init+0x106>
 801b608:	2603      	movs	r6, #3
 801b60a:	e7d0      	b.n	801b5ae <HAL_GPIO_Init+0x106>
 801b60c:	58000800 	.word	0x58000800
 801b610:	48000400 	.word	0x48000400

0801b614 <HAL_GPIO_DeInit>:
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801b614:	4a3c      	ldr	r2, [pc, #240]	; (801b708 <HAL_GPIO_DeInit+0xf4>)
{
 801b616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
 801b61a:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 801b61c:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 801b620:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 801b624:	f04f 0b03 	mov.w	fp, #3
  while ((GPIO_Pin >> position) != 0x00u)
 801b628:	fa31 f403 	lsrs.w	r4, r1, r3
 801b62c:	d101      	bne.n	801b632 <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
    }
    
    position++;
  }
}
 801b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 801b632:	fa0a fc03 	lsl.w	ip, sl, r3
    if (iocurrent != 0x00u)
 801b636:	ea1c 0601 	ands.w	r6, ip, r1
 801b63a:	d05a      	beq.n	801b6f2 <HAL_GPIO_DeInit+0xde>
      tmp = SYSCFG->EXTICR[position >> 2u];
 801b63c:	f023 0403 	bic.w	r4, r3, #3
 801b640:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 801b644:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 801b648:	f003 0703 	and.w	r7, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 801b64c:	68a5      	ldr	r5, [r4, #8]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 801b64e:	00bf      	lsls	r7, r7, #2
 801b650:	fa08 f907 	lsl.w	r9, r8, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 801b654:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 801b658:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 801b65c:	d04b      	beq.n	801b6f6 <HAL_GPIO_DeInit+0xe2>
 801b65e:	4d2b      	ldr	r5, [pc, #172]	; (801b70c <HAL_GPIO_DeInit+0xf8>)
 801b660:	42a8      	cmp	r0, r5
 801b662:	d04a      	beq.n	801b6fa <HAL_GPIO_DeInit+0xe6>
 801b664:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801b668:	42a8      	cmp	r0, r5
 801b66a:	d048      	beq.n	801b6fe <HAL_GPIO_DeInit+0xea>
 801b66c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801b670:	42a8      	cmp	r0, r5
 801b672:	d046      	beq.n	801b702 <HAL_GPIO_DeInit+0xee>
 801b674:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801b678:	42a8      	cmp	r0, r5
 801b67a:	bf0c      	ite	eq
 801b67c:	2504      	moveq	r5, #4
 801b67e:	2507      	movne	r5, #7
 801b680:	40bd      	lsls	r5, r7
 801b682:	4575      	cmp	r5, lr
 801b684:	d117      	bne.n	801b6b6 <HAL_GPIO_DeInit+0xa2>
        EXTI->IMR1 &= ~(iocurrent);
 801b686:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 801b68a:	ea25 0506 	bic.w	r5, r5, r6
 801b68e:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 801b692:	f8d2 5084 	ldr.w	r5, [r2, #132]	; 0x84
 801b696:	ea25 0506 	bic.w	r5, r5, r6
 801b69a:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 801b69e:	6815      	ldr	r5, [r2, #0]
 801b6a0:	ea25 0506 	bic.w	r5, r5, r6
 801b6a4:	6015      	str	r5, [r2, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 801b6a6:	6855      	ldr	r5, [r2, #4]
 801b6a8:	ea25 0606 	bic.w	r6, r5, r6
 801b6ac:	6056      	str	r6, [r2, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 801b6ae:	68a5      	ldr	r5, [r4, #8]
 801b6b0:	ea25 0509 	bic.w	r5, r5, r9
 801b6b4:	60a5      	str	r5, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 801b6b6:	6805      	ldr	r5, [r0, #0]
 801b6b8:	005c      	lsls	r4, r3, #1
 801b6ba:	fa0b f404 	lsl.w	r4, fp, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 801b6be:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 801b6c0:	4325      	orrs	r5, r4
 801b6c2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801b6c6:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 801b6c8:	f003 0507 	and.w	r5, r3, #7
 801b6cc:	6a37      	ldr	r7, [r6, #32]
 801b6ce:	00ad      	lsls	r5, r5, #2
 801b6d0:	fa08 f505 	lsl.w	r5, r8, r5
 801b6d4:	ea27 0505 	bic.w	r5, r7, r5
 801b6d8:	6235      	str	r5, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801b6da:	68c5      	ldr	r5, [r0, #12]
 801b6dc:	ea25 0504 	bic.w	r5, r5, r4
 801b6e0:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801b6e2:	6845      	ldr	r5, [r0, #4]
 801b6e4:	ea25 050c 	bic.w	r5, r5, ip
 801b6e8:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801b6ea:	6885      	ldr	r5, [r0, #8]
 801b6ec:	ea25 0404 	bic.w	r4, r5, r4
 801b6f0:	6084      	str	r4, [r0, #8]
    position++;
 801b6f2:	3301      	adds	r3, #1
 801b6f4:	e798      	b.n	801b628 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 801b6f6:	2500      	movs	r5, #0
 801b6f8:	e7c2      	b.n	801b680 <HAL_GPIO_DeInit+0x6c>
 801b6fa:	2501      	movs	r5, #1
 801b6fc:	e7c0      	b.n	801b680 <HAL_GPIO_DeInit+0x6c>
 801b6fe:	2502      	movs	r5, #2
 801b700:	e7be      	b.n	801b680 <HAL_GPIO_DeInit+0x6c>
 801b702:	2503      	movs	r5, #3
 801b704:	e7bc      	b.n	801b680 <HAL_GPIO_DeInit+0x6c>
 801b706:	bf00      	nop
 801b708:	58000800 	.word	0x58000800
 801b70c:	48000400 	.word	0x48000400

0801b710 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801b710:	6903      	ldr	r3, [r0, #16]
 801b712:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 801b714:	bf14      	ite	ne
 801b716:	2001      	movne	r0, #1
 801b718:	2000      	moveq	r0, #0
 801b71a:	4770      	bx	lr

0801b71c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801b71c:	b10a      	cbz	r2, 801b722 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801b71e:	6181      	str	r1, [r0, #24]
 801b720:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801b722:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 801b724:	4770      	bx	lr
	...

0801b728 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b728:	4a02      	ldr	r2, [pc, #8]	; (801b734 <HAL_PWR_EnableBkUpAccess+0xc>)
 801b72a:	6813      	ldr	r3, [r2, #0]
 801b72c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b730:	6013      	str	r3, [r2, #0]
}
 801b732:	4770      	bx	lr
 801b734:	58000400 	.word	0x58000400

0801b738 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 801b738:	4b02      	ldr	r3, [pc, #8]	; (801b744 <HAL_PWREx_GetVoltageRange+0xc>)
 801b73a:	6818      	ldr	r0, [r3, #0]
}
 801b73c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 801b740:	4770      	bx	lr
 801b742:	bf00      	nop
 801b744:	58000400 	.word	0x58000400

0801b748 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801b748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b74c:	6818      	ldr	r0, [r3, #0]
}
 801b74e:	f3c0 4040 	ubfx	r0, r0, #17, #1
 801b752:	4770      	bx	lr

0801b754 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801b754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b758:	6818      	ldr	r0, [r3, #0]
}
 801b75a:	f3c0 2080 	ubfx	r0, r0, #10, #1
 801b75e:	4770      	bx	lr

0801b760 <LL_RCC_LSI1_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801b760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b764:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 801b768:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801b76c:	4770      	bx	lr

0801b76e <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 801b76e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b772:	6818      	ldr	r0, [r3, #0]
}
 801b774:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801b778:	4770      	bx	lr

0801b77a <LL_RCC_MSI_SetRange>:
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801b77a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b77e:	6813      	ldr	r3, [r2, #0]
 801b780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b784:	4318      	orrs	r0, r3
 801b786:	6010      	str	r0, [r2, #0]
}
 801b788:	4770      	bx	lr

0801b78a <LL_RCC_MSI_SetCalibTrimming>:
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 801b78a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b78e:	6853      	ldr	r3, [r2, #4]
 801b790:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b794:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 801b798:	6050      	str	r0, [r2, #4]
}
 801b79a:	4770      	bx	lr

0801b79c <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 801b79c:	28b0      	cmp	r0, #176	; 0xb0
 801b79e:	4b33      	ldr	r3, [pc, #204]	; (801b86c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801b7a0:	4a33      	ldr	r2, [pc, #204]	; (801b870 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801b7a2:	bf98      	it	ls
 801b7a4:	0900      	lsrls	r0, r0, #4
{
 801b7a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 801b7a8:	bf8c      	ite	hi
 801b7aa:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801b7ac:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801b7b0:	4c30      	ldr	r4, [pc, #192]	; (801b874 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801b7b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 801b7b6:	b089      	sub	sp, #36	; 0x24
 801b7b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801b7bc:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801b7c0:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801b7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b7c6:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801b7ca:	f7ff ffb5 	bl	801b738 <HAL_PWREx_GetVoltageRange>
 801b7ce:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801b7d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801b7d4:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801b7d6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801b7da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801b7de:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801b7e2:	ac08      	add	r4, sp, #32
 801b7e4:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801b7e8:	d020      	beq.n	801b82c <RCC_SetFlashLatencyFromMSIRange+0x90>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801b7ea:	4b23      	ldr	r3, [pc, #140]	; (801b878 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 801b7ec:	429d      	cmp	r5, r3
 801b7ee:	d32f      	bcc.n	801b850 <RCC_SetFlashLatencyFromMSIRange+0xb4>
 801b7f0:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 801b7f4:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 801b7f8:	429d      	cmp	r5, r3
 801b7fa:	d92b      	bls.n	801b854 <RCC_SetFlashLatencyFromMSIRange+0xb8>
 801b7fc:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 801b800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b804:	429d      	cmp	r5, r3
 801b806:	d927      	bls.n	801b858 <RCC_SetFlashLatencyFromMSIRange+0xbc>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801b808:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 801b80a:	4d1c      	ldr	r5, [pc, #112]	; (801b87c <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 801b80c:	682b      	ldr	r3, [r5, #0]
 801b80e:	f023 0307 	bic.w	r3, r3, #7
 801b812:	4323      	orrs	r3, r4
 801b814:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801b816:	f7fe fba0 	bl	8019f5a <HAL_GetTick>
 801b81a:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801b81c:	682b      	ldr	r3, [r5, #0]
 801b81e:	f003 0307 	and.w	r3, r3, #7
 801b822:	429c      	cmp	r4, r3
 801b824:	d11a      	bne.n	801b85c <RCC_SetFlashLatencyFromMSIRange+0xc0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 801b826:	2000      	movs	r0, #0
}
 801b828:	b009      	add	sp, #36	; 0x24
 801b82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801b82c:	4b14      	ldr	r3, [pc, #80]	; (801b880 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 801b82e:	fbb5 f5f3 	udiv	r5, r5, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801b832:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801b834:	f856 2b04 	ldr.w	r2, [r6], #4
 801b838:	4295      	cmp	r5, r2
 801b83a:	d805      	bhi.n	801b848 <RCC_SetFlashLatencyFromMSIRange+0xac>
        latency = FLASH_LATENCY_RANGE[index];
 801b83c:	aa08      	add	r2, sp, #32
 801b83e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b842:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
 801b846:	e7e0      	b.n	801b80a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801b848:	3301      	adds	r3, #1
 801b84a:	2b04      	cmp	r3, #4
 801b84c:	d1f2      	bne.n	801b834 <RCC_SetFlashLatencyFromMSIRange+0x98>
 801b84e:	e7db      	b.n	801b808 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801b850:	2300      	movs	r3, #0
 801b852:	e7f3      	b.n	801b83c <RCC_SetFlashLatencyFromMSIRange+0xa0>
 801b854:	2301      	movs	r3, #1
 801b856:	e7f1      	b.n	801b83c <RCC_SetFlashLatencyFromMSIRange+0xa0>
 801b858:	2302      	movs	r3, #2
 801b85a:	e7ef      	b.n	801b83c <RCC_SetFlashLatencyFromMSIRange+0xa0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801b85c:	f7fe fb7d 	bl	8019f5a <HAL_GetTick>
 801b860:	1b80      	subs	r0, r0, r6
 801b862:	2802      	cmp	r0, #2
 801b864:	d9da      	bls.n	801b81c <RCC_SetFlashLatencyFromMSIRange+0x80>
      return HAL_TIMEOUT;
 801b866:	2003      	movs	r0, #3
 801b868:	e7de      	b.n	801b828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 801b86a:	bf00      	nop
 801b86c:	080272a4 	.word	0x080272a4
 801b870:	080272e4 	.word	0x080272e4
 801b874:	080273a4 	.word	0x080273a4
 801b878:	006acfc0 	.word	0x006acfc0
 801b87c:	58004000 	.word	0x58004000
 801b880:	000f4240 	.word	0x000f4240

0801b884 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801b884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b888:	689a      	ldr	r2, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801b88a:	f012 020c 	ands.w	r2, r2, #12
 801b88e:	d10a      	bne.n	801b8a6 <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 801b890:	681b      	ldr	r3, [r3, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801b892:	4a22      	ldr	r2, [pc, #136]	; (801b91c <HAL_RCC_GetSysClockFreq+0x98>)
 801b894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b898:	2bb0      	cmp	r3, #176	; 0xb0
 801b89a:	bf28      	it	cs
 801b89c:	23b0      	movcs	r3, #176	; 0xb0
 801b89e:	091b      	lsrs	r3, r3, #4
 801b8a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b8a4:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b8a6:	2a04      	cmp	r2, #4
 801b8a8:	d035      	beq.n	801b916 <HAL_RCC_GetSysClockFreq+0x92>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b8aa:	2a08      	cmp	r2, #8
 801b8ac:	d107      	bne.n	801b8be <HAL_RCC_GetSysClockFreq+0x3a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801b8ae:	681b      	ldr	r3, [r3, #0]
      sysclockfreq = HSE_VALUE;
 801b8b0:	481b      	ldr	r0, [pc, #108]	; (801b920 <HAL_RCC_GetSysClockFreq+0x9c>)
 801b8b2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 801b8b6:	4b1b      	ldr	r3, [pc, #108]	; (801b924 <HAL_RCC_GetSysClockFreq+0xa0>)
 801b8b8:	bf08      	it	eq
 801b8ba:	4618      	moveq	r0, r3
 801b8bc:	4770      	bx	lr
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801b8be:	68da      	ldr	r2, [r3, #12]
 801b8c0:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 801b8c4:	2a02      	cmp	r2, #2
 801b8c6:	d024      	beq.n	801b912 <HAL_RCC_GetSysClockFreq+0x8e>
 801b8c8:	2a03      	cmp	r2, #3
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	d117      	bne.n	801b8fe <HAL_RCC_GetSysClockFreq+0x7a>
          pllinputfreq = HSE_VALUE / 2U;
 801b8ce:	4814      	ldr	r0, [pc, #80]	; (801b920 <HAL_RCC_GetSysClockFreq+0x9c>)
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801b8d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 801b8d4:	4b13      	ldr	r3, [pc, #76]	; (801b924 <HAL_RCC_GetSysClockFreq+0xa0>)
 801b8d6:	bf18      	it	ne
 801b8d8:	4603      	movne	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801b8da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b8de:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801b8e0:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 801b8e2:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801b8e4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 801b8e8:	4358      	muls	r0, r3
 801b8ea:	f3c1 1302 	ubfx	r3, r1, #4, #3
 801b8ee:	3301      	adds	r3, #1
 801b8f0:	fbb0 f0f3 	udiv	r0, r0, r3
 801b8f4:	0f53      	lsrs	r3, r2, #29
 801b8f6:	3301      	adds	r3, #1
 801b8f8:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 801b8fc:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 801b8fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801b902:	2bb0      	cmp	r3, #176	; 0xb0
 801b904:	bf28      	it	cs
 801b906:	23b0      	movcs	r3, #176	; 0xb0
 801b908:	4a04      	ldr	r2, [pc, #16]	; (801b91c <HAL_RCC_GetSysClockFreq+0x98>)
 801b90a:	091b      	lsrs	r3, r3, #4
 801b90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        break;
 801b910:	e7e3      	b.n	801b8da <HAL_RCC_GetSysClockFreq+0x56>
    switch (pllsource)
 801b912:	4b03      	ldr	r3, [pc, #12]	; (801b920 <HAL_RCC_GetSysClockFreq+0x9c>)
 801b914:	e7e1      	b.n	801b8da <HAL_RCC_GetSysClockFreq+0x56>
    sysclockfreq = HSI_VALUE;
 801b916:	4802      	ldr	r0, [pc, #8]	; (801b920 <HAL_RCC_GetSysClockFreq+0x9c>)
}
 801b918:	4770      	bx	lr
 801b91a:	bf00      	nop
 801b91c:	080272a4 	.word	0x080272a4
 801b920:	00f42400 	.word	0x00f42400
 801b924:	01e84800 	.word	0x01e84800

0801b928 <HAL_RCC_GetHCLKFreq>:
{
 801b928:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801b92a:	f7ff ffab 	bl	801b884 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801b92e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b932:	4a04      	ldr	r2, [pc, #16]	; (801b944 <HAL_RCC_GetHCLKFreq+0x1c>)
 801b934:	689b      	ldr	r3, [r3, #8]
 801b936:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801b93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 801b93e:	fbb0 f0f3 	udiv	r0, r0, r3
 801b942:	bd08      	pop	{r3, pc}
 801b944:	080272e4 	.word	0x080272e4

0801b948 <HAL_RCC_OscConfig>:
{
 801b948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 801b94a:	4604      	mov	r4, r0
 801b94c:	b908      	cbnz	r0, 801b952 <HAL_RCC_OscConfig+0xa>
          return HAL_ERROR;
 801b94e:	2001      	movs	r0, #1
 801b950:	e088      	b.n	801ba64 <HAL_RCC_OscConfig+0x11c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b952:	6803      	ldr	r3, [r0, #0]
 801b954:	069f      	lsls	r7, r3, #26
 801b956:	d531      	bpl.n	801b9bc <HAL_RCC_OscConfig+0x74>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801b958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b95c:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801b95e:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801b960:	f013 030c 	ands.w	r3, r3, #12
 801b964:	d005      	beq.n	801b972 <HAL_RCC_OscConfig+0x2a>
 801b966:	2b0c      	cmp	r3, #12
 801b968:	d161      	bne.n	801ba2e <HAL_RCC_OscConfig+0xe6>
 801b96a:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801b96e:	2b01      	cmp	r3, #1
 801b970:	d15d      	bne.n	801ba2e <HAL_RCC_OscConfig+0xe6>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b972:	f7ff fefc 	bl	801b76e <LL_RCC_MSI_IsReady>
 801b976:	b110      	cbz	r0, 801b97e <HAL_RCC_OscConfig+0x36>
 801b978:	69e3      	ldr	r3, [r4, #28]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d0e7      	beq.n	801b94e <HAL_RCC_OscConfig+0x6>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 801b97e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801b982:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b98a:	2bb0      	cmp	r3, #176	; 0xb0
 801b98c:	bf28      	it	cs
 801b98e:	23b0      	movcs	r3, #176	; 0xb0
 801b990:	4298      	cmp	r0, r3
 801b992:	d941      	bls.n	801ba18 <HAL_RCC_OscConfig+0xd0>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801b994:	f7ff ff02 	bl	801b79c <RCC_SetFlashLatencyFromMSIRange>
 801b998:	2800      	cmp	r0, #0
 801b99a:	d1d8      	bne.n	801b94e <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b99c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b99e:	f7ff feec 	bl	801b77a <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b9a2:	6a20      	ldr	r0, [r4, #32]
 801b9a4:	f7ff fef1 	bl	801b78a <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801b9a8:	f7ff ffbe 	bl	801b928 <HAL_RCC_GetHCLKFreq>
 801b9ac:	4bb4      	ldr	r3, [pc, #720]	; (801bc80 <HAL_RCC_OscConfig+0x338>)
 801b9ae:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801b9b0:	4bb4      	ldr	r3, [pc, #720]	; (801bc84 <HAL_RCC_OscConfig+0x33c>)
 801b9b2:	6818      	ldr	r0, [r3, #0]
 801b9b4:	f7fe facf 	bl	8019f56 <HAL_InitTick>
 801b9b8:	2800      	cmp	r0, #0
 801b9ba:	d1c8      	bne.n	801b94e <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b9bc:	6823      	ldr	r3, [r4, #0]
 801b9be:	07de      	lsls	r6, r3, #31
 801b9c0:	d462      	bmi.n	801ba88 <HAL_RCC_OscConfig+0x140>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b9c2:	6823      	ldr	r3, [r4, #0]
 801b9c4:	079d      	lsls	r5, r3, #30
 801b9c6:	f100 80a0 	bmi.w	801bb0a <HAL_RCC_OscConfig+0x1c2>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801b9ca:	6823      	ldr	r3, [r4, #0]
 801b9cc:	f013 0f18 	tst.w	r3, #24
 801b9d0:	f040 80e1 	bne.w	801bb96 <HAL_RCC_OscConfig+0x24e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b9d4:	6823      	ldr	r3, [r4, #0]
 801b9d6:	0758      	lsls	r0, r3, #29
 801b9d8:	f100 817d 	bmi.w	801bcd6 <HAL_RCC_OscConfig+0x38e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b9dc:	6823      	ldr	r3, [r4, #0]
 801b9de:	0658      	lsls	r0, r3, #25
 801b9e0:	f140 81e2 	bpl.w	801bda8 <HAL_RCC_OscConfig+0x460>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b9e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b9e6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	f000 81c9 	beq.w	801bd82 <HAL_RCC_OscConfig+0x43a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801b9f0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 801b9f4:	f043 0301 	orr.w	r3, r3, #1
 801b9f8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 801b9fc:	f7fe faad 	bl	8019f5a <HAL_GetTick>
 801ba00:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801ba02:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 801ba06:	0799      	lsls	r1, r3, #30
 801ba08:	f100 81ce 	bmi.w	801bda8 <HAL_RCC_OscConfig+0x460>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ba0c:	f7fe faa5 	bl	8019f5a <HAL_GetTick>
 801ba10:	1b83      	subs	r3, r0, r6
 801ba12:	2b02      	cmp	r3, #2
 801ba14:	d9f5      	bls.n	801ba02 <HAL_RCC_OscConfig+0xba>
 801ba16:	e024      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801ba18:	f7ff feaf 	bl	801b77a <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801ba1c:	6a20      	ldr	r0, [r4, #32]
 801ba1e:	f7ff feb4 	bl	801b78a <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801ba22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ba24:	f7ff feba 	bl	801b79c <RCC_SetFlashLatencyFromMSIRange>
 801ba28:	2800      	cmp	r0, #0
 801ba2a:	d0bd      	beq.n	801b9a8 <HAL_RCC_OscConfig+0x60>
 801ba2c:	e78f      	b.n	801b94e <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801ba2e:	69e2      	ldr	r2, [r4, #28]
 801ba30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ba34:	b1ba      	cbz	r2, 801ba66 <HAL_RCC_OscConfig+0x11e>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 801ba36:	681a      	ldr	r2, [r3, #0]
 801ba38:	f042 0201 	orr.w	r2, r2, #1
 801ba3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801ba3e:	f7fe fa8c 	bl	8019f5a <HAL_GetTick>
 801ba42:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 801ba44:	f7ff fe93 	bl	801b76e <LL_RCC_MSI_IsReady>
 801ba48:	b130      	cbz	r0, 801ba58 <HAL_RCC_OscConfig+0x110>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801ba4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ba4c:	f7ff fe95 	bl	801b77a <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801ba50:	6a20      	ldr	r0, [r4, #32]
 801ba52:	f7ff fe9a 	bl	801b78a <LL_RCC_MSI_SetCalibTrimming>
 801ba56:	e7b1      	b.n	801b9bc <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801ba58:	f7fe fa7f 	bl	8019f5a <HAL_GetTick>
 801ba5c:	1b40      	subs	r0, r0, r5
 801ba5e:	2802      	cmp	r0, #2
 801ba60:	d9f0      	bls.n	801ba44 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 801ba62:	2003      	movs	r0, #3
}
 801ba64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801ba66:	681a      	ldr	r2, [r3, #0]
 801ba68:	f022 0201 	bic.w	r2, r2, #1
 801ba6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801ba6e:	f7fe fa74 	bl	8019f5a <HAL_GetTick>
 801ba72:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 801ba74:	f7ff fe7b 	bl	801b76e <LL_RCC_MSI_IsReady>
 801ba78:	2800      	cmp	r0, #0
 801ba7a:	d09f      	beq.n	801b9bc <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801ba7c:	f7fe fa6d 	bl	8019f5a <HAL_GetTick>
 801ba80:	1b40      	subs	r0, r0, r5
 801ba82:	2802      	cmp	r0, #2
 801ba84:	d9f6      	bls.n	801ba74 <HAL_RCC_OscConfig+0x12c>
 801ba86:	e7ec      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801ba88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ba8c:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801ba8e:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801ba90:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801ba94:	2b08      	cmp	r3, #8
 801ba96:	d005      	beq.n	801baa4 <HAL_RCC_OscConfig+0x15c>
 801ba98:	2b0c      	cmp	r3, #12
 801ba9a:	d10b      	bne.n	801bab4 <HAL_RCC_OscConfig+0x16c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801ba9c:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801baa0:	2b03      	cmp	r3, #3
 801baa2:	d107      	bne.n	801bab4 <HAL_RCC_OscConfig+0x16c>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801baa4:	f7ff fe50 	bl	801b748 <LL_RCC_HSE_IsReady>
 801baa8:	2800      	cmp	r0, #0
 801baaa:	d08a      	beq.n	801b9c2 <HAL_RCC_OscConfig+0x7a>
 801baac:	6863      	ldr	r3, [r4, #4]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d187      	bne.n	801b9c2 <HAL_RCC_OscConfig+0x7a>
 801bab2:	e74c      	b.n	801b94e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bab4:	6861      	ldr	r1, [r4, #4]
 801bab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801baba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801babe:	681a      	ldr	r2, [r3, #0]
 801bac0:	d110      	bne.n	801bae4 <HAL_RCC_OscConfig+0x19c>
 801bac2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801bac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801bac8:	f7fe fa47 	bl	8019f5a <HAL_GetTick>
 801bacc:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 801bace:	f7ff fe3b 	bl	801b748 <LL_RCC_HSE_IsReady>
 801bad2:	2800      	cmp	r0, #0
 801bad4:	f47f af75 	bne.w	801b9c2 <HAL_RCC_OscConfig+0x7a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bad8:	f7fe fa3f 	bl	8019f5a <HAL_GetTick>
 801badc:	1b40      	subs	r0, r0, r5
 801bade:	2864      	cmp	r0, #100	; 0x64
 801bae0:	d9f5      	bls.n	801bace <HAL_RCC_OscConfig+0x186>
 801bae2:	e7be      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801bae4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801bae8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801baea:	2900      	cmp	r1, #0
 801baec:	d1ec      	bne.n	801bac8 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 801baee:	f7fe fa34 	bl	8019f5a <HAL_GetTick>
 801baf2:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 801baf4:	f7ff fe28 	bl	801b748 <LL_RCC_HSE_IsReady>
 801baf8:	2800      	cmp	r0, #0
 801bafa:	f43f af62 	beq.w	801b9c2 <HAL_RCC_OscConfig+0x7a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bafe:	f7fe fa2c 	bl	8019f5a <HAL_GetTick>
 801bb02:	1b40      	subs	r0, r0, r5
 801bb04:	2864      	cmp	r0, #100	; 0x64
 801bb06:	d9f5      	bls.n	801baf4 <HAL_RCC_OscConfig+0x1ac>
 801bb08:	e7ab      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801bb0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bb0e:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801bb10:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801bb12:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801bb16:	2b04      	cmp	r3, #4
 801bb18:	d005      	beq.n	801bb26 <HAL_RCC_OscConfig+0x1de>
 801bb1a:	2b0c      	cmp	r3, #12
 801bb1c:	d114      	bne.n	801bb48 <HAL_RCC_OscConfig+0x200>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801bb1e:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801bb22:	2b02      	cmp	r3, #2
 801bb24:	d110      	bne.n	801bb48 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bb26:	f7ff fe15 	bl	801b754 <LL_RCC_HSI_IsReady>
 801bb2a:	b118      	cbz	r0, 801bb34 <HAL_RCC_OscConfig+0x1ec>
 801bb2c:	68e3      	ldr	r3, [r4, #12]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	f43f af0d 	beq.w	801b94e <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 801bb34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801bb38:	6921      	ldr	r1, [r4, #16]
 801bb3a:	6853      	ldr	r3, [r2, #4]
 801bb3c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801bb40:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801bb44:	6053      	str	r3, [r2, #4]
}
 801bb46:	e740      	b.n	801b9ca <HAL_RCC_OscConfig+0x82>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801bb48:	68e2      	ldr	r2, [r4, #12]
 801bb4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bb4e:	b182      	cbz	r2, 801bb72 <HAL_RCC_OscConfig+0x22a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801bb50:	681a      	ldr	r2, [r3, #0]
 801bb52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bb56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801bb58:	f7fe f9ff 	bl	8019f5a <HAL_GetTick>
 801bb5c:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 801bb5e:	f7ff fdf9 	bl	801b754 <LL_RCC_HSI_IsReady>
 801bb62:	2800      	cmp	r0, #0
 801bb64:	d1e6      	bne.n	801bb34 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bb66:	f7fe f9f8 	bl	8019f5a <HAL_GetTick>
 801bb6a:	1b40      	subs	r0, r0, r5
 801bb6c:	2802      	cmp	r0, #2
 801bb6e:	d9f6      	bls.n	801bb5e <HAL_RCC_OscConfig+0x216>
 801bb70:	e777      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801bb72:	681a      	ldr	r2, [r3, #0]
 801bb74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bb78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801bb7a:	f7fe f9ee 	bl	8019f5a <HAL_GetTick>
 801bb7e:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 801bb80:	f7ff fde8 	bl	801b754 <LL_RCC_HSI_IsReady>
 801bb84:	2800      	cmp	r0, #0
 801bb86:	f43f af20 	beq.w	801b9ca <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bb8a:	f7fe f9e6 	bl	8019f5a <HAL_GetTick>
 801bb8e:	1b40      	subs	r0, r0, r5
 801bb90:	2802      	cmp	r0, #2
 801bb92:	d9f5      	bls.n	801bb80 <HAL_RCC_OscConfig+0x238>
 801bb94:	e765      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801bb96:	6962      	ldr	r2, [r4, #20]
 801bb98:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 801bb9c:	2a00      	cmp	r2, #0
 801bb9e:	d073      	beq.n	801bc88 <HAL_RCC_OscConfig+0x340>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801bba0:	06d9      	lsls	r1, r3, #27
 801bba2:	d547      	bpl.n	801bc34 <HAL_RCC_OscConfig+0x2ec>
        if (LL_RCC_LSI1_IsReady() == 0U)
 801bba4:	f7ff fddc 	bl	801b760 <LL_RCC_LSI1_IsReady>
 801bba8:	b358      	cbz	r0, 801bc02 <HAL_RCC_OscConfig+0x2ba>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801bbaa:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 801bbae:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bbb2:	f043 0304 	orr.w	r3, r3, #4
 801bbb6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 801bbba:	f7fe f9ce 	bl	8019f5a <HAL_GetTick>
 801bbbe:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801bbc0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bbc4:	071a      	lsls	r2, r3, #28
 801bbc6:	d52f      	bpl.n	801bc28 <HAL_RCC_OscConfig+0x2e0>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 801bbc8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bbcc:	69a2      	ldr	r2, [r4, #24]
 801bbce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801bbd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801bbd6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801bbda:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bbde:	f023 0301 	bic.w	r3, r3, #1
 801bbe2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 801bbe6:	f7fe f9b8 	bl	8019f5a <HAL_GetTick>
 801bbea:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 801bbec:	f7ff fdb8 	bl	801b760 <LL_RCC_LSI1_IsReady>
 801bbf0:	2800      	cmp	r0, #0
 801bbf2:	f43f aeef 	beq.w	801b9d4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801bbf6:	f7fe f9b0 	bl	8019f5a <HAL_GetTick>
 801bbfa:	1b40      	subs	r0, r0, r5
 801bbfc:	2802      	cmp	r0, #2
 801bbfe:	d9f5      	bls.n	801bbec <HAL_RCC_OscConfig+0x2a4>
 801bc00:	e72f      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801bc02:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bc06:	f043 0301 	orr.w	r3, r3, #1
 801bc0a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 801bc0e:	f7fe f9a4 	bl	8019f5a <HAL_GetTick>
 801bc12:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 801bc14:	f7ff fda4 	bl	801b760 <LL_RCC_LSI1_IsReady>
 801bc18:	2800      	cmp	r0, #0
 801bc1a:	d1c6      	bne.n	801bbaa <HAL_RCC_OscConfig+0x262>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801bc1c:	f7fe f99d 	bl	8019f5a <HAL_GetTick>
 801bc20:	1b40      	subs	r0, r0, r5
 801bc22:	2802      	cmp	r0, #2
 801bc24:	d9f6      	bls.n	801bc14 <HAL_RCC_OscConfig+0x2cc>
 801bc26:	e71c      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801bc28:	f7fe f997 	bl	8019f5a <HAL_GetTick>
 801bc2c:	1b83      	subs	r3, r0, r6
 801bc2e:	2b03      	cmp	r3, #3
 801bc30:	d9c6      	bls.n	801bbc0 <HAL_RCC_OscConfig+0x278>
 801bc32:	e716      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
 801bc34:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bc38:	f043 0301 	orr.w	r3, r3, #1
 801bc3c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 801bc40:	f7fe f98b 	bl	8019f5a <HAL_GetTick>
 801bc44:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 801bc46:	f7ff fd8b 	bl	801b760 <LL_RCC_LSI1_IsReady>
 801bc4a:	b198      	cbz	r0, 801bc74 <HAL_RCC_OscConfig+0x32c>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801bc4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801bc50:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801bc52:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801bc56:	f022 0204 	bic.w	r2, r2, #4
 801bc5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801bc5e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bc62:	071b      	lsls	r3, r3, #28
 801bc64:	f57f aeb6 	bpl.w	801b9d4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801bc68:	f7fe f977 	bl	8019f5a <HAL_GetTick>
 801bc6c:	1b80      	subs	r0, r0, r6
 801bc6e:	2803      	cmp	r0, #3
 801bc70:	d9f5      	bls.n	801bc5e <HAL_RCC_OscConfig+0x316>
 801bc72:	e6f6      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801bc74:	f7fe f971 	bl	8019f5a <HAL_GetTick>
 801bc78:	1b80      	subs	r0, r0, r6
 801bc7a:	2802      	cmp	r0, #2
 801bc7c:	d9e3      	bls.n	801bc46 <HAL_RCC_OscConfig+0x2fe>
 801bc7e:	e6f0      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
 801bc80:	2000104c 	.word	0x2000104c
 801bc84:	20001054 	.word	0x20001054
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801bc88:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bc8c:	f023 0304 	bic.w	r3, r3, #4
 801bc90:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 801bc94:	f7fe f961 	bl	8019f5a <HAL_GetTick>
 801bc98:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801bc9a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bc9e:	071f      	lsls	r7, r3, #28
 801bca0:	d413      	bmi.n	801bcca <HAL_RCC_OscConfig+0x382>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801bca2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801bca6:	f023 0301 	bic.w	r3, r3, #1
 801bcaa:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 801bcae:	f7fe f954 	bl	8019f5a <HAL_GetTick>
 801bcb2:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 801bcb4:	f7ff fd54 	bl	801b760 <LL_RCC_LSI1_IsReady>
 801bcb8:	2800      	cmp	r0, #0
 801bcba:	f43f ae8b 	beq.w	801b9d4 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801bcbe:	f7fe f94c 	bl	8019f5a <HAL_GetTick>
 801bcc2:	1b40      	subs	r0, r0, r5
 801bcc4:	2802      	cmp	r0, #2
 801bcc6:	d9f5      	bls.n	801bcb4 <HAL_RCC_OscConfig+0x36c>
 801bcc8:	e6cb      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801bcca:	f7fe f946 	bl	8019f5a <HAL_GetTick>
 801bcce:	1b83      	subs	r3, r0, r6
 801bcd0:	2b03      	cmp	r3, #3
 801bcd2:	d9e2      	bls.n	801bc9a <HAL_RCC_OscConfig+0x352>
 801bcd4:	e6c5      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801bcd6:	4d84      	ldr	r5, [pc, #528]	; (801bee8 <HAL_RCC_OscConfig+0x5a0>)
 801bcd8:	682b      	ldr	r3, [r5, #0]
 801bcda:	05d8      	lsls	r0, r3, #23
 801bcdc:	d51c      	bpl.n	801bd18 <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bcde:	68a3      	ldr	r3, [r4, #8]
 801bce0:	2b01      	cmp	r3, #1
 801bce2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 801bce6:	d125      	bne.n	801bd34 <HAL_RCC_OscConfig+0x3ec>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801bce8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801bcec:	f043 0301 	orr.w	r3, r3, #1
 801bcf0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 801bcf4:	f7fe f931 	bl	8019f5a <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801bcf8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 801bcfc:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bcfe:	f241 3688 	movw	r6, #5000	; 0x1388
 801bd02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bd06:	079a      	lsls	r2, r3, #30
 801bd08:	f53f ae68 	bmi.w	801b9dc <HAL_RCC_OscConfig+0x94>
 801bd0c:	f7fe f925 	bl	8019f5a <HAL_GetTick>
 801bd10:	1b43      	subs	r3, r0, r5
 801bd12:	42b3      	cmp	r3, r6
 801bd14:	d9f5      	bls.n	801bd02 <HAL_RCC_OscConfig+0x3ba>
 801bd16:	e6a4      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
      HAL_PWR_EnableBkUpAccess();
 801bd18:	f7ff fd06 	bl	801b728 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 801bd1c:	f7fe f91d 	bl	8019f5a <HAL_GetTick>
 801bd20:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801bd22:	682b      	ldr	r3, [r5, #0]
 801bd24:	05d9      	lsls	r1, r3, #23
 801bd26:	d4da      	bmi.n	801bcde <HAL_RCC_OscConfig+0x396>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bd28:	f7fe f917 	bl	8019f5a <HAL_GetTick>
 801bd2c:	1b80      	subs	r0, r0, r6
 801bd2e:	2802      	cmp	r0, #2
 801bd30:	d9f7      	bls.n	801bd22 <HAL_RCC_OscConfig+0x3da>
 801bd32:	e696      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bd34:	2b05      	cmp	r3, #5
 801bd36:	d106      	bne.n	801bd46 <HAL_RCC_OscConfig+0x3fe>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801bd38:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801bd3c:	f043 0304 	orr.w	r3, r3, #4
 801bd40:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 801bd44:	e7d0      	b.n	801bce8 <HAL_RCC_OscConfig+0x3a0>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801bd46:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 801bd4a:	f022 0201 	bic.w	r2, r2, #1
 801bd4e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801bd52:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 801bd56:	f022 0204 	bic.w	r2, r2, #4
 801bd5a:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d1c8      	bne.n	801bcf4 <HAL_RCC_OscConfig+0x3ac>
      tickstart = HAL_GetTick();
 801bd62:	f7fe f8fa 	bl	8019f5a <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bd66:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 801bd6a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801bd6c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801bd70:	079b      	lsls	r3, r3, #30
 801bd72:	f57f ae33 	bpl.w	801b9dc <HAL_RCC_OscConfig+0x94>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bd76:	f7fe f8f0 	bl	8019f5a <HAL_GetTick>
 801bd7a:	1b83      	subs	r3, r0, r6
 801bd7c:	42bb      	cmp	r3, r7
 801bd7e:	d9f5      	bls.n	801bd6c <HAL_RCC_OscConfig+0x424>
 801bd80:	e66f      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801bd82:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 801bd86:	f023 0301 	bic.w	r3, r3, #1
 801bd8a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 801bd8e:	f7fe f8e4 	bl	8019f5a <HAL_GetTick>
 801bd92:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801bd94:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 801bd98:	079a      	lsls	r2, r3, #30
 801bd9a:	d505      	bpl.n	801bda8 <HAL_RCC_OscConfig+0x460>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bd9c:	f7fe f8dd 	bl	8019f5a <HAL_GetTick>
 801bda0:	1b83      	subs	r3, r0, r6
 801bda2:	2b02      	cmp	r3, #2
 801bda4:	d9f6      	bls.n	801bd94 <HAL_RCC_OscConfig+0x44c>
 801bda6:	e65c      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801bda8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801bdaa:	b90a      	cbnz	r2, 801bdb0 <HAL_RCC_OscConfig+0x468>
  return HAL_OK;
 801bdac:	2000      	movs	r0, #0
 801bdae:	e659      	b.n	801ba64 <HAL_RCC_OscConfig+0x11c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801bdb0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801bdb4:	2a02      	cmp	r2, #2
 801bdb6:	68a9      	ldr	r1, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801bdb8:	68eb      	ldr	r3, [r5, #12]
 801bdba:	f001 010c 	and.w	r1, r1, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801bdbe:	d174      	bne.n	801beaa <HAL_RCC_OscConfig+0x562>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bdc0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bdc2:	f003 0203 	and.w	r2, r3, #3
 801bdc6:	4282      	cmp	r2, r0
 801bdc8:	d118      	bne.n	801bdfc <HAL_RCC_OscConfig+0x4b4>
 801bdca:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801bdcc:	f003 0270 	and.w	r2, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bdd0:	4282      	cmp	r2, r0
 801bdd2:	d113      	bne.n	801bdfc <HAL_RCC_OscConfig+0x4b4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801bdd4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801bdd6:	f3c3 2206 	ubfx	r2, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801bdda:	4282      	cmp	r2, r0
 801bddc:	d10e      	bne.n	801bdfc <HAL_RCC_OscConfig+0x4b4>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801bdde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801bde0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801bde4:	4282      	cmp	r2, r0
 801bde6:	d109      	bne.n	801bdfc <HAL_RCC_OscConfig+0x4b4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801bde8:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801bdea:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801bdee:	4282      	cmp	r2, r0
 801bdf0:	d104      	bne.n	801bdfc <HAL_RCC_OscConfig+0x4b4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801bdf2:	6c62      	ldr	r2, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801bdf4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801bdf8:	4293      	cmp	r3, r2
 801bdfa:	d03f      	beq.n	801be7c <HAL_RCC_OscConfig+0x534>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bdfc:	290c      	cmp	r1, #12
 801bdfe:	f43f ada6 	beq.w	801b94e <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801be02:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 801be06:	682b      	ldr	r3, [r5, #0]
 801be08:	015b      	lsls	r3, r3, #5
 801be0a:	f53f ada0 	bmi.w	801b94e <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801be0e:	682b      	ldr	r3, [r5, #0]
 801be10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801be14:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 801be16:	f7fe f8a0 	bl	8019f5a <HAL_GetTick>
 801be1a:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801be1c:	682b      	ldr	r3, [r5, #0]
 801be1e:	019f      	lsls	r7, r3, #6
 801be20:	d426      	bmi.n	801be70 <HAL_RCC_OscConfig+0x528>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801be22:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 801be26:	68e9      	ldr	r1, [r5, #12]
 801be28:	4313      	orrs	r3, r2
 801be2a:	4a30      	ldr	r2, [pc, #192]	; (801beec <HAL_RCC_OscConfig+0x5a4>)
 801be2c:	400a      	ands	r2, r1
 801be2e:	4313      	orrs	r3, r2
 801be30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801be32:	4313      	orrs	r3, r2
 801be34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801be36:	4313      	orrs	r3, r2
 801be38:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801be3a:	4313      	orrs	r3, r2
 801be3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801be3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801be42:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 801be44:	682b      	ldr	r3, [r5, #0]
 801be46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801be4a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801be4c:	68eb      	ldr	r3, [r5, #12]
 801be4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801be52:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 801be54:	f7fe f881 	bl	8019f5a <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801be58:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 801be5c:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801be5e:	682b      	ldr	r3, [r5, #0]
 801be60:	0198      	lsls	r0, r3, #6
 801be62:	d4a3      	bmi.n	801bdac <HAL_RCC_OscConfig+0x464>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801be64:	f7fe f879 	bl	8019f5a <HAL_GetTick>
 801be68:	1b00      	subs	r0, r0, r4
 801be6a:	2802      	cmp	r0, #2
 801be6c:	d9f7      	bls.n	801be5e <HAL_RCC_OscConfig+0x516>
 801be6e:	e5f8      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801be70:	f7fe f873 	bl	8019f5a <HAL_GetTick>
 801be74:	1b80      	subs	r0, r0, r6
 801be76:	2802      	cmp	r0, #2
 801be78:	d9d0      	bls.n	801be1c <HAL_RCC_OscConfig+0x4d4>
 801be7a:	e5f2      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801be7c:	682b      	ldr	r3, [r5, #0]
 801be7e:	0199      	lsls	r1, r3, #6
 801be80:	d494      	bmi.n	801bdac <HAL_RCC_OscConfig+0x464>
 801be82:	682b      	ldr	r3, [r5, #0]
 801be84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801be88:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801be8a:	68eb      	ldr	r3, [r5, #12]
 801be8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801be90:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 801be92:	f7fe f862 	bl	8019f5a <HAL_GetTick>
 801be96:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801be98:	682b      	ldr	r3, [r5, #0]
 801be9a:	019a      	lsls	r2, r3, #6
 801be9c:	d486      	bmi.n	801bdac <HAL_RCC_OscConfig+0x464>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801be9e:	f7fe f85c 	bl	8019f5a <HAL_GetTick>
 801bea2:	1b00      	subs	r0, r0, r4
 801bea4:	2802      	cmp	r0, #2
 801bea6:	d9f7      	bls.n	801be98 <HAL_RCC_OscConfig+0x550>
 801bea8:	e5db      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801beaa:	290c      	cmp	r1, #12
 801beac:	f43f ad4f 	beq.w	801b94e <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801beb0:	682b      	ldr	r3, [r5, #0]
 801beb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801beb6:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 801beb8:	68eb      	ldr	r3, [r5, #12]
 801beba:	f023 0303 	bic.w	r3, r3, #3
 801bebe:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 801bec0:	68eb      	ldr	r3, [r5, #12]
 801bec2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 801bec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801beca:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 801becc:	f7fe f845 	bl	8019f5a <HAL_GetTick>
 801bed0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801bed2:	682b      	ldr	r3, [r5, #0]
 801bed4:	019b      	lsls	r3, r3, #6
 801bed6:	f57f af69 	bpl.w	801bdac <HAL_RCC_OscConfig+0x464>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801beda:	f7fe f83e 	bl	8019f5a <HAL_GetTick>
 801bede:	1b00      	subs	r0, r0, r4
 801bee0:	2802      	cmp	r0, #2
 801bee2:	d9f6      	bls.n	801bed2 <HAL_RCC_OscConfig+0x58a>
 801bee4:	e5bd      	b.n	801ba62 <HAL_RCC_OscConfig+0x11a>
 801bee6:	bf00      	nop
 801bee8:	58000400 	.word	0x58000400
 801beec:	11c1808c 	.word	0x11c1808c

0801bef0 <HAL_RCC_ClockConfig>:
{
 801bef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bef4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 801bef6:	4604      	mov	r4, r0
 801bef8:	b910      	cbnz	r0, 801bf00 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 801befa:	2001      	movs	r0, #1
}
 801befc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801bf00:	4e75      	ldr	r6, [pc, #468]	; (801c0d8 <HAL_RCC_ClockConfig+0x1e8>)
 801bf02:	6833      	ldr	r3, [r6, #0]
 801bf04:	f003 0307 	and.w	r3, r3, #7
 801bf08:	428b      	cmp	r3, r1
 801bf0a:	d316      	bcc.n	801bf3a <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bf0c:	6823      	ldr	r3, [r4, #0]
 801bf0e:	0798      	lsls	r0, r3, #30
 801bf10:	d527      	bpl.n	801bf62 <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801bf12:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 801bf16:	68a2      	ldr	r2, [r4, #8]
 801bf18:	68b3      	ldr	r3, [r6, #8]
 801bf1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801bf1e:	4313      	orrs	r3, r2
 801bf20:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 801bf22:	f7fe f81a 	bl	8019f5a <HAL_GetTick>
 801bf26:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 801bf28:	68b3      	ldr	r3, [r6, #8]
 801bf2a:	03d9      	lsls	r1, r3, #15
 801bf2c:	d419      	bmi.n	801bf62 <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801bf2e:	f7fe f814 	bl	8019f5a <HAL_GetTick>
 801bf32:	1bc3      	subs	r3, r0, r7
 801bf34:	2b02      	cmp	r3, #2
 801bf36:	d9f7      	bls.n	801bf28 <HAL_RCC_ClockConfig+0x38>
 801bf38:	e011      	b.n	801bf5e <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bf3a:	6833      	ldr	r3, [r6, #0]
 801bf3c:	f023 0307 	bic.w	r3, r3, #7
 801bf40:	430b      	orrs	r3, r1
 801bf42:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 801bf44:	f7fe f809 	bl	8019f5a <HAL_GetTick>
 801bf48:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bf4a:	6833      	ldr	r3, [r6, #0]
 801bf4c:	f003 0307 	and.w	r3, r3, #7
 801bf50:	42ab      	cmp	r3, r5
 801bf52:	d0db      	beq.n	801bf0c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801bf54:	f7fe f801 	bl	8019f5a <HAL_GetTick>
 801bf58:	1bc0      	subs	r0, r0, r7
 801bf5a:	2802      	cmp	r0, #2
 801bf5c:	d9f5      	bls.n	801bf4a <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 801bf5e:	2003      	movs	r0, #3
 801bf60:	e7cc      	b.n	801befc <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 801bf62:	6823      	ldr	r3, [r4, #0]
 801bf64:	069a      	lsls	r2, r3, #26
 801bf66:	d516      	bpl.n	801bf96 <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801bf68:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 801bf6c:	6962      	ldr	r2, [r4, #20]
 801bf6e:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 801bf72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801bf76:	4313      	orrs	r3, r2
 801bf78:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 801bf7c:	f7fd ffed 	bl	8019f5a <HAL_GetTick>
 801bf80:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 801bf82:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 801bf86:	039b      	lsls	r3, r3, #14
 801bf88:	d405      	bmi.n	801bf96 <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801bf8a:	f7fd ffe6 	bl	8019f5a <HAL_GetTick>
 801bf8e:	1bc3      	subs	r3, r0, r7
 801bf90:	2b02      	cmp	r3, #2
 801bf92:	d9f6      	bls.n	801bf82 <HAL_RCC_ClockConfig+0x92>
 801bf94:	e7e3      	b.n	801bf5e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801bf96:	6823      	ldr	r3, [r4, #0]
 801bf98:	0658      	lsls	r0, r3, #25
 801bf9a:	d517      	bpl.n	801bfcc <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801bf9c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 801bfa0:	69a2      	ldr	r2, [r4, #24]
 801bfa2:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 801bfa6:	f023 030f 	bic.w	r3, r3, #15
 801bfaa:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 801bfae:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 801bfb2:	f7fd ffd2 	bl	8019f5a <HAL_GetTick>
 801bfb6:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801bfb8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 801bfbc:	03d9      	lsls	r1, r3, #15
 801bfbe:	d405      	bmi.n	801bfcc <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801bfc0:	f7fd ffcb 	bl	8019f5a <HAL_GetTick>
 801bfc4:	1bc3      	subs	r3, r0, r7
 801bfc6:	2b02      	cmp	r3, #2
 801bfc8:	d9f6      	bls.n	801bfb8 <HAL_RCC_ClockConfig+0xc8>
 801bfca:	e7c8      	b.n	801bf5e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bfcc:	6823      	ldr	r3, [r4, #0]
 801bfce:	075a      	lsls	r2, r3, #29
 801bfd0:	d513      	bpl.n	801bffa <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801bfd2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 801bfd6:	68e2      	ldr	r2, [r4, #12]
 801bfd8:	68b3      	ldr	r3, [r6, #8]
 801bfda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801bfde:	4313      	orrs	r3, r2
 801bfe0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 801bfe2:	f7fd ffba 	bl	8019f5a <HAL_GetTick>
 801bfe6:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 801bfe8:	68b3      	ldr	r3, [r6, #8]
 801bfea:	039b      	lsls	r3, r3, #14
 801bfec:	d405      	bmi.n	801bffa <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801bfee:	f7fd ffb4 	bl	8019f5a <HAL_GetTick>
 801bff2:	1bc3      	subs	r3, r0, r7
 801bff4:	2b02      	cmp	r3, #2
 801bff6:	d9f7      	bls.n	801bfe8 <HAL_RCC_ClockConfig+0xf8>
 801bff8:	e7b1      	b.n	801bf5e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bffa:	6823      	ldr	r3, [r4, #0]
 801bffc:	0718      	lsls	r0, r3, #28
 801bffe:	d514      	bpl.n	801c02a <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801c000:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801c004:	6922      	ldr	r2, [r4, #16]
 801c006:	68b3      	ldr	r3, [r6, #8]
 801c008:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 801c00c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c010:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 801c012:	f7fd ffa2 	bl	8019f5a <HAL_GetTick>
 801c016:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 801c018:	68b3      	ldr	r3, [r6, #8]
 801c01a:	0359      	lsls	r1, r3, #13
 801c01c:	d405      	bmi.n	801c02a <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801c01e:	f7fd ff9c 	bl	8019f5a <HAL_GetTick>
 801c022:	1bc3      	subs	r3, r0, r7
 801c024:	2b02      	cmp	r3, #2
 801c026:	d9f7      	bls.n	801c018 <HAL_RCC_ClockConfig+0x128>
 801c028:	e799      	b.n	801bf5e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c02a:	6823      	ldr	r3, [r4, #0]
 801c02c:	07da      	lsls	r2, r3, #31
 801c02e:	d40f      	bmi.n	801c050 <HAL_RCC_ClockConfig+0x160>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c030:	4c29      	ldr	r4, [pc, #164]	; (801c0d8 <HAL_RCC_ClockConfig+0x1e8>)
 801c032:	6823      	ldr	r3, [r4, #0]
 801c034:	f003 0307 	and.w	r3, r3, #7
 801c038:	42ab      	cmp	r3, r5
 801c03a:	d839      	bhi.n	801c0b0 <HAL_RCC_ClockConfig+0x1c0>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801c03c:	f7ff fc74 	bl	801b928 <HAL_RCC_GetHCLKFreq>
 801c040:	4b26      	ldr	r3, [pc, #152]	; (801c0dc <HAL_RCC_ClockConfig+0x1ec>)
 801c042:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 801c044:	f7fe fb38 	bl	801a6b8 <HAL_GetTickPrio>
}
 801c048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 801c04c:	f7fd bf83 	b.w	8019f56 <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c050:	6863      	ldr	r3, [r4, #4]
 801c052:	2b02      	cmp	r3, #2
 801c054:	d103      	bne.n	801c05e <HAL_RCC_ClockConfig+0x16e>
      if (LL_RCC_HSE_IsReady() == 0U)
 801c056:	f7ff fb77 	bl	801b748 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 801c05a:	b940      	cbnz	r0, 801c06e <HAL_RCC_ClockConfig+0x17e>
 801c05c:	e74d      	b.n	801befa <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c05e:	2b03      	cmp	r3, #3
 801c060:	d11f      	bne.n	801c0a2 <HAL_RCC_ClockConfig+0x1b2>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801c062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c066:	681b      	ldr	r3, [r3, #0]
 801c068:	019b      	lsls	r3, r3, #6
 801c06a:	f57f af46 	bpl.w	801befa <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801c06e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 801c072:	6862      	ldr	r2, [r4, #4]
 801c074:	68b3      	ldr	r3, [r6, #8]
 801c076:	f023 0303 	bic.w	r3, r3, #3
 801c07a:	4313      	orrs	r3, r2
 801c07c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 801c07e:	f7fd ff6c 	bl	8019f5a <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c082:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 801c086:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801c088:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c08a:	6862      	ldr	r2, [r4, #4]
 801c08c:	f003 030c 	and.w	r3, r3, #12
 801c090:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801c094:	d0cc      	beq.n	801c030 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c096:	f7fd ff60 	bl	8019f5a <HAL_GetTick>
 801c09a:	1bc0      	subs	r0, r0, r7
 801c09c:	4540      	cmp	r0, r8
 801c09e:	d9f3      	bls.n	801c088 <HAL_RCC_ClockConfig+0x198>
 801c0a0:	e75d      	b.n	801bf5e <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801c0a2:	b913      	cbnz	r3, 801c0aa <HAL_RCC_ClockConfig+0x1ba>
      if (LL_RCC_MSI_IsReady() == 0U)
 801c0a4:	f7ff fb63 	bl	801b76e <LL_RCC_MSI_IsReady>
 801c0a8:	e7d7      	b.n	801c05a <HAL_RCC_ClockConfig+0x16a>
      if (LL_RCC_HSI_IsReady() == 0U)
 801c0aa:	f7ff fb53 	bl	801b754 <LL_RCC_HSI_IsReady>
 801c0ae:	e7d4      	b.n	801c05a <HAL_RCC_ClockConfig+0x16a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c0b0:	6823      	ldr	r3, [r4, #0]
 801c0b2:	f023 0307 	bic.w	r3, r3, #7
 801c0b6:	432b      	orrs	r3, r5
 801c0b8:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 801c0ba:	f7fd ff4e 	bl	8019f5a <HAL_GetTick>
 801c0be:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c0c0:	6823      	ldr	r3, [r4, #0]
 801c0c2:	f003 0307 	and.w	r3, r3, #7
 801c0c6:	42ab      	cmp	r3, r5
 801c0c8:	d0b8      	beq.n	801c03c <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801c0ca:	f7fd ff46 	bl	8019f5a <HAL_GetTick>
 801c0ce:	1b80      	subs	r0, r0, r6
 801c0d0:	2802      	cmp	r0, #2
 801c0d2:	d9f5      	bls.n	801c0c0 <HAL_RCC_ClockConfig+0x1d0>
 801c0d4:	e743      	b.n	801bf5e <HAL_RCC_ClockConfig+0x6e>
 801c0d6:	bf00      	nop
 801c0d8:	58004000 	.word	0x58004000
 801c0dc:	2000104c 	.word	0x2000104c

0801c0e0 <HAL_RCC_GetPCLK1Freq>:
{
 801c0e0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 801c0e2:	f7ff fc21 	bl	801b928 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801c0e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c0ea:	4a05      	ldr	r2, [pc, #20]	; (801c100 <HAL_RCC_GetPCLK1Freq+0x20>)
 801c0ec:	689b      	ldr	r3, [r3, #8]
 801c0ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 801c0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c0f6:	f003 031f 	and.w	r3, r3, #31
}
 801c0fa:	40d8      	lsrs	r0, r3
 801c0fc:	bd08      	pop	{r3, pc}
 801c0fe:	bf00      	nop
 801c100:	08027384 	.word	0x08027384

0801c104 <HAL_RCC_GetPCLK2Freq>:
{
 801c104:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801c106:	f7ff fc0f 	bl	801b928 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801c10a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c10e:	4a05      	ldr	r2, [pc, #20]	; (801c124 <HAL_RCC_GetPCLK2Freq+0x20>)
 801c110:	689b      	ldr	r3, [r3, #8]
 801c112:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 801c116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c11a:	f003 031f 	and.w	r3, r3, #31
}
 801c11e:	40d8      	lsrs	r0, r3
 801c120:	bd08      	pop	{r3, pc}
 801c122:	bf00      	nop
 801c124:	08027384 	.word	0x08027384

0801c128 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801c128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c12c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 801c130:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801c134:	4770      	bx	lr

0801c136 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801c136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c13a:	0902      	lsrs	r2, r0, #4
 801c13c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801c140:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 801c144:	0100      	lsls	r0, r0, #4
 801c146:	ea23 0302 	bic.w	r3, r3, r2
 801c14a:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 801c14e:	4318      	orrs	r0, r3
 801c150:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 801c154:	4770      	bx	lr

0801c156 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801c156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c15a:	6813      	ldr	r3, [r2, #0]
 801c15c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801c160:	6013      	str	r3, [r2, #0]
}
 801c162:	4770      	bx	lr

0801c164 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801c164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c168:	6813      	ldr	r3, [r2, #0]
 801c16a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801c16e:	6013      	str	r3, [r2, #0]
}
 801c170:	4770      	bx	lr

0801c172 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801c172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c176:	6818      	ldr	r0, [r3, #0]
}
 801c178:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 801c17c:	4770      	bx	lr

0801c17e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c17e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801c180:	6805      	ldr	r5, [r0, #0]
 801c182:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 801c186:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801c188:	d00a      	beq.n	801c1a0 <HAL_RCCEx_PeriphCLKConfig+0x22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801c18a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c18c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c190:	f000 80d9 	beq.w	801c346 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 801c194:	f200 80c5 	bhi.w	801c322 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 801c198:	2b00      	cmp	r3, #0
 801c19a:	f000 80db 	beq.w	801c354 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 801c19e:	2501      	movs	r5, #1
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c1a0:	6823      	ldr	r3, [r4, #0]
 801c1a2:	0518      	lsls	r0, r3, #20
 801c1a4:	d515      	bpl.n	801c1d2 <HAL_RCCEx_PeriphCLKConfig+0x54>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801c1a6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 801c1aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c1ac:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 801c1b0:	f407 7740 	and.w	r7, r7, #768	; 0x300
 801c1b4:	42bb      	cmp	r3, r7
 801c1b6:	d00c      	beq.n	801c1d2 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801c1b8:	f7ff fab6 	bl	801b728 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801c1bc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 801c1c0:	2f00      	cmp	r7, #0
 801c1c2:	f040 80fb 	bne.w	801c3bc <HAL_RCCEx_PeriphCLKConfig+0x23e>
 801c1c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801c1c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c1cc:	4313      	orrs	r3, r2
 801c1ce:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c1d2:	6823      	ldr	r3, [r4, #0]
 801c1d4:	07da      	lsls	r2, r3, #31
 801c1d6:	d509      	bpl.n	801c1ec <HAL_RCCEx_PeriphCLKConfig+0x6e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801c1d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c1dc:	69a0      	ldr	r0, [r4, #24]
 801c1de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 801c1e2:	f022 0203 	bic.w	r2, r2, #3
 801c1e6:	4302      	orrs	r2, r0
 801c1e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c1ec:	079f      	lsls	r7, r3, #30
 801c1ee:	d509      	bpl.n	801c204 <HAL_RCCEx_PeriphCLKConfig+0x86>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801c1f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c1f4:	69e0      	ldr	r0, [r4, #28]
 801c1f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 801c1fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801c1fe:	4302      	orrs	r2, r0
 801c200:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c204:	06de      	lsls	r6, r3, #27
 801c206:	d50c      	bpl.n	801c222 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c208:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801c20a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 801c20e:	0c31      	lsrs	r1, r6, #16
 801c210:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 801c214:	0409      	lsls	r1, r1, #16
 801c216:	ea22 0201 	bic.w	r2, r2, r1
 801c21a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 801c21e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801c222:	0698      	lsls	r0, r3, #26
 801c224:	d50c      	bpl.n	801c240 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801c226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c228:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 801c22c:	0c31      	lsrs	r1, r6, #16
 801c22e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 801c232:	0409      	lsls	r1, r1, #16
 801c234:	ea22 0201 	bic.w	r2, r2, r1
 801c238:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 801c23c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c240:	0759      	lsls	r1, r3, #29
 801c242:	d502      	bpl.n	801c24a <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c244:	6a20      	ldr	r0, [r4, #32]
 801c246:	f7ff ff76 	bl	801c136 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c24a:	6823      	ldr	r3, [r4, #0]
 801c24c:	071a      	lsls	r2, r3, #28
 801c24e:	d502      	bpl.n	801c256 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c250:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c252:	f7ff ff70 	bl	801c136 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c256:	6823      	ldr	r3, [r4, #0]
 801c258:	05db      	lsls	r3, r3, #23
 801c25a:	d511      	bpl.n	801c280 <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801c25c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c262:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 801c266:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 801c26a:	430b      	orrs	r3, r1

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801c26c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 801c270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 801c274:	f040 80ca 	bne.w	801c40c <HAL_RCCEx_PeriphCLKConfig+0x28e>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801c278:	68d3      	ldr	r3, [r2, #12]
 801c27a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c27e:	60d3      	str	r3, [r2, #12]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801c280:	6826      	ldr	r6, [r4, #0]
 801c282:	05b7      	lsls	r7, r6, #22
 801c284:	d51a      	bpl.n	801c2bc <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801c286:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801c288:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801c28c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c290:	d003      	beq.n	801c29a <HAL_RCCEx_PeriphCLKConfig+0x11c>
 801c292:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 801c296:	f040 80f1 	bne.w	801c47c <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801c29a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 801c29e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 801c2a2:	4311      	orrs	r1, r2

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801c2a4:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801c2a8:	bf08      	it	eq
 801c2aa:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801c2ae:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 801c2b2:	bf02      	ittt	eq
 801c2b4:	68d3      	ldreq	r3, [r2, #12]
 801c2b6:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 801c2ba:	60d3      	streq	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801c2bc:	0570      	lsls	r0, r6, #21
 801c2be:	d511      	bpl.n	801c2e4 <HAL_RCCEx_PeriphCLKConfig+0x166>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801c2c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801c2c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801c2c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 801c2ca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 801c2ce:	430b      	orrs	r3, r1

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801c2d0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 801c2d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 801c2d8:	f040 80de 	bne.w	801c498 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801c2dc:	68d3      	ldr	r3, [r2, #12]
 801c2de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c2e2:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801c2e4:	6822      	ldr	r2, [r4, #0]
 801c2e6:	04d1      	lsls	r1, r2, #19
 801c2e8:	d509      	bpl.n	801c2fe <HAL_RCCEx_PeriphCLKConfig+0x180>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801c2ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c2ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801c2f0:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 801c2f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801c2f8:	4303      	orrs	r3, r0
 801c2fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801c2fe:	0493      	lsls	r3, r2, #18
 801c300:	d50d      	bpl.n	801c31e <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801c302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c306:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801c308:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801c30a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 801c30e:	430b      	orrs	r3, r1
 801c310:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801c312:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801c314:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c316:	f023 0303 	bic.w	r3, r3, #3
 801c31a:	430b      	orrs	r3, r1
 801c31c:	6253      	str	r3, [r2, #36]	; 0x24
  }
#endif


  return status;
}
 801c31e:	4628      	mov	r0, r5
 801c320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->Sai1ClockSelection)
 801c322:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 801c326:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c32a:	f47f af38 	bne.w	801c19e <HAL_RCCEx_PeriphCLKConfig+0x20>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 801c32e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c332:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c334:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 801c338:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 801c33c:	430b      	orrs	r3, r1
 801c33e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 801c342:	2500      	movs	r5, #0
 801c344:	e72c      	b.n	801c1a0 <HAL_RCCEx_PeriphCLKConfig+0x22>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801c346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c34a:	68d3      	ldr	r3, [r2, #12]
 801c34c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c350:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 801c352:	e7ec      	b.n	801c32e <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801c354:	f7ff ff06 	bl	801c164 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801c358:	f7fd fdff 	bl	8019f5a <HAL_GetTick>
 801c35c:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c35e:	f7ff ff08 	bl	801c172 <LL_RCC_PLLSAI1_IsReady>
 801c362:	b9a0      	cbnz	r0, 801c38e <HAL_RCCEx_PeriphCLKConfig+0x210>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801c364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c368:	6861      	ldr	r1, [r4, #4]
 801c36a:	6913      	ldr	r3, [r2, #16]
 801c36c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801c370:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801c374:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801c376:	6913      	ldr	r3, [r2, #16]
 801c378:	68a1      	ldr	r1, [r4, #8]
 801c37a:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 801c37e:	430b      	orrs	r3, r1
 801c380:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801c382:	f7ff fee8 	bl	801c156 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c386:	f7fd fde8 	bl	8019f5a <HAL_GetTick>
 801c38a:	4605      	mov	r5, r0

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c38c:	e00b      	b.n	801c3a6 <HAL_RCCEx_PeriphCLKConfig+0x228>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c38e:	f7fd fde4 	bl	8019f5a <HAL_GetTick>
 801c392:	1b40      	subs	r0, r0, r5
 801c394:	2802      	cmp	r0, #2
 801c396:	d9e2      	bls.n	801c35e <HAL_RCCEx_PeriphCLKConfig+0x1e0>
{
 801c398:	2503      	movs	r5, #3
 801c39a:	e701      	b.n	801c1a0 <HAL_RCCEx_PeriphCLKConfig+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c39c:	f7fd fddd 	bl	8019f5a <HAL_GetTick>
 801c3a0:	1b40      	subs	r0, r0, r5
 801c3a2:	2802      	cmp	r0, #2
 801c3a4:	d8f8      	bhi.n	801c398 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c3a6:	f7ff fee4 	bl	801c172 <LL_RCC_PLLSAI1_IsReady>
 801c3aa:	2801      	cmp	r0, #1
 801c3ac:	d1f6      	bne.n	801c39c <HAL_RCCEx_PeriphCLKConfig+0x21e>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801c3ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c3b2:	6961      	ldr	r1, [r4, #20]
 801c3b4:	6913      	ldr	r3, [r2, #16]
 801c3b6:	430b      	orrs	r3, r1
 801c3b8:	6113      	str	r3, [r2, #16]
    if (ret == HAL_OK)
 801c3ba:	e7b8      	b.n	801c32e <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801c3bc:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 801c3c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801c3c4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801c3c8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 801c3cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801c3d0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801c3d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801c3d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c3da:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 801c3dc:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801c3e0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801c3e4:	07d9      	lsls	r1, r3, #31
 801c3e6:	f57f aef4 	bpl.w	801c1d2 <HAL_RCCEx_PeriphCLKConfig+0x54>
          tickstart = HAL_GetTick();
 801c3ea:	f7fd fdb6 	bl	8019f5a <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c3ee:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 801c3f2:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 801c3f4:	f7ff fe98 	bl	801c128 <LL_RCC_LSE_IsReady>
 801c3f8:	2801      	cmp	r0, #1
 801c3fa:	f43f aeea 	beq.w	801c1d2 <HAL_RCCEx_PeriphCLKConfig+0x54>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c3fe:	f7fd fdac 	bl	8019f5a <HAL_GetTick>
 801c402:	1b80      	subs	r0, r0, r6
 801c404:	42b8      	cmp	r0, r7
 801c406:	d9f5      	bls.n	801c3f4 <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 801c408:	2503      	movs	r5, #3
 801c40a:	e6e2      	b.n	801c1d2 <HAL_RCCEx_PeriphCLKConfig+0x54>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801c40c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 801c410:	f47f af36 	bne.w	801c280 <HAL_RCCEx_PeriphCLKConfig+0x102>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801c414:	f7ff fea6 	bl	801c164 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801c418:	f7fd fd9f 	bl	8019f5a <HAL_GetTick>
 801c41c:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c41e:	f7ff fea8 	bl	801c172 <LL_RCC_PLLSAI1_IsReady>
 801c422:	b9a0      	cbnz	r0, 801c44e <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801c424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c428:	6861      	ldr	r1, [r4, #4]
 801c42a:	6913      	ldr	r3, [r2, #16]
 801c42c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801c430:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801c434:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801c436:	6913      	ldr	r3, [r2, #16]
 801c438:	68e1      	ldr	r1, [r4, #12]
 801c43a:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 801c43e:	430b      	orrs	r3, r1
 801c440:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801c442:	f7ff fe88 	bl	801c156 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c446:	f7fd fd88 	bl	8019f5a <HAL_GetTick>
 801c44a:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c44c:	e00b      	b.n	801c466 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c44e:	f7fd fd84 	bl	8019f5a <HAL_GetTick>
 801c452:	1b80      	subs	r0, r0, r6
 801c454:	2802      	cmp	r0, #2
 801c456:	d9e2      	bls.n	801c41e <HAL_RCCEx_PeriphCLKConfig+0x2a0>
              ret = HAL_TIMEOUT;
 801c458:	2503      	movs	r5, #3
 801c45a:	e711      	b.n	801c280 <HAL_RCCEx_PeriphCLKConfig+0x102>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c45c:	f7fd fd7d 	bl	8019f5a <HAL_GetTick>
 801c460:	1b80      	subs	r0, r0, r6
 801c462:	2802      	cmp	r0, #2
 801c464:	d8f8      	bhi.n	801c458 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c466:	f7ff fe84 	bl	801c172 <LL_RCC_PLLSAI1_IsReady>
 801c46a:	2801      	cmp	r0, #1
 801c46c:	d1f6      	bne.n	801c45c <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801c46e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c472:	6961      	ldr	r1, [r4, #20]
 801c474:	6913      	ldr	r3, [r2, #16]
 801c476:	430b      	orrs	r3, r1
 801c478:	6113      	str	r3, [r2, #16]
    if (ret != HAL_OK)
 801c47a:	e701      	b.n	801c280 <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801c47c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 801c480:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 801c484:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801c488:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801c48c:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 801c490:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 801c494:	4301      	orrs	r1, r0
 801c496:	e705      	b.n	801c2a4 <HAL_RCCEx_PeriphCLKConfig+0x126>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801c498:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 801c49c:	f47f af22 	bne.w	801c2e4 <HAL_RCCEx_PeriphCLKConfig+0x166>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801c4a0:	f7ff fe60 	bl	801c164 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801c4a4:	f7fd fd59 	bl	8019f5a <HAL_GetTick>
 801c4a8:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c4aa:	f7ff fe62 	bl	801c172 <LL_RCC_PLLSAI1_IsReady>
 801c4ae:	b9a0      	cbnz	r0, 801c4da <HAL_RCCEx_PeriphCLKConfig+0x35c>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801c4b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c4b4:	6861      	ldr	r1, [r4, #4]
 801c4b6:	6913      	ldr	r3, [r2, #16]
 801c4b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801c4bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801c4c0:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801c4c2:	6913      	ldr	r3, [r2, #16]
 801c4c4:	6921      	ldr	r1, [r4, #16]
 801c4c6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 801c4ca:	430b      	orrs	r3, r1
 801c4cc:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801c4ce:	f7ff fe42 	bl	801c156 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c4d2:	f7fd fd42 	bl	8019f5a <HAL_GetTick>
 801c4d6:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c4d8:	e00b      	b.n	801c4f2 <HAL_RCCEx_PeriphCLKConfig+0x374>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c4da:	f7fd fd3e 	bl	8019f5a <HAL_GetTick>
 801c4de:	1b80      	subs	r0, r0, r6
 801c4e0:	2802      	cmp	r0, #2
 801c4e2:	d9e2      	bls.n	801c4aa <HAL_RCCEx_PeriphCLKConfig+0x32c>
              ret = HAL_TIMEOUT;
 801c4e4:	2503      	movs	r5, #3
 801c4e6:	e6fd      	b.n	801c2e4 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c4e8:	f7fd fd37 	bl	8019f5a <HAL_GetTick>
 801c4ec:	1b80      	subs	r0, r0, r6
 801c4ee:	2802      	cmp	r0, #2
 801c4f0:	d8f8      	bhi.n	801c4e4 <HAL_RCCEx_PeriphCLKConfig+0x366>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c4f2:	f7ff fe3e 	bl	801c172 <LL_RCC_PLLSAI1_IsReady>
 801c4f6:	2801      	cmp	r0, #1
 801c4f8:	d1f6      	bne.n	801c4e8 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801c4fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c4fe:	6961      	ldr	r1, [r4, #20]
 801c500:	6913      	ldr	r3, [r2, #16]
 801c502:	430b      	orrs	r3, r1
 801c504:	6113      	str	r3, [r2, #16]
    if (ret != HAL_OK)
 801c506:	e6ed      	b.n	801c2e4 <HAL_RCCEx_PeriphCLKConfig+0x166>

0801c508 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 801c508:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c50a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801c50e:	2b01      	cmp	r3, #1
{
 801c510:	4604      	mov	r4, r0
 801c512:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 801c516:	d025      	beq.n	801c564 <HAL_RTC_DeactivateAlarm+0x5c>
 801c518:	2301      	movs	r3, #1
 801c51a:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c51e:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c520:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c524:	22ca      	movs	r2, #202	; 0xca
 801c526:	625a      	str	r2, [r3, #36]	; 0x24
 801c528:	2253      	movs	r2, #83	; 0x53
 801c52a:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 801c52c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 801c530:	689a      	ldr	r2, [r3, #8]
  if(Alarm == RTC_ALARM_A)
 801c532:	d127      	bne.n	801c584 <HAL_RTC_DeactivateAlarm+0x7c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 801c534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c538:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 801c53a:	689a      	ldr	r2, [r3, #8]
 801c53c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c540:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 801c542:	f7fd fd0a 	bl	8019f5a <HAL_GetTick>
 801c546:	4606      	mov	r6, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801c548:	6823      	ldr	r3, [r4, #0]
 801c54a:	68dd      	ldr	r5, [r3, #12]
 801c54c:	f015 0501 	ands.w	r5, r5, #1
 801c550:	d009      	beq.n	801c566 <HAL_RTC_DeactivateAlarm+0x5e>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c552:	6823      	ldr	r3, [r4, #0]
 801c554:	22ff      	movs	r2, #255	; 0xff
 801c556:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c558:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 801c55a:	2301      	movs	r3, #1
 801c55c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 801c560:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK; 
}
 801c564:	bd70      	pop	{r4, r5, r6, pc}
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 801c566:	f7fd fcf8 	bl	8019f5a <HAL_GetTick>
 801c56a:	1b80      	subs	r0, r0, r6
 801c56c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801c570:	d9ea      	bls.n	801c548 <HAL_RTC_DeactivateAlarm+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c572:	6823      	ldr	r3, [r4, #0]
 801c574:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c576:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c578:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c57a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 801c57e:	f884 5020 	strb.w	r5, [r4, #32]
        return HAL_TIMEOUT;
 801c582:	e7ef      	b.n	801c564 <HAL_RTC_DeactivateAlarm+0x5c>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 801c584:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801c588:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 801c58a:	689a      	ldr	r2, [r3, #8]
 801c58c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c590:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 801c592:	f7fd fce2 	bl	8019f5a <HAL_GetTick>
 801c596:	4606      	mov	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 801c598:	6823      	ldr	r3, [r4, #0]
 801c59a:	68dd      	ldr	r5, [r3, #12]
 801c59c:	f015 0502 	ands.w	r5, r5, #2
 801c5a0:	d1d7      	bne.n	801c552 <HAL_RTC_DeactivateAlarm+0x4a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801c5a2:	f7fd fcda 	bl	8019f5a <HAL_GetTick>
 801c5a6:	1b80      	subs	r0, r0, r6
 801c5a8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801c5ac:	d9f4      	bls.n	801c598 <HAL_RTC_DeactivateAlarm+0x90>
 801c5ae:	e7e0      	b.n	801c572 <HAL_RTC_DeactivateAlarm+0x6a>

0801c5b0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801c5b0:	6802      	ldr	r2, [r0, #0]
{
 801c5b2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801c5b4:	68d3      	ldr	r3, [r2, #12]
 801c5b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801c5ba:	60d3      	str	r3, [r2, #12]
{
 801c5bc:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 801c5be:	f7fd fccc 	bl	8019f5a <HAL_GetTick>
 801c5c2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c5c4:	6823      	ldr	r3, [r4, #0]
 801c5c6:	68db      	ldr	r3, [r3, #12]
 801c5c8:	069b      	lsls	r3, r3, #26
 801c5ca:	d501      	bpl.n	801c5d0 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 801c5cc:	2000      	movs	r0, #0
}
 801c5ce:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801c5d0:	f7fd fcc3 	bl	8019f5a <HAL_GetTick>
 801c5d4:	1b40      	subs	r0, r0, r5
 801c5d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801c5da:	d9f3      	bls.n	801c5c4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 801c5dc:	2003      	movs	r0, #3
 801c5de:	e7f6      	b.n	801c5ce <HAL_RTC_WaitForSynchro+0x1e>

0801c5e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 801c5e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801c5e2:	6803      	ldr	r3, [r0, #0]
 801c5e4:	68da      	ldr	r2, [r3, #12]
 801c5e6:	0652      	lsls	r2, r2, #25
{
 801c5e8:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801c5ea:	d501      	bpl.n	801c5f0 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 801c5ec:	2000      	movs	r0, #0
}
 801c5ee:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801c5f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c5f4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801c5f6:	f7fd fcb0 	bl	8019f5a <HAL_GetTick>
 801c5fa:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801c5fc:	6823      	ldr	r3, [r4, #0]
 801c5fe:	68db      	ldr	r3, [r3, #12]
 801c600:	065b      	lsls	r3, r3, #25
 801c602:	d4f3      	bmi.n	801c5ec <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 801c604:	f7fd fca9 	bl	8019f5a <HAL_GetTick>
 801c608:	1b40      	subs	r0, r0, r5
 801c60a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801c60e:	d9f5      	bls.n	801c5fc <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 801c610:	2003      	movs	r0, #3
 801c612:	e7ec      	b.n	801c5ee <RTC_EnterInitMode+0xe>

0801c614 <HAL_RTC_Init>:
{
 801c614:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 801c616:	4604      	mov	r4, r0
 801c618:	b1d8      	cbz	r0, 801c652 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801c61a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801c61e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801c622:	b91b      	cbnz	r3, 801c62c <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 801c624:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 801c628:	f7fd f994 	bl	8019954 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c62c:	2302      	movs	r3, #2
 801c62e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c632:	6823      	ldr	r3, [r4, #0]
 801c634:	22ca      	movs	r2, #202	; 0xca
 801c636:	625a      	str	r2, [r3, #36]	; 0x24
 801c638:	2253      	movs	r2, #83	; 0x53
 801c63a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801c63c:	4620      	mov	r0, r4
 801c63e:	f7ff ffcf 	bl	801c5e0 <RTC_EnterInitMode>
 801c642:	6823      	ldr	r3, [r4, #0]
 801c644:	4605      	mov	r5, r0
 801c646:	b130      	cbz	r0, 801c656 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c648:	22ff      	movs	r2, #255	; 0xff
 801c64a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801c64c:	2304      	movs	r3, #4
 801c64e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 801c652:	2501      	movs	r5, #1
 801c654:	e038      	b.n	801c6c8 <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c656:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c658:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c65a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 801c65e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c662:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c664:	6862      	ldr	r2, [r4, #4]
 801c666:	6899      	ldr	r1, [r3, #8]
 801c668:	4302      	orrs	r2, r0
 801c66a:	69a0      	ldr	r0, [r4, #24]
 801c66c:	4302      	orrs	r2, r0
 801c66e:	430a      	orrs	r2, r1
 801c670:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c672:	68e2      	ldr	r2, [r4, #12]
 801c674:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 801c676:	691a      	ldr	r2, [r3, #16]
 801c678:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c67a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 801c67c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801c680:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801c682:	68da      	ldr	r2, [r3, #12]
 801c684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c688:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801c68a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c68c:	f022 0203 	bic.w	r2, r2, #3
 801c690:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c692:	69e2      	ldr	r2, [r4, #28]
 801c694:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801c696:	4302      	orrs	r2, r0
 801c698:	430a      	orrs	r2, r1
 801c69a:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801c69c:	689b      	ldr	r3, [r3, #8]
 801c69e:	069b      	lsls	r3, r3, #26
 801c6a0:	d40c      	bmi.n	801c6bc <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c6a2:	4620      	mov	r0, r4
 801c6a4:	f7ff ff84 	bl	801c5b0 <HAL_RTC_WaitForSynchro>
 801c6a8:	b140      	cbz	r0, 801c6bc <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c6aa:	6823      	ldr	r3, [r4, #0]
 801c6ac:	22ff      	movs	r2, #255	; 0xff
 801c6ae:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c6b0:	2304      	movs	r3, #4
 801c6b2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 801c6b6:	f884 5020 	strb.w	r5, [r4, #32]
        return HAL_ERROR;
 801c6ba:	e7ca      	b.n	801c652 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c6bc:	6823      	ldr	r3, [r4, #0]
 801c6be:	22ff      	movs	r2, #255	; 0xff
 801c6c0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 801c6c2:	2301      	movs	r3, #1
 801c6c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 801c6c8:	4628      	mov	r0, r5
 801c6ca:	bd38      	pop	{r3, r4, r5, pc}

0801c6cc <RTC_ByteToBcd2>:
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 801c6cc:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 801c6ce:	2809      	cmp	r0, #9
 801c6d0:	d803      	bhi.n	801c6da <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 801c6d2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 801c6d6:	b2c0      	uxtb	r0, r0
 801c6d8:	4770      	bx	lr
    Param -= 10U;
 801c6da:	380a      	subs	r0, #10
    bcdhigh++;
 801c6dc:	3301      	adds	r3, #1
    Param -= 10U;
 801c6de:	b2c0      	uxtb	r0, r0
 801c6e0:	e7f5      	b.n	801c6ce <RTC_ByteToBcd2+0x2>

0801c6e2 <HAL_RTC_SetTime>:
{
 801c6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 801c6e6:	f890 3020 	ldrb.w	r3, [r0, #32]
 801c6ea:	2b01      	cmp	r3, #1
{
 801c6ec:	4605      	mov	r5, r0
 801c6ee:	460e      	mov	r6, r1
 801c6f0:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 801c6f4:	d032      	beq.n	801c75c <HAL_RTC_SetTime+0x7a>
 801c6f6:	2301      	movs	r3, #1
 801c6f8:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c6fc:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 801c700:	6801      	ldr	r1, [r0, #0]
 801c702:	7874      	ldrb	r4, [r6, #1]
 801c704:	7830      	ldrb	r0, [r6, #0]
 801c706:	78b7      	ldrb	r7, [r6, #2]
 801c708:	bb5a      	cbnz	r2, 801c762 <HAL_RTC_SetTime+0x80>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c70a:	688a      	ldr	r2, [r1, #8]
 801c70c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 801c710:	bf08      	it	eq
 801c712:	70f2      	strbeq	r2, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801c714:	f7ff ffda 	bl	801c6cc <RTC_ByteToBcd2>
 801c718:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 801c71a:	4620      	mov	r0, r4
 801c71c:	f7ff ffd6 	bl	801c6cc <RTC_ByteToBcd2>
 801c720:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801c722:	4638      	mov	r0, r7
 801c724:	f7ff ffd2 	bl	801c6cc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 801c728:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801c72a:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 801c72e:	ea42 4308 	orr.w	r3, r2, r8, lsl #16
 801c732:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c736:	23ca      	movs	r3, #202	; 0xca
 801c738:	624b      	str	r3, [r1, #36]	; 0x24
 801c73a:	2353      	movs	r3, #83	; 0x53
 801c73c:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801c73e:	4628      	mov	r0, r5
 801c740:	f7ff ff4e 	bl	801c5e0 <RTC_EnterInitMode>
 801c744:	682a      	ldr	r2, [r5, #0]
 801c746:	4607      	mov	r7, r0
 801c748:	b1c0      	cbz	r0, 801c77c <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c74a:	23ff      	movs	r3, #255	; 0xff
 801c74c:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801c74e:	2304      	movs	r3, #4
 801c750:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 801c754:	2300      	movs	r3, #0
 801c756:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 801c75a:	2701      	movs	r7, #1
}
 801c75c:	4638      	mov	r0, r7
 801c75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c762:	688a      	ldr	r2, [r1, #8]
 801c764:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 801c768:	bf08      	it	eq
 801c76a:	70f2      	strbeq	r2, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 801c76c:	0224      	lsls	r4, r4, #8
              ((uint32_t)(sTime->TimeFormat) << 16U));
 801c76e:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801c770:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 801c774:	433c      	orrs	r4, r7
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801c776:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801c77a:	e7dc      	b.n	801c736 <HAL_RTC_SetTime+0x54>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c77c:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 801c780:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 801c784:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 801c786:	6893      	ldr	r3, [r2, #8]
 801c788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c78c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c78e:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 801c792:	6891      	ldr	r1, [r2, #8]
 801c794:	4303      	orrs	r3, r0
 801c796:	430b      	orrs	r3, r1
 801c798:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801c79a:	68d3      	ldr	r3, [r2, #12]
 801c79c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c7a0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801c7a2:	6893      	ldr	r3, [r2, #8]
 801c7a4:	069b      	lsls	r3, r3, #26
 801c7a6:	d40c      	bmi.n	801c7c2 <HAL_RTC_SetTime+0xe0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c7a8:	4628      	mov	r0, r5
 801c7aa:	f7ff ff01 	bl	801c5b0 <HAL_RTC_WaitForSynchro>
 801c7ae:	b140      	cbz	r0, 801c7c2 <HAL_RTC_SetTime+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c7b0:	682b      	ldr	r3, [r5, #0]
 801c7b2:	22ff      	movs	r2, #255	; 0xff
 801c7b4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c7b6:	2304      	movs	r3, #4
 801c7b8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 801c7bc:	f885 7020 	strb.w	r7, [r5, #32]
 801c7c0:	e7cb      	b.n	801c75a <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c7c2:	682b      	ldr	r3, [r5, #0]
 801c7c4:	22ff      	movs	r2, #255	; 0xff
 801c7c6:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 801c7c8:	2301      	movs	r3, #1
 801c7ca:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	f885 3020 	strb.w	r3, [r5, #32]
   return HAL_OK;
 801c7d4:	e7c2      	b.n	801c75c <HAL_RTC_SetTime+0x7a>

0801c7d6 <HAL_RTC_SetDate>:
{
 801c7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 801c7d8:	f890 3020 	ldrb.w	r3, [r0, #32]
 801c7dc:	2b01      	cmp	r3, #1
{
 801c7de:	4604      	mov	r4, r0
 801c7e0:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 801c7e4:	d035      	beq.n	801c852 <HAL_RTC_SetDate+0x7c>
 801c7e6:	2301      	movs	r3, #1
 801c7e8:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c7ec:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c7f0:	780d      	ldrb	r5, [r1, #0]
 801c7f2:	78c8      	ldrb	r0, [r1, #3]
 801c7f4:	784b      	ldrb	r3, [r1, #1]
 801c7f6:	788f      	ldrb	r7, [r1, #2]
 801c7f8:	036d      	lsls	r5, r5, #13
 801c7fa:	2a00      	cmp	r2, #0
 801c7fc:	d14e      	bne.n	801c89c <HAL_RTC_SetDate+0xc6>
 801c7fe:	06da      	lsls	r2, r3, #27
 801c800:	d503      	bpl.n	801c80a <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c802:	f023 0310 	bic.w	r3, r3, #16
 801c806:	330a      	adds	r3, #10
 801c808:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801c80a:	f7ff ff5f 	bl	801c6cc <RTC_ByteToBcd2>
 801c80e:	4606      	mov	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 801c810:	7848      	ldrb	r0, [r1, #1]
 801c812:	f7ff ff5b 	bl	801c6cc <RTC_ByteToBcd2>
 801c816:	4601      	mov	r1, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801c818:	4638      	mov	r0, r7
 801c81a:	f7ff ff57 	bl	801c6cc <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801c81e:	ea40 0205 	orr.w	r2, r0, r5
 801c822:	ea42 4306 	orr.w	r3, r2, r6, lsl #16
 801c826:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c82a:	6823      	ldr	r3, [r4, #0]
 801c82c:	22ca      	movs	r2, #202	; 0xca
 801c82e:	625a      	str	r2, [r3, #36]	; 0x24
 801c830:	2253      	movs	r2, #83	; 0x53
 801c832:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801c834:	4620      	mov	r0, r4
 801c836:	f7ff fed3 	bl	801c5e0 <RTC_EnterInitMode>
 801c83a:	6822      	ldr	r2, [r4, #0]
 801c83c:	4606      	mov	r6, r0
 801c83e:	b150      	cbz	r0, 801c856 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c840:	23ff      	movs	r3, #255	; 0xff
 801c842:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801c844:	2304      	movs	r3, #4
 801c846:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 801c84a:	2300      	movs	r3, #0
 801c84c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 801c850:	2601      	movs	r6, #1
}
 801c852:	4630      	mov	r0, r6
 801c854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c856:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 801c85a:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 801c85e:	6055      	str	r5, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801c860:	68d3      	ldr	r3, [r2, #12]
 801c862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c866:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801c868:	6893      	ldr	r3, [r2, #8]
 801c86a:	069b      	lsls	r3, r3, #26
 801c86c:	d40c      	bmi.n	801c888 <HAL_RTC_SetDate+0xb2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c86e:	4620      	mov	r0, r4
 801c870:	f7ff fe9e 	bl	801c5b0 <HAL_RTC_WaitForSynchro>
 801c874:	b140      	cbz	r0, 801c888 <HAL_RTC_SetDate+0xb2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801c876:	6823      	ldr	r3, [r4, #0]
 801c878:	22ff      	movs	r2, #255	; 0xff
 801c87a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c87c:	2304      	movs	r3, #4
 801c87e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 801c882:	f884 6020 	strb.w	r6, [r4, #32]
 801c886:	e7e3      	b.n	801c850 <HAL_RTC_SetDate+0x7a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c888:	6823      	ldr	r3, [r4, #0]
 801c88a:	22ff      	movs	r2, #255	; 0xff
 801c88c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 801c88e:	2301      	movs	r3, #1
 801c890:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 801c894:	2300      	movs	r3, #0
 801c896:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 801c89a:	e7da      	b.n	801c852 <HAL_RTC_SetDate+0x7c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801c89c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 801c8a0:	433d      	orrs	r5, r7
 801c8a2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 801c8a6:	e7c0      	b.n	801c82a <HAL_RTC_SetDate+0x54>

0801c8a8 <HAL_RTC_SetAlarm_IT>:
{
 801c8a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hrtc);
 801c8ac:	f890 3020 	ldrb.w	r3, [r0, #32]
 801c8b0:	2b01      	cmp	r3, #1
{
 801c8b2:	4604      	mov	r4, r0
 801c8b4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 801c8b8:	f000 808d 	beq.w	801c9d6 <HAL_RTC_SetAlarm_IT+0x12e>
 801c8bc:	2301      	movs	r3, #1
 801c8be:	6827      	ldr	r7, [r4, #0]
 801c8c0:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c8c4:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 801c8c8:	7808      	ldrb	r0, [r1, #0]
 801c8ca:	f891 9001 	ldrb.w	r9, [r1, #1]
 801c8ce:	f891 b002 	ldrb.w	fp, [r1, #2]
 801c8d2:	f891 8020 	ldrb.w	r8, [r1, #32]
 801c8d6:	69ce      	ldr	r6, [r1, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c8d8:	68bb      	ldr	r3, [r7, #8]
  if(Format == RTC_FORMAT_BIN)
 801c8da:	2a00      	cmp	r2, #0
 801c8dc:	d15a      	bne.n	801c994 <HAL_RTC_SetAlarm_IT+0xec>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c8de:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801c8e2:	bf08      	it	eq
 801c8e4:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 801c8e6:	f7ff fef1 	bl	801c6cc <RTC_ByteToBcd2>
 801c8ea:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 801c8ec:	4648      	mov	r0, r9
 801c8ee:	f7ff feed 	bl	801c6cc <RTC_ByteToBcd2>
 801c8f2:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 801c8f4:	4658      	mov	r0, fp
 801c8f6:	f7ff fee9 	bl	801c6cc <RTC_ByteToBcd2>
 801c8fa:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 801c8fc:	4640      	mov	r0, r8
 801c8fe:	f7ff fee5 	bl	801c6cc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 801c902:	694b      	ldr	r3, [r1, #20]
 801c904:	ea46 0c03 	orr.w	ip, r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 801c908:	78ce      	ldrb	r6, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 801c90a:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 801c90e:	ea4c 0202 	orr.w	r2, ip, r2
 801c912:	ea42 460a 	orr.w	r6, r2, sl, lsl #16
 801c916:	ea46 2309 	orr.w	r3, r6, r9, lsl #8
 801c91a:	ea43 6500 	orr.w	r5, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 801c91e:	698b      	ldr	r3, [r1, #24]
 801c920:	684e      	ldr	r6, [r1, #4]
 801c922:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c924:	23ca      	movs	r3, #202	; 0xca
 801c926:	627b      	str	r3, [r7, #36]	; 0x24
 801c928:	2353      	movs	r3, #83	; 0x53
 801c92a:	627b      	str	r3, [r7, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 801c92c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801c92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 801c932:	68bb      	ldr	r3, [r7, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 801c934:	d151      	bne.n	801c9da <HAL_RTC_SetAlarm_IT+0x132>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 801c936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c93a:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	b2db      	uxtb	r3, r3
 801c940:	f463 73c0 	orn	r3, r3, #384	; 0x180
 801c944:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 801c946:	f7fd fb08 	bl	8019f5a <HAL_GetTick>
 801c94a:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801c94c:	6823      	ldr	r3, [r4, #0]
 801c94e:	68df      	ldr	r7, [r3, #12]
 801c950:	f017 0701 	ands.w	r7, r7, #1
 801c954:	d030      	beq.n	801c9b8 <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 801c956:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 801c958:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 801c95a:	689a      	ldr	r2, [r3, #8]
 801c95c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c960:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 801c962:	689a      	ldr	r2, [r3, #8]
 801c964:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 801c968:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();	
 801c96a:	4b2d      	ldr	r3, [pc, #180]	; (801ca20 <HAL_RTC_SetAlarm_IT+0x178>)
 801c96c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801c970:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801c974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 801c978:	681a      	ldr	r2, [r3, #0]
 801c97a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801c97e:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c980:	6823      	ldr	r3, [r4, #0]
 801c982:	22ff      	movs	r2, #255	; 0xff
 801c984:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 801c986:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY; 
 801c988:	2301      	movs	r3, #1
 801c98a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 801c98e:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 801c992:	e020      	b.n	801c9d6 <HAL_RTC_SetAlarm_IT+0x12e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c994:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801c998:	bf08      	it	eq
 801c99a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 801c99c:	694b      	ldr	r3, [r1, #20]
 801c99e:	431e      	orrs	r6, r3
 801c9a0:	ea46 060b 	orr.w	r6, r6, fp
 801c9a4:	ea46 4500 	orr.w	r5, r6, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 801c9a8:	78c8      	ldrb	r0, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 801c9aa:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801c9ae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 801c9b2:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 801c9b6:	e7b2      	b.n	801c91e <HAL_RTC_SetAlarm_IT+0x76>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801c9b8:	f7fd facf 	bl	8019f5a <HAL_GetTick>
 801c9bc:	eba0 0008 	sub.w	r0, r0, r8
 801c9c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801c9c4:	d9c2      	bls.n	801c94c <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c9c6:	6823      	ldr	r3, [r4, #0]
 801c9c8:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c9ca:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c9cc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c9ce:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 801c9d2:	f884 7020 	strb.w	r7, [r4, #32]
}
 801c9d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 801c9da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801c9de:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	b2db      	uxtb	r3, r3
 801c9e4:	f463 7320 	orn	r3, r3, #640	; 0x280
 801c9e8:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 801c9ea:	f7fd fab6 	bl	8019f5a <HAL_GetTick>
 801c9ee:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 801c9f0:	6823      	ldr	r3, [r4, #0]
 801c9f2:	68df      	ldr	r7, [r3, #12]
 801c9f4:	f017 0702 	ands.w	r7, r7, #2
 801c9f8:	d009      	beq.n	801ca0e <HAL_RTC_SetAlarm_IT+0x166>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 801c9fa:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 801c9fc:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 801c9fe:	689a      	ldr	r2, [r3, #8]
 801ca00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ca04:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 801ca06:	689a      	ldr	r2, [r3, #8]
 801ca08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ca0c:	e7ac      	b.n	801c968 <HAL_RTC_SetAlarm_IT+0xc0>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801ca0e:	f7fd faa4 	bl	8019f5a <HAL_GetTick>
 801ca12:	eba0 0008 	sub.w	r0, r0, r8
 801ca16:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801ca1a:	d9e9      	bls.n	801c9f0 <HAL_RTC_SetAlarm_IT+0x148>
 801ca1c:	e7d3      	b.n	801c9c6 <HAL_RTC_SetAlarm_IT+0x11e>
 801ca1e:	bf00      	nop
 801ca20:	58000800 	.word	0x58000800

0801ca24 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 801ca24:	0903      	lsrs	r3, r0, #4
 801ca26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 801ca2a:	f000 000f 	and.w	r0, r0, #15
 801ca2e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 801ca32:	b2c0      	uxtb	r0, r0
 801ca34:	4770      	bx	lr

0801ca36 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801ca36:	6803      	ldr	r3, [r0, #0]
 801ca38:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801ca3a:	6048      	str	r0, [r1, #4]
{
 801ca3c:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801ca3e:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801ca40:	681c      	ldr	r4, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801ca42:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 801ca46:	f3c4 4506 	ubfx	r5, r4, #16, #7
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 801ca4a:	f3c4 2606 	ubfx	r6, r4, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801ca4e:	6088      	str	r0, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 801ca50:	f005 0340 	and.w	r3, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 801ca54:	f3c4 4005 	ubfx	r0, r4, #16, #6
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801ca58:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 801ca5c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 801ca5e:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801ca60:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 801ca62:	70cb      	strb	r3, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 801ca64:	b952      	cbnz	r2, 801ca7c <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801ca66:	f7ff ffdd 	bl	801ca24 <RTC_Bcd2ToByte>
 801ca6a:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801ca6c:	4630      	mov	r0, r6
 801ca6e:	f7ff ffd9 	bl	801ca24 <RTC_Bcd2ToByte>
 801ca72:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801ca74:	4620      	mov	r0, r4
 801ca76:	f7ff ffd5 	bl	801ca24 <RTC_Bcd2ToByte>
 801ca7a:	7088      	strb	r0, [r1, #2]
}
 801ca7c:	2000      	movs	r0, #0
 801ca7e:	bd70      	pop	{r4, r5, r6, pc}

0801ca80 <HAL_RTC_GetDate>:
{
 801ca80:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801ca82:	6803      	ldr	r3, [r0, #0]
 801ca84:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 801ca86:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 801ca8a:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801ca8e:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 801ca92:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 801ca96:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 801ca98:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801ca9a:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 801ca9c:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 801ca9e:	b952      	cbnz	r2, 801cab6 <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801caa0:	f7ff ffc0 	bl	801ca24 <RTC_Bcd2ToByte>
 801caa4:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801caa6:	4628      	mov	r0, r5
 801caa8:	f7ff ffbc 	bl	801ca24 <RTC_Bcd2ToByte>
 801caac:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801caae:	4620      	mov	r0, r4
 801cab0:	f7ff ffb8 	bl	801ca24 <RTC_Bcd2ToByte>
 801cab4:	7088      	strb	r0, [r1, #2]
}
 801cab6:	2000      	movs	r0, #0
 801cab8:	bd38      	pop	{r3, r4, r5, pc}

0801caba <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801caba:	6803      	ldr	r3, [r0, #0]
 801cabc:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801cabe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 801cac2:	4770      	bx	lr

0801cac4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801cac4:	6803      	ldr	r3, [r0, #0]
 801cac6:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801cac8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 801cacc:	4770      	bx	lr

0801cace <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 801cace:	f890 3020 	ldrb.w	r3, [r0, #32]
 801cad2:	2b01      	cmp	r3, #1
 801cad4:	f04f 0302 	mov.w	r3, #2
 801cad8:	d012      	beq.n	801cb00 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 801cada:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801cade:	6803      	ldr	r3, [r0, #0]
 801cae0:	22ca      	movs	r2, #202	; 0xca
 801cae2:	625a      	str	r2, [r3, #36]	; 0x24
 801cae4:	2253      	movs	r2, #83	; 0x53
 801cae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 801cae8:	689a      	ldr	r2, [r3, #8]
 801caea:	f042 0220 	orr.w	r2, r2, #32
 801caee:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801caf0:	22ff      	movs	r2, #255	; 0xff
 801caf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801caf4:	2301      	movs	r3, #1
 801caf6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801cafa:	2300      	movs	r3, #0
 801cafc:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 801cb00:	4618      	mov	r0, r3

  return HAL_OK;
}
 801cb02:	4770      	bx	lr

0801cb04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cb04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801cb08:	4699      	mov	r9, r3
 801cb0a:	4688      	mov	r8, r1
 801cb0c:	4617      	mov	r7, r2
 801cb0e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801cb10:	f7fd fa23 	bl	8019f5a <HAL_GetTick>
 801cb14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb16:	444b      	add	r3, r9
 801cb18:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 801cb1a:	f7fd fa1e 	bl	8019f5a <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801cb1e:	4b28      	ldr	r3, [pc, #160]	; (801cbc0 <SPI_WaitFifoStateUntilTimeout+0xbc>)
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	2623      	movs	r6, #35	; 0x23
 801cb24:	435e      	muls	r6, r3
 801cb26:	0d36      	lsrs	r6, r6, #20
 801cb28:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 801cb2a:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801cb2c:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 801cb2e:	6822      	ldr	r2, [r4, #0]
 801cb30:	6893      	ldr	r3, [r2, #8]
 801cb32:	ea03 0308 	and.w	r3, r3, r8
 801cb36:	42bb      	cmp	r3, r7
 801cb38:	d101      	bne.n	801cb3e <SPI_WaitFifoStateUntilTimeout+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 801cb3a:	2000      	movs	r0, #0
 801cb3c:	e034      	b.n	801cba8 <SPI_WaitFifoStateUntilTimeout+0xa4>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801cb3e:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 801cb42:	d101      	bne.n	801cb48 <SPI_WaitFifoStateUntilTimeout+0x44>
 801cb44:	b907      	cbnz	r7, 801cb48 <SPI_WaitFifoStateUntilTimeout+0x44>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 801cb46:	7b13      	ldrb	r3, [r2, #12]
    if (Timeout != HAL_MAX_DELAY)
 801cb48:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801cb4c:	d0f0      	beq.n	801cb30 <SPI_WaitFifoStateUntilTimeout+0x2c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cb4e:	f7fd fa04 	bl	8019f5a <HAL_GetTick>
 801cb52:	eba0 000a 	sub.w	r0, r0, sl
 801cb56:	4285      	cmp	r5, r0
 801cb58:	d829      	bhi.n	801cbae <SPI_WaitFifoStateUntilTimeout+0xaa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cb5a:	6823      	ldr	r3, [r4, #0]
 801cb5c:	685a      	ldr	r2, [r3, #4]
 801cb5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cb62:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cb64:	6862      	ldr	r2, [r4, #4]
 801cb66:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 801cb6a:	d10a      	bne.n	801cb82 <SPI_WaitFifoStateUntilTimeout+0x7e>
 801cb6c:	68a2      	ldr	r2, [r4, #8]
 801cb6e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801cb72:	d002      	beq.n	801cb7a <SPI_WaitFifoStateUntilTimeout+0x76>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cb74:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801cb78:	d103      	bne.n	801cb82 <SPI_WaitFifoStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 801cb7a:	681a      	ldr	r2, [r3, #0]
 801cb7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cb80:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cb82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801cb84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 801cb88:	d107      	bne.n	801cb9a <SPI_WaitFifoStateUntilTimeout+0x96>
          SPI_RESET_CRC(hspi);
 801cb8a:	681a      	ldr	r2, [r3, #0]
 801cb8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cb90:	601a      	str	r2, [r3, #0]
 801cb92:	681a      	ldr	r2, [r3, #0]
 801cb94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cb98:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 801cb9a:	2301      	movs	r3, #1
 801cb9c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 801cba0:	2300      	movs	r3, #0
 801cba2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 801cba6:	2003      	movs	r0, #3
}
 801cba8:	b002      	add	sp, #8
 801cbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 801cbae:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 801cbb0:	2b00      	cmp	r3, #0
      count--;
 801cbb2:	9b01      	ldr	r3, [sp, #4]
 801cbb4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 801cbb8:	bf08      	it	eq
 801cbba:	2500      	moveq	r5, #0
      count--;
 801cbbc:	9301      	str	r3, [sp, #4]
 801cbbe:	e7b6      	b.n	801cb2e <SPI_WaitFifoStateUntilTimeout+0x2a>
 801cbc0:	2000104c 	.word	0x2000104c

0801cbc4 <SPI_WaitFlagStateUntilTimeout>:
{
 801cbc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801cbc8:	461f      	mov	r7, r3
 801cbca:	4689      	mov	r9, r1
 801cbcc:	4690      	mov	r8, r2
 801cbce:	4604      	mov	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cbd0:	f7fd f9c3 	bl	8019f5a <HAL_GetTick>
 801cbd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbd6:	443b      	add	r3, r7
 801cbd8:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 801cbda:	f7fd f9be 	bl	8019f5a <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cbde:	4b26      	ldr	r3, [pc, #152]	; (801cc78 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 801cbe0:	681e      	ldr	r6, [r3, #0]
 801cbe2:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 801cbe6:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 801cbe8:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cbea:	9601      	str	r6, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cbec:	6822      	ldr	r2, [r4, #0]
 801cbee:	6893      	ldr	r3, [r2, #8]
 801cbf0:	ea39 0303 	bics.w	r3, r9, r3
 801cbf4:	bf0c      	ite	eq
 801cbf6:	2301      	moveq	r3, #1
 801cbf8:	2300      	movne	r3, #0
 801cbfa:	4543      	cmp	r3, r8
 801cbfc:	d101      	bne.n	801cc02 <SPI_WaitFlagStateUntilTimeout+0x3e>
  return HAL_OK;
 801cbfe:	2000      	movs	r0, #0
 801cc00:	e02e      	b.n	801cc60 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 801cc02:	1c7b      	adds	r3, r7, #1
 801cc04:	d0f3      	beq.n	801cbee <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cc06:	f7fd f9a8 	bl	8019f5a <HAL_GetTick>
 801cc0a:	eba0 000a 	sub.w	r0, r0, sl
 801cc0e:	42a8      	cmp	r0, r5
 801cc10:	d329      	bcc.n	801cc66 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cc12:	6823      	ldr	r3, [r4, #0]
 801cc14:	685a      	ldr	r2, [r3, #4]
 801cc16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cc1a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cc1c:	6862      	ldr	r2, [r4, #4]
 801cc1e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 801cc22:	d10a      	bne.n	801cc3a <SPI_WaitFlagStateUntilTimeout+0x76>
 801cc24:	68a2      	ldr	r2, [r4, #8]
 801cc26:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801cc2a:	d002      	beq.n	801cc32 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cc2c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801cc30:	d103      	bne.n	801cc3a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 801cc32:	681a      	ldr	r2, [r3, #0]
 801cc34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cc38:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cc3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801cc3c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 801cc40:	d107      	bne.n	801cc52 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 801cc42:	681a      	ldr	r2, [r3, #0]
 801cc44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cc48:	601a      	str	r2, [r3, #0]
 801cc4a:	681a      	ldr	r2, [r3, #0]
 801cc4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cc50:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 801cc52:	2301      	movs	r3, #1
 801cc54:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 801cc58:	2300      	movs	r3, #0
 801cc5a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 801cc5e:	2003      	movs	r0, #3
}
 801cc60:	b002      	add	sp, #8
 801cc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 801cc66:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 801cc68:	2b00      	cmp	r3, #0
      count--;
 801cc6a:	9b01      	ldr	r3, [sp, #4]
 801cc6c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 801cc70:	bf08      	it	eq
 801cc72:	2500      	moveq	r5, #0
      count--;
 801cc74:	9301      	str	r3, [sp, #4]
 801cc76:	e7b9      	b.n	801cbec <SPI_WaitFlagStateUntilTimeout+0x28>
 801cc78:	2000104c 	.word	0x2000104c

0801cc7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cc7c:	b530      	push	{r4, r5, lr}
 801cc7e:	b085      	sub	sp, #20
 801cc80:	460b      	mov	r3, r1
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cc82:	9200      	str	r2, [sp, #0]
 801cc84:	9103      	str	r1, [sp, #12]
{
 801cc86:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cc88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801cc8c:	2200      	movs	r2, #0
{
 801cc8e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cc90:	f7ff ff38 	bl	801cb04 <SPI_WaitFifoStateUntilTimeout>
 801cc94:	9b03      	ldr	r3, [sp, #12]
 801cc96:	4602      	mov	r2, r0
 801cc98:	b128      	cbz	r0, 801cca6 <SPI_EndRxTxTransaction+0x2a>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cc9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801cc9c:	f043 0320 	orr.w	r3, r3, #32
 801cca0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 801cca2:	2003      	movs	r0, #3
 801cca4:	e011      	b.n	801ccca <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cca6:	9500      	str	r5, [sp, #0]
 801cca8:	2180      	movs	r1, #128	; 0x80
 801ccaa:	4620      	mov	r0, r4
 801ccac:	9303      	str	r3, [sp, #12]
 801ccae:	f7ff ff89 	bl	801cbc4 <SPI_WaitFlagStateUntilTimeout>
 801ccb2:	9b03      	ldr	r3, [sp, #12]
 801ccb4:	4602      	mov	r2, r0
 801ccb6:	2800      	cmp	r0, #0
 801ccb8:	d1ef      	bne.n	801cc9a <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ccba:	9500      	str	r5, [sp, #0]
 801ccbc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ccc0:	4620      	mov	r0, r4
 801ccc2:	f7ff ff1f 	bl	801cb04 <SPI_WaitFifoStateUntilTimeout>
 801ccc6:	2800      	cmp	r0, #0
 801ccc8:	d1e7      	bne.n	801cc9a <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 801ccca:	b005      	add	sp, #20
 801cccc:	bd30      	pop	{r4, r5, pc}

0801ccce <HAL_SPI_MspInit>:
}
 801ccce:	4770      	bx	lr

0801ccd0 <HAL_SPI_Init>:
{
 801ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 801ccd2:	4604      	mov	r4, r0
 801ccd4:	2800      	cmp	r0, #0
 801ccd6:	d079      	beq.n	801cdcc <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801ccd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d14f      	bne.n	801cd7e <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ccde:	6842      	ldr	r2, [r0, #4]
 801cce0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 801cce4:	d000      	beq.n	801cce8 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801cce6:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 801cce8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 801ccec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801ccf0:	b923      	cbnz	r3, 801ccfc <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 801ccf2:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 801ccf6:	4620      	mov	r0, r4
 801ccf8:	f7ff ffe9 	bl	801ccce <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 801ccfc:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ccfe:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 801cd00:	2302      	movs	r3, #2
 801cd02:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 801cd06:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cd08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 801cd0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801cd10:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cd12:	f04f 0300 	mov.w	r3, #0
 801cd16:	d85b      	bhi.n	801cdd0 <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801cd18:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801cd1c:	d000      	beq.n	801cd20 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801cd1e:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801cd20:	6863      	ldr	r3, [r4, #4]
 801cd22:	68a7      	ldr	r7, [r4, #8]
 801cd24:	69a0      	ldr	r0, [r4, #24]
 801cd26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cd28:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 801cd2c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 801cd30:	433b      	orrs	r3, r7
 801cd32:	6927      	ldr	r7, [r4, #16]
 801cd34:	f007 0702 	and.w	r7, r7, #2
 801cd38:	433b      	orrs	r3, r7
 801cd3a:	6967      	ldr	r7, [r4, #20]
 801cd3c:	f007 0701 	and.w	r7, r7, #1
 801cd40:	433b      	orrs	r3, r7
 801cd42:	f400 7700 	and.w	r7, r0, #512	; 0x200
 801cd46:	433b      	orrs	r3, r7
 801cd48:	69e7      	ldr	r7, [r4, #28]
 801cd4a:	f007 0738 	and.w	r7, r7, #56	; 0x38
 801cd4e:	433b      	orrs	r3, r7
 801cd50:	6a27      	ldr	r7, [r4, #32]
 801cd52:	f007 0780 	and.w	r7, r7, #128	; 0x80
 801cd56:	433b      	orrs	r3, r7
 801cd58:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 801cd5c:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cd5e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801cd62:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cd64:	d111      	bne.n	801cd8a <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 801cd66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cd68:	bb6b      	cbnz	r3, 801cdc6 <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cd6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801cd6e:	d90a      	bls.n	801cd86 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 801cd70:	2302      	movs	r3, #2
 801cd72:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 801cd74:	6813      	ldr	r3, [r2, #0]
 801cd76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801cd7a:	6013      	str	r3, [r2, #0]
 801cd7c:	e005      	b.n	801cd8a <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801cd7e:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801cd80:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cd84:	e7b0      	b.n	801cce8 <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 801cd86:	2301      	movs	r3, #1
 801cd88:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801cd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cd8c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801cd8e:	f003 0310 	and.w	r3, r3, #16
 801cd92:	f007 0708 	and.w	r7, r7, #8
 801cd96:	433b      	orrs	r3, r7
 801cd98:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 801cd9c:	0c00      	lsrs	r0, r0, #16
 801cd9e:	4319      	orrs	r1, r3
 801cda0:	f000 0004 	and.w	r0, r0, #4
 801cda4:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cda6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 801cdaa:	bf08      	it	eq
 801cdac:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801cdae:	ea45 0501 	orr.w	r5, r5, r1
 801cdb2:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801cdb4:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 801cdb8:	bf08      	it	eq
 801cdba:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 801cdbc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801cdbe:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801cdc0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 801cdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 801cdc6:	2b02      	cmp	r3, #2
 801cdc8:	d1df      	bne.n	801cd8a <HAL_SPI_Init+0xba>
 801cdca:	e7d3      	b.n	801cd74 <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 801cdcc:	2001      	movs	r0, #1
 801cdce:	e7f9      	b.n	801cdc4 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801cdd0:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801cdd2:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 801cdd6:	e7a1      	b.n	801cd1c <HAL_SPI_Init+0x4c>

0801cdd8 <HAL_SPI_TransmitReceive>:
{
 801cdd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801cddc:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 801cdde:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 801cde2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 801cde4:	2b01      	cmp	r3, #1
{
 801cde6:	4604      	mov	r4, r0
 801cde8:	460e      	mov	r6, r1
 801cdea:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 801cdec:	f000 81a5 	beq.w	801d13a <HAL_SPI_TransmitReceive+0x362>
 801cdf0:	2301      	movs	r3, #1
 801cdf2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 801cdf6:	f7fd f8b0 	bl	8019f5a <HAL_GetTick>
  tmp_state           = hspi->State;
 801cdfa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 801cdfe:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801ce02:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 801ce04:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 801ce06:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 801ce08:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 801ce0c:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801ce0e:	d00b      	beq.n	801ce28 <HAL_SPI_TransmitReceive+0x50>
 801ce10:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 801ce14:	f040 818f 	bne.w	801d136 <HAL_SPI_TransmitReceive+0x35e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801ce18:	68a3      	ldr	r3, [r4, #8]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	f040 818b 	bne.w	801d136 <HAL_SPI_TransmitReceive+0x35e>
 801ce20:	f1bc 0f04 	cmp.w	ip, #4
 801ce24:	f040 8187 	bne.w	801d136 <HAL_SPI_TransmitReceive+0x35e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801ce28:	2e00      	cmp	r6, #0
 801ce2a:	f000 8170 	beq.w	801d10e <HAL_SPI_TransmitReceive+0x336>
 801ce2e:	f1ba 0f00 	cmp.w	sl, #0
 801ce32:	f000 816c 	beq.w	801d10e <HAL_SPI_TransmitReceive+0x336>
 801ce36:	f1b9 0f00 	cmp.w	r9, #0
 801ce3a:	f000 8168 	beq.w	801d10e <HAL_SPI_TransmitReceive+0x336>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801ce3e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801ce42:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801ce46:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801ce48:	bf1c      	itt	ne
 801ce4a:	2305      	movne	r3, #5
 801ce4c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801ce50:	2300      	movs	r3, #0
 801ce52:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 801ce54:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ce58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 801ce5a:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ce5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 801ce62:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801ce66:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 801ce68:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801ce6c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ce70:	d107      	bne.n	801ce82 <HAL_SPI_TransmitReceive+0xaa>
    SPI_RESET_CRC(hspi);
 801ce72:	682b      	ldr	r3, [r5, #0]
 801ce74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ce78:	602b      	str	r3, [r5, #0]
 801ce7a:	682b      	ldr	r3, [r5, #0]
 801ce7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ce80:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801ce82:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ce86:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801ce88:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 801ce8c:	d802      	bhi.n	801ce94 <HAL_SPI_TransmitReceive+0xbc>
 801ce8e:	f1b9 0f01 	cmp.w	r9, #1
 801ce92:	d93a      	bls.n	801cf0a <HAL_SPI_TransmitReceive+0x132>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ce94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ce98:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801ce9a:	682b      	ldr	r3, [r5, #0]
 801ce9c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 801ce9e:	bf5e      	ittt	pl
 801cea0:	682b      	ldrpl	r3, [r5, #0]
 801cea2:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 801cea6:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cea8:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 801ceac:	d97f      	bls.n	801cfae <HAL_SPI_TransmitReceive+0x1d6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ceae:	b112      	cbz	r2, 801ceb6 <HAL_SPI_TransmitReceive+0xde>
 801ceb0:	f1b9 0f01 	cmp.w	r9, #1
 801ceb4:	d107      	bne.n	801cec6 <HAL_SPI_TransmitReceive+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ceb6:	f836 3b02 	ldrh.w	r3, [r6], #2
 801ceba:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 801cebc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801cebe:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 801cec0:	3b01      	subs	r3, #1
 801cec2:	b29b      	uxth	r3, r3
 801cec4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 801cec6:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 801ceca:	f001 0604 	and.w	r6, r1, #4
 801cece:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ced2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801ced4:	b29b      	uxth	r3, r3
 801ced6:	b9db      	cbnz	r3, 801cf10 <HAL_SPI_TransmitReceive+0x138>
 801ced8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801cedc:	b29b      	uxth	r3, r3
 801cede:	b9bb      	cbnz	r3, 801cf10 <HAL_SPI_TransmitReceive+0x138>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cee6:	f040 80fb 	bne.w	801d0e0 <HAL_SPI_TransmitReceive+0x308>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 801ceea:	2201      	movs	r2, #1
 801ceec:	f8cd 8000 	str.w	r8, [sp]
 801cef0:	463b      	mov	r3, r7
 801cef2:	4611      	mov	r1, r2
 801cef4:	4620      	mov	r0, r4
 801cef6:	f7ff fe65 	bl	801cbc4 <SPI_WaitFlagStateUntilTimeout>
 801cefa:	2800      	cmp	r0, #0
 801cefc:	f000 80ea 	beq.w	801d0d4 <HAL_SPI_TransmitReceive+0x2fc>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801cf00:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801cf02:	f043 0302 	orr.w	r3, r3, #2
 801cf06:	6623      	str	r3, [r4, #96]	; 0x60
 801cf08:	e02a      	b.n	801cf60 <HAL_SPI_TransmitReceive+0x188>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801cf0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801cf0e:	e7c3      	b.n	801ce98 <HAL_SPI_TransmitReceive+0xc0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801cf10:	6823      	ldr	r3, [r4, #0]
 801cf12:	689a      	ldr	r2, [r3, #8]
 801cf14:	0790      	lsls	r0, r2, #30
 801cf16:	d507      	bpl.n	801cf28 <HAL_SPI_TransmitReceive+0x150>
 801cf18:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801cf1a:	b292      	uxth	r2, r2
 801cf1c:	b122      	cbz	r2, 801cf28 <HAL_SPI_TransmitReceive+0x150>
 801cf1e:	f1b9 0f00 	cmp.w	r9, #0
 801cf22:	d128      	bne.n	801cf76 <HAL_SPI_TransmitReceive+0x19e>
        txallowed = 0U;
 801cf24:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801cf28:	6899      	ldr	r1, [r3, #8]
 801cf2a:	f011 0101 	ands.w	r1, r1, #1
 801cf2e:	d00f      	beq.n	801cf50 <HAL_SPI_TransmitReceive+0x178>
 801cf30:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 801cf34:	b292      	uxth	r2, r2
 801cf36:	b15a      	cbz	r2, 801cf50 <HAL_SPI_TransmitReceive+0x178>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801cf38:	68da      	ldr	r2, [r3, #12]
 801cf3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cf3c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801cf40:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801cf42:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801cf46:	3b01      	subs	r3, #1
 801cf48:	b29b      	uxth	r3, r3
 801cf4a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 801cf4e:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801cf50:	f7fd f803 	bl	8019f5a <HAL_GetTick>
 801cf54:	eba0 0008 	sub.w	r0, r0, r8
 801cf58:	42b8      	cmp	r0, r7
 801cf5a:	d3ba      	bcc.n	801ced2 <HAL_SPI_TransmitReceive+0xfa>
 801cf5c:	1c79      	adds	r1, r7, #1
 801cf5e:	d0b8      	beq.n	801ced2 <HAL_SPI_TransmitReceive+0xfa>
          errorcode = HAL_TIMEOUT;
 801cf60:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 801cf62:	2301      	movs	r3, #1
 801cf64:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801cf68:	2300      	movs	r3, #0
 801cf6a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 801cf6e:	4628      	mov	r0, r5
 801cf70:	b002      	add	sp, #8
 801cf72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cf76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801cf78:	f832 1b02 	ldrh.w	r1, [r2], #2
 801cf7c:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cf7e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801cf80:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801cf82:	3a01      	subs	r2, #1
 801cf84:	b292      	uxth	r2, r2
 801cf86:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 801cf88:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801cf8a:	b292      	uxth	r2, r2
 801cf8c:	2a00      	cmp	r2, #0
 801cf8e:	d1c9      	bne.n	801cf24 <HAL_SPI_TransmitReceive+0x14c>
 801cf90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801cf92:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 801cf96:	d1c5      	bne.n	801cf24 <HAL_SPI_TransmitReceive+0x14c>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 801cf98:	b926      	cbnz	r6, 801cfa4 <HAL_SPI_TransmitReceive+0x1cc>
 801cf9a:	b11d      	cbz	r5, 801cfa4 <HAL_SPI_TransmitReceive+0x1cc>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 801cf9c:	681a      	ldr	r2, [r3, #0]
 801cf9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801cfa2:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 801cfa4:	681a      	ldr	r2, [r3, #0]
 801cfa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801cfaa:	601a      	str	r2, [r3, #0]
 801cfac:	e7ba      	b.n	801cf24 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cfae:	b112      	cbz	r2, 801cfb6 <HAL_SPI_TransmitReceive+0x1de>
 801cfb0:	f1b9 0f01 	cmp.w	r9, #1
 801cfb4:	d10b      	bne.n	801cfce <HAL_SPI_TransmitReceive+0x1f6>
      if (hspi->TxXferCount > 1U)
 801cfb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801cfb8:	b29b      	uxth	r3, r3
 801cfba:	2b01      	cmp	r3, #1
 801cfbc:	d94b      	bls.n	801d056 <HAL_SPI_TransmitReceive+0x27e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cfbe:	f836 3b02 	ldrh.w	r3, [r6], #2
 801cfc2:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 801cfc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cfc6:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801cfc8:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 801cfca:	b29b      	uxth	r3, r3
 801cfcc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 801cfce:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 801cfd0:	f001 0604 	and.w	r6, r1, #4
 801cfd4:	f000 0908 	and.w	r9, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cfd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801cfda:	b29b      	uxth	r3, r3
 801cfdc:	b92b      	cbnz	r3, 801cfea <HAL_SPI_TransmitReceive+0x212>
 801cfde:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801cfe2:	b29b      	uxth	r3, r3
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	f43f af7b 	beq.w	801cee0 <HAL_SPI_TransmitReceive+0x108>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801cfea:	6821      	ldr	r1, [r4, #0]
 801cfec:	688b      	ldr	r3, [r1, #8]
 801cfee:	079a      	lsls	r2, r3, #30
 801cff0:	d505      	bpl.n	801cffe <HAL_SPI_TransmitReceive+0x226>
 801cff2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801cff4:	b29b      	uxth	r3, r3
 801cff6:	b113      	cbz	r3, 801cffe <HAL_SPI_TransmitReceive+0x226>
 801cff8:	2d00      	cmp	r5, #0
 801cffa:	d134      	bne.n	801d066 <HAL_SPI_TransmitReceive+0x28e>
        txallowed = 0U;
 801cffc:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801cffe:	6821      	ldr	r1, [r4, #0]
 801d000:	688b      	ldr	r3, [r1, #8]
 801d002:	f013 0301 	ands.w	r3, r3, #1
 801d006:	d01d      	beq.n	801d044 <HAL_SPI_TransmitReceive+0x26c>
 801d008:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 801d00c:	b292      	uxth	r2, r2
 801d00e:	b1ca      	cbz	r2, 801d044 <HAL_SPI_TransmitReceive+0x26c>
        if (hspi->RxXferCount > 1U)
 801d010:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 801d014:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d016:	b280      	uxth	r0, r0
 801d018:	2801      	cmp	r0, #1
 801d01a:	d94f      	bls.n	801d0bc <HAL_SPI_TransmitReceive+0x2e4>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d01c:	68c8      	ldr	r0, [r1, #12]
 801d01e:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801d022:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801d024:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 801d028:	3a02      	subs	r2, #2
 801d02a:	b292      	uxth	r2, r2
 801d02c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801d030:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 801d034:	b292      	uxth	r2, r2
 801d036:	2a01      	cmp	r2, #1
 801d038:	d803      	bhi.n	801d042 <HAL_SPI_TransmitReceive+0x26a>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d03a:	684a      	ldr	r2, [r1, #4]
 801d03c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d040:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 801d042:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801d044:	f7fc ff89 	bl	8019f5a <HAL_GetTick>
 801d048:	eba0 0008 	sub.w	r0, r0, r8
 801d04c:	42b8      	cmp	r0, r7
 801d04e:	d3c3      	bcc.n	801cfd8 <HAL_SPI_TransmitReceive+0x200>
 801d050:	1c7b      	adds	r3, r7, #1
 801d052:	d0c1      	beq.n	801cfd8 <HAL_SPI_TransmitReceive+0x200>
 801d054:	e784      	b.n	801cf60 <HAL_SPI_TransmitReceive+0x188>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d056:	7833      	ldrb	r3, [r6, #0]
 801d058:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 801d05a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d05c:	3301      	adds	r3, #1
 801d05e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801d060:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801d062:	3b01      	subs	r3, #1
 801d064:	e7b1      	b.n	801cfca <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->TxXferCount > 1U)
 801d066:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d06a:	b292      	uxth	r2, r2
 801d06c:	2a01      	cmp	r2, #1
 801d06e:	d91d      	bls.n	801d0ac <HAL_SPI_TransmitReceive+0x2d4>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d070:	f833 2b02 	ldrh.w	r2, [r3], #2
 801d074:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d076:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d078:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801d07a:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 801d07c:	b29b      	uxth	r3, r3
 801d07e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 801d080:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801d082:	b29b      	uxth	r3, r3
 801d084:	2b00      	cmp	r3, #0
 801d086:	d1b9      	bne.n	801cffc <HAL_SPI_TransmitReceive+0x224>
 801d088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d08a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d08e:	d1b5      	bne.n	801cffc <HAL_SPI_TransmitReceive+0x224>
 801d090:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 801d092:	b936      	cbnz	r6, 801d0a2 <HAL_SPI_TransmitReceive+0x2ca>
 801d094:	f1b9 0f00 	cmp.w	r9, #0
 801d098:	d003      	beq.n	801d0a2 <HAL_SPI_TransmitReceive+0x2ca>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 801d09a:	681a      	ldr	r2, [r3, #0]
 801d09c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d0a0:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 801d0a2:	681a      	ldr	r2, [r3, #0]
 801d0a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d0a8:	601a      	str	r2, [r3, #0]
 801d0aa:	e7a7      	b.n	801cffc <HAL_SPI_TransmitReceive+0x224>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d0ac:	781b      	ldrb	r3, [r3, #0]
 801d0ae:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 801d0b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d0b2:	3301      	adds	r3, #1
 801d0b4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 801d0b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801d0b8:	3b01      	subs	r3, #1
 801d0ba:	e7df      	b.n	801d07c <HAL_SPI_TransmitReceive+0x2a4>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d0bc:	7b09      	ldrb	r1, [r1, #12]
 801d0be:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 801d0c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d0c2:	3201      	adds	r2, #1
 801d0c4:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 801d0c6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 801d0ca:	3a01      	subs	r2, #1
 801d0cc:	b292      	uxth	r2, r2
 801d0ce:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 801d0d2:	e7b6      	b.n	801d042 <HAL_SPI_TransmitReceive+0x26a>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801d0d4:	68e2      	ldr	r2, [r4, #12]
 801d0d6:	6823      	ldr	r3, [r4, #0]
 801d0d8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 801d0dc:	d119      	bne.n	801d112 <HAL_SPI_TransmitReceive+0x33a>
      READ_REG(hspi->Instance->DR);
 801d0de:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 801d0e0:	6822      	ldr	r2, [r4, #0]
 801d0e2:	6895      	ldr	r5, [r2, #8]
 801d0e4:	f015 0510 	ands.w	r5, r5, #16
 801d0e8:	d007      	beq.n	801d0fa <HAL_SPI_TransmitReceive+0x322>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801d0ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d0ec:	f043 0302 	orr.w	r3, r3, #2
 801d0f0:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 801d0f2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 801d0f6:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 801d0f8:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d0fa:	4642      	mov	r2, r8
 801d0fc:	4639      	mov	r1, r7
 801d0fe:	4620      	mov	r0, r4
 801d100:	f7ff fdbc 	bl	801cc7c <SPI_EndRxTxTransaction>
 801d104:	2800      	cmp	r0, #0
 801d106:	f43f af2c 	beq.w	801cf62 <HAL_SPI_TransmitReceive+0x18a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d10a:	2320      	movs	r3, #32
 801d10c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 801d10e:	2501      	movs	r5, #1
 801d110:	e727      	b.n	801cf62 <HAL_SPI_TransmitReceive+0x18a>
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 801d112:	7b1b      	ldrb	r3, [r3, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 801d114:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d116:	2b02      	cmp	r3, #2
 801d118:	d1e2      	bne.n	801d0e0 <HAL_SPI_TransmitReceive+0x308>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 801d11a:	2201      	movs	r2, #1
 801d11c:	f8cd 8000 	str.w	r8, [sp]
 801d120:	463b      	mov	r3, r7
 801d122:	4611      	mov	r1, r2
 801d124:	4620      	mov	r0, r4
 801d126:	f7ff fd4d 	bl	801cbc4 <SPI_WaitFlagStateUntilTimeout>
 801d12a:	2800      	cmp	r0, #0
 801d12c:	f47f aee8 	bne.w	801cf00 <HAL_SPI_TransmitReceive+0x128>
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 801d130:	6823      	ldr	r3, [r4, #0]
 801d132:	7b1b      	ldrb	r3, [r3, #12]
 801d134:	e7d4      	b.n	801d0e0 <HAL_SPI_TransmitReceive+0x308>
    errorcode = HAL_BUSY;
 801d136:	2502      	movs	r5, #2
 801d138:	e713      	b.n	801cf62 <HAL_SPI_TransmitReceive+0x18a>
  __HAL_LOCK(hspi);
 801d13a:	2502      	movs	r5, #2
 801d13c:	e717      	b.n	801cf6e <HAL_SPI_TransmitReceive+0x196>

0801d13e <HAL_SPI_GetState>:
  return hspi->State;
 801d13e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 801d142:	4770      	bx	lr

0801d144 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d144:	6803      	ldr	r3, [r0, #0]
 801d146:	681a      	ldr	r2, [r3, #0]
 801d148:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801d14c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d14e:	689a      	ldr	r2, [r3, #8]
 801d150:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801d154:	f022 0201 	bic.w	r2, r2, #1
 801d158:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d15a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801d15c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d15e:	bf02      	ittt	eq
 801d160:	681a      	ldreq	r2, [r3, #0]
 801d162:	f022 0210 	biceq.w	r2, r2, #16
 801d166:	601a      	streq	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801d168:	2320      	movs	r3, #32
 801d16a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d16e:	2300      	movs	r3, #0
 801d170:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801d172:	6703      	str	r3, [r0, #112]	; 0x70
}
 801d174:	4770      	bx	lr
	...

0801d178 <HAL_UART_Transmit_DMA>:
{
 801d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d17a:	4604      	mov	r4, r0
 801d17c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 801d17e:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 801d182:	2f20      	cmp	r7, #32
 801d184:	d13a      	bne.n	801d1fc <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 801d186:	b361      	cbz	r1, 801d1e2 <HAL_UART_Transmit_DMA+0x6a>
 801d188:	b35a      	cbz	r2, 801d1e2 <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 801d18a:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 801d18e:	2a01      	cmp	r2, #1
 801d190:	d034      	beq.n	801d1fc <HAL_UART_Transmit_DMA+0x84>
    if (huart->hdmatx != NULL)
 801d192:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 801d194:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 801d198:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d19a:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d19c:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d19e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 801d1a2:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 801d1a6:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 801d1a8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d1ac:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 801d1b0:	b1c8      	cbz	r0, 801d1e6 <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d1b2:	f8df c04c 	ldr.w	ip, [pc, #76]	; 801d200 <HAL_UART_Transmit_DMA+0x88>
 801d1b6:	6822      	ldr	r2, [r4, #0]
 801d1b8:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d1bc:	f8df c044 	ldr.w	ip, [pc, #68]	; 801d204 <HAL_UART_Transmit_DMA+0x8c>
 801d1c0:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d1c4:	f8df c040 	ldr.w	ip, [pc, #64]	; 801d208 <HAL_UART_Transmit_DMA+0x90>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d1c8:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 801d1ca:	e9c0 c60d 	strd	ip, r6, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d1ce:	f7fe f91d 	bl	801b40c <HAL_DMA_Start_IT>
 801d1d2:	b140      	cbz	r0, 801d1e6 <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d1d4:	2310      	movs	r3, #16
 801d1d6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 801d1da:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 801d1de:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
      return HAL_ERROR;
 801d1e2:	2001      	movs	r0, #1
 801d1e4:	e009      	b.n	801d1fa <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d1e6:	6823      	ldr	r3, [r4, #0]
 801d1e8:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 801d1ea:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d1ec:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 801d1ee:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d1f2:	689a      	ldr	r2, [r3, #8]
 801d1f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801d1f8:	609a      	str	r2, [r3, #8]
}
 801d1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 801d1fc:	2002      	movs	r0, #2
 801d1fe:	e7fc      	b.n	801d1fa <HAL_UART_Transmit_DMA+0x82>
 801d200:	0801d20d 	.word	0x0801d20d
 801d204:	0801d23d 	.word	0x0801d23d
 801d208:	0801d249 	.word	0x0801d249

0801d20c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801d20c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d20e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d210:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	f013 0320 	ands.w	r3, r3, #32
 801d218:	d10b      	bne.n	801d232 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 801d21a:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d21e:	6813      	ldr	r3, [r2, #0]
 801d220:	689a      	ldr	r2, [r3, #8]
 801d222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801d226:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d228:	681a      	ldr	r2, [r3, #0]
 801d22a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d22e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d230:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 801d232:	4610      	mov	r0, r2
 801d234:	f7fc ffe6 	bl	801a204 <HAL_UART_TxCpltCallback>
}
 801d238:	e7fa      	b.n	801d230 <UART_DMATransmitCplt+0x24>

0801d23a <HAL_UART_TxHalfCpltCallback>:
 801d23a:	4770      	bx	lr

0801d23c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801d23c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801d23e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d240:	f7ff fffb 	bl	801d23a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d244:	bd08      	pop	{r3, pc}

0801d246 <HAL_UART_ErrorCallback>:
 801d246:	4770      	bx	lr

0801d248 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d248:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801d24a:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 801d24c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801d250:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
{
 801d254:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801d256:	689c      	ldr	r4, [r3, #8]
 801d258:	0624      	lsls	r4, r4, #24
 801d25a:	d50f      	bpl.n	801d27c <UART_DMAError+0x34>
 801d25c:	2a21      	cmp	r2, #33	; 0x21
 801d25e:	d10d      	bne.n	801d27c <UART_DMAError+0x34>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801d260:	2200      	movs	r2, #0
 801d262:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801d266:	681a      	ldr	r2, [r3, #0]
 801d268:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801d26c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801d26e:	689a      	ldr	r2, [r3, #8]
 801d270:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 801d274:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 801d276:	2220      	movs	r2, #32
 801d278:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801d27c:	689b      	ldr	r3, [r3, #8]
 801d27e:	065b      	lsls	r3, r3, #25
 801d280:	d506      	bpl.n	801d290 <UART_DMAError+0x48>
 801d282:	2922      	cmp	r1, #34	; 0x22
 801d284:	d104      	bne.n	801d290 <UART_DMAError+0x48>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801d286:	2300      	movs	r3, #0
 801d288:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801d28c:	f7ff ff5a 	bl	801d144 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801d290:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 801d294:	f043 0310 	orr.w	r3, r3, #16
 801d298:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801d29c:	f7ff ffd3 	bl	801d246 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d2a0:	bd10      	pop	{r4, pc}

0801d2a2 <HAL_UARTEx_RxEventCallback>:
}
 801d2a2:	4770      	bx	lr

0801d2a4 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d2a4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 801d2a8:	6803      	ldr	r3, [r0, #0]
 801d2aa:	2a22      	cmp	r2, #34	; 0x22
{
 801d2ac:	b510      	push	{r4, lr}
 801d2ae:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d2b0:	d130      	bne.n	801d314 <UART_RxISR_8BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801d2b4:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
 801d2b8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 801d2ba:	400b      	ands	r3, r1
 801d2bc:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 801d2be:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801d2c0:	3301      	adds	r3, #1
 801d2c2:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 801d2c4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 801d2c8:	3b01      	subs	r3, #1
 801d2ca:	b29b      	uxth	r3, r3
 801d2cc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801d2d0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 801d2d4:	b292      	uxth	r2, r2
 801d2d6:	b9ca      	cbnz	r2, 801d30c <UART_RxISR_8BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d2d8:	6803      	ldr	r3, [r0, #0]
 801d2da:	6819      	ldr	r1, [r3, #0]
 801d2dc:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 801d2e0:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d2e2:	6899      	ldr	r1, [r3, #8]
 801d2e4:	f021 0101 	bic.w	r1, r1, #1
 801d2e8:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d2ea:	2120      	movs	r1, #32
 801d2ec:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801d2f0:	6702      	str	r2, [r0, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d2f2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801d2f4:	2a01      	cmp	r2, #1
 801d2f6:	d10a      	bne.n	801d30e <UART_RxISR_8BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d2f8:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d2fa:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d2fe:	f022 0210 	bic.w	r2, r2, #16
 801d302:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d304:	f7ff ffcd 	bl	801d2a2 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d308:	2300      	movs	r3, #0
 801d30a:	66e3      	str	r3, [r4, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d30c:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 801d30e:	f7fc ff7f 	bl	801a210 <HAL_UART_RxCpltCallback>
 801d312:	e7f9      	b.n	801d308 <UART_RxISR_8BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d314:	699a      	ldr	r2, [r3, #24]
 801d316:	f042 0208 	orr.w	r2, r2, #8
 801d31a:	619a      	str	r2, [r3, #24]
}
 801d31c:	e7f6      	b.n	801d30c <UART_RxISR_8BIT+0x68>

0801d31e <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d31e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 801d322:	6803      	ldr	r3, [r0, #0]
 801d324:	2a22      	cmp	r2, #34	; 0x22
{
 801d326:	b510      	push	{r4, lr}
 801d328:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d32a:	d12e      	bne.n	801d38a <UART_RxISR_16BIT+0x6c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d32c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 801d32e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 801d332:	4011      	ands	r1, r2
 801d334:	6d82      	ldr	r2, [r0, #88]	; 0x58
 801d336:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 801d33a:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 801d33c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 801d340:	3a01      	subs	r2, #1
 801d342:	b292      	uxth	r2, r2
 801d344:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801d348:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 801d34c:	b292      	uxth	r2, r2
 801d34e:	b9c2      	cbnz	r2, 801d382 <UART_RxISR_16BIT+0x64>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d350:	6819      	ldr	r1, [r3, #0]
 801d352:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 801d356:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d358:	6899      	ldr	r1, [r3, #8]
 801d35a:	f021 0101 	bic.w	r1, r1, #1
 801d35e:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d360:	2120      	movs	r1, #32
 801d362:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801d366:	6702      	str	r2, [r0, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d368:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801d36a:	2a01      	cmp	r2, #1
 801d36c:	d10a      	bne.n	801d384 <UART_RxISR_16BIT+0x66>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d36e:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d370:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d374:	f022 0210 	bic.w	r2, r2, #16
 801d378:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d37a:	f7ff ff92 	bl	801d2a2 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d37e:	2300      	movs	r3, #0
 801d380:	66e3      	str	r3, [r4, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d382:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 801d384:	f7fc ff44 	bl	801a210 <HAL_UART_RxCpltCallback>
 801d388:	e7f9      	b.n	801d37e <UART_RxISR_16BIT+0x60>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d38a:	699a      	ldr	r2, [r3, #24]
 801d38c:	f042 0208 	orr.w	r2, r2, #8
 801d390:	619a      	str	r2, [r3, #24]
}
 801d392:	e7f6      	b.n	801d382 <UART_RxISR_16BIT+0x64>

0801d394 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801d394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801d398:	6803      	ldr	r3, [r0, #0]
 801d39a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801d39c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801d3a0:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d3a2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 801d3a6:	2a22      	cmp	r2, #34	; 0x22
{
 801d3a8:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d3aa:	f040 8085 	bne.w	801d4b8 <UART_RxISR_8BIT_FIFOEN+0x124>
  uint16_t  uhMask = huart->Mask;
 801d3ae:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801d3b2:	f8b0 a068 	ldrh.w	sl, [r0, #104]	; 0x68
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d3b6:	f8df b110 	ldr.w	fp, [pc, #272]	; 801d4c8 <UART_RxISR_8BIT_FIFOEN+0x134>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d3ba:	2700      	movs	r7, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d3bc:	f006 0601 	and.w	r6, r6, #1
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801d3c0:	f1ba 0f00 	cmp.w	sl, #0
 801d3c4:	d001      	beq.n	801d3ca <UART_RxISR_8BIT_FIFOEN+0x36>
 801d3c6:	06ab      	lsls	r3, r5, #26
 801d3c8:	d414      	bmi.n	801d3f4 <UART_RxISR_8BIT_FIFOEN+0x60>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801d3ca:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 801d3ce:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801d3d0:	b173      	cbz	r3, 801d3f0 <UART_RxISR_8BIT_FIFOEN+0x5c>
 801d3d2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 801d3d6:	429a      	cmp	r2, r3
 801d3d8:	d90a      	bls.n	801d3f0 <UART_RxISR_8BIT_FIFOEN+0x5c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801d3da:	6823      	ldr	r3, [r4, #0]
 801d3dc:	689a      	ldr	r2, [r3, #8]
 801d3de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801d3e2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801d3e4:	4a37      	ldr	r2, [pc, #220]	; (801d4c4 <UART_RxISR_8BIT_FIFOEN+0x130>)
 801d3e6:	6722      	str	r2, [r4, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801d3e8:	681a      	ldr	r2, [r3, #0]
 801d3ea:	f042 0220 	orr.w	r2, r2, #32
 801d3ee:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d3f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d3f4:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801d3f6:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801d3fa:	ea03 0308 	and.w	r3, r3, r8
 801d3fe:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 801d400:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d402:	3301      	adds	r3, #1
 801d404:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 801d406:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 801d40a:	3b01      	subs	r3, #1
 801d40c:	b29b      	uxth	r3, r3
 801d40e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801d412:	6823      	ldr	r3, [r4, #0]
 801d414:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801d416:	076a      	lsls	r2, r5, #29
 801d418:	d02a      	beq.n	801d470 <UART_RxISR_8BIT_FIFOEN+0xdc>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d41a:	07e8      	lsls	r0, r5, #31
 801d41c:	d50a      	bpl.n	801d434 <UART_RxISR_8BIT_FIFOEN+0xa0>
 801d41e:	f419 7f80 	tst.w	r9, #256	; 0x100
 801d422:	d007      	beq.n	801d434 <UART_RxISR_8BIT_FIFOEN+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d424:	2201      	movs	r2, #1
 801d426:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d428:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 801d42c:	f042 0201 	orr.w	r2, r2, #1
 801d430:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d434:	07a9      	lsls	r1, r5, #30
 801d436:	d508      	bpl.n	801d44a <UART_RxISR_8BIT_FIFOEN+0xb6>
 801d438:	b13e      	cbz	r6, 801d44a <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d43a:	2202      	movs	r2, #2
 801d43c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d43e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 801d442:	f042 0204 	orr.w	r2, r2, #4
 801d446:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d44a:	076a      	lsls	r2, r5, #29
 801d44c:	d508      	bpl.n	801d460 <UART_RxISR_8BIT_FIFOEN+0xcc>
 801d44e:	b13e      	cbz	r6, 801d460 <UART_RxISR_8BIT_FIFOEN+0xcc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d450:	2204      	movs	r2, #4
 801d452:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d454:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801d458:	f043 0302 	orr.w	r3, r3, #2
 801d45c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d460:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801d464:	b123      	cbz	r3, 801d470 <UART_RxISR_8BIT_FIFOEN+0xdc>
          HAL_UART_ErrorCallback(huart);
 801d466:	4620      	mov	r0, r4
 801d468:	f7ff feed 	bl	801d246 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d46c:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 801d470:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 801d474:	b292      	uxth	r2, r2
 801d476:	2a00      	cmp	r2, #0
 801d478:	d1a2      	bne.n	801d3c0 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d47a:	6823      	ldr	r3, [r4, #0]
 801d47c:	6819      	ldr	r1, [r3, #0]
 801d47e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 801d482:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d484:	6899      	ldr	r1, [r3, #8]
 801d486:	ea01 010b 	and.w	r1, r1, fp
 801d48a:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 801d48c:	2120      	movs	r1, #32
 801d48e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 801d492:	6722      	str	r2, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d494:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801d496:	2a01      	cmp	r2, #1
 801d498:	d10a      	bne.n	801d4b0 <UART_RxISR_8BIT_FIFOEN+0x11c>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d49a:	681a      	ldr	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d49c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d4a0:	f022 0210 	bic.w	r2, r2, #16
 801d4a4:	601a      	str	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d4a6:	4620      	mov	r0, r4
 801d4a8:	f7ff fefb 	bl	801d2a2 <HAL_UARTEx_RxEventCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d4ac:	66e7      	str	r7, [r4, #108]	; 0x6c
 801d4ae:	e787      	b.n	801d3c0 <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 801d4b0:	4620      	mov	r0, r4
 801d4b2:	f7fc fead 	bl	801a210 <HAL_UART_RxCpltCallback>
 801d4b6:	e7f9      	b.n	801d4ac <UART_RxISR_8BIT_FIFOEN+0x118>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d4b8:	699a      	ldr	r2, [r3, #24]
 801d4ba:	f042 0208 	orr.w	r2, r2, #8
 801d4be:	619a      	str	r2, [r3, #24]
}
 801d4c0:	e796      	b.n	801d3f0 <UART_RxISR_8BIT_FIFOEN+0x5c>
 801d4c2:	bf00      	nop
 801d4c4:	0801d2a5 	.word	0x0801d2a5
 801d4c8:	effffffe 	.word	0xeffffffe

0801d4cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801d4cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801d4d0:	6803      	ldr	r3, [r0, #0]
 801d4d2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801d4d4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801d4d8:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d4da:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 801d4de:	2a22      	cmp	r2, #34	; 0x22
{
 801d4e0:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d4e2:	f040 8083 	bne.w	801d5ec <UART_RxISR_16BIT_FIFOEN+0x120>
  uint16_t  uhMask = huart->Mask;
 801d4e6:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801d4ea:	f8b0 a068 	ldrh.w	sl, [r0, #104]	; 0x68
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d4ee:	f8df b10c 	ldr.w	fp, [pc, #268]	; 801d5fc <UART_RxISR_16BIT_FIFOEN+0x130>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d4f2:	2700      	movs	r7, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d4f4:	f006 0601 	and.w	r6, r6, #1
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801d4f8:	f1ba 0f00 	cmp.w	sl, #0
 801d4fc:	d001      	beq.n	801d502 <UART_RxISR_16BIT_FIFOEN+0x36>
 801d4fe:	06ab      	lsls	r3, r5, #26
 801d500:	d414      	bmi.n	801d52c <UART_RxISR_16BIT_FIFOEN+0x60>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801d502:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 801d506:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801d508:	b173      	cbz	r3, 801d528 <UART_RxISR_16BIT_FIFOEN+0x5c>
 801d50a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 801d50e:	429a      	cmp	r2, r3
 801d510:	d90a      	bls.n	801d528 <UART_RxISR_16BIT_FIFOEN+0x5c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801d512:	6823      	ldr	r3, [r4, #0]
 801d514:	689a      	ldr	r2, [r3, #8]
 801d516:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801d51a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801d51c:	4a36      	ldr	r2, [pc, #216]	; (801d5f8 <UART_RxISR_16BIT_FIFOEN+0x12c>)
 801d51e:	6722      	str	r2, [r4, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801d520:	681a      	ldr	r2, [r3, #0]
 801d522:	f042 0220 	orr.w	r2, r2, #32
 801d526:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d52c:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 801d52e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d530:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 801d532:	ea08 0101 	and.w	r1, r8, r1
 801d536:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 801d53a:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 801d53c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 801d540:	3a01      	subs	r2, #1
 801d542:	b292      	uxth	r2, r2
 801d544:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801d548:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801d54a:	076a      	lsls	r2, r5, #29
 801d54c:	d02a      	beq.n	801d5a4 <UART_RxISR_16BIT_FIFOEN+0xd8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d54e:	07e8      	lsls	r0, r5, #31
 801d550:	d50a      	bpl.n	801d568 <UART_RxISR_16BIT_FIFOEN+0x9c>
 801d552:	f419 7f80 	tst.w	r9, #256	; 0x100
 801d556:	d007      	beq.n	801d568 <UART_RxISR_16BIT_FIFOEN+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d558:	2201      	movs	r2, #1
 801d55a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d55c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 801d560:	f042 0201 	orr.w	r2, r2, #1
 801d564:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d568:	07a9      	lsls	r1, r5, #30
 801d56a:	d508      	bpl.n	801d57e <UART_RxISR_16BIT_FIFOEN+0xb2>
 801d56c:	b13e      	cbz	r6, 801d57e <UART_RxISR_16BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d56e:	2202      	movs	r2, #2
 801d570:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d572:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 801d576:	f042 0204 	orr.w	r2, r2, #4
 801d57a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d57e:	076a      	lsls	r2, r5, #29
 801d580:	d508      	bpl.n	801d594 <UART_RxISR_16BIT_FIFOEN+0xc8>
 801d582:	b13e      	cbz	r6, 801d594 <UART_RxISR_16BIT_FIFOEN+0xc8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d584:	2204      	movs	r2, #4
 801d586:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d588:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801d58c:	f043 0302 	orr.w	r3, r3, #2
 801d590:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d594:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801d598:	b123      	cbz	r3, 801d5a4 <UART_RxISR_16BIT_FIFOEN+0xd8>
          HAL_UART_ErrorCallback(huart);
 801d59a:	4620      	mov	r0, r4
 801d59c:	f7ff fe53 	bl	801d246 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d5a0:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 801d5a4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 801d5a8:	b292      	uxth	r2, r2
 801d5aa:	2a00      	cmp	r2, #0
 801d5ac:	d1a4      	bne.n	801d4f8 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d5ae:	6823      	ldr	r3, [r4, #0]
 801d5b0:	6819      	ldr	r1, [r3, #0]
 801d5b2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 801d5b6:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d5b8:	6899      	ldr	r1, [r3, #8]
 801d5ba:	ea01 010b 	and.w	r1, r1, fp
 801d5be:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 801d5c0:	2120      	movs	r1, #32
 801d5c2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 801d5c6:	6722      	str	r2, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d5c8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801d5ca:	2a01      	cmp	r2, #1
 801d5cc:	d10a      	bne.n	801d5e4 <UART_RxISR_16BIT_FIFOEN+0x118>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d5ce:	681a      	ldr	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d5d0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d5d4:	f022 0210 	bic.w	r2, r2, #16
 801d5d8:	601a      	str	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d5da:	4620      	mov	r0, r4
 801d5dc:	f7ff fe61 	bl	801d2a2 <HAL_UARTEx_RxEventCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d5e0:	66e7      	str	r7, [r4, #108]	; 0x6c
 801d5e2:	e789      	b.n	801d4f8 <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 801d5e4:	4620      	mov	r0, r4
 801d5e6:	f7fc fe13 	bl	801a210 <HAL_UART_RxCpltCallback>
 801d5ea:	e7f9      	b.n	801d5e0 <UART_RxISR_16BIT_FIFOEN+0x114>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d5ec:	699a      	ldr	r2, [r3, #24]
 801d5ee:	f042 0208 	orr.w	r2, r2, #8
 801d5f2:	619a      	str	r2, [r3, #24]
}
 801d5f4:	e798      	b.n	801d528 <UART_RxISR_16BIT_FIFOEN+0x5c>
 801d5f6:	bf00      	nop
 801d5f8:	0801d31f 	.word	0x0801d31f
 801d5fc:	effffffe 	.word	0xeffffffe

0801d600 <UART_SetConfig>:
{
 801d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d602:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 801d604:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801d606:	6921      	ldr	r1, [r4, #16]
 801d608:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801d60a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801d60c:	69c0      	ldr	r0, [r0, #28]
 801d60e:	430a      	orrs	r2, r1
 801d610:	6961      	ldr	r1, [r4, #20]
 801d612:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801d614:	4973      	ldr	r1, [pc, #460]	; (801d7e4 <UART_SetConfig+0x1e4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801d616:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801d618:	4029      	ands	r1, r5
 801d61a:	430a      	orrs	r2, r1
 801d61c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801d61e:	685a      	ldr	r2, [r3, #4]
 801d620:	68e1      	ldr	r1, [r4, #12]
 801d622:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801d626:	430a      	orrs	r2, r1
 801d628:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801d62a:	4a6f      	ldr	r2, [pc, #444]	; (801d7e8 <UART_SetConfig+0x1e8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801d62c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801d62e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 801d630:	bf1c      	itt	ne
 801d632:	6a22      	ldrne	r2, [r4, #32]
 801d634:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801d636:	689a      	ldr	r2, [r3, #8]
 801d638:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 801d63c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 801d640:	430a      	orrs	r2, r1
 801d642:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801d644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d646:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d648:	f022 020f 	bic.w	r2, r2, #15
 801d64c:	430a      	orrs	r2, r1
 801d64e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 801d650:	4a66      	ldr	r2, [pc, #408]	; (801d7ec <UART_SetConfig+0x1ec>)
 801d652:	4293      	cmp	r3, r2
 801d654:	d118      	bne.n	801d688 <UART_SetConfig+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 801d656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d65e:	f003 0303 	and.w	r3, r3, #3
 801d662:	3b01      	subs	r3, #1
 801d664:	2b02      	cmp	r3, #2
 801d666:	f200 8098 	bhi.w	801d79a <UART_SetConfig+0x19a>
 801d66a:	4a61      	ldr	r2, [pc, #388]	; (801d7f0 <UART_SetConfig+0x1f0>)
 801d66c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d66e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801d672:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801d676:	d057      	beq.n	801d728 <UART_SetConfig+0x128>
    switch (clocksource)
 801d678:	2b07      	cmp	r3, #7
 801d67a:	d816      	bhi.n	801d6aa <UART_SetConfig+0xaa>
 801d67c:	e8df f003 	tbb	[pc, r3]
 801d680:	88158b83 	.word	0x88158b83
 801d684:	6f151515 	.word	0x6f151515
  UART_GETCLOCKSOURCE(huart, clocksource);
 801d688:	4a57      	ldr	r2, [pc, #348]	; (801d7e8 <UART_SetConfig+0x1e8>)
 801d68a:	4293      	cmp	r3, r2
 801d68c:	d10d      	bne.n	801d6aa <UART_SetConfig+0xaa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801d68e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801d692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d696:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801d69a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d69e:	d01a      	beq.n	801d6d6 <UART_SetConfig+0xd6>
 801d6a0:	d805      	bhi.n	801d6ae <UART_SetConfig+0xae>
 801d6a2:	b153      	cbz	r3, 801d6ba <UART_SetConfig+0xba>
 801d6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d6a8:	d012      	beq.n	801d6d0 <UART_SetConfig+0xd0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d6aa:	2001      	movs	r0, #1
 801d6ac:	e009      	b.n	801d6c2 <UART_SetConfig+0xc2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801d6ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801d6b2:	d1fa      	bne.n	801d6aa <UART_SetConfig+0xaa>
 801d6b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801d6b8:	e00e      	b.n	801d6d8 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 801d6ba:	f7fe fd11 	bl	801c0e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 801d6be:	b958      	cbnz	r0, 801d6d8 <UART_SetConfig+0xd8>
 801d6c0:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 801d6c2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 801d6c6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 801d6c8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 801d6ca:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 801d6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 801d6d0:	f7fe f8d8 	bl	801b884 <HAL_RCC_GetSysClockFreq>
        break;
 801d6d4:	e7f3      	b.n	801d6be <UART_SetConfig+0xbe>
        pclk = (uint32_t) HSI_VALUE;
 801d6d6:	4847      	ldr	r0, [pc, #284]	; (801d7f4 <UART_SetConfig+0x1f4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801d6d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d6da:	4b45      	ldr	r3, [pc, #276]	; (801d7f0 <UART_SetConfig+0x1f0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801d6dc:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801d6de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801d6e2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801d6e6:	889a      	ldrh	r2, [r3, #4]
 801d6e8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801d6ec:	4299      	cmp	r1, r3
 801d6ee:	d8dc      	bhi.n	801d6aa <UART_SetConfig+0xaa>
 801d6f0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 801d6f4:	d8d9      	bhi.n	801d6aa <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	2100      	movs	r1, #0
 801d6fa:	f7fb fb47 	bl	8018d8c <__aeabi_uldivmod>
 801d6fe:	020f      	lsls	r7, r1, #8
 801d700:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 801d704:	0206      	lsls	r6, r0, #8
 801d706:	0868      	lsrs	r0, r5, #1
 801d708:	1830      	adds	r0, r6, r0
 801d70a:	462a      	mov	r2, r5
 801d70c:	f04f 0300 	mov.w	r3, #0
 801d710:	f147 0100 	adc.w	r1, r7, #0
 801d714:	f7fb fb3a 	bl	8018d8c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801d718:	4b37      	ldr	r3, [pc, #220]	; (801d7f8 <UART_SetConfig+0x1f8>)
 801d71a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d71e:	429a      	cmp	r2, r3
 801d720:	d8c3      	bhi.n	801d6aa <UART_SetConfig+0xaa>
        huart->Instance->BRR = usartdiv;
 801d722:	6823      	ldr	r3, [r4, #0]
 801d724:	60d8      	str	r0, [r3, #12]
 801d726:	e7cb      	b.n	801d6c0 <UART_SetConfig+0xc0>
    switch (clocksource)
 801d728:	2b07      	cmp	r3, #7
 801d72a:	d8be      	bhi.n	801d6aa <UART_SetConfig+0xaa>
 801d72c:	a201      	add	r2, pc, #4	; (adr r2, 801d734 <UART_SetConfig+0x134>)
 801d72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d732:	bf00      	nop
 801d734:	0801d7a1 	.word	0x0801d7a1
 801d738:	0801d75b 	.word	0x0801d75b
 801d73c:	0801d6ab 	.word	0x0801d6ab
 801d740:	0801d755 	.word	0x0801d755
 801d744:	0801d6ab 	.word	0x0801d6ab
 801d748:	0801d6ab 	.word	0x0801d6ab
 801d74c:	0801d6ab 	.word	0x0801d6ab
 801d750:	0801d7a9 	.word	0x0801d7a9
        pclk = HAL_RCC_GetSysClockFreq();
 801d754:	f7fe f896 	bl	801b884 <HAL_RCC_GetSysClockFreq>
        break;
 801d758:	e024      	b.n	801d7a4 <UART_SetConfig+0x1a4>
        pclk = (uint32_t) HSI_VALUE;
 801d75a:	4826      	ldr	r0, [pc, #152]	; (801d7f4 <UART_SetConfig+0x1f4>)
 801d75c:	e024      	b.n	801d7a8 <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d75e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801d762:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d764:	4b22      	ldr	r3, [pc, #136]	; (801d7f0 <UART_SetConfig+0x1f0>)
 801d766:	6862      	ldr	r2, [r4, #4]
 801d768:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801d76c:	889b      	ldrh	r3, [r3, #4]
 801d76e:	fbb0 f0f3 	udiv	r0, r0, r3
 801d772:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 801d776:	fbb0 f0f2 	udiv	r0, r0, r2
 801d77a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d77c:	f1a0 0210 	sub.w	r2, r0, #16
 801d780:	f64f 73ef 	movw	r3, #65519	; 0xffef
 801d784:	e7cb      	b.n	801d71e <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK2Freq();
 801d786:	f7fe fcbd 	bl	801c104 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801d78a:	2800      	cmp	r0, #0
 801d78c:	d098      	beq.n	801d6c0 <UART_SetConfig+0xc0>
 801d78e:	e7e8      	b.n	801d762 <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetSysClockFreq();
 801d790:	f7fe f878 	bl	801b884 <HAL_RCC_GetSysClockFreq>
        break;
 801d794:	e7f9      	b.n	801d78a <UART_SetConfig+0x18a>
        pclk = (uint32_t) HSI_VALUE;
 801d796:	4817      	ldr	r0, [pc, #92]	; (801d7f4 <UART_SetConfig+0x1f4>)
 801d798:	e7e3      	b.n	801d762 <UART_SetConfig+0x162>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d79a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801d79e:	d1f2      	bne.n	801d786 <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK2Freq();
 801d7a0:	f7fe fcb0 	bl	801c104 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801d7a4:	2800      	cmp	r0, #0
 801d7a6:	d08b      	beq.n	801d6c0 <UART_SetConfig+0xc0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801d7a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d7aa:	4b11      	ldr	r3, [pc, #68]	; (801d7f0 <UART_SetConfig+0x1f0>)
 801d7ac:	6862      	ldr	r2, [r4, #4]
 801d7ae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801d7b2:	889b      	ldrh	r3, [r3, #4]
 801d7b4:	fbb0 f3f3 	udiv	r3, r0, r3
 801d7b8:	0850      	lsrs	r0, r2, #1
 801d7ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d7be:	fbb0 f0f2 	udiv	r0, r0, r2
 801d7c2:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d7c4:	f1a3 0110 	sub.w	r1, r3, #16
 801d7c8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 801d7cc:	4291      	cmp	r1, r2
 801d7ce:	f63f af6c 	bhi.w	801d6aa <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801d7d2:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 801d7d6:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801d7d8:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801d7da:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 801d7de:	4318      	orrs	r0, r3
 801d7e0:	60d0      	str	r0, [r2, #12]
 801d7e2:	e76d      	b.n	801d6c0 <UART_SetConfig+0xc0>
 801d7e4:	cfff69f3 	.word	0xcfff69f3
 801d7e8:	40008000 	.word	0x40008000
 801d7ec:	40013800 	.word	0x40013800
 801d7f0:	080273c4 	.word	0x080273c4
 801d7f4:	00f42400 	.word	0x00f42400
 801d7f8:	000ffcff 	.word	0x000ffcff

0801d7fc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801d7fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d7fe:	07da      	lsls	r2, r3, #31
{
 801d800:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801d802:	d506      	bpl.n	801d812 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801d804:	6801      	ldr	r1, [r0, #0]
 801d806:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 801d808:	684a      	ldr	r2, [r1, #4]
 801d80a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801d80e:	4322      	orrs	r2, r4
 801d810:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801d812:	079c      	lsls	r4, r3, #30
 801d814:	d506      	bpl.n	801d824 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801d816:	6801      	ldr	r1, [r0, #0]
 801d818:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801d81a:	684a      	ldr	r2, [r1, #4]
 801d81c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801d820:	4322      	orrs	r2, r4
 801d822:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801d824:	0759      	lsls	r1, r3, #29
 801d826:	d506      	bpl.n	801d836 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801d828:	6801      	ldr	r1, [r0, #0]
 801d82a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801d82c:	684a      	ldr	r2, [r1, #4]
 801d82e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801d832:	4322      	orrs	r2, r4
 801d834:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801d836:	071a      	lsls	r2, r3, #28
 801d838:	d506      	bpl.n	801d848 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801d83a:	6801      	ldr	r1, [r0, #0]
 801d83c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801d83e:	684a      	ldr	r2, [r1, #4]
 801d840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d844:	4322      	orrs	r2, r4
 801d846:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801d848:	06dc      	lsls	r4, r3, #27
 801d84a:	d506      	bpl.n	801d85a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801d84c:	6801      	ldr	r1, [r0, #0]
 801d84e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 801d850:	688a      	ldr	r2, [r1, #8]
 801d852:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d856:	4322      	orrs	r2, r4
 801d858:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801d85a:	0699      	lsls	r1, r3, #26
 801d85c:	d506      	bpl.n	801d86c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801d85e:	6801      	ldr	r1, [r0, #0]
 801d860:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801d862:	688a      	ldr	r2, [r1, #8]
 801d864:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801d868:	4322      	orrs	r2, r4
 801d86a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801d86c:	065a      	lsls	r2, r3, #25
 801d86e:	d50f      	bpl.n	801d890 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801d870:	6801      	ldr	r1, [r0, #0]
 801d872:	6c44      	ldr	r4, [r0, #68]	; 0x44
 801d874:	684a      	ldr	r2, [r1, #4]
 801d876:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 801d87a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d87c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801d880:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d882:	d105      	bne.n	801d890 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801d884:	684a      	ldr	r2, [r1, #4]
 801d886:	6c84      	ldr	r4, [r0, #72]	; 0x48
 801d888:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 801d88c:	4322      	orrs	r2, r4
 801d88e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801d890:	061b      	lsls	r3, r3, #24
 801d892:	d506      	bpl.n	801d8a2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801d894:	6802      	ldr	r2, [r0, #0]
 801d896:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801d898:	6853      	ldr	r3, [r2, #4]
 801d89a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801d89e:	430b      	orrs	r3, r1
 801d8a0:	6053      	str	r3, [r2, #4]
}
 801d8a2:	bd10      	pop	{r4, pc}

0801d8a4 <UART_WaitOnFlagUntilTimeout>:
{
 801d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801d8ac:	4604      	mov	r4, r0
 801d8ae:	460e      	mov	r6, r1
 801d8b0:	4615      	mov	r5, r2
 801d8b2:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d8b4:	6822      	ldr	r2, [r4, #0]
 801d8b6:	69d3      	ldr	r3, [r2, #28]
 801d8b8:	ea36 0303 	bics.w	r3, r6, r3
 801d8bc:	bf0c      	ite	eq
 801d8be:	2301      	moveq	r3, #1
 801d8c0:	2300      	movne	r3, #0
 801d8c2:	42ab      	cmp	r3, r5
 801d8c4:	d001      	beq.n	801d8ca <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 801d8c6:	2000      	movs	r0, #0
 801d8c8:	e01c      	b.n	801d904 <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 801d8ca:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 801d8ce:	d0f2      	beq.n	801d8b6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d8d0:	f7fc fb43 	bl	8019f5a <HAL_GetTick>
 801d8d4:	1bc0      	subs	r0, r0, r7
 801d8d6:	4540      	cmp	r0, r8
 801d8d8:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801d8da:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d8dc:	d802      	bhi.n	801d8e4 <UART_WaitOnFlagUntilTimeout+0x40>
 801d8de:	f1b8 0f00 	cmp.w	r8, #0
 801d8e2:	d111      	bne.n	801d908 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801d8e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801d8e8:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d8ea:	6883      	ldr	r3, [r0, #8]
 801d8ec:	f023 0301 	bic.w	r3, r3, #1
 801d8f0:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 801d8f2:	2320      	movs	r3, #32
 801d8f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801d8f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 801d902:	2003      	movs	r0, #3
}
 801d904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801d908:	075a      	lsls	r2, r3, #29
 801d90a:	d5d3      	bpl.n	801d8b4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801d90c:	69c3      	ldr	r3, [r0, #28]
 801d90e:	051b      	lsls	r3, r3, #20
 801d910:	d5d0      	bpl.n	801d8b4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d916:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801d918:	6803      	ldr	r3, [r0, #0]
 801d91a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801d91e:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d920:	6883      	ldr	r3, [r0, #8]
 801d922:	f023 0301 	bic.w	r3, r3, #1
 801d926:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 801d928:	2320      	movs	r3, #32
 801d92a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801d92e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801d932:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 801d936:	e7e1      	b.n	801d8fc <UART_WaitOnFlagUntilTimeout+0x58>

0801d938 <UART_CheckIdleState>:
{
 801d938:	b530      	push	{r4, r5, lr}
 801d93a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d93c:	2500      	movs	r5, #0
{
 801d93e:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d940:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 801d944:	f7fc fb09 	bl	8019f5a <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d948:	6822      	ldr	r2, [r4, #0]
 801d94a:	6812      	ldr	r2, [r2, #0]
 801d94c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 801d94e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d950:	d417      	bmi.n	801d982 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801d952:	6822      	ldr	r2, [r4, #0]
 801d954:	6812      	ldr	r2, [r2, #0]
 801d956:	0752      	lsls	r2, r2, #29
 801d958:	d509      	bpl.n	801d96e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d95a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 801d95e:	9200      	str	r2, [sp, #0]
 801d960:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801d964:	2200      	movs	r2, #0
 801d966:	4620      	mov	r0, r4
 801d968:	f7ff ff9c 	bl	801d8a4 <UART_WaitOnFlagUntilTimeout>
 801d96c:	b9b0      	cbnz	r0, 801d99c <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 801d96e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d970:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 801d972:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 801d976:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801d97a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d97e:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 801d980:	e00d      	b.n	801d99e <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d982:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 801d986:	9200      	str	r2, [sp, #0]
 801d988:	9003      	str	r0, [sp, #12]
 801d98a:	462a      	mov	r2, r5
 801d98c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d990:	4620      	mov	r0, r4
 801d992:	f7ff ff87 	bl	801d8a4 <UART_WaitOnFlagUntilTimeout>
 801d996:	9b03      	ldr	r3, [sp, #12]
 801d998:	2800      	cmp	r0, #0
 801d99a:	d0da      	beq.n	801d952 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 801d99c:	2003      	movs	r0, #3
}
 801d99e:	b005      	add	sp, #20
 801d9a0:	bd30      	pop	{r4, r5, pc}

0801d9a2 <HAL_UART_Init>:
{
 801d9a2:	b510      	push	{r4, lr}
  if (huart == NULL)
 801d9a4:	4604      	mov	r4, r0
 801d9a6:	b350      	cbz	r0, 801d9fe <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 801d9a8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801d9ac:	b91b      	cbnz	r3, 801d9b6 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 801d9ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 801d9b2:	f7fc fb1d 	bl	8019ff0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 801d9b6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801d9b8:	2324      	movs	r3, #36	; 0x24
 801d9ba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 801d9be:	6813      	ldr	r3, [r2, #0]
 801d9c0:	f023 0301 	bic.w	r3, r3, #1
 801d9c4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d9c6:	4620      	mov	r0, r4
 801d9c8:	f7ff fe1a 	bl	801d600 <UART_SetConfig>
 801d9cc:	2801      	cmp	r0, #1
 801d9ce:	d016      	beq.n	801d9fe <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d9d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d9d2:	b113      	cbz	r3, 801d9da <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 801d9d4:	4620      	mov	r0, r4
 801d9d6:	f7ff ff11 	bl	801d7fc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d9da:	6823      	ldr	r3, [r4, #0]
 801d9dc:	685a      	ldr	r2, [r3, #4]
 801d9de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801d9e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d9e4:	689a      	ldr	r2, [r3, #8]
 801d9e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801d9ea:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801d9ec:	681a      	ldr	r2, [r3, #0]
 801d9ee:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 801d9f2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 801d9f4:	601a      	str	r2, [r3, #0]
}
 801d9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 801d9fa:	f7ff bf9d 	b.w	801d938 <UART_CheckIdleState>
}
 801d9fe:	2001      	movs	r0, #1
 801da00:	bd10      	pop	{r4, pc}
	...

0801da04 <UART_Start_Receive_IT>:
{
 801da04:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 801da06:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 801da08:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 801da0a:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxISR       = NULL;
 801da0e:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 801da10:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
 801da14:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 801da18:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 801da1a:	d131      	bne.n	801da80 <UART_Start_Receive_IT+0x7c>
 801da1c:	6903      	ldr	r3, [r0, #16]
 801da1e:	bb6b      	cbnz	r3, 801da7c <UART_Start_Receive_IT+0x78>
 801da20:	f240 13ff 	movw	r3, #511	; 0x1ff
 801da24:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801da28:	2300      	movs	r3, #0
 801da2a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801da2e:	2322      	movs	r3, #34	; 0x22
 801da30:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801da34:	6803      	ldr	r3, [r0, #0]
 801da36:	689c      	ldr	r4, [r3, #8]
 801da38:	f044 0401 	orr.w	r4, r4, #1
 801da3c:	609c      	str	r4, [r3, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801da3e:	6e44      	ldr	r4, [r0, #100]	; 0x64
 801da40:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 801da44:	d12c      	bne.n	801daa0 <UART_Start_Receive_IT+0x9c>
 801da46:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 801da4a:	4294      	cmp	r4, r2
 801da4c:	d828      	bhi.n	801daa0 <UART_Start_Receive_IT+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801da4e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801da52:	d123      	bne.n	801da9c <UART_Start_Receive_IT+0x98>
 801da54:	6904      	ldr	r4, [r0, #16]
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801da56:	4a1c      	ldr	r2, [pc, #112]	; (801dac8 <UART_Start_Receive_IT+0xc4>)
 801da58:	491c      	ldr	r1, [pc, #112]	; (801dacc <UART_Start_Receive_IT+0xc8>)
 801da5a:	2c00      	cmp	r4, #0
 801da5c:	bf08      	it	eq
 801da5e:	460a      	moveq	r2, r1
 801da60:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 801da62:	2200      	movs	r2, #0
 801da64:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801da68:	681a      	ldr	r2, [r3, #0]
 801da6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801da6e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801da70:	689a      	ldr	r2, [r3, #8]
 801da72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801da76:	609a      	str	r2, [r3, #8]
}
 801da78:	2000      	movs	r0, #0
 801da7a:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 801da7c:	23ff      	movs	r3, #255	; 0xff
 801da7e:	e7d1      	b.n	801da24 <UART_Start_Receive_IT+0x20>
 801da80:	b921      	cbnz	r1, 801da8c <UART_Start_Receive_IT+0x88>
 801da82:	6903      	ldr	r3, [r0, #16]
 801da84:	2b00      	cmp	r3, #0
 801da86:	d0f9      	beq.n	801da7c <UART_Start_Receive_IT+0x78>
 801da88:	237f      	movs	r3, #127	; 0x7f
 801da8a:	e7cb      	b.n	801da24 <UART_Start_Receive_IT+0x20>
 801da8c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 801da90:	d1c8      	bne.n	801da24 <UART_Start_Receive_IT+0x20>
 801da92:	6903      	ldr	r3, [r0, #16]
 801da94:	2b00      	cmp	r3, #0
 801da96:	d0f7      	beq.n	801da88 <UART_Start_Receive_IT+0x84>
 801da98:	233f      	movs	r3, #63	; 0x3f
 801da9a:	e7c3      	b.n	801da24 <UART_Start_Receive_IT+0x20>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801da9c:	4a0a      	ldr	r2, [pc, #40]	; (801dac8 <UART_Start_Receive_IT+0xc4>)
 801da9e:	e7df      	b.n	801da60 <UART_Start_Receive_IT+0x5c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801daa0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801daa4:	d10e      	bne.n	801dac4 <UART_Start_Receive_IT+0xc0>
 801daa6:	6904      	ldr	r4, [r0, #16]
      huart->RxISR = UART_RxISR_16BIT;
 801daa8:	4a09      	ldr	r2, [pc, #36]	; (801dad0 <UART_Start_Receive_IT+0xcc>)
 801daaa:	490a      	ldr	r1, [pc, #40]	; (801dad4 <UART_Start_Receive_IT+0xd0>)
 801daac:	2c00      	cmp	r4, #0
 801daae:	bf08      	it	eq
 801dab0:	460a      	moveq	r2, r1
 801dab2:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 801dab4:	2200      	movs	r2, #0
 801dab6:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801daba:	681a      	ldr	r2, [r3, #0]
 801dabc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 801dac0:	601a      	str	r2, [r3, #0]
 801dac2:	e7d9      	b.n	801da78 <UART_Start_Receive_IT+0x74>
      huart->RxISR = UART_RxISR_8BIT;
 801dac4:	4a02      	ldr	r2, [pc, #8]	; (801dad0 <UART_Start_Receive_IT+0xcc>)
 801dac6:	e7f4      	b.n	801dab2 <UART_Start_Receive_IT+0xae>
 801dac8:	0801d395 	.word	0x0801d395
 801dacc:	0801d4cd 	.word	0x0801d4cd
 801dad0:	0801d2a5 	.word	0x0801d2a5
 801dad4:	0801d31f 	.word	0x0801d31f

0801dad8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 801dad8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801dadc:	2b20      	cmp	r3, #32
{
 801dade:	b410      	push	{r4}
  if (huart->RxState == HAL_UART_STATE_READY)
 801dae0:	d11d      	bne.n	801db1e <HAL_UART_Receive_IT+0x46>
    if ((pData == NULL) || (Size == 0U))
 801dae2:	b1c1      	cbz	r1, 801db16 <HAL_UART_Receive_IT+0x3e>
 801dae4:	b1ba      	cbz	r2, 801db16 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 801dae6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 801daea:	2b01      	cmp	r3, #1
 801daec:	d017      	beq.n	801db1e <HAL_UART_Receive_IT+0x46>
 801daee:	2301      	movs	r3, #1
 801daf0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801daf4:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801daf6:	4c0b      	ldr	r4, [pc, #44]	; (801db24 <HAL_UART_Receive_IT+0x4c>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801daf8:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801dafa:	6803      	ldr	r3, [r0, #0]
 801dafc:	42a3      	cmp	r3, r4
 801dafe:	d006      	beq.n	801db0e <HAL_UART_Receive_IT+0x36>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801db00:	685c      	ldr	r4, [r3, #4]
 801db02:	0224      	lsls	r4, r4, #8
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801db04:	bf42      	ittt	mi
 801db06:	681c      	ldrmi	r4, [r3, #0]
 801db08:	f044 6480 	orrmi.w	r4, r4, #67108864	; 0x4000000
 801db0c:	601c      	strmi	r4, [r3, #0]
}
 801db0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return(UART_Start_Receive_IT(huart, pData, Size));
 801db12:	f7ff bf77 	b.w	801da04 <UART_Start_Receive_IT>
      return HAL_ERROR;
 801db16:	2001      	movs	r0, #1
}
 801db18:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db1c:	4770      	bx	lr
    return HAL_BUSY;
 801db1e:	2002      	movs	r0, #2
 801db20:	e7fa      	b.n	801db18 <HAL_UART_Receive_IT+0x40>
 801db22:	bf00      	nop
 801db24:	40008000 	.word	0x40008000

0801db28 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 801db28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801db2a:	ab04      	add	r3, sp, #16
 801db2c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 801db30:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 801db34:	9902      	ldr	r1, [sp, #8]
 801db36:	2b01      	cmp	r3, #1
{
 801db38:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 801db3a:	d03a      	beq.n	801dbb2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8a>
 801db3c:	2301      	movs	r3, #1
 801db3e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801db42:	2324      	movs	r3, #36	; 0x24
 801db44:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801db48:	6803      	ldr	r3, [r0, #0]
 801db4a:	681a      	ldr	r2, [r3, #0]
 801db4c:	f022 0201 	bic.w	r2, r2, #1
 801db50:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 801db52:	689a      	ldr	r2, [r3, #8]
 801db54:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 801db58:	430a      	orrs	r2, r1
 801db5a:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 801db5c:	b971      	cbnz	r1, 801db7c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x54>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 801db5e:	6859      	ldr	r1, [r3, #4]
 801db60:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 801db64:	f89d 000e 	ldrb.w	r0, [sp, #14]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 801db68:	f021 0110 	bic.w	r1, r1, #16
 801db6c:	4311      	orrs	r1, r2
 801db6e:	6059      	str	r1, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 801db70:	685a      	ldr	r2, [r3, #4]
 801db72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 801db76:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 801db7a:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 801db7c:	681a      	ldr	r2, [r3, #0]
 801db7e:	f042 0201 	orr.w	r2, r2, #1
 801db82:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 801db84:	f7fc f9e9 	bl	8019f5a <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801db88:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
  tickstart = HAL_GetTick();
 801db8c:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801db8e:	9200      	str	r2, [sp, #0]
 801db90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801db94:	2200      	movs	r2, #0
 801db96:	4620      	mov	r0, r4
 801db98:	f7ff fe84 	bl	801d8a4 <UART_WaitOnFlagUntilTimeout>
 801db9c:	b938      	cbnz	r0, 801dbae <HAL_UARTEx_StopModeWakeUpSourceConfig+0x86>
    huart->gState = HAL_UART_STATE_READY;
 801db9e:	2320      	movs	r3, #32
 801dba0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 801dba4:	2300      	movs	r3, #0
 801dba6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 801dbaa:	b004      	add	sp, #16
 801dbac:	bd10      	pop	{r4, pc}
    status = HAL_TIMEOUT;
 801dbae:	2003      	movs	r0, #3
 801dbb0:	e7f8      	b.n	801dba4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
  __HAL_LOCK(huart);
 801dbb2:	2002      	movs	r0, #2
 801dbb4:	e7f9      	b.n	801dbaa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x82>

0801dbb6 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 801dbb6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 801dbba:	2b01      	cmp	r3, #1
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801dbbc:	bf1f      	itttt	ne
 801dbbe:	6802      	ldrne	r2, [r0, #0]
 801dbc0:	6813      	ldrne	r3, [r2, #0]
 801dbc2:	f043 0302 	orrne.w	r3, r3, #2
 801dbc6:	6013      	strne	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 801dbc8:	bf1d      	ittte	ne
 801dbca:	2300      	movne	r3, #0
 801dbcc:	f880 3080 	strbne.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 801dbd0:	4618      	movne	r0, r3
  __HAL_LOCK(huart);
 801dbd2:	2002      	moveq	r0, #2
}
 801dbd4:	4770      	bx	lr

0801dbd6 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 801dbd6:	b510      	push	{r4, lr}
    memset1( ctx->X, 0, sizeof ctx->X );
 801dbd8:	2210      	movs	r2, #16
{
 801dbda:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 801dbdc:	2100      	movs	r1, #0
 801dbde:	30f1      	adds	r0, #241	; 0xf1
 801dbe0:	f007 faf0 	bl	80251c4 <memset1>
    ctx->M_n = 0;
 801dbe4:	2100      	movs	r1, #0
 801dbe6:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 801dbea:	4620      	mov	r0, r4
 801dbec:	22f0      	movs	r2, #240	; 0xf0
}
 801dbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset1( ctx->rijndael.ksch, '\0', 240 );
 801dbf2:	f007 bae7 	b.w	80251c4 <memset1>

0801dbf6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 801dbf6:	4602      	mov	r2, r0
 801dbf8:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 801dbfa:	2110      	movs	r1, #16
 801dbfc:	f000 b99c 	b.w	801df38 <lorawan_aes_set_key>

0801dc00 <AES_CMAC_Update>:
}

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 801dc00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dc04:	4604      	mov	r4, r0
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 801dc06:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
 801dc0a:	b085      	sub	sp, #20
 801dc0c:	460e      	mov	r6, r1
 801dc0e:	4615      	mov	r5, r2
 801dc10:	f204 1701 	addw	r7, r4, #257	; 0x101
    if( ctx->M_n > 0 )
 801dc14:	b388      	cbz	r0, 801dc7a <AES_CMAC_Update+0x7a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 801dc16:	f1c0 0910 	rsb	r9, r0, #16
 801dc1a:	4591      	cmp	r9, r2
 801dc1c:	46c8      	mov	r8, r9
 801dc1e:	bf28      	it	cs
 801dc20:	4690      	movcs	r8, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 801dc22:	fa1f f288 	uxth.w	r2, r8
 801dc26:	4438      	add	r0, r7
 801dc28:	f007 fab8 	bl	802519c <memcpy1>
        ctx->M_n += mlen;
 801dc2c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 801dc30:	4443      	add	r3, r8
        if( ctx->M_n < 16 || len == mlen )
 801dc32:	2b0f      	cmp	r3, #15
        ctx->M_n += mlen;
 801dc34:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 801dc38:	d928      	bls.n	801dc8c <AES_CMAC_Update+0x8c>
 801dc3a:	45a9      	cmp	r9, r5
 801dc3c:	d226      	bcs.n	801dc8c <AES_CMAC_Update+0x8c>
 801dc3e:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 801dc42:	4699      	mov	r9, r3
            return;
        XOR( ctx->M_last, ctx->X );
 801dc44:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dc48:	7bd9      	ldrb	r1, [r3, #15]
 801dc4a:	42bb      	cmp	r3, r7
 801dc4c:	ea82 0201 	eor.w	r2, r2, r1
 801dc50:	f803 2c01 	strb.w	r2, [r3, #-1]
 801dc54:	d1f6      	bne.n	801dc44 <AES_CMAC_Update+0x44>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801dc56:	2210      	movs	r2, #16
 801dc58:	4649      	mov	r1, r9
 801dc5a:	4668      	mov	r0, sp
 801dc5c:	f007 fa9e 	bl	802519c <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801dc60:	4622      	mov	r2, r4
 801dc62:	4669      	mov	r1, sp
 801dc64:	4668      	mov	r0, sp
 801dc66:	f000 f9e1 	bl	801e02c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801dc6a:	2210      	movs	r2, #16
 801dc6c:	4669      	mov	r1, sp
 801dc6e:	4648      	mov	r0, r9
 801dc70:	f007 fa94 	bl	802519c <memcpy1>

        data += mlen;
 801dc74:	4446      	add	r6, r8
        len -= mlen;
 801dc76:	eba5 0508 	sub.w	r5, r5, r8
    }
    while( len > 16 )
 801dc7a:	2d10      	cmp	r5, #16
 801dc7c:	d809      	bhi.n	801dc92 <AES_CMAC_Update+0x92>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801dc7e:	b2aa      	uxth	r2, r5
 801dc80:	4631      	mov	r1, r6
 801dc82:	4638      	mov	r0, r7
 801dc84:	f007 fa8a 	bl	802519c <memcpy1>
    ctx->M_n = len;
 801dc88:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
 801dc8c:	b005      	add	sp, #20
 801dc8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc92:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 801dc96:	1e71      	subs	r1, r6, #1
 801dc98:	4698      	mov	r8, r3
        XOR( data, ctx->X );
 801dc9a:	781a      	ldrb	r2, [r3, #0]
 801dc9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801dca0:	4042      	eors	r2, r0
 801dca2:	f803 2b01 	strb.w	r2, [r3], #1
 801dca6:	42bb      	cmp	r3, r7
 801dca8:	d1f7      	bne.n	801dc9a <AES_CMAC_Update+0x9a>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801dcaa:	2210      	movs	r2, #16
 801dcac:	4641      	mov	r1, r8
 801dcae:	4668      	mov	r0, sp
 801dcb0:	f007 fa74 	bl	802519c <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801dcb4:	4622      	mov	r2, r4
 801dcb6:	4669      	mov	r1, sp
 801dcb8:	4668      	mov	r0, sp
 801dcba:	f000 f9b7 	bl	801e02c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801dcbe:	2210      	movs	r2, #16
 801dcc0:	4669      	mov	r1, sp
 801dcc2:	4640      	mov	r0, r8
 801dcc4:	f007 fa6a 	bl	802519c <memcpy1>
        data += 16;
 801dcc8:	3610      	adds	r6, #16
        len -= 16;
 801dcca:	3d10      	subs	r5, #16
 801dccc:	e7d5      	b.n	801dc7a <AES_CMAC_Update+0x7a>

0801dcce <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 801dcce:	b570      	push	{r4, r5, r6, lr}
 801dcd0:	b088      	sub	sp, #32
 801dcd2:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 801dcd4:	2210      	movs	r2, #16
 801dcd6:	2100      	movs	r1, #0
{
 801dcd8:	4605      	mov	r5, r0
    memset1( K, '\0', 16 );
 801dcda:	4668      	mov	r0, sp
 801dcdc:	f007 fa72 	bl	80251c4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 801dce0:	4622      	mov	r2, r4
 801dce2:	4669      	mov	r1, sp
 801dce4:	4668      	mov	r0, sp
 801dce6:	f000 f9a1 	bl	801e02c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 801dcea:	f99d 3000 	ldrsb.w	r3, [sp]
 801dcee:	2b00      	cmp	r3, #0
 801dcf0:	466a      	mov	r2, sp
    {
        LSHIFT( K, K );
 801dcf2:	f04f 0100 	mov.w	r1, #0
    if( K[0] & 0x80 )
 801dcf6:	da41      	bge.n	801dd7c <AES_CMAC_Final+0xae>
        LSHIFT( K, K );
 801dcf8:	7813      	ldrb	r3, [r2, #0]
 801dcfa:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801dcfe:	3101      	adds	r1, #1
 801dd00:	005b      	lsls	r3, r3, #1
 801dd02:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 801dd06:	290f      	cmp	r1, #15
 801dd08:	f802 3c01 	strb.w	r3, [r2, #-1]
 801dd0c:	d1f4      	bne.n	801dcf8 <AES_CMAC_Final+0x2a>
 801dd0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801dd12:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
 801dd14:	f083 0387 	eor.w	r3, r3, #135	; 0x87
    }
    else
        LSHIFT( K, K );
 801dd18:	f88d 300f 	strb.w	r3, [sp, #15]

    if( ctx->M_n == 16 )
 801dd1c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 801dd20:	2b10      	cmp	r3, #16
 801dd22:	d13a      	bne.n	801dd9a <AES_CMAC_Final+0xcc>
 801dd24:	f204 1301 	addw	r3, r4, #257	; 0x101
 801dd28:	4669      	mov	r1, sp
 801dd2a:	f204 1011 	addw	r0, r4, #273	; 0x111
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 801dd2e:	781a      	ldrb	r2, [r3, #0]
 801dd30:	f811 6b01 	ldrb.w	r6, [r1], #1
 801dd34:	4072      	eors	r2, r6
 801dd36:	f803 2b01 	strb.w	r2, [r3], #1
 801dd3a:	4298      	cmp	r0, r3
 801dd3c:	d1f7      	bne.n	801dd2e <AES_CMAC_Final+0x60>
 801dd3e:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 801dd42:	f204 1001 	addw	r0, r4, #257	; 0x101
 801dd46:	4619      	mov	r1, r3
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 801dd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dd4c:	7bde      	ldrb	r6, [r3, #15]
 801dd4e:	4298      	cmp	r0, r3
 801dd50:	ea82 0206 	eor.w	r2, r2, r6
 801dd54:	f803 2c01 	strb.w	r2, [r3, #-1]
 801dd58:	d1f6      	bne.n	801dd48 <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801dd5a:	2210      	movs	r2, #16
 801dd5c:	eb0d 0002 	add.w	r0, sp, r2
 801dd60:	f007 fa1c 	bl	802519c <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 801dd64:	4622      	mov	r2, r4
 801dd66:	4629      	mov	r1, r5
 801dd68:	a804      	add	r0, sp, #16
 801dd6a:	f000 f95f 	bl	801e02c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801dd6e:	2210      	movs	r2, #16
 801dd70:	2100      	movs	r1, #0
 801dd72:	4668      	mov	r0, sp
 801dd74:	f007 fa26 	bl	80251c4 <memset1>
}
 801dd78:	b008      	add	sp, #32
 801dd7a:	bd70      	pop	{r4, r5, r6, pc}
        LSHIFT( K, K );
 801dd7c:	7813      	ldrb	r3, [r2, #0]
 801dd7e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801dd82:	3101      	adds	r1, #1
 801dd84:	005b      	lsls	r3, r3, #1
 801dd86:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 801dd8a:	290f      	cmp	r1, #15
 801dd8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801dd90:	d1f4      	bne.n	801dd7c <AES_CMAC_Final+0xae>
 801dd92:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801dd96:	005b      	lsls	r3, r3, #1
 801dd98:	e7be      	b.n	801dd18 <AES_CMAC_Final+0x4a>
        if( K[0] & 0x80 )
 801dd9a:	f99d 2000 	ldrsb.w	r2, [sp]
 801dd9e:	2a00      	cmp	r2, #0
 801dda0:	4669      	mov	r1, sp
            LSHIFT( K, K );
 801dda2:	f04f 0000 	mov.w	r0, #0
        if( K[0] & 0x80 )
 801dda6:	da31      	bge.n	801de0c <AES_CMAC_Final+0x13e>
            LSHIFT( K, K );
 801dda8:	780a      	ldrb	r2, [r1, #0]
 801ddaa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 801ddae:	3001      	adds	r0, #1
 801ddb0:	0052      	lsls	r2, r2, #1
 801ddb2:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 801ddb6:	280f      	cmp	r0, #15
 801ddb8:	f801 2c01 	strb.w	r2, [r1, #-1]
 801ddbc:	d1f4      	bne.n	801dda8 <AES_CMAC_Final+0xda>
 801ddbe:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801ddc2:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 801ddc4:	f082 0287 	eor.w	r2, r2, #135	; 0x87
            LSHIFT( K, K );
 801ddc8:	f88d 200f 	strb.w	r2, [sp, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 801ddcc:	18e2      	adds	r2, r4, r3
 801ddce:	2180      	movs	r1, #128	; 0x80
 801ddd0:	1c58      	adds	r0, r3, #1
 801ddd2:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
            ctx->M_last[ctx->M_n] = 0;
 801ddd6:	2600      	movs	r6, #0
        while( ++ctx->M_n < 16 )
 801ddd8:	4601      	mov	r1, r0
 801ddda:	f204 1201 	addw	r2, r4, #257	; 0x101
 801ddde:	290f      	cmp	r1, #15
 801dde0:	d923      	bls.n	801de2a <AES_CMAC_Final+0x15c>
 801dde2:	2810      	cmp	r0, #16
 801dde4:	f1c3 030f 	rsb	r3, r3, #15
 801dde8:	bf88      	it	hi
 801ddea:	2300      	movhi	r3, #0
 801ddec:	4403      	add	r3, r0
 801ddee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 801ddf2:	4669      	mov	r1, sp
 801ddf4:	4613      	mov	r3, r2
 801ddf6:	f204 1011 	addw	r0, r4, #273	; 0x111
        XOR( K, ctx->M_last );
 801ddfa:	781a      	ldrb	r2, [r3, #0]
 801ddfc:	f811 6b01 	ldrb.w	r6, [r1], #1
 801de00:	4072      	eors	r2, r6
 801de02:	f803 2b01 	strb.w	r2, [r3], #1
 801de06:	4298      	cmp	r0, r3
 801de08:	d1f7      	bne.n	801ddfa <AES_CMAC_Final+0x12c>
 801de0a:	e798      	b.n	801dd3e <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 801de0c:	780a      	ldrb	r2, [r1, #0]
 801de0e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 801de12:	3001      	adds	r0, #1
 801de14:	0052      	lsls	r2, r2, #1
 801de16:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 801de1a:	280f      	cmp	r0, #15
 801de1c:	f801 2c01 	strb.w	r2, [r1, #-1]
 801de20:	d1f4      	bne.n	801de0c <AES_CMAC_Final+0x13e>
 801de22:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801de26:	0052      	lsls	r2, r2, #1
 801de28:	e7ce      	b.n	801ddc8 <AES_CMAC_Final+0xfa>
            ctx->M_last[ctx->M_n] = 0;
 801de2a:	5456      	strb	r6, [r2, r1]
 801de2c:	3101      	adds	r1, #1
 801de2e:	e7d6      	b.n	801ddde <AES_CMAC_Final+0x110>

0801de30 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 801de30:	780a      	ldrb	r2, [r1, #0]
 801de32:	7803      	ldrb	r3, [r0, #0]
 801de34:	4053      	eors	r3, r2
 801de36:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 801de38:	784a      	ldrb	r2, [r1, #1]
 801de3a:	7843      	ldrb	r3, [r0, #1]
 801de3c:	4053      	eors	r3, r2
 801de3e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 801de40:	788a      	ldrb	r2, [r1, #2]
 801de42:	7883      	ldrb	r3, [r0, #2]
 801de44:	4053      	eors	r3, r2
 801de46:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801de48:	78ca      	ldrb	r2, [r1, #3]
 801de4a:	78c3      	ldrb	r3, [r0, #3]
 801de4c:	4053      	eors	r3, r2
 801de4e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 801de50:	790a      	ldrb	r2, [r1, #4]
 801de52:	7903      	ldrb	r3, [r0, #4]
 801de54:	4053      	eors	r3, r2
 801de56:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801de58:	794a      	ldrb	r2, [r1, #5]
 801de5a:	7943      	ldrb	r3, [r0, #5]
 801de5c:	4053      	eors	r3, r2
 801de5e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 801de60:	798a      	ldrb	r2, [r1, #6]
 801de62:	7983      	ldrb	r3, [r0, #6]
 801de64:	4053      	eors	r3, r2
 801de66:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 801de68:	79ca      	ldrb	r2, [r1, #7]
 801de6a:	79c3      	ldrb	r3, [r0, #7]
 801de6c:	4053      	eors	r3, r2
 801de6e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 801de70:	7a0a      	ldrb	r2, [r1, #8]
 801de72:	7a03      	ldrb	r3, [r0, #8]
 801de74:	4053      	eors	r3, r2
 801de76:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 801de78:	7a4a      	ldrb	r2, [r1, #9]
 801de7a:	7a43      	ldrb	r3, [r0, #9]
 801de7c:	4053      	eors	r3, r2
 801de7e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 801de80:	7a8a      	ldrb	r2, [r1, #10]
 801de82:	7a83      	ldrb	r3, [r0, #10]
 801de84:	4053      	eors	r3, r2
 801de86:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 801de88:	7aca      	ldrb	r2, [r1, #11]
 801de8a:	7ac3      	ldrb	r3, [r0, #11]
 801de8c:	4053      	eors	r3, r2
 801de8e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 801de90:	7b0a      	ldrb	r2, [r1, #12]
 801de92:	7b03      	ldrb	r3, [r0, #12]
 801de94:	4053      	eors	r3, r2
 801de96:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801de98:	7b4a      	ldrb	r2, [r1, #13]
 801de9a:	7b43      	ldrb	r3, [r0, #13]
 801de9c:	4053      	eors	r3, r2
 801de9e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 801dea0:	7b8a      	ldrb	r2, [r1, #14]
 801dea2:	7b83      	ldrb	r3, [r0, #14]
 801dea4:	4053      	eors	r3, r2
 801dea6:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 801dea8:	7bca      	ldrb	r2, [r1, #15]
 801deaa:	7bc3      	ldrb	r3, [r0, #15]
 801deac:	4053      	eors	r3, r2
 801deae:	73c3      	strb	r3, [r0, #15]
#endif
}
 801deb0:	4770      	bx	lr

0801deb2 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 801deb2:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 801deb4:	780b      	ldrb	r3, [r1, #0]
 801deb6:	7814      	ldrb	r4, [r2, #0]
 801deb8:	4063      	eors	r3, r4
 801deba:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 801debc:	7854      	ldrb	r4, [r2, #1]
 801debe:	784b      	ldrb	r3, [r1, #1]
 801dec0:	4063      	eors	r3, r4
 801dec2:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 801dec4:	7894      	ldrb	r4, [r2, #2]
 801dec6:	788b      	ldrb	r3, [r1, #2]
 801dec8:	4063      	eors	r3, r4
 801deca:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 801decc:	78d4      	ldrb	r4, [r2, #3]
 801dece:	78cb      	ldrb	r3, [r1, #3]
 801ded0:	4063      	eors	r3, r4
 801ded2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 801ded4:	7914      	ldrb	r4, [r2, #4]
 801ded6:	790b      	ldrb	r3, [r1, #4]
 801ded8:	4063      	eors	r3, r4
 801deda:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 801dedc:	7954      	ldrb	r4, [r2, #5]
 801dede:	794b      	ldrb	r3, [r1, #5]
 801dee0:	4063      	eors	r3, r4
 801dee2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 801dee4:	7994      	ldrb	r4, [r2, #6]
 801dee6:	798b      	ldrb	r3, [r1, #6]
 801dee8:	4063      	eors	r3, r4
 801deea:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 801deec:	79d4      	ldrb	r4, [r2, #7]
 801deee:	79cb      	ldrb	r3, [r1, #7]
 801def0:	4063      	eors	r3, r4
 801def2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 801def4:	7a14      	ldrb	r4, [r2, #8]
 801def6:	7a0b      	ldrb	r3, [r1, #8]
 801def8:	4063      	eors	r3, r4
 801defa:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 801defc:	7a54      	ldrb	r4, [r2, #9]
 801defe:	7a4b      	ldrb	r3, [r1, #9]
 801df00:	4063      	eors	r3, r4
 801df02:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 801df04:	7a8b      	ldrb	r3, [r1, #10]
 801df06:	7a94      	ldrb	r4, [r2, #10]
 801df08:	4063      	eors	r3, r4
 801df0a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 801df0c:	7ad4      	ldrb	r4, [r2, #11]
 801df0e:	7acb      	ldrb	r3, [r1, #11]
 801df10:	4063      	eors	r3, r4
 801df12:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 801df14:	7b14      	ldrb	r4, [r2, #12]
 801df16:	7b0b      	ldrb	r3, [r1, #12]
 801df18:	4063      	eors	r3, r4
 801df1a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 801df1c:	7b54      	ldrb	r4, [r2, #13]
 801df1e:	7b4b      	ldrb	r3, [r1, #13]
 801df20:	4063      	eors	r3, r4
 801df22:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 801df24:	7b94      	ldrb	r4, [r2, #14]
 801df26:	7b8b      	ldrb	r3, [r1, #14]
 801df28:	4063      	eors	r3, r4
 801df2a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 801df2c:	7bcb      	ldrb	r3, [r1, #15]
 801df2e:	7bd2      	ldrb	r2, [r2, #15]
 801df30:	4053      	eors	r3, r2
 801df32:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 801df34:	bd10      	pop	{r4, pc}
	...

0801df38 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 801df38:	f1a1 0310 	sub.w	r3, r1, #16
{
 801df3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df40:	b2dc      	uxtb	r4, r3
 801df42:	2c10      	cmp	r4, #16
 801df44:	d806      	bhi.n	801df54 <lorawan_aes_set_key+0x1c>
 801df46:	2301      	movs	r3, #1
 801df48:	40a3      	lsls	r3, r4
 801df4a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 801df4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801df52:	b92b      	cbnz	r3, 801df60 <lorawan_aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 801df54:	2300      	movs	r3, #0
 801df56:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 801df5a:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 801df5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while( nn-- )
 801df60:	1e53      	subs	r3, r2, #1
 801df62:	1844      	adds	r4, r0, r1
 801df64:	42a0      	cmp	r0, r4
 801df66:	d14f      	bne.n	801e008 <lorawan_aes_set_key+0xd0>
    hi = (keylen + 28) << 2;
 801df68:	f101 031c 	add.w	r3, r1, #28
 801df6c:	009b      	lsls	r3, r3, #2
 801df6e:	fa5f f883 	uxtb.w	r8, r3
    ctx->rnd = (hi >> 4) - 1;
 801df72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801df76:	3b01      	subs	r3, #1
            t0 = s_box(t0);
 801df78:	4c2b      	ldr	r4, [pc, #172]	; (801e028 <lorawan_aes_set_key+0xf0>)
    ctx->rnd = (hi >> 4) - 1;
 801df7a:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801df7e:	f04f 0901 	mov.w	r9, #1
    ctx->rnd = (hi >> 4) - 1;
 801df82:	460b      	mov	r3, r1
        t0 = ctx->ksch[cc - 4];
 801df84:	18d5      	adds	r5, r2, r3
        if( cc % keylen == 0 )
 801df86:	fbb3 f0f1 	udiv	r0, r3, r1
 801df8a:	fb01 3010 	mls	r0, r1, r0, r3
 801df8e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
 801df92:	f815 ac04 	ldrb.w	sl, [r5, #-4]
        t1 = ctx->ksch[cc - 3];
 801df96:	f815 cc03 	ldrb.w	ip, [r5, #-3]
        t2 = ctx->ksch[cc - 2];
 801df9a:	f815 7c02 	ldrb.w	r7, [r5, #-2]
        t3 = ctx->ksch[cc - 1];
 801df9e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
        if( cc % keylen == 0 )
 801dfa2:	d136      	bne.n	801e012 <lorawan_aes_set_key+0xda>
            rc = f2(rc);
 801dfa4:	ea4f 10d9 	mov.w	r0, r9, lsr #7
            t0 = s_box(t1) ^ rc;
 801dfa8:	f814 e00c 	ldrb.w	lr, [r4, ip]
            t1 = s_box(t2);
 801dfac:	f814 c007 	ldrb.w	ip, [r4, r7]
            t2 = s_box(t3);
 801dfb0:	5da7      	ldrb	r7, [r4, r6]
            t3 = s_box(tt);
 801dfb2:	f814 600a 	ldrb.w	r6, [r4, sl]
            rc = f2(rc);
 801dfb6:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 801dfba:	4450      	add	r0, sl
 801dfbc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
            t0 = s_box(t1) ^ rc;
 801dfc0:	ea89 0e0e 	eor.w	lr, r9, lr
            rc = f2(rc);
 801dfc4:	ea80 0049 	eor.w	r0, r0, r9, lsl #1
 801dfc8:	fa5f f980 	uxtb.w	r9, r0
            t0 = s_box(t1) ^ rc;
 801dfcc:	46f2      	mov	sl, lr
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 801dfce:	1a58      	subs	r0, r3, r1
 801dfd0:	b2c0      	uxtb	r0, r0
 801dfd2:	f812 e000 	ldrb.w	lr, [r2, r0]
 801dfd6:	ea8a 0a0e 	eor.w	sl, sl, lr
 801dfda:	f802 a003 	strb.w	sl, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 801dfde:	4410      	add	r0, r2
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801dfe0:	3304      	adds	r3, #4
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 801dfe2:	f890 e001 	ldrb.w	lr, [r0, #1]
 801dfe6:	ea8c 0c0e 	eor.w	ip, ip, lr
 801dfea:	f885 c001 	strb.w	ip, [r5, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 801dfee:	f890 c002 	ldrb.w	ip, [r0, #2]
 801dff2:	ea87 070c 	eor.w	r7, r7, ip
 801dff6:	70af      	strb	r7, [r5, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 801dff8:	78c0      	ldrb	r0, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801dffa:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 801dffc:	4046      	eors	r6, r0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801dffe:	4598      	cmp	r8, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 801e000:	70ee      	strb	r6, [r5, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801e002:	d8bf      	bhi.n	801df84 <lorawan_aes_set_key+0x4c>
    return 0;
 801e004:	2000      	movs	r0, #0
 801e006:	e7a9      	b.n	801df5c <lorawan_aes_set_key+0x24>
        *d++ = *s++;
 801e008:	f810 5b01 	ldrb.w	r5, [r0], #1
 801e00c:	f803 5f01 	strb.w	r5, [r3, #1]!
 801e010:	e7a8      	b.n	801df64 <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 801e012:	2918      	cmp	r1, #24
 801e014:	d9db      	bls.n	801dfce <lorawan_aes_set_key+0x96>
 801e016:	2810      	cmp	r0, #16
            t0 = s_box(t0);
 801e018:	bf01      	itttt	eq
 801e01a:	f814 a00a 	ldrbeq.w	sl, [r4, sl]
            t1 = s_box(t1);
 801e01e:	f814 c00c 	ldrbeq.w	ip, [r4, ip]
            t2 = s_box(t2);
 801e022:	5de7      	ldrbeq	r7, [r4, r7]
            t3 = s_box(t3);
 801e024:	5da6      	ldrbeq	r6, [r4, r6]
 801e026:	e7d2      	b.n	801dfce <lorawan_aes_set_key+0x96>
 801e028:	080273e0 	.word	0x080273e0

0801e02c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 801e02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e030:	b09d      	sub	sp, #116	; 0x74
    if( ctx->rnd )
 801e032:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
 801e036:	920b      	str	r2, [sp, #44]	; 0x2c
 801e038:	ee07 1a90 	vmov	s15, r1
    if( ctx->rnd )
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	f000 816b 	beq.w	801e318 <lorawan_aes_encrypt+0x2ec>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 801e042:	ad18      	add	r5, sp, #96	; 0x60
 801e044:	4601      	mov	r1, r0
 801e046:	4628      	mov	r0, r5
 801e048:	f7ff ff33 	bl	801deb2 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 801e04c:	4cb3      	ldr	r4, [pc, #716]	; (801e31c <lorawan_aes_encrypt+0x2f0>)
 801e04e:	2301      	movs	r3, #1
    xor_block(d, k);
 801e050:	ee07 5a10 	vmov	s14, r5
        for( r = 1 ; r < ctx->rnd ; ++r )
 801e054:	9300      	str	r3, [sp, #0]
 801e056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e058:	9a00      	ldr	r2, [sp, #0]
 801e05a:	f89d e060 	ldrb.w	lr, [sp, #96]	; 0x60
 801e05e:	f89d c065 	ldrb.w	ip, [sp, #101]	; 0x65
 801e062:	f89d 906a 	ldrb.w	r9, [sp, #106]	; 0x6a
 801e066:	f89d 806f 	ldrb.w	r8, [sp, #111]	; 0x6f
 801e06a:	f814 7009 	ldrb.w	r7, [r4, r9]
 801e06e:	f814 5008 	ldrb.w	r5, [r4, r8]
 801e072:	f814 000e 	ldrb.w	r0, [r4, lr]
 801e076:	f814 b00c 	ldrb.w	fp, [r4, ip]
 801e07a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 801e07e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801e082:	930c      	str	r3, [sp, #48]	; 0x30
 801e084:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
 801e088:	930d      	str	r3, [sp, #52]	; 0x34
 801e08a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e08c:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 801e090:	5c61      	ldrb	r1, [r4, r1]
 801e092:	930e      	str	r3, [sp, #56]	; 0x38
 801e094:	5ce3      	ldrb	r3, [r4, r3]
 801e096:	9301      	str	r3, [sp, #4]
 801e098:	9102      	str	r1, [sp, #8]
 801e09a:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 801e09e:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
 801e0a2:	9110      	str	r1, [sp, #64]	; 0x40
 801e0a4:	f89d 106d 	ldrb.w	r1, [sp, #109]	; 0x6d
 801e0a8:	5ce6      	ldrb	r6, [r4, r3]
 801e0aa:	930f      	str	r3, [sp, #60]	; 0x3c
 801e0ac:	9111      	str	r1, [sp, #68]	; 0x44
 801e0ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e0b0:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801e0b4:	5ce3      	ldrb	r3, [r4, r3]
 801e0b6:	9112      	str	r1, [sp, #72]	; 0x48
 801e0b8:	5c61      	ldrb	r1, [r4, r1]
 801e0ba:	9103      	str	r1, [sp, #12]
 801e0bc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801e0c0:	9113      	str	r1, [sp, #76]	; 0x4c
 801e0c2:	5c61      	ldrb	r1, [r4, r1]
 801e0c4:	9104      	str	r1, [sp, #16]
 801e0c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e0c8:	5c61      	ldrb	r1, [r4, r1]
 801e0ca:	9105      	str	r1, [sp, #20]
 801e0cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e0ce:	5c61      	ldrb	r1, [r4, r1]
 801e0d0:	9106      	str	r1, [sp, #24]
 801e0d2:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801e0d6:	9114      	str	r1, [sp, #80]	; 0x50
 801e0d8:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
 801e0dc:	9115      	str	r1, [sp, #84]	; 0x54
 801e0de:	f89d 1066 	ldrb.w	r1, [sp, #102]	; 0x66
 801e0e2:	9116      	str	r1, [sp, #88]	; 0x58
 801e0e4:	5c61      	ldrb	r1, [r4, r1]
 801e0e6:	9107      	str	r1, [sp, #28]
 801e0e8:	f89d 106b 	ldrb.w	r1, [sp, #107]	; 0x6b
 801e0ec:	9117      	str	r1, [sp, #92]	; 0x5c
 801e0ee:	5c61      	ldrb	r1, [r4, r1]
 801e0f0:	9108      	str	r1, [sp, #32]
 801e0f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e0f4:	5c61      	ldrb	r1, [r4, r1]
 801e0f6:	9109      	str	r1, [sp, #36]	; 0x24
 801e0f8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e0fa:	5c61      	ldrb	r1, [r4, r1]
 801e0fc:	910a      	str	r1, [sp, #40]	; 0x28
 801e0fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e100:	f891 a0f0 	ldrb.w	sl, [r1, #240]	; 0xf0
 801e104:	9900      	ldr	r1, [sp, #0]
 801e106:	458a      	cmp	sl, r1
 801e108:	d832      	bhi.n	801e170 <lorawan_aes_encrypt+0x144>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 801e10a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 801e10e:	9b05      	ldr	r3, [sp, #20]
 801e110:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 801e114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e116:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801e11a:	9b02      	ldr	r3, [sp, #8]
 801e11c:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 801e120:	9b06      	ldr	r3, [sp, #24]
 801e122:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 801e126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e128:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801e12c:	9b03      	ldr	r3, [sp, #12]
 801e12e:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 801e132:	9b01      	ldr	r3, [sp, #4]
 801e134:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 801e138:	9b07      	ldr	r3, [sp, #28]
 801e13a:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 801e13e:	9b08      	ldr	r3, [sp, #32]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 801e140:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 801e144:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 801e148:	ee17 0a90 	vmov	r0, s15
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 801e14c:	9b04      	ldr	r3, [sp, #16]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801e14e:	f88d b061 	strb.w	fp, [sp, #97]	; 0x61
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 801e152:	a918      	add	r1, sp, #96	; 0x60
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801e154:	f88d 7062 	strb.w	r7, [sp, #98]	; 0x62
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 801e158:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 801e15c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 801e160:	f88d 5063 	strb.w	r5, [sp, #99]	; 0x63
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 801e164:	f7ff fea5 	bl	801deb2 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 801e168:	2000      	movs	r0, #0
}
 801e16a:	b01d      	add	sp, #116	; 0x74
 801e16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 801e170:	44a6      	add	lr, r4
 801e172:	44a4      	add	ip, r4
 801e174:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 801e178:	ea87 0105 	eor.w	r1, r7, r5
 801e17c:	ea8a 0a01 	eor.w	sl, sl, r1
 801e180:	f89c 1200 	ldrb.w	r1, [ip, #512]	; 0x200
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801e184:	44a1      	add	r9, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 801e186:	ea8a 0a01 	eor.w	sl, sl, r1
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801e18a:	f89c 1100 	ldrb.w	r1, [ip, #256]	; 0x100
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 801e18e:	f88d a060 	strb.w	sl, [sp, #96]	; 0x60
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801e192:	4045      	eors	r5, r0
 801e194:	404d      	eors	r5, r1
 801e196:	f899 1200 	ldrb.w	r1, [r9, #512]	; 0x200
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 801e19a:	44a0      	add	r8, r4
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801e19c:	404d      	eors	r5, r1
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 801e19e:	f899 1100 	ldrb.w	r1, [r9, #256]	; 0x100
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801e1a2:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 801e1a6:	ea80 000b 	eor.w	r0, r0, fp
 801e1aa:	4048      	eors	r0, r1
 801e1ac:	f898 1200 	ldrb.w	r1, [r8, #512]	; 0x200
 801e1b0:	4048      	eors	r0, r1
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801e1b2:	990c      	ldr	r1, [sp, #48]	; 0x30
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 801e1b4:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801e1b8:	4421      	add	r1, r4
 801e1ba:	4608      	mov	r0, r1
 801e1bc:	9901      	ldr	r1, [sp, #4]
 801e1be:	f890 5100 	ldrb.w	r5, [r0, #256]	; 0x100
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 801e1c2:	f890 0200 	ldrb.w	r0, [r0, #512]	; 0x200
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 801e1c6:	ea87 070b 	eor.w	r7, r7, fp
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801e1ca:	4071      	eors	r1, r6
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 801e1cc:	f89e b200 	ldrb.w	fp, [lr, #512]	; 0x200
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801e1d0:	4069      	eors	r1, r5
 801e1d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 801e1d4:	ea8b 0707 	eor.w	r7, fp, r7
 801e1d8:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801e1dc:	4425      	add	r5, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 801e1de:	ea87 070b 	eor.w	r7, r7, fp
 801e1e2:	f88d 7063 	strb.w	r7, [sp, #99]	; 0x63
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801e1e6:	f895 7200 	ldrb.w	r7, [r5, #512]	; 0x200
 801e1ea:	4079      	eors	r1, r7
 801e1ec:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801e1f0:	f895 1100 	ldrb.w	r1, [r5, #256]	; 0x100
 801e1f4:	405e      	eors	r6, r3
 801e1f6:	404e      	eors	r6, r1
 801e1f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e1fa:	4421      	add	r1, r4
 801e1fc:	f891 5200 	ldrb.w	r5, [r1, #512]	; 0x200
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 801e200:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801e204:	406e      	eors	r6, r5
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 801e206:	9d02      	ldr	r5, [sp, #8]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801e208:	f88d 6065 	strb.w	r6, [sp, #101]	; 0x65
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 801e20c:	406b      	eors	r3, r5
 801e20e:	404b      	eors	r3, r1
 801e210:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e212:	4421      	add	r1, r4
 801e214:	f891 5200 	ldrb.w	r5, [r1, #512]	; 0x200
 801e218:	406b      	eors	r3, r5
 801e21a:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 801e21e:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 801e222:	406b      	eors	r3, r5
 801e224:	4043      	eors	r3, r0
 801e226:	f891 0100 	ldrb.w	r0, [r1, #256]	; 0x100
 801e22a:	4043      	eors	r3, r0
 801e22c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 801e230:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e232:	4423      	add	r3, r4
 801e234:	4619      	mov	r1, r3
 801e236:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 801e23a:	4043      	eors	r3, r0
 801e23c:	f891 0100 	ldrb.w	r0, [r1, #256]	; 0x100
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 801e240:	f891 1200 	ldrb.w	r1, [r1, #512]	; 0x200
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 801e244:	4043      	eors	r3, r0
 801e246:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e248:	4420      	add	r0, r4
 801e24a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 801e24e:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 801e252:	406b      	eors	r3, r5
 801e254:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 801e258:	e9dd 3504 	ldrd	r3, r5, [sp, #16]
 801e25c:	406b      	eors	r3, r5
 801e25e:	4043      	eors	r3, r0
 801e260:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e262:	4420      	add	r0, r4
 801e264:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 801e268:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 801e26c:	406b      	eors	r3, r5
 801e26e:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 801e272:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
 801e276:	406b      	eors	r3, r5
 801e278:	4043      	eors	r3, r0
 801e27a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e27c:	4420      	add	r0, r4
 801e27e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801e282:	406b      	eors	r3, r5
 801e284:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 801e288:	9d06      	ldr	r5, [sp, #24]
 801e28a:	9b03      	ldr	r3, [sp, #12]
 801e28c:	406b      	eors	r3, r5
 801e28e:	404b      	eors	r3, r1
 801e290:	f890 1100 	ldrb.w	r1, [r0, #256]	; 0x100
 801e294:	404b      	eors	r3, r1
 801e296:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 801e29a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e29c:	4423      	add	r3, r4
 801e29e:	4619      	mov	r1, r3
 801e2a0:	e9dd 3007 	ldrd	r3, r0, [sp, #28]
 801e2a4:	4043      	eors	r3, r0
 801e2a6:	f891 0100 	ldrb.w	r0, [r1, #256]	; 0x100
 801e2aa:	4043      	eors	r3, r0
 801e2ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e2ae:	4420      	add	r0, r4
 801e2b0:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801e2b4:	406b      	eors	r3, r5
 801e2b6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 801e2ba:	e9dd 3508 	ldrd	r3, r5, [sp, #32]
 801e2be:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 801e2c2:	f891 1200 	ldrb.w	r1, [r1, #512]	; 0x200
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 801e2c6:	406b      	eors	r3, r5
 801e2c8:	4043      	eors	r3, r0
 801e2ca:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e2cc:	4420      	add	r0, r4
 801e2ce:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 801e2d2:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 801e2d6:	406b      	eors	r3, r5
 801e2d8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 801e2dc:	e9dd 3509 	ldrd	r3, r5, [sp, #36]	; 0x24
 801e2e0:	406b      	eors	r3, r5
 801e2e2:	4043      	eors	r3, r0
 801e2e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e2e6:	4420      	add	r0, r4
 801e2e8:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801e2ec:	406b      	eors	r3, r5
 801e2ee:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 801e2f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e2f4:	9b07      	ldr	r3, [sp, #28]
 801e2f6:	406b      	eors	r3, r5
 801e2f8:	404b      	eors	r3, r1
 801e2fa:	f890 1100 	ldrb.w	r1, [r0, #256]	; 0x100
    xor_block(d, k);
 801e2fe:	ee17 0a10 	vmov	r0, s14
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 801e302:	404b      	eors	r3, r1
    xor_block(d, k);
 801e304:	4611      	mov	r1, r2
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 801e306:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    xor_block(d, k);
 801e30a:	f7ff fd91 	bl	801de30 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 801e30e:	9b00      	ldr	r3, [sp, #0]
 801e310:	3301      	adds	r3, #1
 801e312:	b2db      	uxtb	r3, r3
 801e314:	9300      	str	r3, [sp, #0]
 801e316:	e69e      	b.n	801e056 <lorawan_aes_encrypt+0x2a>
        return ( uint8_t )-1;
 801e318:	20ff      	movs	r0, #255	; 0xff
 801e31a:	e726      	b.n	801e16a <lorawan_aes_encrypt+0x13e>
 801e31c:	080273e0 	.word	0x080273e0

0801e320 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 801e320:	4a0a      	ldr	r2, [pc, #40]	; (801e34c <GetKeyByID+0x2c>)
{
 801e322:	b530      	push	{r4, r5, lr}
 801e324:	2300      	movs	r3, #0
 801e326:	4614      	mov	r4, r2
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 801e328:	7c15      	ldrb	r5, [r2, #16]
 801e32a:	4285      	cmp	r5, r0
 801e32c:	d106      	bne.n	801e33c <GetKeyByID+0x1c>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 801e32e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e332:	3310      	adds	r3, #16
 801e334:	4423      	add	r3, r4
 801e336:	600b      	str	r3, [r1, #0]
      return SECURE_ELEMENT_SUCCESS;
 801e338:	2000      	movs	r0, #0
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 801e33a:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 801e33c:	3301      	adds	r3, #1
 801e33e:	2b0a      	cmp	r3, #10
 801e340:	f102 0211 	add.w	r2, r2, #17
 801e344:	d1f0      	bne.n	801e328 <GetKeyByID+0x8>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801e346:	2003      	movs	r0, #3
 801e348:	e7f7      	b.n	801e33a <GetKeyByID+0x1a>
 801e34a:	bf00      	nop
 801e34c:	20001058 	.word	0x20001058

0801e350 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
  return;
}
 801e350:	4770      	bx	lr

0801e352 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 801e352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e356:	b0cc      	sub	sp, #304	; 0x130
 801e358:	4606      	mov	r6, r0
 801e35a:	f8dd 8148 	ldr.w	r8, [sp, #328]	; 0x148
 801e35e:	4617      	mov	r7, r2
 801e360:	461c      	mov	r4, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if ((buffer == NULL) || (cmac == NULL))
 801e362:	460d      	mov	r5, r1
 801e364:	b331      	cbz	r1, 801e3b4 <ComputeCmac+0x62>
 801e366:	f1b8 0f00 	cmp.w	r8, #0
 801e36a:	d023      	beq.n	801e3b4 <ComputeCmac+0x62>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 801e36c:	a806      	add	r0, sp, #24
 801e36e:	f7ff fc32 	bl	801dbd6 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 801e372:	4620      	mov	r0, r4
 801e374:	a901      	add	r1, sp, #4
 801e376:	f7ff ffd3 	bl	801e320 <GetKeyByID>

  if (retval == SECURE_ELEMENT_SUCCESS)
 801e37a:	4604      	mov	r4, r0
 801e37c:	b9b0      	cbnz	r0, 801e3ac <ComputeCmac+0x5a>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 801e37e:	9901      	ldr	r1, [sp, #4]
 801e380:	a806      	add	r0, sp, #24
 801e382:	3101      	adds	r1, #1
 801e384:	f7ff fc37 	bl	801dbf6 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 801e388:	b126      	cbz	r6, 801e394 <ComputeCmac+0x42>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 801e38a:	2210      	movs	r2, #16
 801e38c:	4631      	mov	r1, r6
 801e38e:	a806      	add	r0, sp, #24
 801e390:	f7ff fc36 	bl	801dc00 <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 801e394:	463a      	mov	r2, r7
 801e396:	4629      	mov	r1, r5
 801e398:	a806      	add	r0, sp, #24
 801e39a:	f7ff fc31 	bl	801dc00 <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 801e39e:	a906      	add	r1, sp, #24
 801e3a0:	a802      	add	r0, sp, #8
 801e3a2:	f7ff fc94 	bl	801dcce <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 801e3a6:	9b02      	ldr	r3, [sp, #8]
 801e3a8:	f8c8 3000 	str.w	r3, [r8]
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 801e3ac:	4620      	mov	r0, r4
 801e3ae:	b04c      	add	sp, #304	; 0x130
 801e3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SECURE_ELEMENT_ERROR_NPE;
 801e3b4:	2402      	movs	r4, #2
 801e3b6:	e7f9      	b.n	801e3ac <ComputeCmac+0x5a>

0801e3b8 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 801e3b8:	b530      	push	{r4, r5, lr}
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 801e3ba:	22aa      	movs	r2, #170	; 0xaa
{
 801e3bc:	b093      	sub	sp, #76	; 0x4c
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 801e3be:	496a      	ldr	r1, [pc, #424]	; (801e568 <SecureElementInit+0x1b0>)
{
 801e3c0:	4604      	mov	r4, r0
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 801e3c2:	486a      	ldr	r0, [pc, #424]	; (801e56c <SecureElementInit+0x1b4>)
 801e3c4:	f006 feea 	bl	802519c <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 801e3c8:	a911      	add	r1, sp, #68	; 0x44
 801e3ca:	2000      	movs	r0, #0
 801e3cc:	f7ff ffa8 	bl	801e320 <GetKeyByID>
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 801e3d0:	2200      	movs	r2, #0
  retval = GetKeyByID(APP_KEY, &keyItem);
 801e3d2:	4605      	mov	r5, r0
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 801e3d4:	4b66      	ldr	r3, [pc, #408]	; (801e570 <SecureElementInit+0x1b8>)
 801e3d6:	4611      	mov	r1, r2
 801e3d8:	2002      	movs	r0, #2
 801e3da:	f008 fa71 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 801e3de:	2d00      	cmp	r5, #0
 801e3e0:	d126      	bne.n	801e430 <SecureElementInit+0x78>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 801e3e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e3e4:	7c1a      	ldrb	r2, [r3, #16]
 801e3e6:	920f      	str	r2, [sp, #60]	; 0x3c
 801e3e8:	7bda      	ldrb	r2, [r3, #15]
 801e3ea:	920e      	str	r2, [sp, #56]	; 0x38
 801e3ec:	7b9a      	ldrb	r2, [r3, #14]
 801e3ee:	920d      	str	r2, [sp, #52]	; 0x34
 801e3f0:	7b5a      	ldrb	r2, [r3, #13]
 801e3f2:	920c      	str	r2, [sp, #48]	; 0x30
 801e3f4:	7b1a      	ldrb	r2, [r3, #12]
 801e3f6:	920b      	str	r2, [sp, #44]	; 0x2c
 801e3f8:	7ada      	ldrb	r2, [r3, #11]
 801e3fa:	920a      	str	r2, [sp, #40]	; 0x28
 801e3fc:	7a9a      	ldrb	r2, [r3, #10]
 801e3fe:	9209      	str	r2, [sp, #36]	; 0x24
 801e400:	7a5a      	ldrb	r2, [r3, #9]
 801e402:	9208      	str	r2, [sp, #32]
 801e404:	7a1a      	ldrb	r2, [r3, #8]
 801e406:	9207      	str	r2, [sp, #28]
 801e408:	79da      	ldrb	r2, [r3, #7]
 801e40a:	9206      	str	r2, [sp, #24]
 801e40c:	799a      	ldrb	r2, [r3, #6]
 801e40e:	9205      	str	r2, [sp, #20]
 801e410:	795a      	ldrb	r2, [r3, #5]
 801e412:	9204      	str	r2, [sp, #16]
 801e414:	791a      	ldrb	r2, [r3, #4]
 801e416:	9203      	str	r2, [sp, #12]
 801e418:	78da      	ldrb	r2, [r3, #3]
 801e41a:	9202      	str	r2, [sp, #8]
 801e41c:	789a      	ldrb	r2, [r3, #2]
 801e41e:	9201      	str	r2, [sp, #4]
 801e420:	785b      	ldrb	r3, [r3, #1]
 801e422:	9300      	str	r3, [sp, #0]
 801e424:	462a      	mov	r2, r5
 801e426:	4b53      	ldr	r3, [pc, #332]	; (801e574 <SecureElementInit+0x1bc>)
 801e428:	4629      	mov	r1, r5
 801e42a:	2002      	movs	r0, #2
 801e42c:	f008 fa48 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 801e430:	a911      	add	r1, sp, #68	; 0x44
 801e432:	2001      	movs	r0, #1
 801e434:	f7ff ff74 	bl	801e320 <GetKeyByID>
  if (retval == SECURE_ELEMENT_SUCCESS)
 801e438:	2800      	cmp	r0, #0
 801e43a:	d126      	bne.n	801e48a <SecureElementInit+0xd2>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 801e43c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e43e:	7c1a      	ldrb	r2, [r3, #16]
 801e440:	920f      	str	r2, [sp, #60]	; 0x3c
 801e442:	7bda      	ldrb	r2, [r3, #15]
 801e444:	920e      	str	r2, [sp, #56]	; 0x38
 801e446:	7b9a      	ldrb	r2, [r3, #14]
 801e448:	920d      	str	r2, [sp, #52]	; 0x34
 801e44a:	7b5a      	ldrb	r2, [r3, #13]
 801e44c:	920c      	str	r2, [sp, #48]	; 0x30
 801e44e:	7b1a      	ldrb	r2, [r3, #12]
 801e450:	920b      	str	r2, [sp, #44]	; 0x2c
 801e452:	7ada      	ldrb	r2, [r3, #11]
 801e454:	920a      	str	r2, [sp, #40]	; 0x28
 801e456:	7a9a      	ldrb	r2, [r3, #10]
 801e458:	9209      	str	r2, [sp, #36]	; 0x24
 801e45a:	7a5a      	ldrb	r2, [r3, #9]
 801e45c:	9208      	str	r2, [sp, #32]
 801e45e:	7a1a      	ldrb	r2, [r3, #8]
 801e460:	9207      	str	r2, [sp, #28]
 801e462:	79da      	ldrb	r2, [r3, #7]
 801e464:	9206      	str	r2, [sp, #24]
 801e466:	799a      	ldrb	r2, [r3, #6]
 801e468:	9205      	str	r2, [sp, #20]
 801e46a:	795a      	ldrb	r2, [r3, #5]
 801e46c:	9204      	str	r2, [sp, #16]
 801e46e:	791a      	ldrb	r2, [r3, #4]
 801e470:	9203      	str	r2, [sp, #12]
 801e472:	78da      	ldrb	r2, [r3, #3]
 801e474:	9202      	str	r2, [sp, #8]
 801e476:	789a      	ldrb	r2, [r3, #2]
 801e478:	9201      	str	r2, [sp, #4]
 801e47a:	785b      	ldrb	r3, [r3, #1]
 801e47c:	9300      	str	r3, [sp, #0]
 801e47e:	4602      	mov	r2, r0
 801e480:	4601      	mov	r1, r0
 801e482:	4b3d      	ldr	r3, [pc, #244]	; (801e578 <SecureElementInit+0x1c0>)
 801e484:	2002      	movs	r0, #2
 801e486:	f008 fa1b 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 801e48a:	2200      	movs	r2, #0
 801e48c:	4611      	mov	r1, r2
 801e48e:	4b3b      	ldr	r3, [pc, #236]	; (801e57c <SecureElementInit+0x1c4>)
 801e490:	2002      	movs	r0, #2
 801e492:	f008 fa15 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 801e496:	a911      	add	r1, sp, #68	; 0x44
 801e498:	2003      	movs	r0, #3
 801e49a:	f7ff ff41 	bl	801e320 <GetKeyByID>
  if (retval == SECURE_ELEMENT_SUCCESS)
 801e49e:	2800      	cmp	r0, #0
 801e4a0:	d126      	bne.n	801e4f0 <SecureElementInit+0x138>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 801e4a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e4a4:	7c1a      	ldrb	r2, [r3, #16]
 801e4a6:	920f      	str	r2, [sp, #60]	; 0x3c
 801e4a8:	7bda      	ldrb	r2, [r3, #15]
 801e4aa:	920e      	str	r2, [sp, #56]	; 0x38
 801e4ac:	7b9a      	ldrb	r2, [r3, #14]
 801e4ae:	920d      	str	r2, [sp, #52]	; 0x34
 801e4b0:	7b5a      	ldrb	r2, [r3, #13]
 801e4b2:	920c      	str	r2, [sp, #48]	; 0x30
 801e4b4:	7b1a      	ldrb	r2, [r3, #12]
 801e4b6:	920b      	str	r2, [sp, #44]	; 0x2c
 801e4b8:	7ada      	ldrb	r2, [r3, #11]
 801e4ba:	920a      	str	r2, [sp, #40]	; 0x28
 801e4bc:	7a9a      	ldrb	r2, [r3, #10]
 801e4be:	9209      	str	r2, [sp, #36]	; 0x24
 801e4c0:	7a5a      	ldrb	r2, [r3, #9]
 801e4c2:	9208      	str	r2, [sp, #32]
 801e4c4:	7a1a      	ldrb	r2, [r3, #8]
 801e4c6:	9207      	str	r2, [sp, #28]
 801e4c8:	79da      	ldrb	r2, [r3, #7]
 801e4ca:	9206      	str	r2, [sp, #24]
 801e4cc:	799a      	ldrb	r2, [r3, #6]
 801e4ce:	9205      	str	r2, [sp, #20]
 801e4d0:	795a      	ldrb	r2, [r3, #5]
 801e4d2:	9204      	str	r2, [sp, #16]
 801e4d4:	791a      	ldrb	r2, [r3, #4]
 801e4d6:	9203      	str	r2, [sp, #12]
 801e4d8:	78da      	ldrb	r2, [r3, #3]
 801e4da:	9202      	str	r2, [sp, #8]
 801e4dc:	789a      	ldrb	r2, [r3, #2]
 801e4de:	9201      	str	r2, [sp, #4]
 801e4e0:	785b      	ldrb	r3, [r3, #1]
 801e4e2:	9300      	str	r3, [sp, #0]
 801e4e4:	4602      	mov	r2, r0
 801e4e6:	4601      	mov	r1, r0
 801e4e8:	4b25      	ldr	r3, [pc, #148]	; (801e580 <SecureElementInit+0x1c8>)
 801e4ea:	2002      	movs	r0, #2
 801e4ec:	f008 f9e8 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 801e4f0:	a911      	add	r1, sp, #68	; 0x44
 801e4f2:	2002      	movs	r0, #2
 801e4f4:	f7ff ff14 	bl	801e320 <GetKeyByID>
  if (retval == SECURE_ELEMENT_SUCCESS)
 801e4f8:	2800      	cmp	r0, #0
 801e4fa:	d126      	bne.n	801e54a <SecureElementInit+0x192>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 801e4fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e4fe:	7c1a      	ldrb	r2, [r3, #16]
 801e500:	920f      	str	r2, [sp, #60]	; 0x3c
 801e502:	7bda      	ldrb	r2, [r3, #15]
 801e504:	920e      	str	r2, [sp, #56]	; 0x38
 801e506:	7b9a      	ldrb	r2, [r3, #14]
 801e508:	920d      	str	r2, [sp, #52]	; 0x34
 801e50a:	7b5a      	ldrb	r2, [r3, #13]
 801e50c:	920c      	str	r2, [sp, #48]	; 0x30
 801e50e:	7b1a      	ldrb	r2, [r3, #12]
 801e510:	920b      	str	r2, [sp, #44]	; 0x2c
 801e512:	7ada      	ldrb	r2, [r3, #11]
 801e514:	920a      	str	r2, [sp, #40]	; 0x28
 801e516:	7a9a      	ldrb	r2, [r3, #10]
 801e518:	9209      	str	r2, [sp, #36]	; 0x24
 801e51a:	7a5a      	ldrb	r2, [r3, #9]
 801e51c:	9208      	str	r2, [sp, #32]
 801e51e:	7a1a      	ldrb	r2, [r3, #8]
 801e520:	9207      	str	r2, [sp, #28]
 801e522:	79da      	ldrb	r2, [r3, #7]
 801e524:	9206      	str	r2, [sp, #24]
 801e526:	799a      	ldrb	r2, [r3, #6]
 801e528:	9205      	str	r2, [sp, #20]
 801e52a:	795a      	ldrb	r2, [r3, #5]
 801e52c:	9204      	str	r2, [sp, #16]
 801e52e:	791a      	ldrb	r2, [r3, #4]
 801e530:	9203      	str	r2, [sp, #12]
 801e532:	78da      	ldrb	r2, [r3, #3]
 801e534:	9202      	str	r2, [sp, #8]
 801e536:	789a      	ldrb	r2, [r3, #2]
 801e538:	9201      	str	r2, [sp, #4]
 801e53a:	785b      	ldrb	r3, [r3, #1]
 801e53c:	9300      	str	r3, [sp, #0]
 801e53e:	4602      	mov	r2, r0
 801e540:	4601      	mov	r1, r0
 801e542:	4b10      	ldr	r3, [pc, #64]	; (801e584 <SecureElementInit+0x1cc>)
 801e544:	2002      	movs	r0, #2
 801e546:	f008 f9bb 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 801e54a:	4b0f      	ldr	r3, [pc, #60]	; (801e588 <SecureElementInit+0x1d0>)
 801e54c:	4d0f      	ldr	r5, [pc, #60]	; (801e58c <SecureElementInit+0x1d4>)
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 801e54e:	4810      	ldr	r0, [pc, #64]	; (801e590 <SecureElementInit+0x1d8>)
    SeNvmCtxChanged = DummyCB;
 801e550:	2c00      	cmp	r4, #0
 801e552:	bf08      	it	eq
 801e554:	461c      	moveq	r4, r3
 801e556:	602c      	str	r4, [r5, #0]
  GetUniqueId(SeNvmCtx.DevEui);
 801e558:	f7fb fcd1 	bl	8019efe <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 801e55c:	682b      	ldr	r3, [r5, #0]
 801e55e:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
}
 801e560:	2000      	movs	r0, #0
 801e562:	b013      	add	sp, #76	; 0x4c
 801e564:	bd30      	pop	{r4, r5, pc}
 801e566:	bf00      	nop
 801e568:	080276e0 	.word	0x080276e0
 801e56c:	20001068 	.word	0x20001068
 801e570:	08027d41 	.word	0x08027d41
 801e574:	08027d56 	.word	0x08027d56
 801e578:	08027db8 	.word	0x08027db8
 801e57c:	08027e1a 	.word	0x08027e1a
 801e580:	08027e2f 	.word	0x08027e2f
 801e584:	08027e91 	.word	0x08027e91
 801e588:	0801e351 	.word	0x0801e351
 801e58c:	200017cc 	.word	0x200017cc
 801e590:	20001058 	.word	0x20001058

0801e594 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 801e594:	b508      	push	{r3, lr}
  /* Restore nvm context */
  if (seNvmCtx != 0)
 801e596:	4601      	mov	r1, r0
 801e598:	b128      	cbz	r0, 801e5a6 <SecureElementRestoreNvmCtx+0x12>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 801e59a:	4804      	ldr	r0, [pc, #16]	; (801e5ac <SecureElementRestoreNvmCtx+0x18>)
 801e59c:	22ba      	movs	r2, #186	; 0xba
 801e59e:	f006 fdfd 	bl	802519c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801e5a2:	2000      	movs	r0, #0
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
  }
}
 801e5a4:	bd08      	pop	{r3, pc}
    return SECURE_ELEMENT_ERROR_NPE;
 801e5a6:	2002      	movs	r0, #2
 801e5a8:	e7fc      	b.n	801e5a4 <SecureElementRestoreNvmCtx+0x10>
 801e5aa:	bf00      	nop
 801e5ac:	20001058 	.word	0x20001058

0801e5b0 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
  *seNvmCtxSize = sizeof(SeNvmCtx);
 801e5b0:	23ba      	movs	r3, #186	; 0xba
 801e5b2:	6003      	str	r3, [r0, #0]
  return &SeNvmCtx;
}
 801e5b4:	4800      	ldr	r0, [pc, #0]	; (801e5b8 <SecureElementGetNvmCtx+0x8>)
 801e5b6:	4770      	bx	lr
 801e5b8:	20001058 	.word	0x20001058

0801e5bc <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 801e5bc:	2b7e      	cmp	r3, #126	; 0x7e
 801e5be:	d801      	bhi.n	801e5c4 <SecureElementComputeAesCmac+0x8>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 801e5c0:	f7ff bec7 	b.w	801e352 <ComputeCmac>
}
 801e5c4:	2003      	movs	r0, #3
 801e5c6:	4770      	bx	lr

0801e5c8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 801e5c8:	b530      	push	{r4, r5, lr}
 801e5ca:	4614      	mov	r4, r2
 801e5cc:	b085      	sub	sp, #20
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL)
 801e5ce:	b178      	cbz	r0, 801e5f0 <SecureElementVerifyAesCmac+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 801e5d0:	2500      	movs	r5, #0

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 801e5d2:	aa03      	add	r2, sp, #12
 801e5d4:	9200      	str	r2, [sp, #0]
 801e5d6:	460a      	mov	r2, r1
 801e5d8:	4601      	mov	r1, r0
 801e5da:	4628      	mov	r0, r5
  uint32_t compCmac = 0;
 801e5dc:	9503      	str	r5, [sp, #12]
  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 801e5de:	f7ff feb8 	bl	801e352 <ComputeCmac>
  if (retval != SECURE_ELEMENT_SUCCESS)
 801e5e2:	b918      	cbnz	r0, 801e5ec <SecureElementVerifyAesCmac+0x24>
    return SECURE_ELEMENT_ERROR_NPE;
 801e5e4:	9803      	ldr	r0, [sp, #12]
 801e5e6:	1b00      	subs	r0, r0, r4
 801e5e8:	bf18      	it	ne
 801e5ea:	2001      	movne	r0, #1
  }

#endif /* LORAWAN_KMS */

  return retval;
}
 801e5ec:	b005      	add	sp, #20
 801e5ee:	bd30      	pop	{r4, r5, pc}
    return SECURE_ELEMENT_ERROR_NPE;
 801e5f0:	2002      	movs	r0, #2
 801e5f2:	e7fb      	b.n	801e5ec <SecureElementVerifyAesCmac+0x24>

0801e5f4 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 801e5f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e5f8:	460e      	mov	r6, r1
 801e5fa:	b0bf      	sub	sp, #252	; 0xfc
 801e5fc:	4614      	mov	r4, r2
 801e5fe:	4699      	mov	r9, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL || encBuffer == NULL)
 801e600:	4680      	mov	r8, r0
 801e602:	b328      	cbz	r0, 801e650 <SecureElementAesEncrypt+0x5c>
 801e604:	b323      	cbz	r3, 801e650 <SecureElementAesEncrypt+0x5c>
  {
    return SECURE_ELEMENT_ERROR_NPE;
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 801e606:	f011 010f 	ands.w	r1, r1, #15
 801e60a:	d123      	bne.n	801e654 <SecureElementAesEncrypt+0x60>
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 801e60c:	22f0      	movs	r2, #240	; 0xf0
 801e60e:	a801      	add	r0, sp, #4
 801e610:	f006 fdd8 	bl	80251c4 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 801e614:	4620      	mov	r0, r4
 801e616:	4669      	mov	r1, sp
 801e618:	f7ff fe82 	bl	801e320 <GetKeyByID>

  if (retval == SECURE_ELEMENT_SUCCESS)
 801e61c:	4604      	mov	r4, r0
 801e61e:	b948      	cbnz	r0, 801e634 <SecureElementAesEncrypt+0x40>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 801e620:	9800      	ldr	r0, [sp, #0]
 801e622:	aa01      	add	r2, sp, #4
 801e624:	2110      	movs	r1, #16
 801e626:	3001      	adds	r0, #1
 801e628:	f7ff fc86 	bl	801df38 <lorawan_aes_set_key>

    uint8_t block = 0;

    while (size != 0)
 801e62c:	4635      	mov	r5, r6
 801e62e:	1b77      	subs	r7, r6, r5
 801e630:	b2ff      	uxtb	r7, r7
 801e632:	b91d      	cbnz	r5, 801e63c <SecureElementAesEncrypt+0x48>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 801e634:	4620      	mov	r0, r4
 801e636:	b03f      	add	sp, #252	; 0xfc
 801e638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 801e63c:	aa01      	add	r2, sp, #4
 801e63e:	eb09 0107 	add.w	r1, r9, r7
 801e642:	eb08 0007 	add.w	r0, r8, r7
      size = size - 16;
 801e646:	3d10      	subs	r5, #16
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 801e648:	f7ff fcf0 	bl	801e02c <lorawan_aes_encrypt>
      size = size - 16;
 801e64c:	b2ad      	uxth	r5, r5
 801e64e:	e7ee      	b.n	801e62e <SecureElementAesEncrypt+0x3a>
    return SECURE_ELEMENT_ERROR_NPE;
 801e650:	2402      	movs	r4, #2
 801e652:	e7ef      	b.n	801e634 <SecureElementAesEncrypt+0x40>
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801e654:	2405      	movs	r4, #5
 801e656:	e7ed      	b.n	801e634 <SecureElementAesEncrypt+0x40>

0801e658 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
 801e658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801e65a:	4a1a      	ldr	r2, [pc, #104]	; (801e6c4 <SecureElementSetKey.part.0+0x6c>)
 801e65c:	4604      	mov	r4, r0
 801e65e:	2300      	movs	r3, #0
 801e660:	4608      	mov	r0, r1
 801e662:	4615      	mov	r5, r2
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 801e664:	7c11      	ldrb	r1, [r2, #16]
 801e666:	42a1      	cmp	r1, r4
 801e668:	f103 0301 	add.w	r3, r3, #1
 801e66c:	d123      	bne.n	801e6b6 <SecureElementSetKey.part.0+0x5e>
      if (keyID == MC_KEY_0)
 801e66e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e672:	2c80      	cmp	r4, #128	; 0x80
 801e674:	4e14      	ldr	r6, [pc, #80]	; (801e6c8 <SecureElementSetKey.part.0+0x70>)
 801e676:	441d      	add	r5, r3
 801e678:	d114      	bne.n	801e6a4 <SecureElementSetKey.part.0+0x4c>
        uint8_t decryptedKey[16] = { 0 };
 801e67a:	2300      	movs	r3, #0
 801e67c:	e9cd 3300 	strd	r3, r3, [sp]
 801e680:	e9cd 3302 	strd	r3, r3, [sp, #8]
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 801e684:	227f      	movs	r2, #127	; 0x7f
 801e686:	466b      	mov	r3, sp
 801e688:	2110      	movs	r1, #16
 801e68a:	f7ff ffb3 	bl	801e5f4 <SecureElementAesEncrypt>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 801e68e:	2210      	movs	r2, #16
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 801e690:	4604      	mov	r4, r0
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 801e692:	4669      	mov	r1, sp
 801e694:	4628      	mov	r0, r5
 801e696:	f006 fd81 	bl	802519c <memcpy1>
        SeNvmCtxChanged();
 801e69a:	6833      	ldr	r3, [r6, #0]
 801e69c:	4798      	blx	r3
}
 801e69e:	4620      	mov	r0, r4
 801e6a0:	b004      	add	sp, #16
 801e6a2:	bd70      	pop	{r4, r5, r6, pc}
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 801e6a4:	4601      	mov	r1, r0
 801e6a6:	2210      	movs	r2, #16
 801e6a8:	4628      	mov	r0, r5
 801e6aa:	f006 fd77 	bl	802519c <memcpy1>
        SeNvmCtxChanged();
 801e6ae:	6833      	ldr	r3, [r6, #0]
 801e6b0:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 801e6b2:	2400      	movs	r4, #0
 801e6b4:	e7f3      	b.n	801e69e <SecureElementSetKey.part.0+0x46>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 801e6b6:	2b0a      	cmp	r3, #10
 801e6b8:	f102 0211 	add.w	r2, r2, #17
 801e6bc:	d1d2      	bne.n	801e664 <SecureElementSetKey.part.0+0xc>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801e6be:	2403      	movs	r4, #3
 801e6c0:	e7ed      	b.n	801e69e <SecureElementSetKey.part.0+0x46>
 801e6c2:	bf00      	nop
 801e6c4:	20001058 	.word	0x20001058
 801e6c8:	200017cc 	.word	0x200017cc

0801e6cc <SecureElementSetKey>:
  if (key == NULL)
 801e6cc:	b109      	cbz	r1, 801e6d2 <SecureElementSetKey+0x6>
 801e6ce:	f7ff bfc3 	b.w	801e658 <SecureElementSetKey.part.0>
}
 801e6d2:	2002      	movs	r0, #2
 801e6d4:	4770      	bx	lr

0801e6d6 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 801e6d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e6d8:	461c      	mov	r4, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (input == NULL)
 801e6da:	4608      	mov	r0, r1
 801e6dc:	b199      	cbz	r1, 801e706 <SecureElementDeriveAndStoreKey+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 801e6de:	2b7f      	cmp	r3, #127	; 0x7f
 801e6e0:	d101      	bne.n	801e6e6 <SecureElementDeriveAndStoreKey+0x10>
  {
    if (rootKeyID != MC_ROOT_KEY)
 801e6e2:	2a04      	cmp	r2, #4
 801e6e4:	d111      	bne.n	801e70a <SecureElementDeriveAndStoreKey+0x34>
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 801e6e6:	2300      	movs	r3, #0
 801e6e8:	e9cd 3300 	strd	r3, r3, [sp]
 801e6ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 801e6f0:	2110      	movs	r1, #16
 801e6f2:	466b      	mov	r3, sp
 801e6f4:	f7ff ff7e 	bl	801e5f4 <SecureElementAesEncrypt>
  if (retval != SECURE_ELEMENT_SUCCESS)
 801e6f8:	b918      	cbnz	r0, 801e702 <SecureElementDeriveAndStoreKey+0x2c>
  if (key == NULL)
 801e6fa:	4669      	mov	r1, sp
 801e6fc:	4620      	mov	r0, r4
 801e6fe:	f7ff ffab 	bl	801e658 <SecureElementSetKey.part.0>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 801e702:	b004      	add	sp, #16
 801e704:	bd10      	pop	{r4, pc}
    return SECURE_ELEMENT_ERROR_NPE;
 801e706:	2002      	movs	r0, #2
 801e708:	e7fb      	b.n	801e702 <SecureElementDeriveAndStoreKey+0x2c>
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801e70a:	2003      	movs	r0, #3
 801e70c:	e7f9      	b.n	801e702 <SecureElementDeriveAndStoreKey+0x2c>

0801e70e <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 801e70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 801e712:	461f      	mov	r7, r3
{
 801e714:	e9dd 5807 	ldrd	r5, r8, [sp, #28]
 801e718:	f89d 4018 	ldrb.w	r4, [sp, #24]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 801e71c:	b393      	cbz	r3, 801e784 <SecureElementProcessJoinAccept+0x76>
 801e71e:	b38d      	cbz	r5, 801e784 <SecureElementProcessJoinAccept+0x76>
 801e720:	f1b8 0f00 	cmp.w	r8, #0
 801e724:	d02e      	beq.n	801e784 <SecureElementProcessJoinAccept+0x76>
  {
    return SECURE_ELEMENT_ERROR_NPE;
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 801e726:	2c21      	cmp	r4, #33	; 0x21
 801e728:	d82e      	bhi.n	801e788 <SecureElementProcessJoinAccept+0x7a>
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 801e72a:	b2a6      	uxth	r6, r4
 801e72c:	4619      	mov	r1, r3
 801e72e:	4632      	mov	r2, r6
 801e730:	4628      	mov	r0, r5
 801e732:	f006 fd33 	bl	802519c <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 801e736:	1e71      	subs	r1, r6, #1
 801e738:	2201      	movs	r2, #1
 801e73a:	1c6b      	adds	r3, r5, #1
 801e73c:	b289      	uxth	r1, r1
 801e73e:	18b8      	adds	r0, r7, r2
 801e740:	f7ff ff58 	bl	801e5f4 <SecureElementAesEncrypt>
 801e744:	bb10      	cbnz	r0, 801e78c <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 801e746:	7aeb      	ldrb	r3, [r5, #11]
 801e748:	09db      	lsrs	r3, r3, #7
 801e74a:	f888 3000 	strb.w	r3, [r8]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 801e74e:	b9fb      	cbnz	r3, 801e790 <SecureElementProcessJoinAccept+0x82>
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 801e750:	192b      	adds	r3, r5, r4
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 801e752:	1f31      	subs	r1, r6, #4
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 801e754:	f813 0c01 	ldrb.w	r0, [r3, #-1]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 801e758:	f813 2c02 	ldrb.w	r2, [r3, #-2]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 801e75c:	0600      	lsls	r0, r0, #24
 801e75e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 801e762:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 801e766:	4310      	orrs	r0, r2
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 801e768:	f813 2c03 	ldrb.w	r2, [r3, #-3]
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 801e76c:	b289      	uxth	r1, r1
 801e76e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 801e772:	2301      	movs	r3, #1
 801e774:	4628      	mov	r0, r5
 801e776:	f7ff ff27 	bl	801e5c8 <SecureElementVerifyAesCmac>
    return SECURE_ELEMENT_ERROR_NPE;
 801e77a:	3800      	subs	r0, #0
 801e77c:	bf18      	it	ne
 801e77e:	2001      	movne	r0, #1
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
  }

  return SECURE_ELEMENT_SUCCESS;
}
 801e780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SECURE_ELEMENT_ERROR_NPE;
 801e784:	2002      	movs	r0, #2
 801e786:	e7fb      	b.n	801e780 <SecureElementProcessJoinAccept+0x72>
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801e788:	2005      	movs	r0, #5
 801e78a:	e7f9      	b.n	801e780 <SecureElementProcessJoinAccept+0x72>
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 801e78c:	2007      	movs	r0, #7
 801e78e:	e7f7      	b.n	801e780 <SecureElementProcessJoinAccept+0x72>
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 801e790:	2004      	movs	r0, #4
 801e792:	e7f5      	b.n	801e780 <SecureElementProcessJoinAccept+0x72>

0801e794 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 801e794:	b510      	push	{r4, lr}
  if (randomNum == NULL)
 801e796:	4604      	mov	r4, r0
 801e798:	b128      	cbz	r0, 801e7a6 <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
  }
  *randomNum = Radio.Random( );
 801e79a:	4b04      	ldr	r3, [pc, #16]	; (801e7ac <SecureElementRandomNumber+0x18>)
 801e79c:	695b      	ldr	r3, [r3, #20]
 801e79e:	4798      	blx	r3
 801e7a0:	6020      	str	r0, [r4, #0]
  return SECURE_ELEMENT_SUCCESS;
 801e7a2:	2000      	movs	r0, #0
}
 801e7a4:	bd10      	pop	{r4, pc}
    return SECURE_ELEMENT_ERROR_NPE;
 801e7a6:	2002      	movs	r0, #2
 801e7a8:	e7fc      	b.n	801e7a4 <SecureElementRandomNumber+0x10>
 801e7aa:	bf00      	nop
 801e7ac:	08027928 	.word	0x08027928

0801e7b0 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 801e7b0:	b508      	push	{r3, lr}
  if (devEui == NULL)
 801e7b2:	4601      	mov	r1, r0
 801e7b4:	b140      	cbz	r0, 801e7c8 <SecureElementSetDevEui+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 801e7b6:	4805      	ldr	r0, [pc, #20]	; (801e7cc <SecureElementSetDevEui+0x1c>)
 801e7b8:	2208      	movs	r2, #8
 801e7ba:	f006 fcef 	bl	802519c <memcpy1>
  SeNvmCtxChanged();
 801e7be:	4b04      	ldr	r3, [pc, #16]	; (801e7d0 <SecureElementSetDevEui+0x20>)
 801e7c0:	681b      	ldr	r3, [r3, #0]
 801e7c2:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 801e7c4:	2000      	movs	r0, #0
}
 801e7c6:	bd08      	pop	{r3, pc}
    return SECURE_ELEMENT_ERROR_NPE;
 801e7c8:	2002      	movs	r0, #2
 801e7ca:	e7fc      	b.n	801e7c6 <SecureElementSetDevEui+0x16>
 801e7cc:	20001058 	.word	0x20001058
 801e7d0:	200017cc 	.word	0x200017cc

0801e7d4 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
  return SeNvmCtx.DevEui;
}
 801e7d4:	4800      	ldr	r0, [pc, #0]	; (801e7d8 <SecureElementGetDevEui+0x4>)
 801e7d6:	4770      	bx	lr
 801e7d8:	20001058 	.word	0x20001058

0801e7dc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 801e7dc:	b508      	push	{r3, lr}
  if (joinEui == NULL)
 801e7de:	4601      	mov	r1, r0
 801e7e0:	b140      	cbz	r0, 801e7f4 <SecureElementSetJoinEui+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 801e7e2:	4805      	ldr	r0, [pc, #20]	; (801e7f8 <SecureElementSetJoinEui+0x1c>)
 801e7e4:	2208      	movs	r2, #8
 801e7e6:	f006 fcd9 	bl	802519c <memcpy1>
  SeNvmCtxChanged();
 801e7ea:	4b04      	ldr	r3, [pc, #16]	; (801e7fc <SecureElementSetJoinEui+0x20>)
 801e7ec:	681b      	ldr	r3, [r3, #0]
 801e7ee:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 801e7f0:	2000      	movs	r0, #0
}
 801e7f2:	bd08      	pop	{r3, pc}
    return SECURE_ELEMENT_ERROR_NPE;
 801e7f4:	2002      	movs	r0, #2
 801e7f6:	e7fc      	b.n	801e7f2 <SecureElementSetJoinEui+0x16>
 801e7f8:	20001060 	.word	0x20001060
 801e7fc:	200017cc 	.word	0x200017cc

0801e800 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
  return SeNvmCtx.JoinEui;
}
 801e800:	4800      	ldr	r0, [pc, #0]	; (801e804 <SecureElementGetJoinEui+0x4>)
 801e802:	4770      	bx	lr
 801e804:	20001060 	.word	0x20001060

0801e808 <SetRow>:
  return FragDecoder.Status;
}

/* Private  functions ---------------------------------------------------------*/
static void SetRow(uint8_t *src, uint16_t row, uint16_t size)
{
 801e808:	460b      	mov	r3, r1
  if ((FragDecoder.Callbacks != NULL) && (FragDecoder.Callbacks->FragDecoderWrite != NULL))
 801e80a:	4907      	ldr	r1, [pc, #28]	; (801e828 <SetRow+0x20>)
 801e80c:	6809      	ldr	r1, [r1, #0]
{
 801e80e:	b430      	push	{r4, r5}
  if ((FragDecoder.Callbacks != NULL) && (FragDecoder.Callbacks->FragDecoderWrite != NULL))
 801e810:	b139      	cbz	r1, 801e822 <SetRow+0x1a>
 801e812:	684d      	ldr	r5, [r1, #4]
 801e814:	b12d      	cbz	r5, 801e822 <SetRow+0x1a>
  {
    FragDecoder.Callbacks->FragDecoderWrite(row * size, src, size);
 801e816:	4601      	mov	r1, r0
 801e818:	fb02 f003 	mul.w	r0, r2, r3
 801e81c:	462b      	mov	r3, r5
  }
}
 801e81e:	bc30      	pop	{r4, r5}
    FragDecoder.Callbacks->FragDecoderWrite(row * size, src, size);
 801e820:	4718      	bx	r3
}
 801e822:	bc30      	pop	{r4, r5}
 801e824:	4770      	bx	lr
 801e826:	bf00      	nop
 801e828:	200017d0 	.word	0x200017d0

0801e82c <GetRow>:

static void GetRow(uint8_t *dst, uint16_t row, uint16_t size)
{
 801e82c:	460b      	mov	r3, r1
  if ((FragDecoder.Callbacks != NULL) && (FragDecoder.Callbacks->FragDecoderRead != NULL))
 801e82e:	4907      	ldr	r1, [pc, #28]	; (801e84c <GetRow+0x20>)
 801e830:	6809      	ldr	r1, [r1, #0]
{
 801e832:	b430      	push	{r4, r5}
  if ((FragDecoder.Callbacks != NULL) && (FragDecoder.Callbacks->FragDecoderRead != NULL))
 801e834:	b139      	cbz	r1, 801e846 <GetRow+0x1a>
 801e836:	688d      	ldr	r5, [r1, #8]
 801e838:	b12d      	cbz	r5, 801e846 <GetRow+0x1a>
  {
    FragDecoder.Callbacks->FragDecoderRead(row * size, dst, size);
 801e83a:	4601      	mov	r1, r0
 801e83c:	fb02 f003 	mul.w	r0, r2, r3
 801e840:	462b      	mov	r3, r5
  }
}
 801e842:	bc30      	pop	{r4, r5}
    FragDecoder.Callbacks->FragDecoderRead(row * size, dst, size);
 801e844:	4718      	bx	r3
}
 801e846:	bc30      	pop	{r4, r5}
 801e848:	4770      	bx	lr
 801e84a:	bf00      	nop
 801e84c:	200017d0 	.word	0x200017d0

0801e850 <GetParity>:

static uint8_t GetParity(uint16_t index, uint8_t *matrixRow)
{
  uint8_t parity;
  parity = matrixRow[index >> 3];
 801e850:	08c3      	lsrs	r3, r0, #3
  parity = (parity >> (7 - (index % 8))) & 0x01;
 801e852:	43c0      	mvns	r0, r0
 801e854:	5ccb      	ldrb	r3, [r1, r3]
 801e856:	f000 0007 	and.w	r0, r0, #7
 801e85a:	fa43 f000 	asr.w	r0, r3, r0
  return parity;
}
 801e85e:	f000 0001 	and.w	r0, r0, #1
 801e862:	4770      	bx	lr

0801e864 <SetParity>:

static void SetParity(uint16_t index, uint8_t *matrixRow, uint8_t parity)
{
  uint8_t mask = 0xFF - (1 << (7 - (index % 8)));
 801e864:	43c3      	mvns	r3, r0
  parity = parity << (7 - (index % 8));
  matrixRow[index >> 3] = (matrixRow[index >> 3] & mask) + parity;
 801e866:	08c0      	lsrs	r0, r0, #3
  uint8_t mask = 0xFF - (1 << (7 - (index % 8)));
 801e868:	f003 0307 	and.w	r3, r3, #7
{
 801e86c:	b510      	push	{r4, lr}
  uint8_t mask = 0xFF - (1 << (7 - (index % 8)));
 801e86e:	2401      	movs	r4, #1
  parity = parity << (7 - (index % 8));
 801e870:	409a      	lsls	r2, r3
  uint8_t mask = 0xFF - (1 << (7 - (index % 8)));
 801e872:	409c      	lsls	r4, r3
  matrixRow[index >> 3] = (matrixRow[index >> 3] & mask) + parity;
 801e874:	5c0b      	ldrb	r3, [r1, r0]
 801e876:	ea23 0304 	bic.w	r3, r3, r4
 801e87a:	441a      	add	r2, r3
 801e87c:	540a      	strb	r2, [r1, r0]
}
 801e87e:	bd10      	pop	{r4, pc}

0801e880 <XorDataLine>:
  }
  return false;
}

static void XorDataLine(uint8_t *line1, uint8_t *line2, int32_t size)
{
 801e880:	b530      	push	{r4, r5, lr}
 801e882:	3801      	subs	r0, #1
  for (int32_t i = 0; i < size; i++)
 801e884:	2300      	movs	r3, #0
 801e886:	4293      	cmp	r3, r2
 801e888:	d100      	bne.n	801e88c <XorDataLine+0xc>
  {
    line1[i] = line1[i] ^ line2[i];
  }
}
 801e88a:	bd30      	pop	{r4, r5, pc}
    line1[i] = line1[i] ^ line2[i];
 801e88c:	5ccd      	ldrb	r5, [r1, r3]
 801e88e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801e892:	406c      	eors	r4, r5
 801e894:	7004      	strb	r4, [r0, #0]
  for (int32_t i = 0; i < size; i++)
 801e896:	3301      	adds	r3, #1
 801e898:	e7f5      	b.n	801e886 <XorDataLine+0x6>

0801e89a <XorParityLine>:

static void XorParityLine(uint8_t *line1, uint8_t *line2, int32_t size)
{
 801e89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e89e:	4606      	mov	r6, r0
 801e8a0:	4688      	mov	r8, r1
 801e8a2:	b297      	uxth	r7, r2
  for (int32_t i = 0; i < size; i++)
 801e8a4:	2400      	movs	r4, #0
 801e8a6:	42bc      	cmp	r4, r7
 801e8a8:	d101      	bne.n	801e8ae <XorParityLine+0x14>
  {
    SetParity(i, line1, (GetParity(i, line1) ^ GetParity(i, line2)));
  }
}
 801e8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SetParity(i, line1, (GetParity(i, line1) ^ GetParity(i, line2)));
 801e8ae:	4631      	mov	r1, r6
 801e8b0:	4620      	mov	r0, r4
 801e8b2:	f7ff ffcd 	bl	801e850 <GetParity>
 801e8b6:	4641      	mov	r1, r8
 801e8b8:	4605      	mov	r5, r0
 801e8ba:	4620      	mov	r0, r4
 801e8bc:	f7ff ffc8 	bl	801e850 <GetParity>
 801e8c0:	4045      	eors	r5, r0
 801e8c2:	b2ea      	uxtb	r2, r5
 801e8c4:	4620      	mov	r0, r4
 801e8c6:	4631      	mov	r1, r6
 801e8c8:	3401      	adds	r4, #1
 801e8ca:	f7ff ffcb 	bl	801e864 <SetParity>
  for (int32_t i = 0; i < size; i++)
 801e8ce:	b2a4      	uxth	r4, r4
 801e8d0:	e7e9      	b.n	801e8a6 <XorParityLine+0xc>
	...

0801e8d4 <FragFindMissingIndex>:
  MW_LOG(TS_ON, VLEVEL_H, "LOST        :       %7d Fragments\r\n\r\n", FragDecoder.Status.FragNbLost);
}

static uint16_t FragFindMissingIndex(uint16_t x)
{
  for (uint16_t i = 0; i < FragDecoder.FragNb; i++)
 801e8d4:	4b09      	ldr	r3, [pc, #36]	; (801e8fc <FragFindMissingIndex+0x28>)
{
 801e8d6:	b530      	push	{r4, r5, lr}
 801e8d8:	3312      	adds	r3, #18
  for (uint16_t i = 0; i < FragDecoder.FragNb; i++)
 801e8da:	f833 4c0e 	ldrh.w	r4, [r3, #-14]
 801e8de:	2200      	movs	r2, #0
  {
    if (FragDecoder.FragNbMissingIndex[i] == (x + 1))
 801e8e0:	1c41      	adds	r1, r0, #1
 801e8e2:	b290      	uxth	r0, r2
  for (uint16_t i = 0; i < FragDecoder.FragNb; i++)
 801e8e4:	4284      	cmp	r4, r0
 801e8e6:	d801      	bhi.n	801e8ec <FragFindMissingIndex+0x18>
    {
      return i;
    }
  }
  return 0;
 801e8e8:	2000      	movs	r0, #0
 801e8ea:	e005      	b.n	801e8f8 <FragFindMissingIndex+0x24>
    if (FragDecoder.FragNbMissingIndex[i] == (x + 1))
 801e8ec:	f833 5b02 	ldrh.w	r5, [r3], #2
 801e8f0:	428d      	cmp	r5, r1
 801e8f2:	f102 0201 	add.w	r2, r2, #1
 801e8f6:	d1f4      	bne.n	801e8e2 <FragFindMissingIndex+0xe>
}
 801e8f8:	bd30      	pop	{r4, r5, pc}
 801e8fa:	bf00      	nop
 801e8fc:	200017d0 	.word	0x200017d0

0801e900 <FragExtractLineFromBinaryMatrix>:

static void FragExtractLineFromBinaryMatrix(uint8_t *bitArray, uint16_t rowIndex, uint16_t bitsInRow)
{
 801e900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e904:	4680      	mov	r8, r0
 801e906:	4616      	mov	r6, r2
  uint32_t findByte = 0;
  uint32_t findBitInByte = 0;

  if (rowIndex > 0)
 801e908:	460d      	mov	r5, r1
 801e90a:	b309      	cbz	r1, 801e950 <FragExtractLineFromBinaryMatrix+0x50>
  {
    findByte      = (rowIndex * bitsInRow - ((rowIndex * (rowIndex - 1)) >> 1)) >> 3;
 801e90c:	1e4b      	subs	r3, r1, #1
 801e90e:	434b      	muls	r3, r1
 801e910:	fb01 f402 	mul.w	r4, r1, r2
 801e914:	eba4 0463 	sub.w	r4, r4, r3, asr #1
    findBitInByte = (rowIndex * bitsInRow - ((rowIndex * (rowIndex - 1)) >> 1)) % 8;
 801e918:	4263      	negs	r3, r4
 801e91a:	f003 0307 	and.w	r3, r3, #7
    findByte      = (rowIndex * bitsInRow - ((rowIndex * (rowIndex - 1)) >> 1)) >> 3;
 801e91e:	ea4f 07e4 	mov.w	r7, r4, asr #3
    findBitInByte = (rowIndex * bitsInRow - ((rowIndex * (rowIndex - 1)) >> 1)) % 8;
 801e922:	f04f 0900 	mov.w	r9, #0
 801e926:	f004 0407 	and.w	r4, r4, #7
 801e92a:	bf58      	it	pl
 801e92c:	425c      	negpl	r4, r3
  }
  if (rowIndex > 0)
  {
    for (uint16_t i = 0; i < rowIndex; i++)
 801e92e:	45a9      	cmp	r9, r5
 801e930:	fa1f f089 	uxth.w	r0, r9
 801e934:	d105      	bne.n	801e942 <FragExtractLineFromBinaryMatrix+0x42>
  }
  for (uint16_t i = rowIndex; i < bitsInRow; i++)
  {
    SetParity(i,
              bitArray,
              (FragDecoder.MatrixM2B[findByte] >> (7 - findBitInByte)) & 0x01);
 801e936:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801e980 <FragExtractLineFromBinaryMatrix+0x80>
  for (uint16_t i = rowIndex; i < bitsInRow; i++)
 801e93a:	42b5      	cmp	r5, r6
 801e93c:	d30b      	bcc.n	801e956 <FragExtractLineFromBinaryMatrix+0x56>
    {
      findBitInByte = 0;
      findByte++;
    }
  }
}
 801e93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      SetParity(i, bitArray, 0);
 801e942:	2200      	movs	r2, #0
 801e944:	4641      	mov	r1, r8
 801e946:	f7ff ff8d 	bl	801e864 <SetParity>
    for (uint16_t i = 0; i < rowIndex; i++)
 801e94a:	f109 0901 	add.w	r9, r9, #1
 801e94e:	e7ee      	b.n	801e92e <FragExtractLineFromBinaryMatrix+0x2e>
  uint32_t findBitInByte = 0;
 801e950:	460c      	mov	r4, r1
  uint32_t findByte = 0;
 801e952:	460f      	mov	r7, r1
 801e954:	e7ef      	b.n	801e936 <FragExtractLineFromBinaryMatrix+0x36>
              (FragDecoder.MatrixM2B[findByte] >> (7 - findBitInByte)) & 0x01);
 801e956:	eb09 0307 	add.w	r3, r9, r7
    SetParity(i,
 801e95a:	4628      	mov	r0, r5
              (FragDecoder.MatrixM2B[findByte] >> (7 - findBitInByte)) & 0x01);
 801e95c:	7b1a      	ldrb	r2, [r3, #12]
 801e95e:	f1c4 0307 	rsb	r3, r4, #7
 801e962:	411a      	asrs	r2, r3
    findBitInByte++;
 801e964:	3401      	adds	r4, #1
    SetParity(i,
 801e966:	f002 0201 	and.w	r2, r2, #1
 801e96a:	4641      	mov	r1, r8
 801e96c:	f7ff ff7a 	bl	801e864 <SetParity>
  for (uint16_t i = rowIndex; i < bitsInRow; i++)
 801e970:	3501      	adds	r5, #1
    if (findBitInByte == 8)
 801e972:	2c08      	cmp	r4, #8
      findByte++;
 801e974:	bf04      	itt	eq
 801e976:	3701      	addeq	r7, #1
      findBitInByte = 0;
 801e978:	2400      	moveq	r4, #0
  for (uint16_t i = rowIndex; i < bitsInRow; i++)
 801e97a:	b2ad      	uxth	r5, r5
 801e97c:	e7dd      	b.n	801e93a <FragExtractLineFromBinaryMatrix+0x3a>
 801e97e:	bf00      	nop
 801e980:	200017d0 	.word	0x200017d0

0801e984 <FragFindMissingFrags>:
{
 801e984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (i = FragDecoder.Status.FragNbLastRx; i < (counter - 1); i++)
 801e986:	4c22      	ldr	r4, [pc, #136]	; (801ea10 <FragFindMissingFrags+0x8c>)
 801e988:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
    if (i < FragDecoder.FragNb)
 801e98c:	88a5      	ldrh	r5, [r4, #4]
 801e98e:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
  for (i = FragDecoder.Status.FragNbLastRx; i < (counter - 1); i++)
 801e992:	4631      	mov	r1, r6
 801e994:	2700      	movs	r7, #0
 801e996:	1e43      	subs	r3, r0, #1
 801e998:	428b      	cmp	r3, r1
 801e99a:	dc2f      	bgt.n	801e9fc <FragFindMissingFrags+0x78>
 801e99c:	43f3      	mvns	r3, r6
 801e99e:	4403      	add	r3, r0
 801e9a0:	4286      	cmp	r6, r0
 801e9a2:	bf28      	it	cs
 801e9a4:	2300      	movcs	r3, #0
 801e9a6:	4433      	add	r3, r6
 801e9a8:	b10f      	cbz	r7, 801e9ae <FragFindMissingFrags+0x2a>
 801e9aa:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
  if (i < FragDecoder.FragNb)
 801e9ae:	429d      	cmp	r5, r3
    FragDecoder.Status.FragNbLastRx = FragDecoder.FragNb + 1;
 801e9b0:	bfdc      	itt	le
 801e9b2:	1c68      	addle	r0, r5, #1
 801e9b4:	b280      	uxthle	r0, r0
  MW_LOG(TS_ON, VLEVEL_H, "RECEIVED    : %5d / %5d Fragments\r\n", FragDecoder.Status.FragNbRx, FragDecoder.FragNb);
 801e9b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801e9b8:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
 801e9bc:	9300      	str	r3, [sp, #0]
 801e9be:	9501      	str	r5, [sp, #4]
 801e9c0:	4b14      	ldr	r3, [pc, #80]	; (801ea14 <FragFindMissingFrags+0x90>)
 801e9c2:	2201      	movs	r2, #1
 801e9c4:	2100      	movs	r1, #0
 801e9c6:	2003      	movs	r0, #3
 801e9c8:	f007 ff7a 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  MW_LOG(TS_ON, VLEVEL_H, "              %5d / %5d Bytes\r\n", FragDecoder.Status.FragNbRx * FragDecoder.FragSize,
 801e9cc:	79a3      	ldrb	r3, [r4, #6]
 801e9ce:	88a2      	ldrh	r2, [r4, #4]
 801e9d0:	435a      	muls	r2, r3
 801e9d2:	9201      	str	r2, [sp, #4]
 801e9d4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801e9d6:	4353      	muls	r3, r2
 801e9d8:	9300      	str	r3, [sp, #0]
 801e9da:	2201      	movs	r2, #1
 801e9dc:	4b0e      	ldr	r3, [pc, #56]	; (801ea18 <FragFindMissingFrags+0x94>)
 801e9de:	2100      	movs	r1, #0
 801e9e0:	2003      	movs	r0, #3
 801e9e2:	f007 ff6d 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  MW_LOG(TS_ON, VLEVEL_H, "LOST        :       %7d Fragments\r\n\r\n", FragDecoder.Status.FragNbLost);
 801e9e6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801e9ea:	9300      	str	r3, [sp, #0]
 801e9ec:	2201      	movs	r2, #1
 801e9ee:	4b0b      	ldr	r3, [pc, #44]	; (801ea1c <FragFindMissingFrags+0x98>)
 801e9f0:	2100      	movs	r1, #0
 801e9f2:	2003      	movs	r0, #3
 801e9f4:	f007 ff64 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
}
 801e9f8:	b003      	add	sp, #12
 801e9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i < FragDecoder.FragNb)
 801e9fc:	428d      	cmp	r5, r1
 801e9fe:	dd05      	ble.n	801ea0c <FragFindMissingFrags+0x88>
      FragDecoder.FragNbMissingIndex[i] = FragDecoder.Status.FragNbLost;
 801ea00:	eb04 0741 	add.w	r7, r4, r1, lsl #1
      FragDecoder.Status.FragNbLost++;
 801ea04:	3201      	adds	r2, #1
 801ea06:	b292      	uxth	r2, r2
      FragDecoder.FragNbMissingIndex[i] = FragDecoder.Status.FragNbLost;
 801ea08:	827a      	strh	r2, [r7, #18]
 801ea0a:	2701      	movs	r7, #1
  for (i = FragDecoder.Status.FragNbLastRx; i < (counter - 1); i++)
 801ea0c:	3101      	adds	r1, #1
 801ea0e:	e7c3      	b.n	801e998 <FragFindMissingFrags+0x14>
 801ea10:	200017d0 	.word	0x200017d0
 801ea14:	080279c1 	.word	0x080279c1
 801ea18:	080279e5 	.word	0x080279e5
 801ea1c:	08027a05 	.word	0x08027a05

0801ea20 <FragDecoderInit>:
{
 801ea20:	b570      	push	{r4, r5, r6, lr}
  FragDecoder.Callbacks = callbacks;
 801ea22:	4c0f      	ldr	r4, [pc, #60]	; (801ea60 <FragDecoderInit+0x40>)
  FragDecoder.Status.FragNbLost = 0;
 801ea24:	2300      	movs	r3, #0
  FragDecoder.Callbacks = callbacks;
 801ea26:	6022      	str	r2, [r4, #0]
  FragDecoder.FragNb = fragNb;                                /* FragNb = FRAG_MAX_SIZE */
 801ea28:	80a0      	strh	r0, [r4, #4]
  FragDecoder.FragSize = fragSize;                            /* number of byte on a row */
 801ea2a:	71a1      	strb	r1, [r4, #6]
  FragDecoder.Status.FragNbLost = 0;
 801ea2c:	6423      	str	r3, [r4, #64]	; 0x40
  FragDecoder.M2BLine = 0;
 801ea2e:	60a3      	str	r3, [r4, #8]
  for (uint16_t i = 0; i < FRAG_MAX_NB; i++)
 801ea30:	f104 0512 	add.w	r5, r4, #18
    FragDecoder.FragNbMissingIndex[i] = 1;
 801ea34:	2601      	movs	r6, #1
  for (uint16_t i = 0; i < FRAG_MAX_NB; i++)
 801ea36:	3301      	adds	r3, #1
 801ea38:	b29b      	uxth	r3, r3
 801ea3a:	2b15      	cmp	r3, #21
    FragDecoder.FragNbMissingIndex[i] = 1;
 801ea3c:	f825 6b02 	strh.w	r6, [r5], #2
  for (uint16_t i = 0; i < FRAG_MAX_NB; i++)
 801ea40:	d1f9      	bne.n	801ea36 <FragDecoderInit+0x16>
    FragDecoder.MatrixM2B[i] = 0xFF;
 801ea42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    FragDecoder.S[i] = 0;
 801ea46:	2500      	movs	r5, #0
 801ea48:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    FragDecoder.MatrixM2B[i] = 0xFF;
 801ea4c:	60e3      	str	r3, [r4, #12]
 801ea4e:	7423      	strb	r3, [r4, #16]
  if (FragDecoder.Callbacks->FragDecoderErase != NULL)
 801ea50:	6813      	ldr	r3, [r2, #0]
 801ea52:	b113      	cbz	r3, 801ea5a <FragDecoderInit+0x3a>
    FragDecoder.Callbacks->FragDecoderErase(0, fragNb * fragSize);
 801ea54:	4341      	muls	r1, r0
 801ea56:	4628      	mov	r0, r5
 801ea58:	4798      	blx	r3
  FragDecoder.Status.FragNbLost = 0;
 801ea5a:	2300      	movs	r3, #0
 801ea5c:	6423      	str	r3, [r4, #64]	; 0x40
}
 801ea5e:	bd70      	pop	{r4, r5, r6, pc}
 801ea60:	200017d0 	.word	0x200017d0

0801ea64 <FragDecoderGetMaxFileSize>:
}
 801ea64:	f240 401a 	movw	r0, #1050	; 0x41a
 801ea68:	4770      	bx	lr
	...

0801ea6c <FragDecoderProcess>:
{
 801ea6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea70:	b090      	sub	sp, #64	; 0x40
 801ea72:	4604      	mov	r4, r0
  UTIL_MEM_set_8(matrixRow, 0, (FRAG_MAX_NB >> 3) + 1);
 801ea74:	2203      	movs	r2, #3
 801ea76:	a802      	add	r0, sp, #8
{
 801ea78:	460f      	mov	r7, r1
  UTIL_MEM_set_8(matrixRow, 0, (FRAG_MAX_NB >> 3) + 1);
 801ea7a:	2100      	movs	r1, #0
 801ea7c:	f008 f826 	bl	8026acc <UTIL_MEM_set_8>
  UTIL_MEM_set_8(matrixDataTemp, 0, FRAG_MAX_SIZE);
 801ea80:	2232      	movs	r2, #50	; 0x32
 801ea82:	2100      	movs	r1, #0
 801ea84:	a803      	add	r0, sp, #12
 801ea86:	f008 f821 	bl	8026acc <UTIL_MEM_set_8>
  FragDecoder.Status.FragNbRx = fragCounter;
 801ea8a:	4ec3      	ldr	r6, [pc, #780]	; (801ed98 <FragDecoderProcess+0x32c>)
  UTIL_MEM_set_8(dataTempVector, 0, (FRAG_MAX_REDUNDANCY >> 3) + 1);
 801ea8c:	2201      	movs	r2, #1
 801ea8e:	2100      	movs	r1, #0
 801ea90:	4668      	mov	r0, sp
 801ea92:	f008 f81b 	bl	8026acc <UTIL_MEM_set_8>
  UTIL_MEM_set_8(dataTempVector2, 0, (FRAG_MAX_REDUNDANCY >> 3) + 1);
 801ea96:	2201      	movs	r2, #1
 801ea98:	2100      	movs	r1, #0
 801ea9a:	a801      	add	r0, sp, #4
 801ea9c:	f008 f816 	bl	8026acc <UTIL_MEM_set_8>
  if (fragCounter < FragDecoder.Status.FragNbLastRx)
 801eaa0:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
  FragDecoder.Status.FragNbRx = fragCounter;
 801eaa4:	87f4      	strh	r4, [r6, #62]	; 0x3e
  if (fragCounter < FragDecoder.Status.FragNbLastRx)
 801eaa6:	42a3      	cmp	r3, r4
 801eaa8:	4635      	mov	r5, r6
 801eaaa:	d904      	bls.n	801eab6 <FragDecoderProcess+0x4a>
  return FRAG_SESSION_ONGOING;
 801eaac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801eab0:	b010      	add	sp, #64	; 0x40
 801eab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (fragCounter < (FragDecoder.FragNb + 1))
 801eab6:	88b3      	ldrh	r3, [r6, #4]
 801eab8:	42a3      	cmp	r3, r4
 801eaba:	d30e      	bcc.n	801eada <FragDecoderProcess+0x6e>
    SetRow(rawData, fragCounter - 1, FragDecoder.FragSize);
 801eabc:	1e61      	subs	r1, r4, #1
 801eabe:	79b2      	ldrb	r2, [r6, #6]
 801eac0:	4638      	mov	r0, r7
 801eac2:	b289      	uxth	r1, r1
 801eac4:	f7ff fea0 	bl	801e808 <SetRow>
    FragDecoder.FragNbMissingIndex[fragCounter - 1] = 0;
 801eac8:	1de3      	adds	r3, r4, #7
 801eaca:	eb06 0643 	add.w	r6, r6, r3, lsl #1
    FragFindMissingFrags(fragCounter);
 801eace:	4620      	mov	r0, r4
    FragDecoder.FragNbMissingIndex[fragCounter - 1] = 0;
 801ead0:	2300      	movs	r3, #0
 801ead2:	8073      	strh	r3, [r6, #2]
    FragFindMissingFrags(fragCounter);
 801ead4:	f7ff ff56 	bl	801e984 <FragFindMissingFrags>
 801ead8:	e7e8      	b.n	801eaac <FragDecoderProcess+0x40>
    if (FragDecoder.Status.FragNbLost > FRAG_MAX_REDUNDANCY)
 801eada:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 801eade:	2b05      	cmp	r3, #5
 801eae0:	d904      	bls.n	801eaec <FragDecoderProcess+0x80>
      FragDecoder.Status.MatrixError = 1;
 801eae2:	2301      	movs	r3, #1
 801eae4:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      return FRAG_SESSION_FINISHED;
 801eae8:	2000      	movs	r0, #0
 801eaea:	e7e1      	b.n	801eab0 <FragDecoderProcess+0x44>
    FragFindMissingFrags(fragCounter);
 801eaec:	4620      	mov	r0, r4
 801eaee:	f7ff ff49 	bl	801e984 <FragFindMissingFrags>
    if (FragDecoder.Status.FragNbLost == 0)
 801eaf2:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
 801eaf6:	2800      	cmp	r0, #0
 801eaf8:	d0da      	beq.n	801eab0 <FragDecoderProcess+0x44>
    FragGetParityMatrixRow(fragCounter - FragDecoder.FragNb, FragDecoder.FragNb, matrixRow);
 801eafa:	f8b6 8004 	ldrh.w	r8, [r6, #4]
  if (IsPowerOfTwo(m) != false)
 801eafe:	2300      	movs	r3, #0
    FragGetParityMatrixRow(fragCounter - FragDecoder.FragNb, FragDecoder.FragNb, matrixRow);
 801eb00:	eba4 0408 	sub.w	r4, r4, r8
  uint8_t sumBit = 0;
 801eb04:	461e      	mov	r6, r3
    sumBit += (x & (1 << i)) >> i;
 801eb06:	2101      	movs	r1, #1
 801eb08:	fa01 f203 	lsl.w	r2, r1, r3
 801eb0c:	ea02 0208 	and.w	r2, r2, r8
 801eb10:	40da      	lsrs	r2, r3
 801eb12:	3301      	adds	r3, #1
 801eb14:	4416      	add	r6, r2
  for (uint8_t i = 0; i < 32; i++)
 801eb16:	2b20      	cmp	r3, #32
    sumBit += (x & (1 << i)) >> i;
 801eb18:	b2f6      	uxtb	r6, r6
  for (uint8_t i = 0; i < 32; i++)
 801eb1a:	d1f5      	bne.n	801eb08 <FragDecoderProcess+0x9c>
  if (sumBit == 1)
 801eb1c:	1e73      	subs	r3, r6, #1
 801eb1e:	425e      	negs	r6, r3
  x = 1 + (1001 * n);
 801eb20:	f240 30e9 	movw	r0, #1001	; 0x3e9
 801eb24:	fb00 f404 	mul.w	r4, r0, r4
  if (sumBit == 1)
 801eb28:	415e      	adcs	r6, r3
  for (uint8_t i = 0; i < ((m >> 3) + 1); i++)
 801eb2a:	2300      	movs	r3, #0
  x = 1 + (1001 * n);
 801eb2c:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < ((m >> 3) + 1); i++)
 801eb2e:	ea4f 02e8 	mov.w	r2, r8, asr #3
    matrixRow[i] = 0;
 801eb32:	4618      	mov	r0, r3
 801eb34:	a910      	add	r1, sp, #64	; 0x40
 801eb36:	4419      	add	r1, r3
  for (uint8_t i = 0; i < ((m >> 3) + 1); i++)
 801eb38:	3301      	adds	r3, #1
 801eb3a:	b2db      	uxtb	r3, r3
 801eb3c:	429a      	cmp	r2, r3
    matrixRow[i] = 0;
 801eb3e:	f801 0c38 	strb.w	r0, [r1, #-56]
  for (uint8_t i = 0; i < ((m >> 3) + 1); i++)
 801eb42:	daf7      	bge.n	801eb34 <FragDecoderProcess+0xc8>
  while (nbCoeff < (m >> 1))
 801eb44:	ea4f 0a68 	mov.w	sl, r8, asr #1
  int32_t nbCoeff = 0;
 801eb48:	f04f 0900 	mov.w	r9, #0
      r = x % (m + mTemp);
 801eb4c:	4446      	add	r6, r8
  while (nbCoeff < (m >> 1))
 801eb4e:	45d1      	cmp	r9, sl
 801eb50:	d10c      	bne.n	801eb6c <FragDecoderProcess+0x100>
    for (int32_t i = 0; i < FragDecoder.FragNb; i++)
 801eb52:	2600      	movs	r6, #0
  int32_t first = 0;
 801eb54:	46b0      	mov	r8, r6
    for (int32_t i = 0; i < FragDecoder.FragNb; i++)
 801eb56:	88ab      	ldrh	r3, [r5, #4]
 801eb58:	42b3      	cmp	r3, r6
 801eb5a:	dc1c      	bgt.n	801eb96 <FragDecoderProcess+0x12a>
    firstOneInRow = BitArrayFindFirstOne(dataTempVector, FragDecoder.Status.FragNbLost);
 801eb5c:	f8b5 6040 	ldrh.w	r6, [r5, #64]	; 0x40
  for (uint16_t i = 0; i < size; i++)
 801eb60:	2200      	movs	r2, #0
 801eb62:	b294      	uxth	r4, r2
 801eb64:	42a6      	cmp	r6, r4
 801eb66:	d83b      	bhi.n	801ebe0 <FragDecoderProcess+0x174>
  return 0;
 801eb68:	2400      	movs	r4, #0
 801eb6a:	e041      	b.n	801ebf0 <FragDecoderProcess+0x184>
  return (value >> 1) + ((b0 ^ b1) << 22);;
 801eb6c:	ea84 1364 	eor.w	r3, r4, r4, asr #5
 801eb70:	059b      	lsls	r3, r3, #22
 801eb72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801eb76:	eb03 0464 	add.w	r4, r3, r4, asr #1
      r = x % (m + mTemp);
 801eb7a:	fb94 f0f6 	sdiv	r0, r4, r6
 801eb7e:	fb06 4010 	mls	r0, r6, r0, r4
    while (r >= m)
 801eb82:	4580      	cmp	r8, r0
 801eb84:	ddf2      	ble.n	801eb6c <FragDecoderProcess+0x100>
    SetParity(r, matrixRow, 1);
 801eb86:	2201      	movs	r2, #1
 801eb88:	a902      	add	r1, sp, #8
 801eb8a:	b280      	uxth	r0, r0
 801eb8c:	f7ff fe6a 	bl	801e864 <SetParity>
    nbCoeff += 1;
 801eb90:	f109 0901 	add.w	r9, r9, #1
 801eb94:	e7db      	b.n	801eb4e <FragDecoderProcess+0xe2>
      if (GetParity(i, matrixRow) == 1)
 801eb96:	fa1f f986 	uxth.w	r9, r6
 801eb9a:	a902      	add	r1, sp, #8
 801eb9c:	4648      	mov	r0, r9
 801eb9e:	f7ff fe57 	bl	801e850 <GetParity>
 801eba2:	2801      	cmp	r0, #1
 801eba4:	4604      	mov	r4, r0
 801eba6:	d111      	bne.n	801ebcc <FragDecoderProcess+0x160>
        if (FragDecoder.FragNbMissingIndex[i] == 0)
 801eba8:	eb05 0346 	add.w	r3, r5, r6, lsl #1
 801ebac:	8a5a      	ldrh	r2, [r3, #18]
 801ebae:	b97a      	cbnz	r2, 801ebd0 <FragDecoderProcess+0x164>
          SetParity(i, matrixRow, 0);
 801ebb0:	a902      	add	r1, sp, #8
 801ebb2:	4648      	mov	r0, r9
 801ebb4:	f7ff fe56 	bl	801e864 <SetParity>
          GetRow(matrixDataTemp, i, FragDecoder.FragSize);
 801ebb8:	79aa      	ldrb	r2, [r5, #6]
 801ebba:	4649      	mov	r1, r9
 801ebbc:	a803      	add	r0, sp, #12
 801ebbe:	f7ff fe35 	bl	801e82c <GetRow>
          XorDataLine(rawData, matrixDataTemp, FragDecoder.FragSize);
 801ebc2:	79aa      	ldrb	r2, [r5, #6]
 801ebc4:	a903      	add	r1, sp, #12
 801ebc6:	4638      	mov	r0, r7
 801ebc8:	f7ff fe5a 	bl	801e880 <XorDataLine>
    for (int32_t i = 0; i < FragDecoder.FragNb; i++)
 801ebcc:	3601      	adds	r6, #1
 801ebce:	e7c2      	b.n	801eb56 <FragDecoderProcess+0xea>
          SetParity(FragDecoder.FragNbMissingIndex[i] - 1, dataTempVector, 1);
 801ebd0:	1e50      	subs	r0, r2, #1
 801ebd2:	4669      	mov	r1, sp
 801ebd4:	4622      	mov	r2, r4
 801ebd6:	b280      	uxth	r0, r0
 801ebd8:	f7ff fe44 	bl	801e864 <SetParity>
            first = 1;
 801ebdc:	46a0      	mov	r8, r4
 801ebde:	e7f5      	b.n	801ebcc <FragDecoderProcess+0x160>
    if (GetParity(i, bitArray) == 1)
 801ebe0:	4669      	mov	r1, sp
 801ebe2:	4620      	mov	r0, r4
 801ebe4:	f7ff fe34 	bl	801e850 <GetParity>
 801ebe8:	2801      	cmp	r0, #1
 801ebea:	f102 0201 	add.w	r2, r2, #1
 801ebee:	d1b8      	bne.n	801eb62 <FragDecoderProcess+0xf6>
    if (first > 0)
 801ebf0:	f1b8 0f00 	cmp.w	r8, #0
 801ebf4:	f43f af5a 	beq.w	801eaac <FragDecoderProcess+0x40>
      while (GetParity(firstOneInRow, FragDecoder.S) == 1)
 801ebf8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 801ed9c <FragDecoderProcess+0x330>
 801ebfc:	4641      	mov	r1, r8
 801ebfe:	4620      	mov	r0, r4
 801ec00:	f7ff fe26 	bl	801e850 <GetParity>
 801ec04:	2801      	cmp	r0, #1
 801ec06:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 801ec0a:	d004      	beq.n	801ec16 <FragDecoderProcess+0x1aa>
static void FragPushLineToBinaryMatrix(uint8_t *bitArray, uint16_t rowIndex, uint16_t bitsInRow)
{
  uint32_t findByte = 0;
  uint32_t findBitInByte = 0;

  if (rowIndex > 0)
 801ec0c:	2c00      	cmp	r4, #0
 801ec0e:	d15b      	bne.n	801ecc8 <FragDecoderProcess+0x25c>
  uint32_t findBitInByte = 0;
 801ec10:	4626      	mov	r6, r4
  uint32_t findByte = 0;
 801ec12:	46a1      	mov	r9, r4
 801ec14:	e067      	b.n	801ece6 <FragDecoderProcess+0x27a>
        FragExtractLineFromBinaryMatrix(dataTempVector2, firstOneInRow, FragDecoder.Status.FragNbLost);
 801ec16:	4621      	mov	r1, r4
 801ec18:	a801      	add	r0, sp, #4
 801ec1a:	f7ff fe71 	bl	801e900 <FragExtractLineFromBinaryMatrix>
        XorParityLine(dataTempVector, dataTempVector2, FragDecoder.Status.FragNbLost);
 801ec1e:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 801ec22:	a901      	add	r1, sp, #4
 801ec24:	4668      	mov	r0, sp
 801ec26:	f7ff fe38 	bl	801e89a <XorParityLine>
        li = FragFindMissingIndex(firstOneInRow);
 801ec2a:	4620      	mov	r0, r4
 801ec2c:	f7ff fe52 	bl	801e8d4 <FragFindMissingIndex>
        GetRow(matrixDataTemp, li, FragDecoder.FragSize);
 801ec30:	79aa      	ldrb	r2, [r5, #6]
        li = FragFindMissingIndex(firstOneInRow);
 801ec32:	4601      	mov	r1, r0
        GetRow(matrixDataTemp, li, FragDecoder.FragSize);
 801ec34:	a803      	add	r0, sp, #12
 801ec36:	f7ff fdf9 	bl	801e82c <GetRow>
        XorDataLine(rawData, matrixDataTemp, FragDecoder.FragSize);
 801ec3a:	79aa      	ldrb	r2, [r5, #6]
 801ec3c:	a903      	add	r1, sp, #12
 801ec3e:	4638      	mov	r0, r7
 801ec40:	f7ff fe1e 	bl	801e880 <XorDataLine>
        if (BitArrayIsAllZeros(dataTempVector, FragDecoder.Status.FragNbLost))
 801ec44:	f8b5 6040 	ldrh.w	r6, [r5, #64]	; 0x40
  for (uint16_t i = 0; i < size; i++)
 801ec48:	2200      	movs	r2, #0
 801ec4a:	b290      	uxth	r0, r2
 801ec4c:	4286      	cmp	r6, r0
 801ec4e:	d825      	bhi.n	801ec9c <FragDecoderProcess+0x230>
      if (FragDecoder.M2BLine == FragDecoder.Status.FragNbLost)
 801ec50:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 801ec54:	68ac      	ldr	r4, [r5, #8]
 801ec56:	429c      	cmp	r4, r3
 801ec58:	f47f af28 	bne.w	801eaac <FragDecoderProcess+0x40>
        if (FragDecoder.Status.FragNbLost > 1)
 801ec5c:	2c01      	cmp	r4, #1
 801ec5e:	4620      	mov	r0, r4
 801ec60:	f67f af26 	bls.w	801eab0 <FragDecoderProcess+0x44>
            GetRow(matrixDataTemp, li, FragDecoder.FragSize);
 801ec64:	4d4c      	ldr	r5, [pc, #304]	; (801ed98 <FragDecoderProcess+0x32c>)
          for (i = (FragDecoder.Status.FragNbLost - 2); i >= 0 ; i--)
 801ec66:	3c02      	subs	r4, #2
            li = FragFindMissingIndex(i);
 801ec68:	fa1f fa84 	uxth.w	sl, r4
 801ec6c:	4650      	mov	r0, sl
 801ec6e:	f7ff fe31 	bl	801e8d4 <FragFindMissingIndex>
            GetRow(matrixDataTemp, li, FragDecoder.FragSize);
 801ec72:	79aa      	ldrb	r2, [r5, #6]
 801ec74:	4601      	mov	r1, r0
            li = FragFindMissingIndex(i);
 801ec76:	4680      	mov	r8, r0
            GetRow(matrixDataTemp, li, FragDecoder.FragSize);
 801ec78:	a803      	add	r0, sp, #12
 801ec7a:	f7ff fdd7 	bl	801e82c <GetRow>
            for (j = (FragDecoder.Status.FragNbLost - 1); j > i; j--)
 801ec7e:	f8b5 6040 	ldrh.w	r6, [r5, #64]	; 0x40
 801ec82:	3e01      	subs	r6, #1
 801ec84:	42a6      	cmp	r6, r4
 801ec86:	dc5e      	bgt.n	801ed46 <FragDecoderProcess+0x2da>
            SetRow(matrixDataTemp, li, FragDecoder.FragSize);
 801ec88:	79aa      	ldrb	r2, [r5, #6]
 801ec8a:	4641      	mov	r1, r8
 801ec8c:	a803      	add	r0, sp, #12
 801ec8e:	f7ff fdbb 	bl	801e808 <SetRow>
          for (i = (FragDecoder.Status.FragNbLost - 2); i >= 0 ; i--)
 801ec92:	3c01      	subs	r4, #1
 801ec94:	d2e8      	bcs.n	801ec68 <FragDecoderProcess+0x1fc>
          return FragDecoder.Status.FragNbLost;
 801ec96:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
 801ec9a:	e709      	b.n	801eab0 <FragDecoderProcess+0x44>
    if (GetParity(i, bitArray) == 1)
 801ec9c:	4669      	mov	r1, sp
 801ec9e:	f7ff fdd7 	bl	801e850 <GetParity>
 801eca2:	2801      	cmp	r0, #1
 801eca4:	f102 0201 	add.w	r2, r2, #1
 801eca8:	d1cf      	bne.n	801ec4a <FragDecoderProcess+0x1de>
 801ecaa:	2200      	movs	r2, #0
 801ecac:	e007      	b.n	801ecbe <FragDecoderProcess+0x252>
    if (GetParity(i, bitArray) == 1)
 801ecae:	4669      	mov	r1, sp
 801ecb0:	4620      	mov	r0, r4
 801ecb2:	f7ff fdcd 	bl	801e850 <GetParity>
 801ecb6:	2801      	cmp	r0, #1
 801ecb8:	f102 0201 	add.w	r2, r2, #1
 801ecbc:	d09e      	beq.n	801ebfc <FragDecoderProcess+0x190>
 801ecbe:	b294      	uxth	r4, r2
  for (uint16_t i = 0; i < size; i++)
 801ecc0:	42a6      	cmp	r6, r4
 801ecc2:	d8f4      	bhi.n	801ecae <FragDecoderProcess+0x242>
  return 0;
 801ecc4:	2400      	movs	r4, #0
 801ecc6:	e799      	b.n	801ebfc <FragDecoderProcess+0x190>
  {
    findByte      = (rowIndex * bitsInRow - ((rowIndex * (rowIndex - 1)) >> 1)) >> 3;
 801ecc8:	1e63      	subs	r3, r4, #1
 801ecca:	4363      	muls	r3, r4
 801eccc:	fb04 f602 	mul.w	r6, r4, r2
 801ecd0:	eba6 0663 	sub.w	r6, r6, r3, asr #1
    findBitInByte = (rowIndex * bitsInRow - ((rowIndex * (rowIndex - 1)) >> 1)) % 8;
 801ecd4:	4273      	negs	r3, r6
 801ecd6:	f003 0307 	and.w	r3, r3, #7
    findByte      = (rowIndex * bitsInRow - ((rowIndex * (rowIndex - 1)) >> 1)) >> 3;
 801ecda:	ea4f 09e6 	mov.w	r9, r6, asr #3
    findBitInByte = (rowIndex * bitsInRow - ((rowIndex * (rowIndex - 1)) >> 1)) % 8;
 801ecde:	f006 0607 	and.w	r6, r6, #7
 801ece2:	bf58      	it	pl
 801ece4:	425e      	negpl	r6, r3
  uint32_t findByte = 0;
 801ece6:	46a0      	mov	r8, r4
  }
  for (uint16_t i = rowIndex; i < bitsInRow; i++)
  {
    if (GetParity(i, bitArray) == 0)
    {
      FragDecoder.MatrixM2B[findByte] = FragDecoder.MatrixM2B[findByte] & (0xFF - (1 << (7 - findBitInByte)));
 801ece8:	f04f 0a01 	mov.w	sl, #1
 801ecec:	e018      	b.n	801ed20 <FragDecoderProcess+0x2b4>
    if (GetParity(i, bitArray) == 0)
 801ecee:	4669      	mov	r1, sp
 801ecf0:	4640      	mov	r0, r8
 801ecf2:	f7ff fdad 	bl	801e850 <GetParity>
 801ecf6:	b948      	cbnz	r0, 801ed0c <FragDecoderProcess+0x2a0>
      FragDecoder.MatrixM2B[findByte] = FragDecoder.MatrixM2B[findByte] & (0xFF - (1 << (7 - findBitInByte)));
 801ecf8:	eb05 0309 	add.w	r3, r5, r9
 801ecfc:	f1c6 0107 	rsb	r1, r6, #7
 801ed00:	fa0a f001 	lsl.w	r0, sl, r1
 801ed04:	7b19      	ldrb	r1, [r3, #12]
 801ed06:	ea21 0100 	bic.w	r1, r1, r0
 801ed0a:	7319      	strb	r1, [r3, #12]
    }
    findBitInByte++;
 801ed0c:	3601      	adds	r6, #1
    if (findBitInByte == 8)
 801ed0e:	2e08      	cmp	r6, #8
  for (uint16_t i = rowIndex; i < bitsInRow; i++)
 801ed10:	f108 0801 	add.w	r8, r8, #1
    {
      findBitInByte = 0;
      findByte++;
 801ed14:	bf04      	itt	eq
 801ed16:	f109 0901 	addeq.w	r9, r9, #1
      findBitInByte = 0;
 801ed1a:	2600      	moveq	r6, #0
  for (uint16_t i = rowIndex; i < bitsInRow; i++)
 801ed1c:	fa1f f888 	uxth.w	r8, r8
 801ed20:	4590      	cmp	r8, r2
 801ed22:	d3e4      	bcc.n	801ecee <FragDecoderProcess+0x282>
        li = FragFindMissingIndex(firstOneInRow);
 801ed24:	4620      	mov	r0, r4
 801ed26:	f7ff fdd5 	bl	801e8d4 <FragFindMissingIndex>
        SetRow(rawData, li, FragDecoder.FragSize);
 801ed2a:	79aa      	ldrb	r2, [r5, #6]
        li = FragFindMissingIndex(firstOneInRow);
 801ed2c:	4601      	mov	r1, r0
        SetRow(rawData, li, FragDecoder.FragSize);
 801ed2e:	4638      	mov	r0, r7
 801ed30:	f7ff fd6a 	bl	801e808 <SetRow>
        SetParity(firstOneInRow, FragDecoder.S, 1);
 801ed34:	4919      	ldr	r1, [pc, #100]	; (801ed9c <FragDecoderProcess+0x330>)
 801ed36:	2201      	movs	r2, #1
 801ed38:	4620      	mov	r0, r4
 801ed3a:	f7ff fd93 	bl	801e864 <SetParity>
        FragDecoder.M2BLine++;
 801ed3e:	68ab      	ldr	r3, [r5, #8]
 801ed40:	3301      	adds	r3, #1
 801ed42:	60ab      	str	r3, [r5, #8]
 801ed44:	e784      	b.n	801ec50 <FragDecoderProcess+0x1e4>
              FragExtractLineFromBinaryMatrix(dataTempVector2, i, FragDecoder.Status.FragNbLost);
 801ed46:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 801ed4a:	4651      	mov	r1, sl
 801ed4c:	a801      	add	r0, sp, #4
 801ed4e:	fa1f f986 	uxth.w	r9, r6
 801ed52:	f7ff fdd5 	bl	801e900 <FragExtractLineFromBinaryMatrix>
              FragExtractLineFromBinaryMatrix(dataTempVector, j, FragDecoder.Status.FragNbLost);
 801ed56:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 801ed5a:	4649      	mov	r1, r9
 801ed5c:	4668      	mov	r0, sp
 801ed5e:	f7ff fdcf 	bl	801e900 <FragExtractLineFromBinaryMatrix>
              if (GetParity(j, dataTempVector2) == 1)
 801ed62:	a901      	add	r1, sp, #4
 801ed64:	4648      	mov	r0, r9
 801ed66:	f7ff fd73 	bl	801e850 <GetParity>
 801ed6a:	2801      	cmp	r0, #1
 801ed6c:	d189      	bne.n	801ec82 <FragDecoderProcess+0x216>
                XorParityLine(dataTempVector2, dataTempVector, FragDecoder.Status.FragNbLost);
 801ed6e:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 801ed72:	4669      	mov	r1, sp
 801ed74:	a801      	add	r0, sp, #4
 801ed76:	f7ff fd90 	bl	801e89a <XorParityLine>
                lj = FragFindMissingIndex(j);
 801ed7a:	4648      	mov	r0, r9
 801ed7c:	f7ff fdaa 	bl	801e8d4 <FragFindMissingIndex>
                GetRow(rawData, lj, FragDecoder.FragSize);
 801ed80:	79aa      	ldrb	r2, [r5, #6]
                lj = FragFindMissingIndex(j);
 801ed82:	4601      	mov	r1, r0
                GetRow(rawData, lj, FragDecoder.FragSize);
 801ed84:	4638      	mov	r0, r7
 801ed86:	f7ff fd51 	bl	801e82c <GetRow>
                XorDataLine(matrixDataTemp, rawData, FragDecoder.FragSize);
 801ed8a:	79aa      	ldrb	r2, [r5, #6]
 801ed8c:	4639      	mov	r1, r7
 801ed8e:	a803      	add	r0, sp, #12
 801ed90:	f7ff fd76 	bl	801e880 <XorDataLine>
 801ed94:	e775      	b.n	801ec82 <FragDecoderProcess+0x216>
 801ed96:	bf00      	nop
 801ed98:	200017d0 	.word	0x200017d0
 801ed9c:	2000180c 	.word	0x2000180c

0801eda0 <FragDecoderGetStatus>:
  return FragDecoder.Status;
 801eda0:	4903      	ldr	r1, [pc, #12]	; (801edb0 <FragDecoderGetStatus+0x10>)
 801eda2:	f851 2f3e 	ldr.w	r2, [r1, #62]!
 801eda6:	6002      	str	r2, [r0, #0]
 801eda8:	684a      	ldr	r2, [r1, #4]
 801edaa:	6042      	str	r2, [r0, #4]
}
 801edac:	4770      	bx	lr
 801edae:	bf00      	nop
 801edb0:	200017d0 	.word	0x200017d0

0801edb4 <MlmeIndication>:
  }
}

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
  RxParams.IsMcpsIndication = 0;
 801edb4:	4b02      	ldr	r3, [pc, #8]	; (801edc0 <MlmeIndication+0xc>)
 801edb6:	2200      	movs	r2, #0
 801edb8:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 801edba:	7842      	ldrb	r2, [r0, #1]
 801edbc:	705a      	strb	r2, [r3, #1]
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
  }
}
 801edbe:	4770      	bx	lr
 801edc0:	20001114 	.word	0x20001114

0801edc4 <LmHandlerDeviceTimeReq>:
{
 801edc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  mlmeReq.Type = MLME_DEVICE_TIME;
 801edc6:	230a      	movs	r3, #10
  status = LoRaMacMlmeRequest(&mlmeReq);
 801edc8:	a801      	add	r0, sp, #4
  mlmeReq.Type = MLME_DEVICE_TIME;
 801edca:	f88d 3004 	strb.w	r3, [sp, #4]
  status = LoRaMacMlmeRequest(&mlmeReq);
 801edce:	f003 feb3 	bl	8022b38 <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 801edd2:	3800      	subs	r0, #0
 801edd4:	bf18      	it	ne
 801edd6:	2001      	movne	r0, #1
}
 801edd8:	4240      	negs	r0, r0
 801edda:	b007      	add	sp, #28
 801eddc:	f85d fb04 	ldr.w	pc, [sp], #4

0801ede0 <McpsConfirm>:
{
 801ede0:	b570      	push	{r4, r5, r6, lr}
  TxParams.IsMcpsConfirm = 1;
 801ede2:	4c11      	ldr	r4, [pc, #68]	; (801ee28 <McpsConfirm+0x48>)
 801ede4:	2301      	movs	r3, #1
 801ede6:	7023      	strb	r3, [r4, #0]
  TxParams.Status = mcpsConfirm->Status;
 801ede8:	7843      	ldrb	r3, [r0, #1]
 801edea:	7063      	strb	r3, [r4, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 801edec:	7883      	ldrb	r3, [r0, #2]
 801edee:	7123      	strb	r3, [r4, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 801edf0:	68c3      	ldr	r3, [r0, #12]
 801edf2:	60a3      	str	r3, [r4, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 801edf4:	78c3      	ldrb	r3, [r0, #3]
 801edf6:	7523      	strb	r3, [r4, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 801edf8:	6903      	ldr	r3, [r0, #16]
 801edfa:	7563      	strb	r3, [r4, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 801edfc:	7903      	ldrb	r3, [r0, #4]
 801edfe:	70e3      	strb	r3, [r4, #3]
{
 801ee00:	4605      	mov	r5, r0
  LmHandlerCallbacks.OnTxData(&TxParams);
 801ee02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ee04:	4620      	mov	r0, r4
 801ee06:	4798      	blx	r3
  }
}

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 801ee08:	3438      	adds	r4, #56	; 0x38
 801ee0a:	2600      	movs	r6, #0
  {
    if (LmHandlerPackages[i] != NULL)
 801ee0c:	f854 3b04 	ldr.w	r3, [r4], #4
 801ee10:	b11b      	cbz	r3, 801ee1a <McpsConfirm+0x3a>
    {
      switch (notifyType)
      {
        case PACKAGE_MCPS_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 801ee12:	695b      	ldr	r3, [r3, #20]
 801ee14:	b10b      	cbz	r3, 801ee1a <McpsConfirm+0x3a>
          {
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 801ee16:	4628      	mov	r0, r5
 801ee18:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 801ee1a:	3601      	adds	r6, #1
 801ee1c:	b2f3      	uxtb	r3, r6
 801ee1e:	2b05      	cmp	r3, #5
 801ee20:	b276      	sxtb	r6, r6
 801ee22:	d1f3      	bne.n	801ee0c <McpsConfirm+0x2c>
}
 801ee24:	bd70      	pop	{r4, r5, r6, pc}
 801ee26:	bf00      	nop
 801ee28:	20001818 	.word	0x20001818

0801ee2c <LmHandlerConfigure>:
{
 801ee2c:	b570      	push	{r4, r5, r6, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 801ee2e:	4d52      	ldr	r5, [pc, #328]	; (801ef78 <LmHandlerConfigure+0x14c>)
{
 801ee30:	4601      	mov	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 801ee32:	2206      	movs	r2, #6
{
 801ee34:	b094      	sub	sp, #80	; 0x50
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 801ee36:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 801ee3a:	f007 fe3d 	bl	8026ab8 <UTIL_MEM_cpy_8>
  loraInfo = LoraInfo_GetPtr();
 801ee3e:	f7fa fbff 	bl	8019640 <LoraInfo_GetPtr>
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 801ee42:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
 801ee46:	6843      	ldr	r3, [r0, #4]
 801ee48:	2601      	movs	r6, #1
 801ee4a:	fa06 f102 	lsl.w	r1, r6, r2
 801ee4e:	4019      	ands	r1, r3
 801ee50:	d00a      	beq.n	801ee68 <LmHandlerConfigure+0x3c>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 801ee52:	f105 0154 	add.w	r1, r5, #84	; 0x54
 801ee56:	f105 0064 	add.w	r0, r5, #100	; 0x64
 801ee5a:	f002 ffd1 	bl	8021e00 <LoRaMacInitialization>
 801ee5e:	4604      	mov	r4, r0
 801ee60:	b140      	cbz	r0, 801ee74 <LmHandlerConfigure+0x48>
      return LORAMAC_HANDLER_ERROR;
 801ee62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ee66:	e06b      	b.n	801ef40 <LmHandlerConfigure+0x114>
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 801ee68:	4b44      	ldr	r3, [pc, #272]	; (801ef7c <LmHandlerConfigure+0x150>)
 801ee6a:	4632      	mov	r2, r6
 801ee6c:	4608      	mov	r0, r1
 801ee6e:	f007 fd27 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 801ee72:	e7fe      	b.n	801ee72 <LmHandlerConfigure+0x46>
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 801ee74:	f001 fbbb 	bl	80205ee <NvmCtxMgmtRestore>
 801ee78:	2800      	cmp	r0, #0
 801ee7a:	d163      	bne.n	801ef44 <LmHandlerConfigure+0x118>
    CtxRestoreDone = true;
 801ee7c:	f885 6074 	strb.w	r6, [r5, #116]	; 0x74
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 801ee80:	4c3f      	ldr	r4, [pc, #252]	; (801ef80 <LmHandlerConfigure+0x154>)
 801ee82:	7de3      	ldrb	r3, [r4, #23]
 801ee84:	9307      	str	r3, [sp, #28]
 801ee86:	7da3      	ldrb	r3, [r4, #22]
 801ee88:	9306      	str	r3, [sp, #24]
 801ee8a:	7d63      	ldrb	r3, [r4, #21]
 801ee8c:	9305      	str	r3, [sp, #20]
 801ee8e:	7d23      	ldrb	r3, [r4, #20]
 801ee90:	9304      	str	r3, [sp, #16]
 801ee92:	7ce3      	ldrb	r3, [r4, #19]
 801ee94:	9303      	str	r3, [sp, #12]
 801ee96:	7ca3      	ldrb	r3, [r4, #18]
 801ee98:	9302      	str	r3, [sp, #8]
 801ee9a:	7c63      	ldrb	r3, [r4, #17]
 801ee9c:	9301      	str	r3, [sp, #4]
 801ee9e:	7c23      	ldrb	r3, [r4, #16]
 801eea0:	9300      	str	r3, [sp, #0]
 801eea2:	2200      	movs	r2, #0
 801eea4:	4611      	mov	r1, r2
 801eea6:	4b37      	ldr	r3, [pc, #220]	; (801ef84 <LmHandlerConfigure+0x158>)
 801eea8:	2002      	movs	r0, #2
 801eeaa:	f007 fd09 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 801eeae:	7fe3      	ldrb	r3, [r4, #31]
 801eeb0:	9307      	str	r3, [sp, #28]
 801eeb2:	7fa3      	ldrb	r3, [r4, #30]
 801eeb4:	9306      	str	r3, [sp, #24]
 801eeb6:	7f63      	ldrb	r3, [r4, #29]
 801eeb8:	9305      	str	r3, [sp, #20]
 801eeba:	7f23      	ldrb	r3, [r4, #28]
 801eebc:	9304      	str	r3, [sp, #16]
 801eebe:	7ee3      	ldrb	r3, [r4, #27]
 801eec0:	9303      	str	r3, [sp, #12]
 801eec2:	7ea3      	ldrb	r3, [r4, #26]
 801eec4:	9302      	str	r3, [sp, #8]
 801eec6:	7e63      	ldrb	r3, [r4, #25]
 801eec8:	9301      	str	r3, [sp, #4]
 801eeca:	2200      	movs	r2, #0
 801eecc:	7e23      	ldrb	r3, [r4, #24]
 801eece:	9300      	str	r3, [sp, #0]
 801eed0:	4611      	mov	r1, r2
 801eed2:	4b2d      	ldr	r3, [pc, #180]	; (801ef88 <LmHandlerConfigure+0x15c>)
 801eed4:	2002      	movs	r0, #2
 801eed6:	f007 fcf3 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 801eeda:	260f      	movs	r6, #15
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 801eedc:	2301      	movs	r3, #1
  LoRaMacMibSetRequestConfirm(&mibReq);
 801eede:	a80b      	add	r0, sp, #44	; 0x2c
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 801eee0:	2400      	movs	r4, #0
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 801eee2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  mibReq.Type = MIB_PUBLIC_NETWORK;
 801eee6:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
  LoRaMacMibSetRequestConfirm(&mibReq);
 801eeea:	f003 fb13 	bl	8022514 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_REPEATER_SUPPORT;
 801eeee:	2310      	movs	r3, #16
  LoRaMacMibSetRequestConfirm(&mibReq);
 801eef0:	a80b      	add	r0, sp, #44	; 0x2c
  mibReq.Type = MIB_REPEATER_SUPPORT;
 801eef2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 801eef6:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  LoRaMacMibSetRequestConfirm(&mibReq);
 801eefa:	f003 fb0b 	bl	8022514 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 801eefe:	2304      	movs	r3, #4
 801ef00:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  LoRaMacMibSetRequestConfirm(&mibReq);
 801ef04:	a80b      	add	r0, sp, #44	; 0x2c
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 801ef06:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
 801ef0a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  LoRaMacMibSetRequestConfirm(&mibReq);
 801ef0e:	f003 fb01 	bl	8022514 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 801ef12:	2322      	movs	r3, #34	; 0x22
 801ef14:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  LoRaMacMibSetRequestConfirm(&mibReq);
 801ef18:	a80b      	add	r0, sp, #44	; 0x2c
  mibReq.Param.SystemMaxRxError = 20;
 801ef1a:	2314      	movs	r3, #20
 801ef1c:	930c      	str	r3, [sp, #48]	; 0x30
  LoRaMacMibSetRequestConfirm(&mibReq);
 801ef1e:	f003 faf9 	bl	8022514 <LoRaMacMibSetRequestConfirm>
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 801ef22:	a909      	add	r1, sp, #36	; 0x24
 801ef24:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
  getPhy.Attribute = PHY_DUTY_CYCLE;
 801ef28:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 801ef2c:	f005 f855 	bl	8023fda <RegionGetPhyParam>
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 801ef30:	1b00      	subs	r0, r0, r4
 801ef32:	bf18      	it	ne
 801ef34:	2001      	movne	r0, #1
 801ef36:	f885 0050 	strb.w	r0, [r5, #80]	; 0x50
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 801ef3a:	f004 f899 	bl	8023070 <LoRaMacTestSetDutyCycleOn>
  return LORAMAC_HANDLER_SUCCESS;
 801ef3e:	4620      	mov	r0, r4
}
 801ef40:	b014      	add	sp, #80	; 0x50
 801ef42:	bd70      	pop	{r4, r5, r6, pc}
    mibReq.Type = MIB_DEV_EUI;
 801ef44:	2302      	movs	r3, #2
    LoRaMacMibGetRequestConfirm(&mibReq);
 801ef46:	a80b      	add	r0, sp, #44	; 0x2c
    mibReq.Type = MIB_DEV_EUI;
 801ef48:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    CtxRestoreDone = false;
 801ef4c:	f885 4074 	strb.w	r4, [r5, #116]	; 0x74
    LoRaMacMibGetRequestConfirm(&mibReq);
 801ef50:	f003 f9ae 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 801ef54:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ef56:	480d      	ldr	r0, [pc, #52]	; (801ef8c <LmHandlerConfigure+0x160>)
 801ef58:	2208      	movs	r2, #8
 801ef5a:	f006 f91f 	bl	802519c <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 801ef5e:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm(&mibReq);
 801ef60:	a80b      	add	r0, sp, #44	; 0x2c
    mibReq.Type = MIB_JOIN_EUI;
 801ef62:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm(&mibReq);
 801ef66:	f003 f9a3 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 801ef6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ef6c:	4808      	ldr	r0, [pc, #32]	; (801ef90 <LmHandlerConfigure+0x164>)
 801ef6e:	2208      	movs	r2, #8
 801ef70:	f006 f914 	bl	802519c <memcpy1>
 801ef74:	e784      	b.n	801ee80 <LmHandlerConfigure+0x54>
 801ef76:	bf00      	nop
 801ef78:	20001818 	.word	0x20001818
 801ef7c:	08027ef3 	.word	0x08027ef3
 801ef80:	20001114 	.word	0x20001114
 801ef84:	08027f3c 	.word	0x08027f3c
 801ef88:	08027f76 	.word	0x08027f76
 801ef8c:	20001124 	.word	0x20001124
 801ef90:	2000112c 	.word	0x2000112c

0801ef94 <LmHandlerProcess>:
{
 801ef94:	b538      	push	{r3, r4, r5, lr}
  LoRaMacProcess();
 801ef96:	f002 fad3 	bl	8021540 <LoRaMacProcess>
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 801ef9a:	4d0c      	ldr	r5, [pc, #48]	; (801efcc <LmHandlerProcess+0x38>)
  LoRaMacProcess();
 801ef9c:	2405      	movs	r4, #5
    if ((LmHandlerPackages[i] != NULL) &&
 801ef9e:	f855 3b04 	ldr.w	r3, [r5], #4
 801efa2:	b15b      	cbz	r3, 801efbc <LmHandlerProcess+0x28>
 801efa4:	691b      	ldr	r3, [r3, #16]
 801efa6:	b14b      	cbz	r3, 801efbc <LmHandlerProcess+0x28>
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 801efa8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 801efac:	689b      	ldr	r3, [r3, #8]
 801efae:	b12b      	cbz	r3, 801efbc <LmHandlerProcess+0x28>
    return LmHandlerPackages[id]->IsInitialized();
 801efb0:	4798      	blx	r3
        (LmHandlerPackages[i]->Process != NULL) &&
 801efb2:	b118      	cbz	r0, 801efbc <LmHandlerProcess+0x28>
      LmHandlerPackages[i]->Process();
 801efb4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 801efb8:	691b      	ldr	r3, [r3, #16]
 801efba:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 801efbc:	3c01      	subs	r4, #1
 801efbe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 801efc2:	d1ec      	bne.n	801ef9e <LmHandlerProcess+0xa>
}
 801efc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  NvmCtxMgmtStore();
 801efc8:	f001 bb0f 	b.w	80205ea <NvmCtxMgmtStore>
 801efcc:	20001850 	.word	0x20001850

0801efd0 <LmHandlerJoinStatus>:
{
 801efd0:	b500      	push	{lr}
 801efd2:	b08b      	sub	sp, #44	; 0x2c
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 801efd4:	2301      	movs	r3, #1
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 801efd6:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 801efd8:	f88d 3004 	strb.w	r3, [sp, #4]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 801efdc:	f003 f968 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
  if (status == LORAMAC_STATUS_OK)
 801efe0:	b938      	cbnz	r0, 801eff2 <LmHandlerJoinStatus+0x22>
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 801efe2:	f89d 0008 	ldrb.w	r0, [sp, #8]
      return LORAMAC_HANDLER_RESET;
 801efe6:	3800      	subs	r0, #0
 801efe8:	bf18      	it	ne
 801efea:	2001      	movne	r0, #1
}
 801efec:	b00b      	add	sp, #44	; 0x2c
 801efee:	f85d fb04 	ldr.w	pc, [sp], #4
    return LORAMAC_HANDLER_RESET;
 801eff2:	2000      	movs	r0, #0
 801eff4:	e7fa      	b.n	801efec <LmHandlerJoinStatus+0x1c>
	...

0801eff8 <LmHandlerRequestClass>:
{
 801eff8:	b530      	push	{r4, r5, lr}
 801effa:	b08d      	sub	sp, #52	; 0x34
 801effc:	4605      	mov	r5, r0
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 801effe:	f7ff ffe7 	bl	801efd0 <LmHandlerJoinStatus>
 801f002:	2801      	cmp	r0, #1
 801f004:	d146      	bne.n	801f094 <LmHandlerRequestClass+0x9c>
  mibReq.Type = MIB_DEVICE_CLASS;
 801f006:	2300      	movs	r3, #0
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801f008:	a803      	add	r0, sp, #12
  mibReq.Type = MIB_DEVICE_CLASS;
 801f00a:	f88d 300c 	strb.w	r3, [sp, #12]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801f00e:	f003 f94f 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
 801f012:	b110      	cbz	r0, 801f01a <LmHandlerRequestClass+0x22>
    switch (newClass)
 801f014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f018:	e004      	b.n	801f024 <LmHandlerRequestClass+0x2c>
  currentClass = mibReq.Param.Class;
 801f01a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  if (currentClass != newClass)
 801f01e:	42ab      	cmp	r3, r5
 801f020:	d102      	bne.n	801f028 <LmHandlerRequestClass+0x30>
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 801f022:	2000      	movs	r0, #0
}
 801f024:	b00d      	add	sp, #52	; 0x34
 801f026:	bd30      	pop	{r4, r5, pc}
    switch (newClass)
 801f028:	2d01      	cmp	r5, #1
 801f02a:	d0f3      	beq.n	801f014 <LmHandlerRequestClass+0x1c>
 801f02c:	2d02      	cmp	r5, #2
 801f02e:	d01a      	beq.n	801f066 <LmHandlerRequestClass+0x6e>
 801f030:	2d00      	cmp	r5, #0
 801f032:	d1f7      	bne.n	801f024 <LmHandlerRequestClass+0x2c>
        if (currentClass != CLASS_A)
 801f034:	2b00      	cmp	r3, #0
 801f036:	d0f4      	beq.n	801f022 <LmHandlerRequestClass+0x2a>
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 801f038:	a803      	add	r0, sp, #12
          mibReq.Param.Class = CLASS_A;
 801f03a:	f88d 5010 	strb.w	r5, [sp, #16]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 801f03e:	f003 fa69 	bl	8022514 <LoRaMacMibSetRequestConfirm>
 801f042:	4604      	mov	r4, r0
 801f044:	2800      	cmp	r0, #0
 801f046:	d1e5      	bne.n	801f014 <LmHandlerRequestClass+0x1c>
  }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 801f048:	2341      	movs	r3, #65	; 0x41
 801f04a:	9300      	str	r3, [sp, #0]
 801f04c:	4602      	mov	r2, r0
 801f04e:	4b13      	ldr	r3, [pc, #76]	; (801f09c <LmHandlerRequestClass+0xa4>)
 801f050:	4601      	mov	r1, r0
 801f052:	2002      	movs	r0, #2
 801f054:	f007 fc34 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 801f058:	4b11      	ldr	r3, [pc, #68]	; (801f0a0 <LmHandlerRequestClass+0xa8>)
 801f05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	d0e0      	beq.n	801f022 <LmHandlerRequestClass+0x2a>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 801f060:	4620      	mov	r0, r4
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 801f062:	4798      	blx	r3
 801f064:	e7dd      	b.n	801f022 <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 801f066:	2b00      	cmp	r3, #0
 801f068:	d1d4      	bne.n	801f014 <LmHandlerRequestClass+0x1c>
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 801f06a:	a803      	add	r0, sp, #12
          mibReq.Param.Class = CLASS_C;
 801f06c:	f88d 5010 	strb.w	r5, [sp, #16]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 801f070:	f003 fa50 	bl	8022514 <LoRaMacMibSetRequestConfirm>
 801f074:	2800      	cmp	r0, #0
 801f076:	d1cd      	bne.n	801f014 <LmHandlerRequestClass+0x1c>
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 801f078:	2343      	movs	r3, #67	; 0x43
 801f07a:	9300      	str	r3, [sp, #0]
 801f07c:	4602      	mov	r2, r0
 801f07e:	4b07      	ldr	r3, [pc, #28]	; (801f09c <LmHandlerRequestClass+0xa4>)
 801f080:	4601      	mov	r1, r0
 801f082:	4628      	mov	r0, r5
 801f084:	f007 fc1c 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 801f088:	4b05      	ldr	r3, [pc, #20]	; (801f0a0 <LmHandlerRequestClass+0xa8>)
 801f08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d0c8      	beq.n	801f022 <LmHandlerRequestClass+0x2a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 801f090:	4628      	mov	r0, r5
 801f092:	e7e6      	b.n	801f062 <LmHandlerRequestClass+0x6a>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 801f094:	f06f 0002 	mvn.w	r0, #2
 801f098:	e7c4      	b.n	801f024 <LmHandlerRequestClass+0x2c>
 801f09a:	bf00      	nop
 801f09c:	08027fb0 	.word	0x08027fb0
 801f0a0:	20001818 	.word	0x20001818

0801f0a4 <LmHandlerJoin>:
{
 801f0a4:	b570      	push	{r4, r5, r6, lr}
  if (mode == ACTIVATION_TYPE_OTAA)
 801f0a6:	2802      	cmp	r0, #2
 801f0a8:	4c28      	ldr	r4, [pc, #160]	; (801f14c <LmHandlerJoin+0xa8>)
 801f0aa:	4d29      	ldr	r5, [pc, #164]	; (801f150 <LmHandlerJoin+0xac>)
{
 801f0ac:	b08c      	sub	sp, #48	; 0x30
 801f0ae:	f04f 0601 	mov.w	r6, #1
  if (mode == ACTIVATION_TYPE_OTAA)
 801f0b2:	d10e      	bne.n	801f0d2 <LmHandlerJoin+0x2e>
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 801f0b4:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    LoRaMacStart();
 801f0b8:	f003 f89c 	bl	80221f4 <LoRaMacStart>
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 801f0bc:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    mlmeReq.Type = MLME_JOIN;
 801f0c0:	f88d 600c 	strb.w	r6, [sp, #12]
    LoRaMacMlmeRequest(&mlmeReq);
 801f0c4:	a803      	add	r0, sp, #12
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 801f0c6:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMlmeRequest(&mlmeReq);
 801f0ca:	f003 fd35 	bl	8022b38 <LoRaMacMlmeRequest>
}
 801f0ce:	b00c      	add	sp, #48	; 0x30
 801f0d0:	bd70      	pop	{r4, r5, r6, pc}
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 801f0d2:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    if (CtxRestoreDone == false)
 801f0d6:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 801f0da:	2300      	movs	r3, #0
 801f0dc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    if (CtxRestoreDone == false)
 801f0e0:	bb0e      	cbnz	r6, 801f126 <LmHandlerJoin+0x82>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 801f0e2:	2327      	movs	r3, #39	; 0x27
 801f0e4:	f88d 300c 	strb.w	r3, [sp, #12]
      LoRaMacMibSetRequestConfirm(&mibReq);
 801f0e8:	a803      	add	r0, sp, #12
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 801f0ea:	4b1a      	ldr	r3, [pc, #104]	; (801f154 <LmHandlerJoin+0xb0>)
 801f0ec:	9304      	str	r3, [sp, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 801f0ee:	f003 fa11 	bl	8022514 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 801f0f2:	2305      	movs	r3, #5
 801f0f4:	f88d 300c 	strb.w	r3, [sp, #12]
      LoRaMacMibSetRequestConfirm(&mibReq);
 801f0f8:	a803      	add	r0, sp, #12
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 801f0fa:	6a23      	ldr	r3, [r4, #32]
 801f0fc:	9304      	str	r3, [sp, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 801f0fe:	f003 fa09 	bl	8022514 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 801f102:	f7fa ff15 	bl	8019f30 <GetDevAddr>
      mibReq.Type = MIB_DEV_ADDR;
 801f106:	2306      	movs	r3, #6
      CommissioningParams.DevAddr = GetDevAddr();
 801f108:	6260      	str	r0, [r4, #36]	; 0x24
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 801f10a:	9004      	str	r0, [sp, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 801f10c:	a803      	add	r0, sp, #12
      mibReq.Type = MIB_DEV_ADDR;
 801f10e:	f88d 300c 	strb.w	r3, [sp, #12]
      LoRaMacMibSetRequestConfirm(&mibReq);
 801f112:	f003 f9ff 	bl	8022514 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 801f116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f118:	9300      	str	r3, [sp, #0]
 801f11a:	4632      	mov	r2, r6
 801f11c:	4b0e      	ldr	r3, [pc, #56]	; (801f158 <LmHandlerJoin+0xb4>)
 801f11e:	4631      	mov	r1, r6
 801f120:	2002      	movs	r0, #2
 801f122:	f007 fbcd 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 801f126:	f003 f865 	bl	80221f4 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 801f12a:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f12c:	a803      	add	r0, sp, #12
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 801f12e:	f88d 300c 	strb.w	r3, [sp, #12]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 801f132:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f136:	f003 f9ed 	bl	8022514 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 801f13a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f13c:	4807      	ldr	r0, [pc, #28]	; (801f15c <LmHandlerJoin+0xb8>)
 801f13e:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 801f140:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
 801f144:	f7ff ff58 	bl	801eff8 <LmHandlerRequestClass>
}
 801f148:	e7c1      	b.n	801f0ce <LmHandlerJoin+0x2a>
 801f14a:	bf00      	nop
 801f14c:	20001114 	.word	0x20001114
 801f150:	20001818 	.word	0x20001818
 801f154:	01000300 	.word	0x01000300
 801f158:	08027fca 	.word	0x08027fca
 801f15c:	2000113c 	.word	0x2000113c

0801f160 <LmHandlerIsBusy>:
{
 801f160:	b510      	push	{r4, lr}
  if (LoRaMacIsBusy() == true)
 801f162:	f002 f9df 	bl	8021524 <LoRaMacIsBusy>
 801f166:	b948      	cbnz	r0, 801f17c <LmHandlerIsBusy+0x1c>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 801f168:	f7ff ff32 	bl	801efd0 <LmHandlerJoinStatus>
 801f16c:	2801      	cmp	r0, #1
 801f16e:	d006      	beq.n	801f17e <LmHandlerIsBusy+0x1e>
    LmHandlerJoin(JoinParams.Mode);
 801f170:	4b06      	ldr	r3, [pc, #24]	; (801f18c <LmHandlerIsBusy+0x2c>)
 801f172:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 801f176:	f7ff ff95 	bl	801f0a4 <LmHandlerJoin>
    return true;
 801f17a:	2001      	movs	r0, #1
}
 801f17c:	bd10      	pop	{r4, pc}
  if (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 801f17e:	4b04      	ldr	r3, [pc, #16]	; (801f190 <LmHandlerIsBusy+0x30>)
 801f180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 801f182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 801f186:	68db      	ldr	r3, [r3, #12]
 801f188:	4718      	bx	r3
 801f18a:	bf00      	nop
 801f18c:	20001114 	.word	0x20001114
 801f190:	20001818 	.word	0x20001818

0801f194 <LmHandlerSend>:
{
 801f194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f198:	b087      	sub	sp, #28
 801f19a:	4604      	mov	r4, r0
 801f19c:	460e      	mov	r6, r1
 801f19e:	4617      	mov	r7, r2
 801f1a0:	4698      	mov	r8, r3
  if (LoRaMacIsBusy() == true)
 801f1a2:	f002 f9bf 	bl	8021524 <LoRaMacIsBusy>
 801f1a6:	2800      	cmp	r0, #0
 801f1a8:	d155      	bne.n	801f256 <LmHandlerSend+0xc2>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 801f1aa:	f7ff ff11 	bl	801efd0 <LmHandlerJoinStatus>
 801f1ae:	2801      	cmp	r0, #1
 801f1b0:	d009      	beq.n	801f1c6 <LmHandlerSend+0x32>
    LmHandlerJoin(JoinParams.Mode);
 801f1b2:	4b2d      	ldr	r3, [pc, #180]	; (801f268 <LmHandlerSend+0xd4>)
 801f1b4:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 801f1b8:	f7ff ff74 	bl	801f0a4 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 801f1bc:	f06f 0002 	mvn.w	r0, #2
}
 801f1c0:	b007      	add	sp, #28
 801f1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 801f1c6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 801f274 <LmHandlerSend+0xe0>
 801f1ca:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 801f1ce:	68db      	ldr	r3, [r3, #12]
 801f1d0:	4798      	blx	r3
 801f1d2:	464d      	mov	r5, r9
 801f1d4:	b138      	cbz	r0, 801f1e6 <LmHandlerSend+0x52>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 801f1d6:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 801f1da:	7823      	ldrb	r3, [r4, #0]
 801f1dc:	7812      	ldrb	r2, [r2, #0]
 801f1de:	429a      	cmp	r2, r3
 801f1e0:	d001      	beq.n	801f1e6 <LmHandlerSend+0x52>
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d13a      	bne.n	801f25c <LmHandlerSend+0xc8>
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 801f1e6:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 801f1ea:	7860      	ldrb	r0, [r4, #1]
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 801f1ec:	f88d 3012 	strb.w	r3, [sp, #18]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 801f1f0:	4669      	mov	r1, sp
 801f1f2:	f003 f807 	bl	8022204 <LoRaMacQueryTxPossible>
 801f1f6:	b1d0      	cbz	r0, 801f22e <LmHandlerSend+0x9a>
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 801f1f8:	2200      	movs	r2, #0
 801f1fa:	70aa      	strb	r2, [r5, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 801f1fc:	f88d 2004 	strb.w	r2, [sp, #4]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 801f200:	9203      	str	r2, [sp, #12]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 801f202:	f8ad 2010 	strh.w	r2, [sp, #16]
  TxParams.AppData = *appData;
 801f206:	e894 0003 	ldmia.w	r4, {r0, r1}
 801f20a:	4b18      	ldr	r3, [pc, #96]	; (801f26c <LmHandlerSend+0xd8>)
 801f20c:	e883 0003 	stmia.w	r3, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 801f210:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
 801f214:	712b      	strb	r3, [r5, #4]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 801f216:	4641      	mov	r1, r8
 801f218:	a801      	add	r0, sp, #4
 801f21a:	f003 fd87 	bl	8022d2c <LoRaMacMcpsRequest>
  if (nextTxIn != NULL)
 801f21e:	b10f      	cbz	r7, 801f224 <LmHandlerSend+0x90>
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 801f220:	9b05      	ldr	r3, [sp, #20]
 801f222:	603b      	str	r3, [r7, #0]
  switch(status)
 801f224:	2811      	cmp	r0, #17
 801f226:	d81c      	bhi.n	801f262 <LmHandlerSend+0xce>
 801f228:	4b11      	ldr	r3, [pc, #68]	; (801f270 <LmHandlerSend+0xdc>)
 801f22a:	5618      	ldrsb	r0, [r3, r0]
 801f22c:	e7c8      	b.n	801f1c0 <LmHandlerSend+0x2c>
    TxParams.MsgType = isTxConfirmed;
 801f22e:	70ae      	strb	r6, [r5, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 801f230:	7823      	ldrb	r3, [r4, #0]
 801f232:	f88d 3008 	strb.w	r3, [sp, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 801f236:	7863      	ldrb	r3, [r4, #1]
 801f238:	f8ad 3010 	strh.w	r3, [sp, #16]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 801f23c:	6863      	ldr	r3, [r4, #4]
 801f23e:	9303      	str	r3, [sp, #12]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 801f240:	b916      	cbnz	r6, 801f248 <LmHandlerSend+0xb4>
      mcpsReq.Type = MCPS_UNCONFIRMED;
 801f242:	f88d 6004 	strb.w	r6, [sp, #4]
 801f246:	e7de      	b.n	801f206 <LmHandlerSend+0x72>
      mcpsReq.Type = MCPS_CONFIRMED;
 801f248:	2301      	movs	r3, #1
 801f24a:	f88d 3004 	strb.w	r3, [sp, #4]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 801f24e:	2308      	movs	r3, #8
 801f250:	f88d 3013 	strb.w	r3, [sp, #19]
 801f254:	e7d7      	b.n	801f206 <LmHandlerSend+0x72>
    return LORAMAC_HANDLER_BUSY_ERROR;
 801f256:	f06f 0001 	mvn.w	r0, #1
 801f25a:	e7b1      	b.n	801f1c0 <LmHandlerSend+0x2c>
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 801f25c:	f06f 0003 	mvn.w	r0, #3
 801f260:	e7ae      	b.n	801f1c0 <LmHandlerSend+0x2c>
 801f262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f266:	e7ab      	b.n	801f1c0 <LmHandlerSend+0x2c>
 801f268:	20001114 	.word	0x20001114
 801f26c:	20001824 	.word	0x20001824
 801f270:	0802778a 	.word	0x0802778a
 801f274:	20001818 	.word	0x20001818

0801f278 <LmHandlerPackageRegister>:
{
 801f278:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LmhPackage_t *package = NULL;
 801f27a:	2300      	movs	r3, #0
{
 801f27c:	460d      	mov	r5, r1
  LmhPackage_t *package = NULL;
 801f27e:	9301      	str	r3, [sp, #4]
  switch (id)
 801f280:	4604      	mov	r4, r0
 801f282:	b9b0      	cbnz	r0, 801f2b2 <LmHandlerPackageRegister+0x3a>
      package = LmphCompliancePackageFactory();
 801f284:	f000 fc5a 	bl	801fb3c <LmphCompliancePackageFactory>
 801f288:	9001      	str	r0, [sp, #4]
  if (package != NULL)
 801f28a:	9b01      	ldr	r3, [sp, #4]
 801f28c:	b1ab      	cbz	r3, 801f2ba <LmHandlerPackageRegister+0x42>
    LmHandlerPackages[id] = package;
 801f28e:	490c      	ldr	r1, [pc, #48]	; (801f2c0 <LmHandlerPackageRegister+0x48>)
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 801f290:	4a0c      	ldr	r2, [pc, #48]	; (801f2c4 <LmHandlerPackageRegister+0x4c>)
 801f292:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id] = package;
 801f294:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 801f298:	4a0b      	ldr	r2, [pc, #44]	; (801f2c8 <LmHandlerPackageRegister+0x50>)
 801f29a:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 801f29c:	4a0b      	ldr	r2, [pc, #44]	; (801f2cc <LmHandlerPackageRegister+0x54>)
 801f29e:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id] = package;
 801f2a0:	63a3      	str	r3, [r4, #56]	; 0x38
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 801f2a2:	4628      	mov	r0, r5
 801f2a4:	685b      	ldr	r3, [r3, #4]
 801f2a6:	22f2      	movs	r2, #242	; 0xf2
 801f2a8:	3175      	adds	r1, #117	; 0x75
 801f2aa:	4798      	blx	r3
    return LORAMAC_HANDLER_SUCCESS;
 801f2ac:	2000      	movs	r0, #0
}
 801f2ae:	b003      	add	sp, #12
 801f2b0:	bd30      	pop	{r4, r5, pc}
      LmhpDataDistributionPackageRegister(id, &package);
 801f2b2:	a901      	add	r1, sp, #4
 801f2b4:	f000 fc48 	bl	801fb48 <LmhpDataDistributionPackageRegister>
      break;
 801f2b8:	e7e7      	b.n	801f28a <LmHandlerPackageRegister+0x12>
    return LORAMAC_HANDLER_ERROR;
 801f2ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f2be:	e7f6      	b.n	801f2ae <LmHandlerPackageRegister+0x36>
 801f2c0:	20001818 	.word	0x20001818
 801f2c4:	0801f0a5 	.word	0x0801f0a5
 801f2c8:	0801f195 	.word	0x0801f195
 801f2cc:	0801edc5 	.word	0x0801edc5

0801f2d0 <LmHandlerInit>:
{
 801f2d0:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 801f2d2:	4c13      	ldr	r4, [pc, #76]	; (801f320 <LmHandlerInit+0x50>)
{
 801f2d4:	4601      	mov	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 801f2d6:	2220      	movs	r2, #32
 801f2d8:	f104 0018 	add.w	r0, r4, #24
 801f2dc:	f007 fbec 	bl	8026ab8 <UTIL_MEM_cpy_8>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 801f2e0:	4b10      	ldr	r3, [pc, #64]	; (801f324 <LmHandlerInit+0x54>)
 801f2e2:	6663      	str	r3, [r4, #100]	; 0x64
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 801f2e4:	4b10      	ldr	r3, [pc, #64]	; (801f328 <LmHandlerInit+0x58>)
 801f2e6:	66a3      	str	r3, [r4, #104]	; 0x68
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 801f2e8:	4b10      	ldr	r3, [pc, #64]	; (801f32c <LmHandlerInit+0x5c>)
 801f2ea:	66e3      	str	r3, [r4, #108]	; 0x6c
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 801f2ec:	4b10      	ldr	r3, [pc, #64]	; (801f330 <LmHandlerInit+0x60>)
 801f2ee:	6723      	str	r3, [r4, #112]	; 0x70
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 801f2f0:	69a3      	ldr	r3, [r4, #24]
 801f2f2:	6563      	str	r3, [r4, #84]	; 0x54
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 801f2f4:	69e3      	ldr	r3, [r4, #28]
 801f2f6:	65a3      	str	r3, [r4, #88]	; 0x58
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 801f2f8:	4b0e      	ldr	r3, [pc, #56]	; (801f334 <LmHandlerInit+0x64>)
 801f2fa:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 801f2fc:	490e      	ldr	r1, [pc, #56]	; (801f338 <LmHandlerInit+0x68>)
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 801f2fe:	6a23      	ldr	r3, [r4, #32]
 801f300:	6623      	str	r3, [r4, #96]	; 0x60
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 801f302:	2000      	movs	r0, #0
 801f304:	f7ff ffb8 	bl	801f278 <LmHandlerPackageRegister>
 801f308:	b930      	cbnz	r0, 801f318 <LmHandlerInit+0x48>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
 801f30a:	f000 fc1b 	bl	801fb44 <LmhpDataDistributionInit>
 801f30e:	3800      	subs	r0, #0
 801f310:	bf18      	it	ne
 801f312:	2001      	movne	r0, #1
 801f314:	4240      	negs	r0, r0
}
 801f316:	bd10      	pop	{r4, pc}
    return LORAMAC_HANDLER_ERROR;
 801f318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f31c:	e7fb      	b.n	801f316 <LmHandlerInit+0x46>
 801f31e:	bf00      	nop
 801f320:	20001818 	.word	0x20001818
 801f324:	0801ede1 	.word	0x0801ede1
 801f328:	0801f365 	.word	0x0801f365
 801f32c:	0801f459 	.word	0x0801f459
 801f330:	0801edb5 	.word	0x0801edb5
 801f334:	080205e9 	.word	0x080205e9
 801f338:	20001140 	.word	0x20001140

0801f33c <LmHandlerGetCurrentClass>:
{
 801f33c:	b510      	push	{r4, lr}
  if (deviceClass == NULL)
 801f33e:	4604      	mov	r4, r0
{
 801f340:	b08a      	sub	sp, #40	; 0x28
  if (deviceClass == NULL)
 801f342:	b918      	cbnz	r0, 801f34c <LmHandlerGetCurrentClass+0x10>
    return LORAMAC_HANDLER_ERROR;
 801f344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801f348:	b00a      	add	sp, #40	; 0x28
 801f34a:	bd10      	pop	{r4, pc}
  mibReq.Type = MIB_DEVICE_CLASS;
 801f34c:	2300      	movs	r3, #0
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801f34e:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_DEVICE_CLASS;
 801f350:	f88d 3004 	strb.w	r3, [sp, #4]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801f354:	f002 ffac 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
 801f358:	2800      	cmp	r0, #0
 801f35a:	d1f3      	bne.n	801f344 <LmHandlerGetCurrentClass+0x8>
  *deviceClass = mibReq.Param.Class;
 801f35c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801f360:	7023      	strb	r3, [r4, #0]
  return LORAMAC_HANDLER_SUCCESS;
 801f362:	e7f1      	b.n	801f348 <LmHandlerGetCurrentClass+0xc>

0801f364 <McpsIndication>:
{
 801f364:	b5f0      	push	{r4, r5, r6, r7, lr}
  RxParams.IsMcpsIndication = 1;
 801f366:	492c      	ldr	r1, [pc, #176]	; (801f418 <McpsIndication+0xb4>)
 801f368:	2301      	movs	r3, #1
 801f36a:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 801f36c:	7843      	ldrb	r3, [r0, #1]
 801f36e:	704b      	strb	r3, [r1, #1]
{
 801f370:	b087      	sub	sp, #28
 801f372:	4604      	mov	r4, r0
  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 801f374:	2b00      	cmp	r3, #0
 801f376:	d144      	bne.n	801f402 <McpsIndication+0x9e>
  if (mcpsIndication->BufferSize > 0)
 801f378:	7b03      	ldrb	r3, [r0, #12]
 801f37a:	b1a3      	cbz	r3, 801f3a6 <McpsIndication+0x42>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 801f37c:	7902      	ldrb	r2, [r0, #4]
 801f37e:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 801f380:	89c2      	ldrh	r2, [r0, #14]
 801f382:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = mcpsIndication->Snr;
 801f384:	7c02      	ldrb	r2, [r0, #16]
 801f386:	710a      	strb	r2, [r1, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 801f388:	6942      	ldr	r2, [r0, #20]
 801f38a:	608a      	str	r2, [r1, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 801f38c:	7c42      	ldrb	r2, [r0, #17]
 801f38e:	730a      	strb	r2, [r1, #12]
    appData.BufferSize = mcpsIndication->BufferSize;
 801f390:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 801f394:	6883      	ldr	r3, [r0, #8]
 801f396:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 801f398:	4b20      	ldr	r3, [pc, #128]	; (801f41c <McpsIndication+0xb8>)
    appData.Port = mcpsIndication->Port;
 801f39a:	78c2      	ldrb	r2, [r0, #3]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 801f39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    appData.Port = mcpsIndication->Port;
 801f39e:	f88d 2008 	strb.w	r2, [sp, #8]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 801f3a2:	a802      	add	r0, sp, #8
 801f3a4:	4798      	blx	r3
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 801f3a6:	7f23      	ldrb	r3, [r4, #28]
 801f3a8:	b11b      	cbz	r3, 801f3b2 <McpsIndication+0x4e>
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 801f3aa:	4b1c      	ldr	r3, [pc, #112]	; (801f41c <McpsIndication+0xb8>)
 801f3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f3ae:	b103      	cbz	r3, 801f3b2 <McpsIndication+0x4e>
        LmHandlerCallbacks.OnSysTimeUpdate( );
 801f3b0:	4798      	blx	r3
 801f3b2:	4e1b      	ldr	r6, [pc, #108]	; (801f420 <McpsIndication+0xbc>)
{
 801f3b4:	2500      	movs	r5, #0
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 801f3b6:	f1a6 0738 	sub.w	r7, r6, #56	; 0x38
    if (LmHandlerPackages[i] != NULL)
 801f3ba:	f856 3b04 	ldr.w	r3, [r6], #4
 801f3be:	b153      	cbz	r3, 801f3d6 <McpsIndication+0x72>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 801f3c0:	699a      	ldr	r2, [r3, #24]
 801f3c2:	b142      	cbz	r2, 801f3d6 <McpsIndication+0x72>
 801f3c4:	781a      	ldrb	r2, [r3, #0]
 801f3c6:	78e3      	ldrb	r3, [r4, #3]
 801f3c8:	429a      	cmp	r2, r3
 801f3ca:	d11c      	bne.n	801f406 <McpsIndication+0xa2>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 801f3cc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f3d0:	4620      	mov	r0, r4
 801f3d2:	699b      	ldr	r3, [r3, #24]
 801f3d4:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 801f3d6:	3501      	adds	r5, #1
 801f3d8:	b2eb      	uxtb	r3, r5
 801f3da:	2b05      	cmp	r3, #5
 801f3dc:	b26d      	sxtb	r5, r5
 801f3de:	d1ec      	bne.n	801f3ba <McpsIndication+0x56>
  LmHandlerGetCurrentClass(&deviceClass);
 801f3e0:	f10d 0007 	add.w	r0, sp, #7
 801f3e4:	f7ff ffaa 	bl	801f33c <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 801f3e8:	7963      	ldrb	r3, [r4, #5]
 801f3ea:	2b01      	cmp	r3, #1
 801f3ec:	d109      	bne.n	801f402 <McpsIndication+0x9e>
 801f3ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801f3f2:	b932      	cbnz	r2, 801f402 <McpsIndication+0x9e>
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 801f3f4:	4611      	mov	r1, r2
 801f3f6:	a804      	add	r0, sp, #16
    LmHandlerAppData_t appData =
 801f3f8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f3fc:	9205      	str	r2, [sp, #20]
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 801f3fe:	f7ff fec9 	bl	801f194 <LmHandlerSend>
}
 801f402:	b007      	add	sp, #28
 801f404:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 801f406:	2d00      	cmp	r5, #0
 801f408:	d1e5      	bne.n	801f3d6 <McpsIndication+0x72>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 801f40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f40c:	68db      	ldr	r3, [r3, #12]
 801f40e:	4798      	blx	r3
 801f410:	2800      	cmp	r0, #0
 801f412:	d1db      	bne.n	801f3cc <McpsIndication+0x68>
 801f414:	e7df      	b.n	801f3d6 <McpsIndication+0x72>
 801f416:	bf00      	nop
 801f418:	20001114 	.word	0x20001114
 801f41c:	20001818 	.word	0x20001818
 801f420:	20001850 	.word	0x20001850

0801f424 <LmHandlerGetTxDatarate>:
{
 801f424:	b510      	push	{r4, lr}
  if (txDatarate == NULL)
 801f426:	4604      	mov	r4, r0
{
 801f428:	b08a      	sub	sp, #40	; 0x28
  if (txDatarate == NULL)
 801f42a:	b918      	cbnz	r0, 801f434 <LmHandlerGetTxDatarate+0x10>
    return LORAMAC_HANDLER_ERROR;
 801f42c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801f430:	b00a      	add	sp, #40	; 0x28
 801f432:	bd10      	pop	{r4, pc}
  mibGet.Type = MIB_CHANNELS_DATARATE;
 801f434:	231f      	movs	r3, #31
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 801f436:	a801      	add	r0, sp, #4
  mibGet.Type = MIB_CHANNELS_DATARATE;
 801f438:	f88d 3004 	strb.w	r3, [sp, #4]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 801f43c:	f002 ff38 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
 801f440:	2800      	cmp	r0, #0
 801f442:	d1f3      	bne.n	801f42c <LmHandlerGetTxDatarate+0x8>
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 801f444:	4a03      	ldr	r2, [pc, #12]	; (801f454 <LmHandlerGetTxDatarate+0x30>)
  *txDatarate = mibGet.Param.ChannelsDatarate;
 801f446:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 801f44a:	7023      	strb	r3, [r4, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 801f44c:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
  return LORAMAC_HANDLER_SUCCESS;
 801f450:	e7ee      	b.n	801f430 <LmHandlerGetTxDatarate+0xc>
 801f452:	bf00      	nop
 801f454:	20001818 	.word	0x20001818

0801f458 <MlmeConfirm>:
{
 801f458:	b5f0      	push	{r4, r5, r6, r7, lr}
  TxParams.IsMcpsConfirm = 0;
 801f45a:	4e1b      	ldr	r6, [pc, #108]	; (801f4c8 <MlmeConfirm+0x70>)
  TxParams.Status = mlmeConfirm->Status;
 801f45c:	7842      	ldrb	r2, [r0, #1]
 801f45e:	7072      	strb	r2, [r6, #1]
  TxParams.IsMcpsConfirm = 0;
 801f460:	2400      	movs	r4, #0
{
 801f462:	b08b      	sub	sp, #44	; 0x2c
 801f464:	4605      	mov	r5, r0
  TxParams.IsMcpsConfirm = 0;
 801f466:	7034      	strb	r4, [r6, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 801f468:	f106 0738 	add.w	r7, r6, #56	; 0x38
    if (LmHandlerPackages[i] != NULL)
 801f46c:	f857 3b04 	ldr.w	r3, [r7], #4
 801f470:	b11b      	cbz	r3, 801f47a <MlmeConfirm+0x22>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 801f472:	69db      	ldr	r3, [r3, #28]
 801f474:	b10b      	cbz	r3, 801f47a <MlmeConfirm+0x22>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 801f476:	4628      	mov	r0, r5
 801f478:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 801f47a:	3401      	adds	r4, #1
 801f47c:	b2e3      	uxtb	r3, r4
 801f47e:	2b05      	cmp	r3, #5
 801f480:	b264      	sxtb	r4, r4
 801f482:	d1f3      	bne.n	801f46c <MlmeConfirm+0x14>
  switch (mlmeConfirm->MlmeRequest)
 801f484:	782b      	ldrb	r3, [r5, #0]
 801f486:	2b01      	cmp	r3, #1
 801f488:	d117      	bne.n	801f4ba <MlmeConfirm+0x62>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 801f48a:	4c10      	ldr	r4, [pc, #64]	; (801f4cc <MlmeConfirm+0x74>)
      mibReq.Type = MIB_DEV_ADDR;
 801f48c:	2306      	movs	r3, #6
      LoRaMacMibGetRequestConfirm(&mibReq);
 801f48e:	a801      	add	r0, sp, #4
      mibReq.Type = MIB_DEV_ADDR;
 801f490:	f88d 3004 	strb.w	r3, [sp, #4]
      LoRaMacMibGetRequestConfirm(&mibReq);
 801f494:	f002 ff0c 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 801f498:	9b02      	ldr	r3, [sp, #8]
 801f49a:	6263      	str	r3, [r4, #36]	; 0x24
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 801f49c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801f4a0:	f7ff ffc0 	bl	801f424 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 801f4a4:	786b      	ldrb	r3, [r5, #1]
 801f4a6:	b953      	cbnz	r3, 801f4be <MlmeConfirm+0x66>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 801f4a8:	f896 004d 	ldrb.w	r0, [r6, #77]	; 0x4d
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 801f4ac:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 801f4b0:	f7ff fda2 	bl	801eff8 <LmHandlerRequestClass>
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 801f4b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801f4b6:	4806      	ldr	r0, [pc, #24]	; (801f4d0 <MlmeConfirm+0x78>)
 801f4b8:	4798      	blx	r3
}
 801f4ba:	b00b      	add	sp, #44	; 0x2c
 801f4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 801f4be:	23ff      	movs	r3, #255	; 0xff
 801f4c0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 801f4c4:	e7f6      	b.n	801f4b4 <MlmeConfirm+0x5c>
 801f4c6:	bf00      	nop
 801f4c8:	20001818 	.word	0x20001818
 801f4cc:	20001114 	.word	0x20001114
 801f4d0:	2000113c 	.word	0x2000113c

0801f4d4 <LmHandlerGetDutyCycleEnable>:
  if (dutyCycleEnable == NULL)
 801f4d4:	b128      	cbz	r0, 801f4e2 <LmHandlerGetDutyCycleEnable+0xe>
  *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 801f4d6:	4b04      	ldr	r3, [pc, #16]	; (801f4e8 <LmHandlerGetDutyCycleEnable+0x14>)
 801f4d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801f4dc:	7003      	strb	r3, [r0, #0]
  return LORAMAC_HANDLER_SUCCESS;
 801f4de:	2000      	movs	r0, #0
 801f4e0:	4770      	bx	lr
    return LORAMAC_HANDLER_ERROR;
 801f4e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801f4e6:	4770      	bx	lr
 801f4e8:	20001818 	.word	0x20001818

0801f4ec <LmHandlerSetDutyCycleEnable>:
{
 801f4ec:	b508      	push	{r3, lr}
  LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 801f4ee:	4b03      	ldr	r3, [pc, #12]	; (801f4fc <LmHandlerSetDutyCycleEnable+0x10>)
 801f4f0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  LoRaMacTestSetDutyCycleOn(dutyCycleEnable);
 801f4f4:	f003 fdbc 	bl	8023070 <LoRaMacTestSetDutyCycleOn>
}
 801f4f8:	2000      	movs	r0, #0
 801f4fa:	bd08      	pop	{r3, pc}
 801f4fc:	20001818 	.word	0x20001818

0801f500 <LmhpClockSyncIsInitialized>:
}

static bool LmhpClockSyncIsInitialized(void)
{
  return LmhpClockSyncState.Initialized;
}
 801f500:	4b01      	ldr	r3, [pc, #4]	; (801f508 <LmhpClockSyncIsInitialized+0x8>)
 801f502:	7818      	ldrb	r0, [r3, #0]
 801f504:	4770      	bx	lr
 801f506:	bf00      	nop
 801f508:	20001980 	.word	0x20001980

0801f50c <LmhpClockSyncIsRunning>:

static bool LmhpClockSyncIsRunning(void)
{
  if (LmhpClockSyncState.Initialized == false)
 801f50c:	4b02      	ldr	r3, [pc, #8]	; (801f518 <LmhpClockSyncIsRunning+0xc>)
 801f50e:	7818      	ldrb	r0, [r3, #0]
 801f510:	b100      	cbz	r0, 801f514 <LmhpClockSyncIsRunning+0x8>
  {
    return false;
  }

  return LmhpClockSyncState.IsRunning;
 801f512:	7858      	ldrb	r0, [r3, #1]
}
 801f514:	4770      	bx	lr
 801f516:	bf00      	nop
 801f518:	20001980 	.word	0x20001980

0801f51c <OnPeriodicTimeStartTimer>:
  }
}

static void OnPeriodicTimeStartTimer(void *context)
{
  LmhpClockSyncState.NbTransmissions = 1;
 801f51c:	4802      	ldr	r0, [pc, #8]	; (801f528 <OnPeriodicTimeStartTimer+0xc>)
 801f51e:	2301      	movs	r3, #1
 801f520:	7343      	strb	r3, [r0, #13]
  TimerStart(&PeriodicTimeStartTimer);
 801f522:	3010      	adds	r0, #16
 801f524:	f007 bc2e 	b.w	8026d84 <UTIL_TIMER_Start>
 801f528:	20001980 	.word	0x20001980

0801f52c <LmhpClockSyncOnMcpsIndication>:
{
 801f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LmhpClockSyncState.NbTransmissions = mcpsIndication->Buffer[cmdIndex++] & 0X07;
 801f530:	4d63      	ldr	r5, [pc, #396]	; (801f6c0 <LmhpClockSyncOnMcpsIndication+0x194>)
        curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 801f532:	4f64      	ldr	r7, [pc, #400]	; (801f6c4 <LmhpClockSyncOnMcpsIndication+0x198>)
  uint8_t dataBufferIndex = 0;
 801f534:	2400      	movs	r4, #0
{
 801f536:	b087      	sub	sp, #28
 801f538:	4681      	mov	r9, r0
  uint8_t cmdIndex = 0;
 801f53a:	4623      	mov	r3, r4
        TimerSetValue(&PeriodicTimeStartTimer, periodTime * 1000);
 801f53c:	f105 0610 	add.w	r6, r5, #16
  while (cmdIndex < mcpsIndication->BufferSize)
 801f540:	f899 200c 	ldrb.w	r2, [r9, #12]
 801f544:	429a      	cmp	r2, r3
 801f546:	d81d      	bhi.n	801f584 <LmhpClockSyncOnMcpsIndication+0x58>
  if (dataBufferIndex != 0)
 801f548:	b1cc      	cbz	r4, 801f57e <LmhpClockSyncOnMcpsIndication+0x52>
    LmHandlerAppData_t appData =
 801f54a:	23ca      	movs	r3, #202	; 0xca
 801f54c:	f88d 3010 	strb.w	r3, [sp, #16]
      .Buffer = LmhpClockSyncState.DataBuffer,
 801f550:	4b5b      	ldr	r3, [pc, #364]	; (801f6c0 <LmhpClockSyncOnMcpsIndication+0x194>)
    LmHandlerAppData_t appData =
 801f552:	f88d 4011 	strb.w	r4, [sp, #17]
 801f556:	685b      	ldr	r3, [r3, #4]
 801f558:	9305      	str	r3, [sp, #20]
    LmHandlerGetDutyCycleEnable(&current_dutycycle);
 801f55a:	f10d 000f 	add.w	r0, sp, #15
 801f55e:	f7ff ffb9 	bl	801f4d4 <LmHandlerGetDutyCycleEnable>
    LmHandlerSetDutyCycleEnable(false);
 801f562:	2000      	movs	r0, #0
 801f564:	f7ff ffc2 	bl	801f4ec <LmHandlerSetDutyCycleEnable>
    LmhpClockSyncPackage.OnSendRequest(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 801f568:	4b57      	ldr	r3, [pc, #348]	; (801f6c8 <LmhpClockSyncOnMcpsIndication+0x19c>)
 801f56a:	2200      	movs	r2, #0
 801f56c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801f56e:	4611      	mov	r1, r2
 801f570:	2301      	movs	r3, #1
 801f572:	a804      	add	r0, sp, #16
 801f574:	47a0      	blx	r4
    LmHandlerSetDutyCycleEnable(current_dutycycle);
 801f576:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801f57a:	f7ff ffb7 	bl	801f4ec <LmHandlerSetDutyCycleEnable>
}
 801f57e:	b007      	add	sp, #28
 801f580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (mcpsIndication->Buffer[cmdIndex++])
 801f584:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801f588:	5cc1      	ldrb	r1, [r0, r3]
 801f58a:	1c5a      	adds	r2, r3, #1
 801f58c:	b2d2      	uxtb	r2, r2
 801f58e:	2903      	cmp	r1, #3
 801f590:	d812      	bhi.n	801f5b8 <LmhpClockSyncOnMcpsIndication+0x8c>
 801f592:	e8df f001 	tbb	[pc, r1]
 801f596:	1302      	.short	0x1302
 801f598:	8d51      	.short	0x8d51
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_PKG_VERSION_ANS;
 801f59a:	6869      	ldr	r1, [r5, #4]
 801f59c:	2300      	movs	r3, #0
 801f59e:	550b      	strb	r3, [r1, r4]
 801f5a0:	1c60      	adds	r0, r4, #1
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_ID;
 801f5a2:	1ca3      	adds	r3, r4, #2
 801f5a4:	b2db      	uxtb	r3, r3
 801f5a6:	b2c0      	uxtb	r0, r0
 801f5a8:	f04f 0c01 	mov.w	ip, #1
 801f5ac:	f801 c000 	strb.w	ip, [r1, r0]
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_VERSION;
 801f5b0:	3403      	adds	r4, #3
 801f5b2:	f801 c003 	strb.w	ip, [r1, r3]
 801f5b6:	b2e4      	uxtb	r4, r4
    switch (mcpsIndication->Buffer[cmdIndex++])
 801f5b8:	4690      	mov	r8, r2
 801f5ba:	e03b      	b.n	801f634 <LmhpClockSyncOnMcpsIndication+0x108>
        LmhpClockSyncState.NbTransmissions = 0;
 801f5bc:	2100      	movs	r1, #0
 801f5be:	7369      	strb	r1, [r5, #13]
        if (mcpsIndication->DeviceTimeAnsReceived == true)
 801f5c0:	f899 101c 	ldrb.w	r1, [r9, #28]
 801f5c4:	f103 0806 	add.w	r8, r3, #6
 801f5c8:	fa5f f888 	uxtb.w	r8, r8
 801f5cc:	2900      	cmp	r1, #0
 801f5ce:	d131      	bne.n	801f634 <LmhpClockSyncOnMcpsIndication+0x108>
        timeCorrection += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801f5d0:	1d59      	adds	r1, r3, #5
        if ((mcpsIndication->Buffer[cmdIndex++] & 0x0F) == LmhpClockSyncState.TimeReqParam.Fields.TokenReq)
 801f5d2:	b2c9      	uxtb	r1, r1
 801f5d4:	f895 c008 	ldrb.w	ip, [r5, #8]
 801f5d8:	5c41      	ldrb	r1, [r0, r1]
 801f5da:	f00c 0c0f 	and.w	ip, ip, #15
 801f5de:	f001 010f 	and.w	r1, r1, #15
 801f5e2:	458c      	cmp	ip, r1
 801f5e4:	d126      	bne.n	801f634 <LmhpClockSyncOnMcpsIndication+0x108>
        timeCorrection  = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 801f5e6:	f810 a002 	ldrb.w	sl, [r0, r2]
 801f5ea:	1c9a      	adds	r2, r3, #2
        timeCorrection += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 801f5ec:	b2d2      	uxtb	r2, r2
 801f5ee:	5c81      	ldrb	r1, [r0, r2]
 801f5f0:	9101      	str	r1, [sp, #4]
 801f5f2:	1cda      	adds	r2, r3, #3
        timeCorrection += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 801f5f4:	3304      	adds	r3, #4
        timeCorrection += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801f5f6:	b2db      	uxtb	r3, r3
        timeCorrection += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 801f5f8:	b2d2      	uxtb	r2, r2
 801f5fa:	f810 b002 	ldrb.w	fp, [r0, r2]
        timeCorrection += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801f5fe:	5cc2      	ldrb	r2, [r0, r3]
 801f600:	9200      	str	r2, [sp, #0]
          curTime = SysTimeGet();
 801f602:	a804      	add	r0, sp, #16
 801f604:	f007 faca 	bl	8026b9c <SysTimeGet>
        timeCorrection += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 801f608:	9901      	ldr	r1, [sp, #4]
          curTime.Seconds += timeCorrection;
 801f60a:	9b04      	ldr	r3, [sp, #16]
 801f60c:	9a00      	ldr	r2, [sp, #0]
        timeCorrection += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 801f60e:	eb0a 2a01 	add.w	sl, sl, r1, lsl #8
          curTime.Seconds += timeCorrection;
 801f612:	eb03 6302 	add.w	r3, r3, r2, lsl #24
        timeCorrection += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 801f616:	eb0a 4b0b 	add.w	fp, sl, fp, lsl #16
          curTime.Seconds += timeCorrection;
 801f61a:	445b      	add	r3, fp
          SysTimeSet(curTime);
 801f61c:	9304      	str	r3, [sp, #16]
 801f61e:	a804      	add	r0, sp, #16
 801f620:	c803      	ldmia	r0, {r0, r1}
 801f622:	f007 fa93 	bl	8026b4c <SysTimeSet>
          LmhpClockSyncState.TimeReqParam.Fields.TokenReq = (LmhpClockSyncState.TimeReqParam.Fields.TokenReq + 1) & 0x0F;
 801f626:	7a2b      	ldrb	r3, [r5, #8]
 801f628:	f3c3 0203 	ubfx	r2, r3, #0, #4
 801f62c:	3201      	adds	r2, #1
 801f62e:	f362 0303 	bfi	r3, r2, #0, #4
 801f632:	722b      	strb	r3, [r5, #8]
    switch (mcpsIndication->Buffer[cmdIndex++])
 801f634:	4643      	mov	r3, r8
 801f636:	e783      	b.n	801f540 <LmhpClockSyncOnMcpsIndication+0x14>
        uint32_t periodTime = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 801f638:	f810 a002 	ldrb.w	sl, [r0, r2]
 801f63c:	f00a 010f 	and.w	r1, sl, #15
        periodTime = (128 << periodTime) + randr(0, 30);
 801f640:	f04f 0a80 	mov.w	sl, #128	; 0x80
        uint32_t periodTime = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 801f644:	3302      	adds	r3, #2
        periodTime = (128 << periodTime) + randr(0, 30);
 801f646:	fa0a fa01 	lsl.w	sl, sl, r1
 801f64a:	2000      	movs	r0, #0
 801f64c:	211e      	movs	r1, #30
        uint32_t periodTime = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 801f64e:	fa5f f883 	uxtb.w	r8, r3
        periodTime = (128 << periodTime) + randr(0, 30);
 801f652:	f005 fd87 	bl	8025164 <randr>
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_PERIOD_ANS;
 801f656:	686a      	ldr	r2, [r5, #4]
 801f658:	2302      	movs	r3, #2
 801f65a:	5513      	strb	r3, [r2, r4]
 801f65c:	1c63      	adds	r3, r4, #1
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = 0x00;
 801f65e:	b2db      	uxtb	r3, r3
 801f660:	2100      	movs	r1, #0
 801f662:	54d1      	strb	r1, [r2, r3]
        periodTime = (128 << periodTime) + randr(0, 30);
 801f664:	4683      	mov	fp, r0
        SysTime_t curTime = SysTimeGet();
 801f666:	a804      	add	r0, sp, #16
 801f668:	f007 fa98 	bl	8026b9c <SysTimeGet>
        curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 801f66c:	9a04      	ldr	r2, [sp, #16]
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 0) & 0xFF;
 801f66e:	686b      	ldr	r3, [r5, #4]
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = 0x00;
 801f670:	1ca1      	adds	r1, r4, #2
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 0) & 0xFF;
 801f672:	b2c9      	uxtb	r1, r1
        curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 801f674:	443a      	add	r2, r7
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 0) & 0xFF;
 801f676:	545a      	strb	r2, [r3, r1]
 801f678:	1ce1      	adds	r1, r4, #3
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 8) & 0xFF;
 801f67a:	b2c9      	uxtb	r1, r1
 801f67c:	0a10      	lsrs	r0, r2, #8
 801f67e:	5458      	strb	r0, [r3, r1]
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 16) & 0xFF;
 801f680:	1d61      	adds	r1, r4, #5
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 8) & 0xFF;
 801f682:	1d20      	adds	r0, r4, #4
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 16) & 0xFF;
 801f684:	b2c9      	uxtb	r1, r1
 801f686:	b2c0      	uxtb	r0, r0
 801f688:	ea4f 4c12 	mov.w	ip, r2, lsr #16
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 24) & 0xFF;
 801f68c:	0e12      	lsrs	r2, r2, #24
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 16) & 0xFF;
 801f68e:	f803 c000 	strb.w	ip, [r3, r0]
        periodTime = (128 << periodTime) + randr(0, 30);
 801f692:	44da      	add	sl, fp
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 24) & 0xFF;
 801f694:	545a      	strb	r2, [r3, r1]
        TimerSetValue(&PeriodicTimeStartTimer, periodTime * 1000);
 801f696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801f69a:	fb01 f10a 	mul.w	r1, r1, sl
 801f69e:	4630      	mov	r0, r6
 801f6a0:	f007 fbaa 	bl	8026df8 <UTIL_TIMER_SetPeriod>
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 24) & 0xFF;
 801f6a4:	3406      	adds	r4, #6
        TimerStart(&PeriodicTimeStartTimer);
 801f6a6:	4630      	mov	r0, r6
        LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 24) & 0xFF;
 801f6a8:	b2e4      	uxtb	r4, r4
        TimerStart(&PeriodicTimeStartTimer);
 801f6aa:	f007 fb6b 	bl	8026d84 <UTIL_TIMER_Start>
        break;
 801f6ae:	e7c1      	b.n	801f634 <LmhpClockSyncOnMcpsIndication+0x108>
        LmhpClockSyncState.NbTransmissions = mcpsIndication->Buffer[cmdIndex++] & 0X07;
 801f6b0:	3302      	adds	r3, #2
 801f6b2:	fa5f f883 	uxtb.w	r8, r3
 801f6b6:	5c83      	ldrb	r3, [r0, r2]
 801f6b8:	f003 0307 	and.w	r3, r3, #7
 801f6bc:	736b      	strb	r3, [r5, #13]
        break;
 801f6be:	e7b9      	b.n	801f634 <LmhpClockSyncOnMcpsIndication+0x108>
 801f6c0:	20001980 	.word	0x20001980
 801f6c4:	ed2ac280 	.word	0xed2ac280
 801f6c8:	2000114c 	.word	0x2000114c

0801f6cc <LmhpClockSyncOnMcpsConfirm>:
{
 801f6cc:	b510      	push	{r4, lr}
  if (LmhpClockSyncState.AppTimeReqPending == true)
 801f6ce:	4c11      	ldr	r4, [pc, #68]	; (801f714 <LmhpClockSyncOnMcpsConfirm+0x48>)
 801f6d0:	7a63      	ldrb	r3, [r4, #9]
{
 801f6d2:	b08a      	sub	sp, #40	; 0x28
  if (LmhpClockSyncState.AppTimeReqPending == true)
 801f6d4:	b1e3      	cbz	r3, 801f710 <LmhpClockSyncOnMcpsConfirm+0x44>
    mibReq.Type = MIB_ADR;
 801f6d6:	2304      	movs	r3, #4
 801f6d8:	f88d 3004 	strb.w	r3, [sp, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f6dc:	a801      	add	r0, sp, #4
    mibReq.Param.AdrEnable = LmhpClockSyncState.AdrEnabledPrev;
 801f6de:	7aa3      	ldrb	r3, [r4, #10]
 801f6e0:	f88d 3008 	strb.w	r3, [sp, #8]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f6e4:	f002 ff16 	bl	8022514 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_CHANNELS_NB_TRANS;
 801f6e8:	2318      	movs	r3, #24
 801f6ea:	f88d 3004 	strb.w	r3, [sp, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f6ee:	a801      	add	r0, sp, #4
    mibReq.Param.ChannelsNbTrans = LmhpClockSyncState.NbTransPrev;
 801f6f0:	7ae3      	ldrb	r3, [r4, #11]
 801f6f2:	f88d 3008 	strb.w	r3, [sp, #8]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f6f6:	f002 ff0d 	bl	8022514 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_CHANNELS_DATARATE;
 801f6fa:	231f      	movs	r3, #31
 801f6fc:	f88d 3004 	strb.w	r3, [sp, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f700:	a801      	add	r0, sp, #4
    mibReq.Param.ChannelsDatarate = LmhpClockSyncState.DataratePrev;
 801f702:	7b23      	ldrb	r3, [r4, #12]
 801f704:	f88d 3008 	strb.w	r3, [sp, #8]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f708:	f002 ff04 	bl	8022514 <LoRaMacMibSetRequestConfirm>
    LmhpClockSyncState.AppTimeReqPending = false;
 801f70c:	2300      	movs	r3, #0
 801f70e:	7263      	strb	r3, [r4, #9]
}
 801f710:	b00a      	add	sp, #40	; 0x28
 801f712:	bd10      	pop	{r4, pc}
 801f714:	20001980 	.word	0x20001980

0801f718 <LmhpClockSyncInit>:
{
 801f718:	b507      	push	{r0, r1, r2, lr}
 801f71a:	480a      	ldr	r0, [pc, #40]	; (801f744 <LmhpClockSyncInit+0x2c>)
  if (dataBuffer != NULL)
 801f71c:	b179      	cbz	r1, 801f73e <LmhpClockSyncInit+0x26>
    LmhpClockSyncState.DataBufferMaxSize = dataBufferMaxSize;
 801f71e:	7082      	strb	r2, [r0, #2]
    LmhpClockSyncState.Initialized = true;
 801f720:	f240 1301 	movw	r3, #257	; 0x101
    TimerInit(&PeriodicTimeStartTimer, OnPeriodicTimeStartTimer);
 801f724:	2200      	movs	r2, #0
    LmhpClockSyncState.DataBuffer = dataBuffer;
 801f726:	6041      	str	r1, [r0, #4]
    LmhpClockSyncState.Initialized = true;
 801f728:	f820 3b10 	strh.w	r3, [r0], #16
    TimerInit(&PeriodicTimeStartTimer, OnPeriodicTimeStartTimer);
 801f72c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801f730:	4b05      	ldr	r3, [pc, #20]	; (801f748 <LmhpClockSyncInit+0x30>)
 801f732:	9200      	str	r2, [sp, #0]
 801f734:	f007 fa78 	bl	8026c28 <UTIL_TIMER_Create>
}
 801f738:	b003      	add	sp, #12
 801f73a:	f85d fb04 	ldr.w	pc, [sp], #4
    LmhpClockSyncState.Initialized = false;
 801f73e:	8001      	strh	r1, [r0, #0]
}
 801f740:	e7fa      	b.n	801f738 <LmhpClockSyncInit+0x20>
 801f742:	bf00      	nop
 801f744:	20001980 	.word	0x20001980
 801f748:	0801f51d 	.word	0x0801f51d

0801f74c <LmphClockSyncPackageFactory>:
}
 801f74c:	4800      	ldr	r0, [pc, #0]	; (801f750 <LmphClockSyncPackageFactory+0x4>)
 801f74e:	4770      	bx	lr
 801f750:	2000114c 	.word	0x2000114c

0801f754 <LmhpClockSyncAppTimeReq>:
{
 801f754:	b570      	push	{r4, r5, r6, lr}
 801f756:	b08c      	sub	sp, #48	; 0x30
  if (LmHandlerIsBusy() == true)
 801f758:	f7ff fd02 	bl	801f160 <LmHandlerIsBusy>
 801f75c:	2800      	cmp	r0, #0
 801f75e:	d15b      	bne.n	801f818 <LmhpClockSyncAppTimeReq+0xc4>
  if (LmhpClockSyncState.AppTimeReqPending == false)
 801f760:	4c2f      	ldr	r4, [pc, #188]	; (801f820 <LmhpClockSyncAppTimeReq+0xcc>)
 801f762:	4e30      	ldr	r6, [pc, #192]	; (801f824 <LmhpClockSyncAppTimeReq+0xd0>)
 801f764:	7a65      	ldrb	r5, [r4, #9]
 801f766:	bb3d      	cbnz	r5, 801f7b8 <LmhpClockSyncAppTimeReq+0x64>
    mibReq.Type = MIB_ADR;
 801f768:	2304      	movs	r3, #4
    LoRaMacMibGetRequestConfirm(&mibReq);
 801f76a:	a803      	add	r0, sp, #12
    mibReq.Type = MIB_ADR;
 801f76c:	f88d 300c 	strb.w	r3, [sp, #12]
    LoRaMacMibGetRequestConfirm(&mibReq);
 801f770:	f002 fd9e 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
    LmhpClockSyncState.AdrEnabledPrev = mibReq.Param.AdrEnable;
 801f774:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801f778:	72a3      	strb	r3, [r4, #10]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f77a:	a803      	add	r0, sp, #12
    mibReq.Param.AdrEnable = false;
 801f77c:	f88d 5010 	strb.w	r5, [sp, #16]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f780:	f002 fec8 	bl	8022514 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_CHANNELS_NB_TRANS;
 801f784:	2318      	movs	r3, #24
    LoRaMacMibGetRequestConfirm(&mibReq);
 801f786:	a803      	add	r0, sp, #12
    mibReq.Type = MIB_CHANNELS_NB_TRANS;
 801f788:	f88d 300c 	strb.w	r3, [sp, #12]
    LoRaMacMibGetRequestConfirm(&mibReq);
 801f78c:	f002 fd90 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
    LmhpClockSyncState.NbTransPrev = mibReq.Param.ChannelsNbTrans;
 801f790:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801f794:	72e3      	strb	r3, [r4, #11]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f796:	a803      	add	r0, sp, #12
    mibReq.Param.ChannelsNbTrans = 1;
 801f798:	2301      	movs	r3, #1
 801f79a:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibSetRequestConfirm(&mibReq);
 801f79e:	f002 feb9 	bl	8022514 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_CHANNELS_DATARATE;
 801f7a2:	231f      	movs	r3, #31
    LoRaMacMibGetRequestConfirm(&mibReq);
 801f7a4:	a803      	add	r0, sp, #12
    mibReq.Type = MIB_CHANNELS_DATARATE;
 801f7a6:	f88d 300c 	strb.w	r3, [sp, #12]
    LoRaMacMibGetRequestConfirm(&mibReq);
 801f7aa:	f002 fd81 	bl	80222b0 <LoRaMacMibGetRequestConfirm>
    LmhpClockSyncState.DataratePrev = mibReq.Param.ChannelsDatarate;
 801f7ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801f7b2:	7323      	strb	r3, [r4, #12]
    LmhpClockSyncPackage.OnDeviceTimeRequest();
 801f7b4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 801f7b6:	4798      	blx	r3
  SysTime_t curTime = SysTimeGet();
 801f7b8:	a801      	add	r0, sp, #4
 801f7ba:	f007 f9ef 	bl	8026b9c <SysTimeGet>
  curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 801f7be:	9b01      	ldr	r3, [sp, #4]
 801f7c0:	4a19      	ldr	r2, [pc, #100]	; (801f828 <LmhpClockSyncAppTimeReq+0xd4>)
  LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_REQ;
 801f7c2:	6861      	ldr	r1, [r4, #4]
  curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 801f7c4:	441a      	add	r2, r3
  LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 8) & 0xFF;
 801f7c6:	0a13      	lsrs	r3, r2, #8
 801f7c8:	708b      	strb	r3, [r1, #2]
  LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 16) & 0xFF;
 801f7ca:	0c13      	lsrs	r3, r2, #16
 801f7cc:	70cb      	strb	r3, [r1, #3]
  LmhpClockSyncState.TimeReqParam.Fields.AnsRequired = 0;
 801f7ce:	7a23      	ldrb	r3, [r4, #8]
  LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 0) & 0xFF;
 801f7d0:	704a      	strb	r2, [r1, #1]
  LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_REQ;
 801f7d2:	2501      	movs	r5, #1
  LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 24) & 0xFF;
 801f7d4:	0e12      	lsrs	r2, r2, #24
  LmhpClockSyncState.TimeReqParam.Fields.AnsRequired = 0;
 801f7d6:	f36f 1304 	bfc	r3, #4, #1
  LmhpClockSyncState.DataBuffer[dataBufferIndex++] = (curTime.Seconds >> 24) & 0xFF;
 801f7da:	710a      	strb	r2, [r1, #4]
  LmhpClockSyncState.DataBuffer[dataBufferIndex++] = LmhpClockSyncState.TimeReqParam.Value;
 801f7dc:	714b      	strb	r3, [r1, #5]
  LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_REQ;
 801f7de:	700d      	strb	r5, [r1, #0]
  LmhpClockSyncState.TimeReqParam.Fields.AnsRequired = 0;
 801f7e0:	7223      	strb	r3, [r4, #8]
  LmHandlerGetDutyCycleEnable(&current_dutycycle);
 801f7e2:	f10d 0003 	add.w	r0, sp, #3
  LmHandlerAppData_t appData =
 801f7e6:	f240 63ca 	movw	r3, #1738	; 0x6ca
 801f7ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f7ee:	9104      	str	r1, [sp, #16]
  LmhpClockSyncState.AppTimeReqPending = true;
 801f7f0:	7265      	strb	r5, [r4, #9]
  LmHandlerGetDutyCycleEnable(&current_dutycycle);
 801f7f2:	f7ff fe6f 	bl	801f4d4 <LmHandlerGetDutyCycleEnable>
  LmHandlerSetDutyCycleEnable(false);
 801f7f6:	2000      	movs	r0, #0
 801f7f8:	f7ff fe78 	bl	801f4ec <LmHandlerSetDutyCycleEnable>
  LmHandlerErrorStatus_t status = LmhpClockSyncPackage.OnSendRequest(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 801f7fc:	2200      	movs	r2, #0
 801f7fe:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f800:	462b      	mov	r3, r5
 801f802:	4611      	mov	r1, r2
 801f804:	a803      	add	r0, sp, #12
 801f806:	47a0      	blx	r4
 801f808:	4604      	mov	r4, r0
  LmHandlerSetDutyCycleEnable(current_dutycycle);
 801f80a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801f80e:	f7ff fe6d 	bl	801f4ec <LmHandlerSetDutyCycleEnable>
}
 801f812:	4620      	mov	r0, r4
 801f814:	b00c      	add	sp, #48	; 0x30
 801f816:	bd70      	pop	{r4, r5, r6, pc}
    return LORAMAC_HANDLER_ERROR;
 801f818:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f81c:	e7f9      	b.n	801f812 <LmhpClockSyncAppTimeReq+0xbe>
 801f81e:	bf00      	nop
 801f820:	20001980 	.word	0x20001980
 801f824:	2000114c 	.word	0x2000114c
 801f828:	ed2ac280 	.word	0xed2ac280

0801f82c <LmhpClockSyncProcess>:
{
 801f82c:	b510      	push	{r4, lr}
  if (LmhpClockSyncState.NbTransmissions > 0)
 801f82e:	4c05      	ldr	r4, [pc, #20]	; (801f844 <LmhpClockSyncProcess+0x18>)
 801f830:	7b63      	ldrb	r3, [r4, #13]
 801f832:	b12b      	cbz	r3, 801f840 <LmhpClockSyncProcess+0x14>
    if (LmhpClockSyncAppTimeReq() == LORAMAC_HANDLER_SUCCESS)
 801f834:	f7ff ff8e 	bl	801f754 <LmhpClockSyncAppTimeReq>
 801f838:	b910      	cbnz	r0, 801f840 <LmhpClockSyncProcess+0x14>
      LmhpClockSyncState.NbTransmissions--;
 801f83a:	7b63      	ldrb	r3, [r4, #13]
 801f83c:	3b01      	subs	r3, #1
 801f83e:	7363      	strb	r3, [r4, #13]
}
 801f840:	bd10      	pop	{r4, pc}
 801f842:	bf00      	nop
 801f844:	20001980 	.word	0x20001980

0801f848 <LmhpComplianceInit>:
}

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
  if ((params != NULL) && (dataBuffer != NULL))
 801f848:	4b05      	ldr	r3, [pc, #20]	; (801f860 <LmhpComplianceInit+0x18>)
 801f84a:	b130      	cbz	r0, 801f85a <LmhpComplianceInit+0x12>
 801f84c:	b129      	cbz	r1, 801f85a <LmhpComplianceInit+0x12>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
    ComplianceTestState.DataBuffer = dataBuffer;
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 801f84e:	729a      	strb	r2, [r3, #10]
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 801f850:	6018      	str	r0, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 801f852:	60d9      	str	r1, [r3, #12]
    ComplianceTestState.Initialized = true;
 801f854:	2201      	movs	r2, #1
  }
  else
  {
    LmhpComplianceParams = NULL;
    ComplianceTestState.Initialized = false;
 801f856:	711a      	strb	r2, [r3, #4]
  }
}
 801f858:	4770      	bx	lr
    LmhpComplianceParams = NULL;
 801f85a:	2200      	movs	r2, #0
 801f85c:	601a      	str	r2, [r3, #0]
 801f85e:	e7fa      	b.n	801f856 <LmhpComplianceInit+0xe>
 801f860:	200019a8 	.word	0x200019a8

0801f864 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
  return ComplianceTestState.Initialized;
}
 801f864:	4b01      	ldr	r3, [pc, #4]	; (801f86c <LmhpComplianceIsInitialized+0x8>)
 801f866:	7918      	ldrb	r0, [r3, #4]
 801f868:	4770      	bx	lr
 801f86a:	bf00      	nop
 801f86c:	200019a8 	.word	0x200019a8

0801f870 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
  if (ComplianceTestState.Initialized == false)
 801f870:	4b02      	ldr	r3, [pc, #8]	; (801f87c <LmhpComplianceIsRunning+0xc>)
 801f872:	7918      	ldrb	r0, [r3, #4]
 801f874:	b100      	cbz	r0, 801f878 <LmhpComplianceIsRunning+0x8>
  {
    return false;
  }

  return ComplianceTestState.IsRunning;
 801f876:	7958      	ldrb	r0, [r3, #5]
}
 801f878:	4770      	bx	lr
 801f87a:	bf00      	nop
 801f87c:	200019a8 	.word	0x200019a8

0801f880 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess(void)
{
  /* Nothing to process */
}
 801f880:	4770      	bx	lr
	...

0801f884 <LmhpComplianceTxProcess>:
{
 801f884:	b530      	push	{r4, r5, lr}
  if (ComplianceTestState.Initialized == false)
 801f886:	4c1c      	ldr	r4, [pc, #112]	; (801f8f8 <LmhpComplianceTxProcess+0x74>)
 801f888:	7923      	ldrb	r3, [r4, #4]
{
 801f88a:	b085      	sub	sp, #20
  if (ComplianceTestState.Initialized == false)
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d030      	beq.n	801f8f2 <LmhpComplianceTxProcess+0x6e>
  if (ComplianceTestState.LinkCheck == true)
 801f890:	7ca2      	ldrb	r2, [r4, #18]
 801f892:	68e3      	ldr	r3, [r4, #12]
 801f894:	b162      	cbz	r2, 801f8b0 <LmhpComplianceTxProcess+0x2c>
    ComplianceTestState.LinkCheck = false;
 801f896:	2200      	movs	r2, #0
 801f898:	74a2      	strb	r2, [r4, #18]
    ComplianceTestState.DataBufferSize = 3;
 801f89a:	2203      	movs	r2, #3
 801f89c:	72e2      	strb	r2, [r4, #11]
    ComplianceTestState.DataBuffer[0] = 5;
 801f89e:	2205      	movs	r2, #5
 801f8a0:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 801f8a2:	7ce2      	ldrb	r2, [r4, #19]
 801f8a4:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 801f8a6:	7d22      	ldrb	r2, [r4, #20]
 801f8a8:	709a      	strb	r2, [r3, #2]
        ComplianceTestState.State = 1;
 801f8aa:	2201      	movs	r2, #1
 801f8ac:	71a2      	strb	r2, [r4, #6]
        break;
 801f8ae:	e004      	b.n	801f8ba <LmhpComplianceTxProcess+0x36>
    switch (ComplianceTestState.State)
 801f8b0:	79a2      	ldrb	r2, [r4, #6]
 801f8b2:	2a01      	cmp	r2, #1
 801f8b4:	d016      	beq.n	801f8e4 <LmhpComplianceTxProcess+0x60>
 801f8b6:	2a04      	cmp	r2, #4
 801f8b8:	d0f7      	beq.n	801f8aa <LmhpComplianceTxProcess+0x26>
  LmHandlerAppData_t appData =
 801f8ba:	22e0      	movs	r2, #224	; 0xe0
 801f8bc:	f88d 2008 	strb.w	r2, [sp, #8]
 801f8c0:	9303      	str	r3, [sp, #12]
 801f8c2:	7ae2      	ldrb	r2, [r4, #11]
  TimerStart(&ComplianceTxNextPacketTimer);
 801f8c4:	480d      	ldr	r0, [pc, #52]	; (801f8fc <LmhpComplianceTxProcess+0x78>)
  LmHandlerAppData_t appData =
 801f8c6:	f88d 2009 	strb.w	r2, [sp, #9]
  TimerTime_t nextTxIn = 0;
 801f8ca:	2300      	movs	r3, #0
 801f8cc:	9301      	str	r3, [sp, #4]
  TimerStart(&ComplianceTxNextPacketTimer);
 801f8ce:	f007 fa59 	bl	8026d84 <UTIL_TIMER_Start>
  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 801f8d2:	4b0b      	ldr	r3, [pc, #44]	; (801f900 <LmhpComplianceTxProcess+0x7c>)
 801f8d4:	7a21      	ldrb	r1, [r4, #8]
 801f8d6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801f8d8:	aa01      	add	r2, sp, #4
 801f8da:	2301      	movs	r3, #1
 801f8dc:	a802      	add	r0, sp, #8
 801f8de:	47a8      	blx	r5
}
 801f8e0:	b005      	add	sp, #20
 801f8e2:	bd30      	pop	{r4, r5, pc}
        ComplianceTestState.DataBufferSize = 2;
 801f8e4:	2202      	movs	r2, #2
 801f8e6:	72e2      	strb	r2, [r4, #11]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 801f8e8:	8a22      	ldrh	r2, [r4, #16]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 801f8ea:	705a      	strb	r2, [r3, #1]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 801f8ec:	0a11      	lsrs	r1, r2, #8
 801f8ee:	7019      	strb	r1, [r3, #0]
        break;
 801f8f0:	e7e3      	b.n	801f8ba <LmhpComplianceTxProcess+0x36>
    return LORAMAC_HANDLER_ERROR;
 801f8f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f8f6:	e7f3      	b.n	801f8e0 <LmhpComplianceTxProcess+0x5c>
 801f8f8:	200019a8 	.word	0x200019a8
 801f8fc:	200019c0 	.word	0x200019c0
 801f900:	20001178 	.word	0x20001178

0801f904 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
  LmhpComplianceTxProcess();
 801f904:	f7ff bfbe 	b.w	801f884 <LmhpComplianceTxProcess>

0801f908 <LmhpComplianceOnMcpsConfirm>:
  if (ComplianceTestState.Initialized == false)
 801f908:	4b06      	ldr	r3, [pc, #24]	; (801f924 <LmhpComplianceOnMcpsConfirm+0x1c>)
 801f90a:	791a      	ldrb	r2, [r3, #4]
 801f90c:	b14a      	cbz	r2, 801f922 <LmhpComplianceOnMcpsConfirm+0x1a>
  if ((ComplianceTestState.IsRunning == true) &&
 801f90e:	795a      	ldrb	r2, [r3, #5]
 801f910:	b13a      	cbz	r2, 801f922 <LmhpComplianceOnMcpsConfirm+0x1a>
 801f912:	7802      	ldrb	r2, [r0, #0]
 801f914:	2a01      	cmp	r2, #1
 801f916:	d104      	bne.n	801f922 <LmhpComplianceOnMcpsConfirm+0x1a>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 801f918:	7902      	ldrb	r2, [r0, #4]
 801f91a:	b112      	cbz	r2, 801f922 <LmhpComplianceOnMcpsConfirm+0x1a>
    ComplianceTestState.DownLinkCounter++;
 801f91c:	8a1a      	ldrh	r2, [r3, #16]
 801f91e:	3201      	adds	r2, #1
 801f920:	821a      	strh	r2, [r3, #16]
}
 801f922:	4770      	bx	lr
 801f924:	200019a8 	.word	0x200019a8

0801f928 <LmhpComplianceOnMlmeConfirm>:
  if (ComplianceTestState.Initialized == false)
 801f928:	4b06      	ldr	r3, [pc, #24]	; (801f944 <LmhpComplianceOnMlmeConfirm+0x1c>)
 801f92a:	791a      	ldrb	r2, [r3, #4]
 801f92c:	b142      	cbz	r2, 801f940 <LmhpComplianceOnMlmeConfirm+0x18>
  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 801f92e:	7802      	ldrb	r2, [r0, #0]
 801f930:	2a04      	cmp	r2, #4
 801f932:	d105      	bne.n	801f940 <LmhpComplianceOnMlmeConfirm+0x18>
    ComplianceTestState.LinkCheck = true;
 801f934:	2201      	movs	r2, #1
 801f936:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 801f938:	7a02      	ldrb	r2, [r0, #8]
 801f93a:	74da      	strb	r2, [r3, #19]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 801f93c:	7a42      	ldrb	r2, [r0, #9]
 801f93e:	751a      	strb	r2, [r3, #20]
}
 801f940:	4770      	bx	lr
 801f942:	bf00      	nop
 801f944:	200019a8 	.word	0x200019a8

0801f948 <LmhpComplianceOnMcpsIndication>:
{
 801f948:	b530      	push	{r4, r5, lr}
  if (ComplianceTestState.Initialized == false)
 801f94a:	4c78      	ldr	r4, [pc, #480]	; (801fb2c <LmhpComplianceOnMcpsIndication+0x1e4>)
 801f94c:	7923      	ldrb	r3, [r4, #4]
{
 801f94e:	b08d      	sub	sp, #52	; 0x34
  if (ComplianceTestState.Initialized == false)
 801f950:	2b00      	cmp	r3, #0
 801f952:	d044      	beq.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
  if (mcpsIndication->RxData == false)
 801f954:	7b43      	ldrb	r3, [r0, #13]
 801f956:	2b00      	cmp	r3, #0
 801f958:	d041      	beq.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
  if ((ComplianceTestState.IsRunning == true) &&
 801f95a:	7965      	ldrb	r5, [r4, #5]
 801f95c:	b125      	cbz	r5, 801f968 <LmhpComplianceOnMcpsIndication+0x20>
 801f95e:	7c83      	ldrb	r3, [r0, #18]
 801f960:	b913      	cbnz	r3, 801f968 <LmhpComplianceOnMcpsIndication+0x20>
    ComplianceTestState.DownLinkCounter++;
 801f962:	8a23      	ldrh	r3, [r4, #16]
 801f964:	3301      	adds	r3, #1
 801f966:	8223      	strh	r3, [r4, #16]
  if (mcpsIndication->Port != COMPLIANCE_PORT)
 801f968:	78c3      	ldrb	r3, [r0, #3]
 801f96a:	2be0      	cmp	r3, #224	; 0xe0
 801f96c:	d137      	bne.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
  if (ComplianceTestState.IsRunning == false)
 801f96e:	2d00      	cmp	r5, #0
 801f970:	d137      	bne.n	801f9e2 <LmhpComplianceOnMcpsIndication+0x9a>
    if ((mcpsIndication->BufferSize == 4) &&
 801f972:	7b02      	ldrb	r2, [r0, #12]
 801f974:	2a04      	cmp	r2, #4
 801f976:	d132      	bne.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        (mcpsIndication->Buffer[0] == 0x01) &&
 801f978:	6883      	ldr	r3, [r0, #8]
    if ((mcpsIndication->BufferSize == 4) &&
 801f97a:	7819      	ldrb	r1, [r3, #0]
 801f97c:	2901      	cmp	r1, #1
 801f97e:	d12e      	bne.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        (mcpsIndication->Buffer[0] == 0x01) &&
 801f980:	7859      	ldrb	r1, [r3, #1]
 801f982:	2901      	cmp	r1, #1
 801f984:	d12b      	bne.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        (mcpsIndication->Buffer[1] == 0x01) &&
 801f986:	7899      	ldrb	r1, [r3, #2]
 801f988:	2901      	cmp	r1, #1
 801f98a:	d128      	bne.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        (mcpsIndication->Buffer[2] == 0x01) &&
 801f98c:	78db      	ldrb	r3, [r3, #3]
 801f98e:	2b01      	cmp	r3, #1
 801f990:	d125      	bne.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
      ComplianceTestState.IsTxConfirmed = false;
 801f992:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 801f996:	8121      	strh	r1, [r4, #8]
      LoRaMacMibSetRequestConfirm(&mibReq);
 801f998:	a803      	add	r0, sp, #12
      ComplianceTestState.DataBufferSize = 2;
 801f99a:	2102      	movs	r1, #2
      ComplianceTestState.IsRunning = true;
 801f99c:	7163      	strb	r3, [r4, #5]
      ComplianceTestState.State = 1;
 801f99e:	71a3      	strb	r3, [r4, #6]
      mibReq.Param.AdrEnable = true;
 801f9a0:	f88d 3010 	strb.w	r3, [sp, #16]
      ComplianceTestState.DataBufferSize = 2;
 801f9a4:	72e1      	strb	r1, [r4, #11]
      mibReq.Type = MIB_ADR;
 801f9a6:	f88d 200c 	strb.w	r2, [sp, #12]
      ComplianceTestState.DownLinkCounter = 0;
 801f9aa:	6125      	str	r5, [r4, #16]
      ComplianceTestState.NbGateways = 0;
 801f9ac:	7525      	strb	r5, [r4, #20]
      LoRaMacMibSetRequestConfirm(&mibReq);
 801f9ae:	f002 fdb1 	bl	8022514 <LoRaMacMibSetRequestConfirm>
      LoRaMacTestSetDutyCycleOn(false);
 801f9b2:	4628      	mov	r0, r5
 801f9b4:	f003 fb5c 	bl	8023070 <LoRaMacTestSetDutyCycleOn>
      if (LmhpComplianceParams->StopPeripherals != NULL)
 801f9b8:	6823      	ldr	r3, [r4, #0]
 801f9ba:	685b      	ldr	r3, [r3, #4]
 801f9bc:	b103      	cbz	r3, 801f9c0 <LmhpComplianceOnMcpsIndication+0x78>
        LmhpComplianceParams->StopPeripherals();
 801f9be:	4798      	blx	r3
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 801f9c0:	2200      	movs	r2, #0
 801f9c2:	4b5b      	ldr	r3, [pc, #364]	; (801fb30 <LmhpComplianceOnMcpsIndication+0x1e8>)
 801f9c4:	9200      	str	r2, [sp, #0]
 801f9c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801f9ca:	485a      	ldr	r0, [pc, #360]	; (801fb34 <LmhpComplianceOnMcpsIndication+0x1ec>)
 801f9cc:	f007 f92c 	bl	8026c28 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 801f9d0:	f241 3188 	movw	r1, #5000	; 0x1388
 801f9d4:	4857      	ldr	r0, [pc, #348]	; (801fb34 <LmhpComplianceOnMcpsIndication+0x1ec>)
 801f9d6:	f007 fa0f 	bl	8026df8 <UTIL_TIMER_SetPeriod>
      LmhpComplianceTxProcess();
 801f9da:	f7ff ff53 	bl	801f884 <LmhpComplianceTxProcess>
}
 801f9de:	b00d      	add	sp, #52	; 0x34
 801f9e0:	bd30      	pop	{r4, r5, pc}
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 801f9e2:	6883      	ldr	r3, [r0, #8]
 801f9e4:	781a      	ldrb	r2, [r3, #0]
 801f9e6:	71a2      	strb	r2, [r4, #6]
    switch (ComplianceTestState.State)
 801f9e8:	2a0a      	cmp	r2, #10
 801f9ea:	d8f8      	bhi.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
 801f9ec:	e8df f002 	tbb	[pc, r2]
 801f9f0:	27232006 	.word	0x27232006
 801f9f4:	62453e2b 	.word	0x62453e2b
 801f9f8:	8d8b      	.short	0x8d8b
 801f9fa:	97          	.byte	0x97
 801f9fb:	00          	.byte	0x00
        TimerStop(&ComplianceTxNextPacketTimer);
 801f9fc:	484d      	ldr	r0, [pc, #308]	; (801fb34 <LmhpComplianceOnMcpsIndication+0x1ec>)
 801f9fe:	f007 f971 	bl	8026ce4 <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 801fa02:	2300      	movs	r3, #0
 801fa04:	8223      	strh	r3, [r4, #16]
        ComplianceTestState.IsRunning = false;
 801fa06:	7163      	strb	r3, [r4, #5]
        mibReq.Type = MIB_ADR;
 801fa08:	2304      	movs	r3, #4
 801fa0a:	f88d 300c 	strb.w	r3, [sp, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801fa0e:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 801fa10:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801fa12:	781b      	ldrb	r3, [r3, #0]
 801fa14:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 801fa18:	f002 fd7c 	bl	8022514 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 801fa1c:	6823      	ldr	r3, [r4, #0]
 801fa1e:	7858      	ldrb	r0, [r3, #1]
 801fa20:	f003 fb26 	bl	8023070 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 801fa24:	6823      	ldr	r3, [r4, #0]
 801fa26:	689b      	ldr	r3, [r3, #8]
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	d0d8      	beq.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
          LmhpComplianceParams->StartPeripherals();
 801fa2c:	4798      	blx	r3
      break;
 801fa2e:	e7d6      	b.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        ComplianceTestState.DataBufferSize = 2;
 801fa30:	2302      	movs	r3, #2
 801fa32:	72e3      	strb	r3, [r4, #11]
        break;
 801fa34:	e7d3      	b.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        ComplianceTestState.IsTxConfirmed = true;
 801fa36:	2301      	movs	r3, #1
 801fa38:	7223      	strb	r3, [r4, #8]
        ComplianceTestState.State = 1;
 801fa3a:	71a3      	strb	r3, [r4, #6]
        break;
 801fa3c:	e7cf      	b.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        ComplianceTestState.IsTxConfirmed = false;
 801fa3e:	2300      	movs	r3, #0
 801fa40:	7223      	strb	r3, [r4, #8]
        ComplianceTestState.State = 1;
 801fa42:	2301      	movs	r3, #1
 801fa44:	e7f9      	b.n	801fa3a <LmhpComplianceOnMcpsIndication+0xf2>
        ComplianceTestState.DataBuffer[0] = 4;
 801fa46:	68e5      	ldr	r5, [r4, #12]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 801fa48:	7b03      	ldrb	r3, [r0, #12]
 801fa4a:	72e3      	strb	r3, [r4, #11]
        ComplianceTestState.DataBuffer[0] = 4;
 801fa4c:	2204      	movs	r2, #4
 801fa4e:	702a      	strb	r2, [r5, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 801fa50:	7aa2      	ldrb	r2, [r4, #10]
 801fa52:	429a      	cmp	r2, r3
 801fa54:	bf28      	it	cs
 801fa56:	461a      	movcs	r2, r3
 801fa58:	2300      	movs	r3, #0
 801fa5a:	3301      	adds	r3, #1
 801fa5c:	b2d9      	uxtb	r1, r3
 801fa5e:	428a      	cmp	r2, r1
 801fa60:	d9bd      	bls.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 801fa62:	6881      	ldr	r1, [r0, #8]
 801fa64:	5cc9      	ldrb	r1, [r1, r3]
 801fa66:	3101      	adds	r1, #1
 801fa68:	54e9      	strb	r1, [r5, r3]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 801fa6a:	e7f6      	b.n	801fa5a <LmhpComplianceOnMcpsIndication+0x112>
        mlmeReq.Type = MLME_LINK_CHECK;
 801fa6c:	2304      	movs	r3, #4
        mlmeReq.Type = MLME_DEVICE_TIME;
 801fa6e:	f88d 300c 	strb.w	r3, [sp, #12]
        LoRaMacMlmeRequest(&mlmeReq);
 801fa72:	a803      	add	r0, sp, #12
 801fa74:	f003 f860 	bl	8022b38 <LoRaMacMlmeRequest>
      break;
 801fa78:	e7b1      	b.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        TimerStop(&ComplianceTxNextPacketTimer);
 801fa7a:	482e      	ldr	r0, [pc, #184]	; (801fb34 <LmhpComplianceOnMcpsIndication+0x1ec>)
 801fa7c:	f007 f932 	bl	8026ce4 <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 801fa80:	2300      	movs	r3, #0
 801fa82:	8223      	strh	r3, [r4, #16]
        ComplianceTestState.IsRunning = false;
 801fa84:	7163      	strb	r3, [r4, #5]
        mibReq.Type = MIB_ADR;
 801fa86:	2304      	movs	r3, #4
 801fa88:	f88d 300c 	strb.w	r3, [sp, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801fa8c:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 801fa8e:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801fa90:	781b      	ldrb	r3, [r3, #0]
 801fa92:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 801fa96:	f002 fd3d 	bl	8022514 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 801fa9a:	6823      	ldr	r3, [r4, #0]
 801fa9c:	7858      	ldrb	r0, [r3, #1]
 801fa9e:	f003 fae7 	bl	8023070 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 801faa2:	6823      	ldr	r3, [r4, #0]
 801faa4:	689b      	ldr	r3, [r3, #8]
 801faa6:	b103      	cbz	r3, 801faaa <LmhpComplianceOnMcpsIndication+0x162>
          LmhpComplianceParams->StartPeripherals();
 801faa8:	4798      	blx	r3
        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 801faaa:	4b23      	ldr	r3, [pc, #140]	; (801fb38 <LmhpComplianceOnMcpsIndication+0x1f0>)
 801faac:	2002      	movs	r0, #2
 801faae:	6a1b      	ldr	r3, [r3, #32]
 801fab0:	4798      	blx	r3
      break;
 801fab2:	e794      	b.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        if (mcpsIndication->BufferSize == 3)
 801fab4:	7b02      	ldrb	r2, [r0, #12]
 801fab6:	2a03      	cmp	r2, #3
 801fab8:	d10c      	bne.n	801fad4 <LmhpComplianceOnMcpsIndication+0x18c>
          mlmeReq.Type = MLME_TXCW;
 801faba:	2205      	movs	r2, #5
 801fabc:	f88d 200c 	strb.w	r2, [sp, #12]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 801fac0:	785a      	ldrb	r2, [r3, #1]
 801fac2:	789b      	ldrb	r3, [r3, #2]
 801fac4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801fac8:	f8ad 3010 	strh.w	r3, [sp, #16]
        LoRaMacMlmeRequest(&mlmeReq);
 801facc:	a803      	add	r0, sp, #12
 801face:	f003 f833 	bl	8022b38 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 801fad2:	e7b6      	b.n	801fa42 <LmhpComplianceOnMcpsIndication+0xfa>
        else if (mcpsIndication->BufferSize == 7)
 801fad4:	2a07      	cmp	r2, #7
 801fad6:	d1f9      	bne.n	801facc <LmhpComplianceOnMcpsIndication+0x184>
          mlmeReq.Type = MLME_TXCW_1;
 801fad8:	2206      	movs	r2, #6
 801fada:	f88d 200c 	strb.w	r2, [sp, #12]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 801fade:	7859      	ldrb	r1, [r3, #1]
 801fae0:	789a      	ldrb	r2, [r3, #2]
 801fae2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801fae6:	f8ad 2010 	strh.w	r2, [sp, #16]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 801faea:	791a      	ldrb	r2, [r3, #4]
 801faec:	78d9      	ldrb	r1, [r3, #3]
 801faee:	0212      	lsls	r2, r2, #8
 801faf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801faf4:	7959      	ldrb	r1, [r3, #5]
 801faf6:	430a      	orrs	r2, r1
 801faf8:	2164      	movs	r1, #100	; 0x64
 801fafa:	434a      	muls	r2, r1
 801fafc:	9205      	str	r2, [sp, #20]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 801fafe:	799b      	ldrb	r3, [r3, #6]
 801fb00:	f88d 3018 	strb.w	r3, [sp, #24]
 801fb04:	e7e2      	b.n	801facc <LmhpComplianceOnMcpsIndication+0x184>
        mlmeReq.Type = MLME_DEVICE_TIME;
 801fb06:	230a      	movs	r3, #10
 801fb08:	e7b1      	b.n	801fa6e <LmhpComplianceOnMcpsIndication+0x126>
        mibReq.Type = MIB_DEVICE_CLASS;
 801fb0a:	2200      	movs	r2, #0
 801fb0c:	f88d 200c 	strb.w	r2, [sp, #12]
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 801fb10:	785b      	ldrb	r3, [r3, #1]
 801fb12:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 801fb16:	a803      	add	r0, sp, #12
 801fb18:	f002 fcfc 	bl	8022514 <LoRaMacMibSetRequestConfirm>
      break;
 801fb1c:	e75f      	b.n	801f9de <LmhpComplianceOnMcpsIndication+0x96>
        mlmeReq.Type = MLME_PING_SLOT_INFO;
 801fb1e:	220d      	movs	r2, #13
 801fb20:	f88d 200c 	strb.w	r2, [sp, #12]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 801fb24:	785b      	ldrb	r3, [r3, #1]
 801fb26:	f88d 3010 	strb.w	r3, [sp, #16]
 801fb2a:	e7a2      	b.n	801fa72 <LmhpComplianceOnMcpsIndication+0x12a>
 801fb2c:	200019a8 	.word	0x200019a8
 801fb30:	0801f905 	.word	0x0801f905
 801fb34:	200019c0 	.word	0x200019c0
 801fb38:	20001178 	.word	0x20001178

0801fb3c <LmphCompliancePackageFactory>:
}
 801fb3c:	4800      	ldr	r0, [pc, #0]	; (801fb40 <LmphCompliancePackageFactory+0x4>)
 801fb3e:	4770      	bx	lr
 801fb40:	20001178 	.word	0x20001178

0801fb44 <LmhpDataDistributionInit>:
    {
      return LORAMAC_HANDLER_ERROR;
    }
  */
  return LORAMAC_HANDLER_SUCCESS;
}
 801fb44:	2000      	movs	r0, #0
 801fb46:	4770      	bx	lr

0801fb48 <LmhpDataDistributionPackageRegister>:
  * @brief  To be compliante with new commun lmhandler architecture
  * @param  none
  * @retval return code
  */
LmHandlerErrorStatus_t LmhpDataDistributionPackageRegister(uint8_t id, LmhPackage_t **package)
{
 801fb48:	b510      	push	{r4, lr}
  if (package == NULL)
 801fb4a:	460c      	mov	r4, r1
 801fb4c:	b181      	cbz	r1, 801fb70 <LmhpDataDistributionPackageRegister+0x28>
  {
    return LORAMAC_HANDLER_ERROR;
  }
  switch (id)
 801fb4e:	2802      	cmp	r0, #2
 801fb50:	d008      	beq.n	801fb64 <LmhpDataDistributionPackageRegister+0x1c>
 801fb52:	2803      	cmp	r0, #3
 801fb54:	d009      	beq.n	801fb6a <LmhpDataDistributionPackageRegister+0x22>
 801fb56:	2801      	cmp	r0, #1
 801fb58:	d102      	bne.n	801fb60 <LmhpDataDistributionPackageRegister+0x18>
  {
    case PACKAGE_ID_CLOCK_SYNC:
    {
      *package = LmphClockSyncPackageFactory();
 801fb5a:	f7ff fdf7 	bl	801f74c <LmphClockSyncPackageFactory>
      *package = LmhpRemoteMcastSetupPackageFactory();
      break;
    }
    case PACKAGE_ID_FRAGMENTATION:
    {
      *package = LmhpFragmentationPackageFactory();
 801fb5e:	6020      	str	r0, [r4, #0]
  switch (id)
 801fb60:	2000      	movs	r0, #0
 801fb62:	e007      	b.n	801fb74 <LmhpDataDistributionPackageRegister+0x2c>
      *package = LmhpRemoteMcastSetupPackageFactory();
 801fb64:	f000 fd3c 	bl	80205e0 <LmhpRemoteMcastSetupPackageFactory>
 801fb68:	e7f9      	b.n	801fb5e <LmhpDataDistributionPackageRegister+0x16>
      *package = LmhpFragmentationPackageFactory();
 801fb6a:	f000 fa35 	bl	801ffd8 <LmhpFragmentationPackageFactory>
 801fb6e:	e7f6      	b.n	801fb5e <LmhpDataDistributionPackageRegister+0x16>
    return LORAMAC_HANDLER_ERROR;
 801fb70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      break;
    }
  }

  return LORAMAC_HANDLER_SUCCESS;
}
 801fb74:	bd10      	pop	{r4, pc}
	...

0801fb78 <LmhpFragmentationIsInitialized>:
}

static bool LmhpFragmentationIsInitialized(void)
{
  return LmhpFragmentationState.Initialized;
}
 801fb78:	4b01      	ldr	r3, [pc, #4]	; (801fb80 <LmhpFragmentationIsInitialized+0x8>)
 801fb7a:	7818      	ldrb	r0, [r3, #0]
 801fb7c:	4770      	bx	lr
 801fb7e:	bf00      	nop
 801fb80:	200019d8 	.word	0x200019d8

0801fb84 <LmhpFragmentationIsRunning>:

static bool LmhpFragmentationIsRunning(void)
{
  if (LmhpFragmentationState.Initialized == false)
 801fb84:	4b02      	ldr	r3, [pc, #8]	; (801fb90 <LmhpFragmentationIsRunning+0xc>)
 801fb86:	7818      	ldrb	r0, [r3, #0]
 801fb88:	b100      	cbz	r0, 801fb8c <LmhpFragmentationIsRunning+0x8>
  {
    return false;
  }

  return LmhpFragmentationState.IsRunning;
 801fb8a:	7858      	ldrb	r0, [r3, #1]
}
 801fb8c:	4770      	bx	lr
 801fb8e:	bf00      	nop
 801fb90:	200019d8 	.word	0x200019d8

0801fb94 <LmhpFragmentationOnMcpsIndication>:
      break;
  }
}

static void LmhpFragmentationOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 801fb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb98:	b093      	sub	sp, #76	; 0x4c
  uint8_t cmdIndex = 0;
  uint8_t dataBufferIndex = 0;
  bool isAnswerDelayed = false;
  /* Co-efficient used to calculate delay. */
  uint8_t blockAckDelay = 0;
 801fb9a:	2300      	movs	r3, #0
        fragCounter = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x00FF;
        fragCounter |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0xFF00;

        fragIndex = (fragCounter >> 14) & 0x03;
        fragCounter &= 0x3FFF;
        if (FragSessionData[fragIndex].FragGroupData.IsActive == false)
 801fb9c:	4eaf      	ldr	r6, [pc, #700]	; (801fe5c <LmhpFragmentationOnMcpsIndication+0x2c8>)
  uint8_t blockAckDelay = 0;
 801fb9e:	9301      	str	r3, [sp, #4]
{
 801fba0:	4607      	mov	r7, r0
  bool isAnswerDelayed = false;
 801fba2:	4699      	mov	r9, r3
  uint8_t dataBufferIndex = 0;
 801fba4:	461c      	mov	r4, r3
  uint8_t cmdIndex = 0;
 801fba6:	469b      	mov	fp, r3
  while (cmdIndex < mcpsIndication->BufferSize)
 801fba8:	7b39      	ldrb	r1, [r7, #12]
 801fbaa:	4559      	cmp	r1, fp
 801fbac:	d820      	bhi.n	801fbf0 <LmhpFragmentationOnMcpsIndication+0x5c>

  /* After processing the commands, if the end-node has to reply back then a flag is checked if the */
  /* reply is to be sent immediately or with a delay. */
  /* In some scenarios it is not desired that multiple end-notes send uplinks at the same time to */
  /* the same server. (Example: Fragment status during a multicast FUOTA) */
  if (dataBufferIndex != 0)
 801fbae:	b1e4      	cbz	r4, 801fbea <LmhpFragmentationOnMcpsIndication+0x56>
  {
    /* Answer commands */
    LmHandlerAppData_t appData =
    {
      .Buffer = LmhpFragmentationState.DataBuffer,
 801fbb0:	4daa      	ldr	r5, [pc, #680]	; (801fe5c <LmhpFragmentationOnMcpsIndication+0x2c8>)
    LmHandlerAppData_t appData =
 801fbb2:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
 801fbb6:	23c9      	movs	r3, #201	; 0xc9
 801fbb8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 801fbbc:	686b      	ldr	r3, [r5, #4]
 801fbbe:	930d      	str	r3, [sp, #52]	; 0x34
      .BufferSize = dataBufferIndex,
      .Port = FRAGMENTATION_PORT
    };

    if (isAnswerDelayed == true)
 801fbc0:	ac0c      	add	r4, sp, #48	; 0x30
 801fbc2:	f1b9 0f00 	cmp.w	r9, #0
 801fbc6:	f000 8196 	beq.w	801fef6 <LmhpFragmentationOnMcpsIndication+0x362>
      /* Delay = Pseudo Random Delay * 1000 milli seconds. */
      /* Eg: blockAckDelay = 7 */
      /* Pseudo Random Delay = rand(0:1) * 2^11 */
      /* rand(0:1) seconds = rand(0:1000) milliseconds */
      /* Delay = rand(0:1000) * 2048 => 2048000ms = 34 minutes */
      TxDelayTime = randr(0, 1000) * (1 << (blockAckDelay + 4));
 801fbca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801fbce:	2000      	movs	r0, #0
 801fbd0:	f005 fac8 	bl	8025164 <randr>
 801fbd4:	9b01      	ldr	r3, [sp, #4]
 801fbd6:	3304      	adds	r3, #4
 801fbd8:	4098      	lsls	r0, r3
 801fbda:	6728      	str	r0, [r5, #112]	; 0x70
      DelayedReplyAppData = appData;
 801fbdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 801fbe0:	4b9f      	ldr	r3, [pc, #636]	; (801fe60 <LmhpFragmentationOnMcpsIndication+0x2cc>)
 801fbe2:	e883 0003 	stmia.w	r3, {r0, r1}
      LmhpFragmentationState.TxDelayState = FRAGMENTATION_TX_DELAY_STATE_START;
 801fbe6:	2301      	movs	r3, #1
 801fbe8:	70ab      	strb	r3, [r5, #2]

      /* restore initial Duty Cycle */
      LmHandlerSetDutyCycleEnable(current_dutycycle);
    }
  }
}
 801fbea:	b013      	add	sp, #76	; 0x4c
 801fbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (mcpsIndication->Buffer[cmdIndex++])
 801fbf0:	68bb      	ldr	r3, [r7, #8]
 801fbf2:	f813 200b 	ldrb.w	r2, [r3, fp]
 801fbf6:	f10b 0801 	add.w	r8, fp, #1
 801fbfa:	fa5f f888 	uxtb.w	r8, r8
 801fbfe:	2a08      	cmp	r2, #8
 801fc00:	d81a      	bhi.n	801fc38 <LmhpFragmentationOnMcpsIndication+0xa4>
 801fc02:	e8df f012 	tbh	[pc, r2, lsl #1]
 801fc06:	0009      	.short	0x0009
 801fc08:	0059001b 	.word	0x0059001b
 801fc0c:	001900e3 	.word	0x001900e3
 801fc10:	00190019 	.word	0x00190019
 801fc14:	01030019 	.word	0x01030019
        if (mcpsIndication->Multicast == 1)
 801fc18:	78bb      	ldrb	r3, [r7, #2]
 801fc1a:	2b01      	cmp	r3, #1
 801fc1c:	d00c      	beq.n	801fc38 <LmhpFragmentationOnMcpsIndication+0xa4>
        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_PKG_VERSION_ANS;
 801fc1e:	6872      	ldr	r2, [r6, #4]
 801fc20:	2300      	movs	r3, #0
 801fc22:	1c61      	adds	r1, r4, #1
 801fc24:	5513      	strb	r3, [r2, r4]
        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_ID;
 801fc26:	b2c9      	uxtb	r1, r1
 801fc28:	1ca3      	adds	r3, r4, #2
 801fc2a:	2003      	movs	r0, #3
 801fc2c:	b2db      	uxtb	r3, r3
 801fc2e:	5450      	strb	r0, [r2, r1]
        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_VERSION;
 801fc30:	2101      	movs	r1, #1
 801fc32:	4404      	add	r4, r0
 801fc34:	54d1      	strb	r1, [r2, r3]
 801fc36:	b2e4      	uxtb	r4, r4
        break;
 801fc38:	46c3      	mov	fp, r8
 801fc3a:	e7b5      	b.n	801fba8 <LmhpFragmentationOnMcpsIndication+0x14>
        uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 801fc3c:	f813 a008 	ldrb.w	sl, [r3, r8]
        FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus();
 801fc40:	a808      	add	r0, sp, #32
 801fc42:	2318      	movs	r3, #24
 801fc44:	ea4f 055a 	mov.w	r5, sl, lsr #1
 801fc48:	fb03 6805 	mla	r8, r3, r5, r6
 801fc4c:	f7ff f8a8 	bl	801eda0 <FragDecoderGetStatus>
 801fc50:	9808      	ldr	r0, [sp, #32]
 801fc52:	9909      	ldr	r1, [sp, #36]	; 0x24
        uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 801fc54:	f10b 0b02 	add.w	fp, fp, #2
        FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus();
 801fc58:	f108 0318 	add.w	r3, r8, #24
        if ((participants == 1) ||
 801fc5c:	f01a 0f01 	tst.w	sl, #1
        FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus();
 801fc60:	c303      	stmia	r3!, {r0, r1}
        uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 801fc62:	fa5f fb8b 	uxtb.w	fp, fp
        if ((participants == 1) ||
 801fc66:	d102      	bne.n	801fc6e <LmhpFragmentationOnMcpsIndication+0xda>
            ((participants == 0) && (FragSessionData[fragIndex].FragDecoderStatus.FragNbLost > 0)))
 801fc68:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 801fc6c:	b313      	cbz	r3, 801fcb4 <LmhpFragmentationOnMcpsIndication+0x120>
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_STATUS_ANS;
 801fc6e:	6872      	ldr	r2, [r6, #4]
 801fc70:	f04f 0901 	mov.w	r9, #1
                                                                 ((FragSessionData[fragIndex].FragDecoderStatus.FragNbRx >> 8) & 0x3F);
 801fc74:	2318      	movs	r3, #24
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_STATUS_ANS;
 801fc76:	f802 9004 	strb.w	r9, [r2, r4]
                                                                 ((FragSessionData[fragIndex].FragDecoderStatus.FragNbRx >> 8) & 0x3F);
 801fc7a:	fb03 6305 	mla	r3, r3, r5, r6
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_STATUS_ANS;
 801fc7e:	eb04 0109 	add.w	r1, r4, r9
                                                                 ((FragSessionData[fragIndex].FragDecoderStatus.FragNbRx >> 8) & 0x3F);
 801fc82:	8b18      	ldrh	r0, [r3, #24]
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = (fragIndex << 14) |
 801fc84:	b2c9      	uxtb	r1, r1
                                                                 ((FragSessionData[fragIndex].FragDecoderStatus.FragNbRx >> 8) & 0x3F);
 801fc86:	f3c0 2005 	ubfx	r0, r0, #8, #6
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = (fragIndex << 14) |
 801fc8a:	5450      	strb	r0, [r2, r1]
 801fc8c:	1ca1      	adds	r1, r4, #2
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbRx & 0xFF;
 801fc8e:	b2c9      	uxtb	r1, r1
 801fc90:	8b18      	ldrh	r0, [r3, #24]
 801fc92:	5450      	strb	r0, [r2, r1]
 801fc94:	1ce0      	adds	r0, r4, #3
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbLost;
 801fc96:	b2c0      	uxtb	r0, r0
 801fc98:	8b5d      	ldrh	r5, [r3, #26]
 801fc9a:	5415      	strb	r5, [r2, r0]
 801fc9c:	1d21      	adds	r1, r4, #4
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.MatrixError & 0x01;
 801fc9e:	7f98      	ldrb	r0, [r3, #30]
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbLost;
 801fca0:	b2c9      	uxtb	r1, r1
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.MatrixError & 0x01;
 801fca2:	ea00 0009 	and.w	r0, r0, r9
 801fca6:	5450      	strb	r0, [r2, r1]
          blockAckDelay = FragSessionData[fragIndex].FragGroupData.Control.Fields.BlockAckDelay;
 801fca8:	7c58      	ldrb	r0, [r3, #17]
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.MatrixError & 0x01;
 801fcaa:	3405      	adds	r4, #5
          blockAckDelay = FragSessionData[fragIndex].FragGroupData.Control.Fields.BlockAckDelay;
 801fcac:	f000 0307 	and.w	r3, r0, #7
          LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.MatrixError & 0x01;
 801fcb0:	b2e4      	uxtb	r4, r4
          blockAckDelay = FragSessionData[fragIndex].FragGroupData.Control.Fields.BlockAckDelay;
 801fcb2:	9301      	str	r3, [sp, #4]
        uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 801fcb4:	46d8      	mov	r8, fp
 801fcb6:	e7bf      	b.n	801fc38 <LmhpFragmentationOnMcpsIndication+0xa4>
        if (mcpsIndication->Multicast == 1)
 801fcb8:	78ba      	ldrb	r2, [r7, #2]
 801fcba:	2a01      	cmp	r2, #1
 801fcbc:	d0bc      	beq.n	801fc38 <LmhpFragmentationOnMcpsIndication+0xa4>
        fragSessionData.FragGroupData.FragSession.Value = mcpsIndication->Buffer[cmdIndex++];
 801fcbe:	f813 2008 	ldrb.w	r2, [r3, r8]
 801fcc2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        fragSessionData.FragGroupData.FragNb = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x00FF;
 801fcc6:	f10b 0203 	add.w	r2, fp, #3
        fragSessionData.FragGroupData.FragNb |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0xFF00;
 801fcca:	b2d2      	uxtb	r2, r2
        fragSessionData.FragGroupData.Padding = mcpsIndication->Buffer[cmdIndex++];
 801fccc:	f10b 0007 	add.w	r0, fp, #7
        fragSessionData.FragGroupData.FragNb |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0xFF00;
 801fcd0:	5c99      	ldrb	r1, [r3, r2]
        fragSessionData.FragGroupData.FragSession.Value = mcpsIndication->Buffer[cmdIndex++];
 801fcd2:	f10b 0202 	add.w	r2, fp, #2
        fragSessionData.FragGroupData.FragNb = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x00FF;
 801fcd6:	b2d2      	uxtb	r2, r2
        fragSessionData.FragGroupData.Descriptor = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 801fcd8:	b2c0      	uxtb	r0, r0
        fragSessionData.FragGroupData.FragNb |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0xFF00;
 801fcda:	f813 9002 	ldrb.w	r9, [r3, r2]
 801fcde:	ea49 2901 	orr.w	r9, r9, r1, lsl #8
        fragSessionData.FragGroupData.Control.Value = mcpsIndication->Buffer[cmdIndex++];
 801fce2:	f10b 0106 	add.w	r1, fp, #6
        fragSessionData.FragGroupData.FragNb |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0xFF00;
 801fce6:	f10b 0204 	add.w	r2, fp, #4
        fragSessionData.FragGroupData.Padding = mcpsIndication->Buffer[cmdIndex++];
 801fcea:	b2c9      	uxtb	r1, r1
        fragSessionData.FragGroupData.FragSize = mcpsIndication->Buffer[cmdIndex++];
 801fcec:	b2d2      	uxtb	r2, r2
        fragSessionData.FragGroupData.Padding = mcpsIndication->Buffer[cmdIndex++];
 801fcee:	5c59      	ldrb	r1, [r3, r1]
        fragSessionData.FragGroupData.FragSize = mcpsIndication->Buffer[cmdIndex++];
 801fcf0:	f813 a002 	ldrb.w	sl, [r3, r2]
        fragSessionData.FragGroupData.Padding = mcpsIndication->Buffer[cmdIndex++];
 801fcf4:	9107      	str	r1, [sp, #28]
        fragSessionData.FragGroupData.FragSize = mcpsIndication->Buffer[cmdIndex++];
 801fcf6:	f10b 0205 	add.w	r2, fp, #5
        fragSessionData.FragGroupData.Descriptor = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 801fcfa:	5c19      	ldrb	r1, [r3, r0]
 801fcfc:	9102      	str	r1, [sp, #8]
 801fcfe:	f10b 0008 	add.w	r0, fp, #8
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 801fd02:	b2c0      	uxtb	r0, r0
        fragSessionData.FragGroupData.Control.Value = mcpsIndication->Buffer[cmdIndex++];
 801fd04:	b2d2      	uxtb	r2, r2
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 801fd06:	5c19      	ldrb	r1, [r3, r0]
        fragSessionData.FragGroupData.Control.Value = mcpsIndication->Buffer[cmdIndex++];
 801fd08:	5c9a      	ldrb	r2, [r3, r2]
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 801fd0a:	9103      	str	r1, [sp, #12]
 801fd0c:	f10b 0009 	add.w	r0, fp, #9
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801fd10:	f10b 080b 	add.w	r8, fp, #11
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 801fd14:	f10b 0b0a 	add.w	fp, fp, #10
 801fd18:	b2c0      	uxtb	r0, r0
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801fd1a:	fa5f fb8b 	uxtb.w	fp, fp
        if (fragSessionData.FragGroupData.Control.Fields.FragAlgo > 0)
 801fd1e:	f012 0f38 	tst.w	r2, #56	; 0x38
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 801fd22:	5c19      	ldrb	r1, [r3, r0]
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801fd24:	f813 b00b 	ldrb.w	fp, [r3, fp]
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 801fd28:	9104      	str	r1, [sp, #16]
          status |= 0x01; /* Encoding unsupported */
 801fd2a:	bf14      	ite	ne
 801fd2c:	2301      	movne	r3, #1
 801fd2e:	2300      	moveq	r3, #0
        if (fragSessionData.FragGroupData.Control.Fields.FragAlgo > 0)
 801fd30:	9206      	str	r2, [sp, #24]
          status |= 0x01; /* Encoding unsupported */
 801fd32:	9305      	str	r3, [sp, #20]
        if ((fragSessionData.FragGroupData.FragNb * fragSessionData.FragGroupData.FragSize) > FragDecoderGetMaxFileSize())
 801fd34:	f7fe fe96 	bl	801ea64 <FragDecoderGetMaxFileSize>
 801fd38:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801fd3c:	fb0a f509 	mul.w	r5, sl, r9
        status |= (fragSessionData.FragGroupData.FragSession.Fields.FragIndex << 6) & 0xC0;
 801fd40:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
        if ((fragSessionData.FragGroupData.FragNb * fragSessionData.FragGroupData.FragSize) > FragDecoderGetMaxFileSize())
 801fd44:	9907      	ldr	r1, [sp, #28]
 801fd46:	4285      	cmp	r5, r0
          status |= 0x02; /* Not enough Memory */
 801fd48:	bf88      	it	hi
 801fd4a:	f043 0302 	orrhi.w	r3, r3, #2
        status |= (fragSessionData.FragGroupData.FragSession.Fields.FragIndex << 6) & 0xC0;
 801fd4e:	f3cc 1c01 	ubfx	ip, ip, #4, #2
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801fd52:	fa5f f888 	uxtb.w	r8, r8
        status |= (fragSessionData.FragGroupData.FragSession.Fields.FragIndex << 6) & 0xC0;
 801fd56:	ea43 158c 	orr.w	r5, r3, ip, lsl #6
        if ((status & 0x0F) == 0)
 801fd5a:	bb63      	cbnz	r3, 801fdb6 <LmhpFragmentationOnMcpsIndication+0x222>
          FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 801fd5c:	2301      	movs	r3, #1
 801fd5e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801fd62:	9a04      	ldr	r2, [sp, #16]
          FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 801fd64:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801fd68:	ea4f 630b 	mov.w	r3, fp, lsl #24
 801fd6c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801fd70:	9a02      	ldr	r2, [sp, #8]
          FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 801fd72:	f8ad 9032 	strh.w	r9, [sp, #50]	; 0x32
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801fd76:	4413      	add	r3, r2
 801fd78:	9a03      	ldr	r2, [sp, #12]
          FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 801fd7a:	f88d a034 	strb.w	sl, [sp, #52]	; 0x34
        fragSessionData.FragGroupData.Descriptor += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 801fd7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
          FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 801fd82:	930e      	str	r3, [sp, #56]	; 0x38
 801fd84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fd88:	9311      	str	r3, [sp, #68]	; 0x44
 801fd8a:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
 801fd8e:	2318      	movs	r3, #24
 801fd90:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801fd94:	fb03 6c0c 	mla	ip, r3, ip, r6
 801fd98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801fd9c:	f10c 0c0c 	add.w	ip, ip, #12
 801fda0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801fda4:	e89e 0003 	ldmia.w	lr, {r0, r1}
          FragDecoderInit(fragSessionData.FragGroupData.FragNb,
 801fda8:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
          FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 801fdaa:	e88c 0003 	stmia.w	ip, {r0, r1}
          FragDecoderInit(fragSessionData.FragGroupData.FragNb,
 801fdae:	4651      	mov	r1, sl
 801fdb0:	4648      	mov	r0, r9
 801fdb2:	f7fe fe35 	bl	801ea20 <FragDecoderInit>
        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_SETUP_ANS;
 801fdb6:	1c63      	adds	r3, r4, #1
 801fdb8:	6872      	ldr	r2, [r6, #4]
 801fdba:	b2db      	uxtb	r3, r3
 801fdbc:	2102      	movs	r1, #2
 801fdbe:	5511      	strb	r1, [r2, r4]
        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 801fdc0:	440c      	add	r4, r1
 801fdc2:	54d5      	strb	r5, [r2, r3]
 801fdc4:	b2e4      	uxtb	r4, r4
        isAnswerDelayed = false;
 801fdc6:	f04f 0900 	mov.w	r9, #0
        break;
 801fdca:	e735      	b.n	801fc38 <LmhpFragmentationOnMcpsIndication+0xa4>
        if (mcpsIndication->Multicast == 1)
 801fdcc:	78ba      	ldrb	r2, [r7, #2]
 801fdce:	2a01      	cmp	r2, #1
 801fdd0:	f43f af32 	beq.w	801fc38 <LmhpFragmentationOnMcpsIndication+0xa4>
        uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 801fdd4:	f813 3008 	ldrb.w	r3, [r3, r8]
        if ((id >= FRAGMENTATION_MAX_SESSIONS) || (FragSessionData[id].FragGroupData.IsActive == false))
 801fdd8:	2218      	movs	r2, #24
        uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 801fdda:	f003 0303 	and.w	r3, r3, #3
        if ((id >= FRAGMENTATION_MAX_SESSIONS) || (FragSessionData[id].FragGroupData.IsActive == false))
 801fdde:	fb02 6203 	mla	r2, r2, r3, r6
        uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 801fde2:	f10b 0b02 	add.w	fp, fp, #2
        if ((id >= FRAGMENTATION_MAX_SESSIONS) || (FragSessionData[id].FragGroupData.IsActive == false))
 801fde6:	7b11      	ldrb	r1, [r2, #12]
        uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 801fde8:	fa5f fb8b 	uxtb.w	fp, fp
        if ((id >= FRAGMENTATION_MAX_SESSIONS) || (FragSessionData[id].FragGroupData.IsActive == false))
 801fdec:	b959      	cbnz	r1, 801fe06 <LmhpFragmentationOnMcpsIndication+0x272>
          status |= 0x04; /* Session does not exist */
 801fdee:	f043 0304 	orr.w	r3, r3, #4
        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_DELETE_ANS;
 801fdf2:	6871      	ldr	r1, [r6, #4]
 801fdf4:	1c62      	adds	r2, r4, #1
 801fdf6:	b2d2      	uxtb	r2, r2
 801fdf8:	2003      	movs	r0, #3
 801fdfa:	5508      	strb	r0, [r1, r4]
        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 801fdfc:	3402      	adds	r4, #2
 801fdfe:	548b      	strb	r3, [r1, r2]
 801fe00:	b2e4      	uxtb	r4, r4
        uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 801fe02:	46d8      	mov	r8, fp
 801fe04:	e7df      	b.n	801fdc6 <LmhpFragmentationOnMcpsIndication+0x232>
          FragSessionData[id].FragGroupData.IsActive = false;
 801fe06:	2100      	movs	r1, #0
 801fe08:	7311      	strb	r1, [r2, #12]
 801fe0a:	e7f2      	b.n	801fdf2 <LmhpFragmentationOnMcpsIndication+0x25e>
        fragCounter = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x00FF;
 801fe0c:	f10b 0202 	add.w	r2, fp, #2
        fragCounter |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0xFF00;
 801fe10:	b2d2      	uxtb	r2, r2
 801fe12:	f813 a002 	ldrb.w	sl, [r3, r2]
 801fe16:	f813 3008 	ldrb.w	r3, [r3, r8]
        if (FragSessionData[fragIndex].FragGroupData.IsActive == false)
 801fe1a:	2218      	movs	r2, #24
        fragCounter |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0xFF00;
 801fe1c:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
        if (FragSessionData[fragIndex].FragGroupData.IsActive == false)
 801fe20:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
 801fe24:	fb02 620a 	mla	r2, r2, sl, r6
 801fe28:	f102 050c 	add.w	r5, r2, #12
 801fe2c:	7b12      	ldrb	r2, [r2, #12]
 801fe2e:	2a00      	cmp	r2, #0
 801fe30:	d05f      	beq.n	801fef2 <LmhpFragmentationOnMcpsIndication+0x35e>
        if (mcpsIndication->Multicast == 1)
 801fe32:	78ba      	ldrb	r2, [r7, #2]
 801fe34:	2a01      	cmp	r2, #1
 801fe36:	d115      	bne.n	801fe64 <LmhpFragmentationOnMcpsIndication+0x2d0>
          uint8_t groupId = LoRaMacMcChannelGetGroupId(mcpsIndication->DevAddress);
 801fe38:	69b8      	ldr	r0, [r7, #24]
 801fe3a:	9302      	str	r3, [sp, #8]
 801fe3c:	f002 fe16 	bl	8022a6c <LoRaMacMcChannelGetGroupId>
          if ((groupId == 0xFF) ||
 801fe40:	28ff      	cmp	r0, #255	; 0xff
 801fe42:	d008      	beq.n	801fe56 <LmhpFragmentationOnMcpsIndication+0x2c2>
              ((FragSessionData[fragIndex].FragGroupData.FragSession.Fields.McGroupBitMask & (1 << groupId)) == 0))
 801fe44:	786a      	ldrb	r2, [r5, #1]
          if ((groupId == 0xFF) ||
 801fe46:	9b02      	ldr	r3, [sp, #8]
              ((FragSessionData[fragIndex].FragGroupData.FragSession.Fields.McGroupBitMask & (1 << groupId)) == 0))
 801fe48:	f002 020f 	and.w	r2, r2, #15
 801fe4c:	fa42 f000 	asr.w	r0, r2, r0
          if ((groupId == 0xFF) ||
 801fe50:	f010 0f01 	tst.w	r0, #1
 801fe54:	d106      	bne.n	801fe64 <LmhpFragmentationOnMcpsIndication+0x2d0>
            cmdIndex = mcpsIndication->BufferSize;
 801fe56:	f897 800c 	ldrb.w	r8, [r7, #12]
            break;
 801fe5a:	e6ed      	b.n	801fc38 <LmhpFragmentationOnMcpsIndication+0xa4>
 801fe5c:	200019d8 	.word	0x200019d8
 801fe60:	20002a70 	.word	0x20002a70
        if (FragSessionData[fragIndex].FragDecoderProcessStatus == FRAG_SESSION_ONGOING)
 801fe64:	2218      	movs	r2, #24
 801fe66:	fb02 680a 	mla	r8, r2, sl, r6
        fragCounter |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0xFF00;
 801fe6a:	f10b 0503 	add.w	r5, fp, #3
        if (FragSessionData[fragIndex].FragDecoderProcessStatus == FRAG_SESSION_ONGOING)
 801fe6e:	f8d8 0020 	ldr.w	r0, [r8, #32]
 801fe72:	1c42      	adds	r2, r0, #1
        fragCounter |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0xFF00;
 801fe74:	b2ed      	uxtb	r5, r5
        if (FragSessionData[fragIndex].FragDecoderProcessStatus == FRAG_SESSION_ONGOING)
 801fe76:	d127      	bne.n	801fec8 <LmhpFragmentationOnMcpsIndication+0x334>
          FragSessionData[fragIndex].FragDecoderProcessStatus = FragDecoderProcess(fragCounter, &mcpsIndication->Buffer[cmdIndex]);
 801fe78:	68b9      	ldr	r1, [r7, #8]
 801fe7a:	f3c3 000d 	ubfx	r0, r3, #0, #14
 801fe7e:	4429      	add	r1, r5
 801fe80:	f7fe fdf4 	bl	801ea6c <FragDecoderProcess>
 801fe84:	f8c8 0020 	str.w	r0, [r8, #32]
          FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus();
 801fe88:	a808      	add	r0, sp, #32
 801fe8a:	f7fe ff89 	bl	801eda0 <FragDecoderGetStatus>
 801fe8e:	9808      	ldr	r0, [sp, #32]
 801fe90:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fe92:	f108 0318 	add.w	r3, r8, #24
 801fe96:	c303      	stmia	r3!, {r0, r1}
          if (LmhpFragmentationParams->OnProgress != NULL)
 801fe98:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801fe9a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801fe9e:	f1bb 0f00 	cmp.w	fp, #0
 801fea2:	d008      	beq.n	801feb6 <LmhpFragmentationOnMcpsIndication+0x322>
            LmhpFragmentationParams->OnProgress(FragSessionData[fragIndex].FragDecoderStatus.FragNbRx,
 801fea4:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 801fea8:	f898 2010 	ldrb.w	r2, [r8, #16]
 801feac:	f8b8 100e 	ldrh.w	r1, [r8, #14]
 801feb0:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 801feb4:	47d8      	blx	fp
        cmdIndex += FragSessionData[fragIndex].FragGroupData.FragSize;
 801feb6:	2318      	movs	r3, #24
 801feb8:	fb03 6a0a 	mla	sl, r3, sl, r6
 801febc:	f89a 8010 	ldrb.w	r8, [sl, #16]
 801fec0:	4445      	add	r5, r8
 801fec2:	fa5f f885 	uxtb.w	r8, r5
        break;
 801fec6:	e6b7      	b.n	801fc38 <LmhpFragmentationOnMcpsIndication+0xa4>
          if (FragSessionData[fragIndex].FragDecoderProcessStatus >= 0)
 801fec8:	2800      	cmp	r0, #0
 801feca:	dbf4      	blt.n	801feb6 <LmhpFragmentationOnMcpsIndication+0x322>
            if (LmhpFragmentationParams->OnDone != NULL)
 801fecc:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801fece:	691b      	ldr	r3, [r3, #16]
 801fed0:	b143      	cbz	r3, 801fee4 <LmhpFragmentationOnMcpsIndication+0x350>
                                              (FragSessionData[fragIndex].FragGroupData.FragNb * FragSessionData[fragIndex].FragGroupData.FragSize) -
 801fed2:	f8b8 100e 	ldrh.w	r1, [r8, #14]
 801fed6:	f898 2010 	ldrb.w	r2, [r8, #16]
 801feda:	434a      	muls	r2, r1
                                              FragSessionData[fragIndex].FragGroupData.Padding);
 801fedc:	f898 1012 	ldrb.w	r1, [r8, #18]
              LmhpFragmentationParams->OnDone(FragSessionData[fragIndex].FragDecoderProcessStatus,
 801fee0:	1a51      	subs	r1, r2, r1
 801fee2:	4798      	blx	r3
            FragSessionData[fragIndex].FragDecoderProcessStatus = FRAG_SESSION_NOT_STARTED;
 801fee4:	2318      	movs	r3, #24
 801fee6:	fb03 630a 	mla	r3, r3, sl, r6
 801feea:	f06f 0201 	mvn.w	r2, #1
 801feee:	621a      	str	r2, [r3, #32]
 801fef0:	e7e1      	b.n	801feb6 <LmhpFragmentationOnMcpsIndication+0x322>
 801fef2:	4688      	mov	r8, r1
 801fef4:	e6a0      	b.n	801fc38 <LmhpFragmentationOnMcpsIndication+0xa4>
      LmHandlerGetDutyCycleEnable(&current_dutycycle);
 801fef6:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 801fefa:	f7ff faeb 	bl	801f4d4 <LmHandlerGetDutyCycleEnable>
      LmHandlerSetDutyCycleEnable(false);
 801fefe:	4648      	mov	r0, r9
 801ff00:	f7ff faf4 	bl	801f4ec <LmHandlerSetDutyCycleEnable>
      LmhpFragmentationPackage.OnSendRequest(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 801ff04:	4b05      	ldr	r3, [pc, #20]	; (801ff1c <LmhpFragmentationOnMcpsIndication+0x388>)
 801ff06:	464a      	mov	r2, r9
 801ff08:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801ff0a:	4649      	mov	r1, r9
 801ff0c:	2301      	movs	r3, #1
 801ff0e:	4620      	mov	r0, r4
 801ff10:	47a8      	blx	r5
      LmHandlerSetDutyCycleEnable(current_dutycycle);
 801ff12:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801ff16:	f7ff fae9 	bl	801f4ec <LmHandlerSetDutyCycleEnable>
}
 801ff1a:	e666      	b.n	801fbea <LmhpFragmentationOnMcpsIndication+0x56>
 801ff1c:	200011a4 	.word	0x200011a4

0801ff20 <LmhpFragmentationInit>:
{
 801ff20:	b513      	push	{r0, r1, r4, lr}
 801ff22:	4c0f      	ldr	r4, [pc, #60]	; (801ff60 <LmhpFragmentationInit+0x40>)
  if ((params != NULL) && (dataBuffer != NULL))
 801ff24:	b1c0      	cbz	r0, 801ff58 <LmhpFragmentationInit+0x38>
 801ff26:	b1b9      	cbz	r1, 801ff58 <LmhpFragmentationInit+0x38>
    LmhpFragmentationState.Initialized = true;
 801ff28:	f240 1301 	movw	r3, #257	; 0x101
    LmhpFragmentationState.DataBufferMaxSize = dataBufferMaxSize;
 801ff2c:	70e2      	strb	r2, [r4, #3]
    TxDelayTime = 0;
 801ff2e:	2200      	movs	r2, #0
    LmhpFragmentationParams = (LmhpFragmentationParams_t *)params;
 801ff30:	66e0      	str	r0, [r4, #108]	; 0x6c
    LmhpFragmentationState.DataBuffer = dataBuffer;
 801ff32:	6061      	str	r1, [r4, #4]
    LmhpFragmentationState.Initialized = true;
 801ff34:	8023      	strh	r3, [r4, #0]
    TimerInit(&FragmentTxDelayTimer, OnFragmentTxDelay);
 801ff36:	9200      	str	r2, [sp, #0]
 801ff38:	4b0a      	ldr	r3, [pc, #40]	; (801ff64 <LmhpFragmentationInit+0x44>)
    TxDelayTime = 0;
 801ff3a:	6722      	str	r2, [r4, #112]	; 0x70
    TimerInit(&FragmentTxDelayTimer, OnFragmentTxDelay);
 801ff3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ff40:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801ff44:	f006 fe70 	bl	8026c28 <UTIL_TIMER_Create>
  UTIL_MEM_set_8(FragSessionData, 0, sizeof(FragSessionData));
 801ff48:	4807      	ldr	r0, [pc, #28]	; (801ff68 <LmhpFragmentationInit+0x48>)
 801ff4a:	2260      	movs	r2, #96	; 0x60
 801ff4c:	2100      	movs	r1, #0
}
 801ff4e:	b002      	add	sp, #8
 801ff50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UTIL_MEM_set_8(FragSessionData, 0, sizeof(FragSessionData));
 801ff54:	f006 bdba 	b.w	8026acc <UTIL_MEM_set_8>
    LmhpFragmentationParams = NULL;
 801ff58:	2300      	movs	r3, #0
 801ff5a:	66e3      	str	r3, [r4, #108]	; 0x6c
    LmhpFragmentationState.Initialized = false;
 801ff5c:	8023      	strh	r3, [r4, #0]
 801ff5e:	e7f3      	b.n	801ff48 <LmhpFragmentationInit+0x28>
 801ff60:	200019d8 	.word	0x200019d8
 801ff64:	0801ff6d 	.word	0x0801ff6d
 801ff68:	200019e4 	.word	0x200019e4

0801ff6c <OnFragmentTxDelay>:
{
 801ff6c:	b510      	push	{r4, lr}
  TimerStop(&FragmentTxDelayTimer);
 801ff6e:	4c04      	ldr	r4, [pc, #16]	; (801ff80 <OnFragmentTxDelay+0x14>)
 801ff70:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801ff74:	f006 feb6 	bl	8026ce4 <UTIL_TIMER_Stop>
  LmhpFragmentationState.TxDelayState = FRAGMENTATION_TX_DELAY_STATE_PENDING;
 801ff78:	2302      	movs	r3, #2
 801ff7a:	70a3      	strb	r3, [r4, #2]
}
 801ff7c:	bd10      	pop	{r4, pc}
 801ff7e:	bf00      	nop
 801ff80:	200019d8 	.word	0x200019d8

0801ff84 <LmhpFragmentationProcess>:
{
 801ff84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TimerTime_t nextTxIn = 0;
 801ff86:	2100      	movs	r1, #0
 801ff88:	9101      	str	r1, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ff8a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801ff8e:	b672      	cpsid	i
  delayTimerState = LmhpFragmentationState.TxDelayState;
 801ff90:	4c0e      	ldr	r4, [pc, #56]	; (801ffcc <LmhpFragmentationProcess+0x48>)
 801ff92:	78a3      	ldrb	r3, [r4, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ff94:	f382 8810 	msr	PRIMASK, r2
  switch (delayTimerState)
 801ff98:	2b01      	cmp	r3, #1
 801ff9a:	d003      	beq.n	801ffa4 <LmhpFragmentationProcess+0x20>
 801ff9c:	2b02      	cmp	r3, #2
 801ff9e:	d00b      	beq.n	801ffb8 <LmhpFragmentationProcess+0x34>
}
 801ffa0:	b003      	add	sp, #12
 801ffa2:	bd30      	pop	{r4, r5, pc}
      TimerSetValue(&FragmentTxDelayTimer, TxDelayTime);
 801ffa4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 801ffa6:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801ffaa:	f006 ff25 	bl	8026df8 <UTIL_TIMER_SetPeriod>
      TimerStart(&FragmentTxDelayTimer);
 801ffae:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801ffb2:	f006 fee7 	bl	8026d84 <UTIL_TIMER_Start>
}
 801ffb6:	e7f3      	b.n	801ffa0 <LmhpFragmentationProcess+0x1c>
      if (LmhpFragmentationPackage.OnSendRequest(&DelayedReplyAppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, &nextTxIn,
 801ffb8:	4b05      	ldr	r3, [pc, #20]	; (801ffd0 <LmhpFragmentationProcess+0x4c>)
 801ffba:	4806      	ldr	r0, [pc, #24]	; (801ffd4 <LmhpFragmentationProcess+0x50>)
 801ffbc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801ffbe:	aa01      	add	r2, sp, #4
 801ffc0:	2301      	movs	r3, #1
 801ffc2:	47a8      	blx	r5
 801ffc4:	2800      	cmp	r0, #0
 801ffc6:	d1eb      	bne.n	801ffa0 <LmhpFragmentationProcess+0x1c>
        LmhpFragmentationState.TxDelayState = FRAGMENTATION_TX_DELAY_STATE_IDLE;
 801ffc8:	70a0      	strb	r0, [r4, #2]
}
 801ffca:	e7e9      	b.n	801ffa0 <LmhpFragmentationProcess+0x1c>
 801ffcc:	200019d8 	.word	0x200019d8
 801ffd0:	200011a4 	.word	0x200011a4
 801ffd4:	20002a70 	.word	0x20002a70

0801ffd8 <LmhpFragmentationPackageFactory>:
}
 801ffd8:	4800      	ldr	r0, [pc, #0]	; (801ffdc <LmhpFragmentationPackageFactory+0x4>)
 801ffda:	4770      	bx	lr
 801ffdc:	200011a4 	.word	0x200011a4

0801ffe0 <LmhpRemoteMcastSetupIsInitialized>:
}

static bool LmhpRemoteMcastSetupIsInitialized(void)
{
  return LmhpRemoteMcastSetupState.Initialized;
}
 801ffe0:	4b01      	ldr	r3, [pc, #4]	; (801ffe8 <LmhpRemoteMcastSetupIsInitialized+0x8>)
 801ffe2:	7818      	ldrb	r0, [r3, #0]
 801ffe4:	4770      	bx	lr
 801ffe6:	bf00      	nop
 801ffe8:	20001a64 	.word	0x20001a64

0801ffec <LmhpRemoteMcastSetupIsRunning>:

static bool LmhpRemoteMcastSetupIsRunning(void)
{
  if (LmhpRemoteMcastSetupState.Initialized == false)
 801ffec:	4b02      	ldr	r3, [pc, #8]	; (801fff8 <LmhpRemoteMcastSetupIsRunning+0xc>)
 801ffee:	7818      	ldrb	r0, [r3, #0]
 801fff0:	b100      	cbz	r0, 801fff4 <LmhpRemoteMcastSetupIsRunning+0x8>
  {
    return false;
  }

  return LmhpRemoteMcastSetupState.IsRunning;
 801fff2:	7858      	ldrb	r0, [r3, #1]
}
 801fff4:	4770      	bx	lr
 801fff6:	bf00      	nop
 801fff8:	20001a64 	.word	0x20001a64

0801fffc <LmhpRemoteMcastSetupOnMcpsIndication>:
      break;
  }
}

static void LmhpRemoteMcastSetupOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 801fffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        uint8_t status = 0x00;
        id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
        int32_t timeToSessionStart = 0;

        McSessionData[id].SessionTime = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 8020000:	4e77      	ldr	r6, [pc, #476]	; (80201e0 <LmhpRemoteMcastSetupOnMcpsIndication+0x1e4>)
{
 8020002:	b091      	sub	sp, #68	; 0x44
  uint8_t dataBufferIndex = 0;
 8020004:	2400      	movs	r4, #0
{
 8020006:	9004      	str	r0, [sp, #16]
  uint8_t id = 0xFF;
 8020008:	25ff      	movs	r5, #255	; 0xff
  uint8_t cmdIndex = 0;
 802000a:	4622      	mov	r2, r4
        McSessionData[id].RxParams.ClassC.Frequency *= 100;

        McSessionData[id].RxParams.ClassC.Datarate = mcpsIndication->Buffer[cmdIndex++];

        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_ANS;
        if (LoRaMacMcChannelSetupRxParams((AddressIdentifier_t)id, &McSessionData[id].RxParams, &status) == LORAMAC_STATUS_OK)
 802000c:	f106 0b08 	add.w	fp, r6, #8
  while (cmdIndex < mcpsIndication->BufferSize)
 8020010:	9b04      	ldr	r3, [sp, #16]
 8020012:	7b1b      	ldrb	r3, [r3, #12]
 8020014:	4293      	cmp	r3, r2
 8020016:	f200 8085 	bhi.w	8020124 <LmhpRemoteMcastSetupOnMcpsIndication+0x128>
        break;
      }
    }
  }

  if (dataBufferIndex != 0)
 802001a:	2c00      	cmp	r4, #0
 802001c:	d07f      	beq.n	802011e <LmhpRemoteMcastSetupOnMcpsIndication+0x122>
  {
    /* Answer commands */
    LmHandlerAppData_t appData =
 802001e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
    {
      .Buffer = LmhpRemoteMcastSetupState.DataBuffer,
 8020022:	4c6f      	ldr	r4, [pc, #444]	; (80201e0 <LmhpRemoteMcastSetupOnMcpsIndication+0x1e4>)
    LmHandlerAppData_t appData =
 8020024:	23c8      	movs	r3, #200	; 0xc8
 8020026:	f88d 3020 	strb.w	r3, [sp, #32]
      .BufferSize = dataBufferIndex,
      .Port = REMOTE_MCAST_SETUP_PORT
    };

    bool current_dutycycle;
    LmHandlerGetDutyCycleEnable(&current_dutycycle);
 802002a:	f10d 001f 	add.w	r0, sp, #31
    LmHandlerAppData_t appData =
 802002e:	6863      	ldr	r3, [r4, #4]
 8020030:	9309      	str	r3, [sp, #36]	; 0x24
    LmHandlerGetDutyCycleEnable(&current_dutycycle);
 8020032:	f7ff fa4f 	bl	801f4d4 <LmHandlerGetDutyCycleEnable>

    /* force Duty Cycle OFF to this Send */
    LmHandlerSetDutyCycleEnable(false);
 8020036:	2000      	movs	r0, #0
 8020038:	f7ff fa58 	bl	801f4ec <LmHandlerSetDutyCycleEnable>
    LmhpRemoteMcastSetupPackage.OnSendRequest(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 802003c:	4b69      	ldr	r3, [pc, #420]	; (80201e4 <LmhpRemoteMcastSetupOnMcpsIndication+0x1e8>)
 802003e:	2200      	movs	r2, #0
 8020040:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8020042:	4611      	mov	r1, r2
 8020044:	2301      	movs	r3, #1
 8020046:	a808      	add	r0, sp, #32
 8020048:	47b0      	blx	r6

    /* restore initial Duty Cycle */
    LmHandlerSetDutyCycleEnable(current_dutycycle);
 802004a:	f89d 001f 	ldrb.w	r0, [sp, #31]
 802004e:	f7ff fa4d 	bl	801f4ec <LmHandlerSetDutyCycleEnable>

    if (id != 0xFF && id < LORAMAC_MAX_MC_CTX)
 8020052:	2d00      	cmp	r5, #0
 8020054:	d163      	bne.n	802011e <LmhpRemoteMcastSetupOnMcpsIndication+0x122>
    {
      MW_LOG(TS_OFF, VLEVEL_M, "ID          : %d\r\n", McSessionData[id].McGroupData.IdHeader.Fields.McGroupId);
 8020056:	7a63      	ldrb	r3, [r4, #9]
      MW_LOG(TS_OFF, VLEVEL_M, "McAddr      : %08X\r\n", McSessionData[id].McGroupData.McAddr);
      MW_LOG(TS_OFF, VLEVEL_M, "McKey       : %02X", McSessionData[id].McGroupData.McKeyEncrypted[0]);
      for (int i = 1; i < 16; i++)
      {
        MW_LOG(TS_OFF, VLEVEL_M, "-%02X",  McSessionData[id].McGroupData.McKeyEncrypted[i]);
 8020058:	4f63      	ldr	r7, [pc, #396]	; (80201e8 <LmhpRemoteMcastSetupOnMcpsIndication+0x1ec>)
      MW_LOG(TS_OFF, VLEVEL_M, "ID          : %d\r\n", McSessionData[id].McGroupData.IdHeader.Fields.McGroupId);
 802005a:	f003 0303 	and.w	r3, r3, #3
 802005e:	462a      	mov	r2, r5
 8020060:	4629      	mov	r1, r5
 8020062:	9300      	str	r3, [sp, #0]
 8020064:	2002      	movs	r0, #2
 8020066:	4b61      	ldr	r3, [pc, #388]	; (80201ec <LmhpRemoteMcastSetupOnMcpsIndication+0x1f0>)
 8020068:	f006 fc2a 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      MW_LOG(TS_OFF, VLEVEL_M, "McAddr      : %08X\r\n", McSessionData[id].McGroupData.McAddr);
 802006c:	68e3      	ldr	r3, [r4, #12]
 802006e:	9300      	str	r3, [sp, #0]
 8020070:	462a      	mov	r2, r5
 8020072:	4629      	mov	r1, r5
 8020074:	4b5e      	ldr	r3, [pc, #376]	; (80201f0 <LmhpRemoteMcastSetupOnMcpsIndication+0x1f4>)
 8020076:	2002      	movs	r0, #2
 8020078:	f006 fc22 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      MW_LOG(TS_OFF, VLEVEL_M, "McKey       : %02X", McSessionData[id].McGroupData.McKeyEncrypted[0]);
 802007c:	7c23      	ldrb	r3, [r4, #16]
 802007e:	9300      	str	r3, [sp, #0]
 8020080:	462a      	mov	r2, r5
 8020082:	4629      	mov	r1, r5
 8020084:	4b5b      	ldr	r3, [pc, #364]	; (80201f4 <LmhpRemoteMcastSetupOnMcpsIndication+0x1f8>)
 8020086:	2002      	movs	r0, #2
 8020088:	f006 fc1a 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      for (int i = 1; i < 16; i++)
 802008c:	f104 0611 	add.w	r6, r4, #17
 8020090:	2501      	movs	r5, #1
        MW_LOG(TS_OFF, VLEVEL_M, "-%02X",  McSessionData[id].McGroupData.McKeyEncrypted[i]);
 8020092:	f816 3b01 	ldrb.w	r3, [r6], #1
 8020096:	9300      	str	r3, [sp, #0]
 8020098:	2200      	movs	r2, #0
 802009a:	463b      	mov	r3, r7
 802009c:	4611      	mov	r1, r2
 802009e:	2002      	movs	r0, #2
      for (int i = 1; i < 16; i++)
 80200a0:	3501      	adds	r5, #1
        MW_LOG(TS_OFF, VLEVEL_M, "-%02X",  McSessionData[id].McGroupData.McKeyEncrypted[i]);
 80200a2:	f006 fc0d 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      for (int i = 1; i < 16; i++)
 80200a6:	2d10      	cmp	r5, #16
 80200a8:	d1f3      	bne.n	8020092 <LmhpRemoteMcastSetupOnMcpsIndication+0x96>
      }
      MW_LOG(TS_OFF, VLEVEL_M, "\r\n");
 80200aa:	2200      	movs	r2, #0
 80200ac:	4611      	mov	r1, r2
 80200ae:	4b52      	ldr	r3, [pc, #328]	; (80201f8 <LmhpRemoteMcastSetupOnMcpsIndication+0x1fc>)
 80200b0:	2002      	movs	r0, #2
 80200b2:	f006 fc05 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      MW_LOG(TS_OFF, VLEVEL_M, "McFCountMin : %u\r\n",  McSessionData[id].McGroupData.McFCountMin);
 80200b6:	6a23      	ldr	r3, [r4, #32]
 80200b8:	9300      	str	r3, [sp, #0]
 80200ba:	2200      	movs	r2, #0
 80200bc:	4611      	mov	r1, r2
 80200be:	4b4f      	ldr	r3, [pc, #316]	; (80201fc <LmhpRemoteMcastSetupOnMcpsIndication+0x200>)
 80200c0:	2002      	movs	r0, #2
 80200c2:	f006 fbfd 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      MW_LOG(TS_OFF, VLEVEL_M, "McFCountMax : %u\r\n",  McSessionData[id].McGroupData.McFCountMax);
 80200c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80200c8:	9300      	str	r3, [sp, #0]
 80200ca:	2200      	movs	r2, #0
 80200cc:	4611      	mov	r1, r2
 80200ce:	4b4c      	ldr	r3, [pc, #304]	; (8020200 <LmhpRemoteMcastSetupOnMcpsIndication+0x204>)
 80200d0:	2002      	movs	r0, #2
 80200d2:	f006 fbf5 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      MW_LOG(TS_OFF, VLEVEL_M, "SessionTime : %u\r\n",  McSessionData[id].SessionTime);
 80200d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80200d8:	9300      	str	r3, [sp, #0]
 80200da:	2200      	movs	r2, #0
 80200dc:	4611      	mov	r1, r2
 80200de:	4b49      	ldr	r3, [pc, #292]	; (8020204 <LmhpRemoteMcastSetupOnMcpsIndication+0x208>)
 80200e0:	2002      	movs	r0, #2
 80200e2:	f006 fbed 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      MW_LOG(TS_OFF, VLEVEL_M, "SessionTimeT: %d s\r\n", (1 << McSessionData[id].SessionTimeout));
 80200e6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80200ea:	2301      	movs	r3, #1
 80200ec:	4093      	lsls	r3, r2
 80200ee:	2200      	movs	r2, #0
 80200f0:	4611      	mov	r1, r2
 80200f2:	9300      	str	r3, [sp, #0]
 80200f4:	2002      	movs	r0, #2
 80200f6:	4b44      	ldr	r3, [pc, #272]	; (8020208 <LmhpRemoteMcastSetupOnMcpsIndication+0x20c>)
 80200f8:	f006 fbe2 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      MW_LOG(TS_OFF, VLEVEL_M, "Rx Freq     : %u\r\n", McSessionData[id].RxParams.ClassC.Frequency);
 80200fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80200fe:	9300      	str	r3, [sp, #0]
 8020100:	2200      	movs	r2, #0
 8020102:	4611      	mov	r1, r2
 8020104:	4b41      	ldr	r3, [pc, #260]	; (802020c <LmhpRemoteMcastSetupOnMcpsIndication+0x210>)
 8020106:	2002      	movs	r0, #2
 8020108:	f006 fbda 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
      MW_LOG(TS_OFF, VLEVEL_M, "Rx DR       : DR_%d\r\n", McSessionData[id].RxParams.ClassC.Datarate);
 802010c:	f994 3038 	ldrsb.w	r3, [r4, #56]	; 0x38
 8020110:	9300      	str	r3, [sp, #0]
 8020112:	2200      	movs	r2, #0
 8020114:	4b3e      	ldr	r3, [pc, #248]	; (8020210 <LmhpRemoteMcastSetupOnMcpsIndication+0x214>)
 8020116:	4611      	mov	r1, r2
 8020118:	2002      	movs	r0, #2
 802011a:	f006 fbd1 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
    }
  }
}
 802011e:	b011      	add	sp, #68	; 0x44
 8020120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (mcpsIndication->Buffer[cmdIndex++])
 8020124:	9b04      	ldr	r3, [sp, #16]
 8020126:	6898      	ldr	r0, [r3, #8]
 8020128:	5c81      	ldrb	r1, [r0, r2]
 802012a:	1c57      	adds	r7, r2, #1
 802012c:	b2ff      	uxtb	r7, r7
 802012e:	2904      	cmp	r1, #4
 8020130:	d82c      	bhi.n	802018c <LmhpRemoteMcastSetupOnMcpsIndication+0x190>
 8020132:	e8df f011 	tbh	[pc, r1, lsl #1]
 8020136:	0005      	.short	0x0005
 8020138:	006f0013 	.word	0x006f0013
 802013c:	01460117 	.word	0x01460117
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_PKG_VERSION_ANS;
 8020140:	6872      	ldr	r2, [r6, #4]
 8020142:	1c61      	adds	r1, r4, #1
 8020144:	2300      	movs	r3, #0
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_ID;
 8020146:	b2c9      	uxtb	r1, r1
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_PKG_VERSION_ANS;
 8020148:	5513      	strb	r3, [r2, r4]
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_ID;
 802014a:	2002      	movs	r0, #2
 802014c:	1ca3      	adds	r3, r4, #2
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_VERSION;
 802014e:	3403      	adds	r4, #3
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_ID;
 8020150:	5450      	strb	r0, [r2, r1]
 8020152:	b2db      	uxtb	r3, r3
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_VERSION;
 8020154:	b2e4      	uxtb	r4, r4
 8020156:	2101      	movs	r1, #1
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 8020158:	54d1      	strb	r1, [r2, r3]
        break;
 802015a:	e017      	b.n	802018c <LmhpRemoteMcastSetupOnMcpsIndication+0x190>
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_STATUS_ANS;
 802015c:	6875      	ldr	r5, [r6, #4]
        uint8_t reqGroupMask = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 802015e:	5dc7      	ldrb	r7, [r0, r7]
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_STATUS_ANS;
 8020160:	2301      	movs	r3, #1
 8020162:	552b      	strb	r3, [r5, r4]
        uint8_t reqGroupMask = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 8020164:	3202      	adds	r2, #2
        for (id = 0; id < LORAMAC_MAX_MC_CTX; id++)
 8020166:	2300      	movs	r3, #0
        dataBufferIndex++;
 8020168:	3402      	adds	r4, #2
        uint8_t reqGroupMask = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 802016a:	b2d2      	uxtb	r2, r2
        dataBufferIndex++;
 802016c:	b2e4      	uxtb	r4, r4
        uint8_t AnsGroupMask = 0x00;
 802016e:	469c      	mov	ip, r3
        for (id = 0; id < LORAMAC_MAX_MC_CTX; id++)
 8020170:	4618      	mov	r0, r3
 8020172:	f007 0701 	and.w	r7, r7, #1
          if (McSessionData[id].McGroupData.McGroupEnabled)
 8020176:	f896 e008 	ldrb.w	lr, [r6, #8]
        for (id = 0; id < LORAMAC_MAX_MC_CTX; id++)
 802017a:	b148      	cbz	r0, 8020190 <LmhpRemoteMcastSetupOnMcpsIndication+0x194>
        LmhpRemoteMcastSetupState.DataBuffer[1] = (nbAvailableGroups & 0x07) << 4 | (AnsGroupMask & 0x0F);
 802017c:	011b      	lsls	r3, r3, #4
 802017e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8020182:	ea43 030c 	orr.w	r3, r3, ip
 8020186:	706b      	strb	r3, [r5, #1]
        uint8_t reqGroupMask = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 8020188:	4617      	mov	r7, r2
        break;
 802018a:	460d      	mov	r5, r1
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 802018c:	463a      	mov	r2, r7
 802018e:	e73f      	b.n	8020010 <LmhpRemoteMcastSetupOnMcpsIndication+0x14>
          if (McSessionData[id].McGroupData.McGroupEnabled)
 8020190:	f1be 0f00 	cmp.w	lr, #0
 8020194:	d0f2      	beq.n	802017c <LmhpRemoteMcastSetupOnMcpsIndication+0x180>
            if ((reqGroupMask & (1 << id)) != 0)
 8020196:	b307      	cbz	r7, 80201da <LmhpRemoteMcastSetupOnMcpsIndication+0x1de>
              LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = id;
 8020198:	5528      	strb	r0, [r5, r4]
 802019a:	f104 0c01 	add.w	ip, r4, #1
              LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (McSessionData[id].McGroupData.McAddr >> 0) & 0xFF;
 802019e:	fa5f fc8c 	uxtb.w	ip, ip
 80201a2:	68f0      	ldr	r0, [r6, #12]
 80201a4:	f805 000c 	strb.w	r0, [r5, ip]
 80201a8:	f104 0c02 	add.w	ip, r4, #2
              LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (McSessionData[id].McGroupData.McAddr >> 8) & 0xFF;
 80201ac:	68f0      	ldr	r0, [r6, #12]
 80201ae:	fa5f fc8c 	uxtb.w	ip, ip
 80201b2:	0a00      	lsrs	r0, r0, #8
 80201b4:	f805 000c 	strb.w	r0, [r5, ip]
 80201b8:	f104 0c03 	add.w	ip, r4, #3
              LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (McSessionData[id].McGroupData.McAddr >> 16) & 0xFF;
 80201bc:	fa5f fc8c 	uxtb.w	ip, ip
 80201c0:	f8b6 e00e 	ldrh.w	lr, [r6, #14]
 80201c4:	f805 e00c 	strb.w	lr, [r5, ip]
 80201c8:	1d20      	adds	r0, r4, #4
 80201ca:	b2c0      	uxtb	r0, r0
              LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (McSessionData[id].McGroupData.McAddr >> 24) & 0xFF;
 80201cc:	f896 c00f 	ldrb.w	ip, [r6, #15]
 80201d0:	f805 c000 	strb.w	ip, [r5, r0]
 80201d4:	3405      	adds	r4, #5
 80201d6:	b2e4      	uxtb	r4, r4
              AnsGroupMask |= (1 << id);
 80201d8:	46bc      	mov	ip, r7
 80201da:	3301      	adds	r3, #1
 80201dc:	4608      	mov	r0, r1
 80201de:	e7ca      	b.n	8020176 <LmhpRemoteMcastSetupOnMcpsIndication+0x17a>
 80201e0:	20001a64 	.word	0x20001a64
 80201e4:	200011d0 	.word	0x200011d0
 80201e8:	08028039 	.word	0x08028039
 80201ec:	08027ffe 	.word	0x08027ffe
 80201f0:	08028011 	.word	0x08028011
 80201f4:	08028026 	.word	0x08028026
 80201f8:	08027c43 	.word	0x08027c43
 80201fc:	0802803f 	.word	0x0802803f
 8020200:	08028052 	.word	0x08028052
 8020204:	08028065 	.word	0x08028065
 8020208:	08028078 	.word	0x08028078
 802020c:	0802808d 	.word	0x0802808d
 8020210:	080280a0 	.word	0x080280a0
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 8020214:	5dc5      	ldrb	r5, [r0, r7]
        McSessionData[id].McGroupData.IdHeader.Value = id;
 8020216:	f04f 0c34 	mov.w	ip, #52	; 0x34
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 802021a:	f005 0503 	and.w	r5, r5, #3
        McSessionData[id].McGroupData.IdHeader.Value = id;
 802021e:	fb0c 6705 	mla	r7, ip, r5, r6
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 8020222:	1c93      	adds	r3, r2, #2
        McSessionData[id].McGroupData.McAddr = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 8020224:	b2db      	uxtb	r3, r3
        McSessionData[id].McGroupData.IdHeader.Value = id;
 8020226:	727d      	strb	r5, [r7, #9]
        McSessionData[id].McGroupData.McAddr = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 8020228:	1cd1      	adds	r1, r2, #3
 802022a:	5cc3      	ldrb	r3, [r0, r3]
 802022c:	60fb      	str	r3, [r7, #12]
        McSessionData[id].McGroupData.McAddr += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 802022e:	b2c9      	uxtb	r1, r1
        McSessionData[id].McGroupData.McAddr += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 8020230:	f102 0e05 	add.w	lr, r2, #5
        McSessionData[id].McGroupData.McAddr += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 8020234:	5c41      	ldrb	r1, [r0, r1]
 8020236:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 802023a:	1d11      	adds	r1, r2, #4
        McSessionData[id].McGroupData.McAddr += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 802023c:	b2c9      	uxtb	r1, r1
        McSessionData[id].McGroupData.McAddr += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 802023e:	60fb      	str	r3, [r7, #12]
        McSessionData[id].McGroupData.McAddr += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 8020240:	5c41      	ldrb	r1, [r0, r1]
        McSessionData[id].McGroupData.McAddr += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 8020242:	fa5f fe8e 	uxtb.w	lr, lr
        McSessionData[id].McGroupData.McAddr += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 8020246:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 802024a:	60fb      	str	r3, [r7, #12]
        McSessionData[id].McGroupData.McAddr += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 802024c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8020250:	fb0c bc05 	mla	ip, ip, r5, fp
 8020254:	eb03 630e 	add.w	r3, r3, lr, lsl #24
 8020258:	60fb      	str	r3, [r7, #12]
 802025a:	f10c 0708 	add.w	r7, ip, #8
 802025e:	1d91      	adds	r1, r2, #6
 8020260:	9703      	str	r7, [sp, #12]
 8020262:	46bc      	mov	ip, r7
 8020264:	f102 0716 	add.w	r7, r2, #22
 8020268:	b2c9      	uxtb	r1, r1
        for (int8_t i = 0; i < 16; i++)
 802026a:	fa5f f887 	uxtb.w	r8, r7
          McSessionData[id].McGroupData.McKeyEncrypted[i] = mcpsIndication->Buffer[cmdIndex++];
 802026e:	468e      	mov	lr, r1
 8020270:	3101      	adds	r1, #1
 8020272:	b2c9      	uxtb	r1, r1
 8020274:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8020278:	f80c eb01 	strb.w	lr, [ip], #1
        for (int8_t i = 0; i < 16; i++)
 802027c:	4541      	cmp	r1, r8
 802027e:	d1f6      	bne.n	802026e <LmhpRemoteMcastSetupOnMcpsIndication+0x272>
        McSessionData[id].McGroupData.McFCountMin = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 8020280:	b2ff      	uxtb	r7, r7
 8020282:	f04f 0834 	mov.w	r8, #52	; 0x34
 8020286:	5dc1      	ldrb	r1, [r0, r7]
 8020288:	9305      	str	r3, [sp, #20]
 802028a:	fb08 6805 	mla	r8, r8, r5, r6
 802028e:	f102 0717 	add.w	r7, r2, #23
        McSessionData[id].McGroupData.McFCountMin += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 8020292:	b2ff      	uxtb	r7, r7
        McSessionData[id].McGroupData.McFCountMin = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 8020294:	f8c8 1020 	str.w	r1, [r8, #32]
        McSessionData[id].McGroupData.McFCountMin += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 8020298:	f810 a007 	ldrb.w	sl, [r0, r7]
 802029c:	f102 0718 	add.w	r7, r2, #24
 80202a0:	eb01 210a 	add.w	r1, r1, sl, lsl #8
        McSessionData[id].McGroupData.McFCountMin += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 80202a4:	b2ff      	uxtb	r7, r7
        McSessionData[id].McGroupData.McFCountMin += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 80202a6:	f8c8 1020 	str.w	r1, [r8, #32]
        McSessionData[id].McGroupData.McFCountMin += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 80202aa:	f810 a007 	ldrb.w	sl, [r0, r7]
 80202ae:	f102 0719 	add.w	r7, r2, #25
 80202b2:	eb01 410a 	add.w	r1, r1, sl, lsl #16
        McSessionData[id].McGroupData.McFCountMin += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 80202b6:	b2ff      	uxtb	r7, r7
        McSessionData[id].McGroupData.McFCountMin += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 80202b8:	f8c8 1020 	str.w	r1, [r8, #32]
        McSessionData[id].McGroupData.McFCountMin += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 80202bc:	f810 a007 	ldrb.w	sl, [r0, r7]
 80202c0:	eb01 6a0a 	add.w	sl, r1, sl, lsl #24
 80202c4:	f102 011a 	add.w	r1, r2, #26
        McSessionData[id].McGroupData.McFCountMax = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 80202c8:	b2c9      	uxtb	r1, r1
        McSessionData[id].McGroupData.McFCountMin += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 80202ca:	f8c8 a020 	str.w	sl, [r8, #32]
        McSessionData[id].McGroupData.McFCountMax = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 80202ce:	f102 071b 	add.w	r7, r2, #27
 80202d2:	5c41      	ldrb	r1, [r0, r1]
 80202d4:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 80202d8:	b2ff      	uxtb	r7, r7
 80202da:	f810 9007 	ldrb.w	r9, [r0, r7]
 80202de:	f102 071c 	add.w	r7, r2, #28
 80202e2:	eb01 2109 	add.w	r1, r1, r9, lsl #8
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 80202e6:	b2ff      	uxtb	r7, r7
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 80202e8:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 80202ec:	f810 9007 	ldrb.w	r9, [r0, r7]
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 80202f0:	f102 071e 	add.w	r7, r2, #30
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 80202f4:	321d      	adds	r2, #29
 80202f6:	eb01 4109 	add.w	r1, r1, r9, lsl #16
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 80202fa:	b2d2      	uxtb	r2, r2
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 80202fc:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 8020300:	f810 9002 	ldrb.w	r9, [r0, r2]
 8020304:	eb01 6909 	add.w	r9, r1, r9, lsl #24
        McChannelParams_t channel =
 8020308:	2214      	movs	r2, #20
 802030a:	2100      	movs	r1, #0
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 802030c:	f8c8 9024 	str.w	r9, [r8, #36]	; 0x24
        McChannelParams_t channel =
 8020310:	a80b      	add	r0, sp, #44	; 0x2c
 8020312:	f006 fec7 	bl	80270a4 <memset>
 8020316:	2101      	movs	r1, #1
 8020318:	f240 2201 	movw	r2, #513	; 0x201
 802031c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 8020320:	f8ad 2020 	strh.w	r2, [sp, #32]
          .GroupID = (AddressIdentifier_t)McSessionData[id].McGroupData.IdHeader.Fields.McGroupId,
 8020324:	f898 2009 	ldrb.w	r2, [r8, #9]
        McChannelParams_t channel =
 8020328:	9b05      	ldr	r3, [sp, #20]
 802032a:	9309      	str	r3, [sp, #36]	; 0x24
          .GroupID = (AddressIdentifier_t)McSessionData[id].McGroupData.IdHeader.Fields.McGroupId,
 802032c:	f3c2 0201 	ubfx	r2, r2, #0, #2
        McChannelParams_t channel =
 8020330:	9b03      	ldr	r3, [sp, #12]
 8020332:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
        if (LoRaMacMcChannelSetup(&channel) != LORAMAC_STATUS_OK)
 8020336:	a808      	add	r0, sp, #32
        McChannelParams_t channel =
 8020338:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 802033c:	930a      	str	r3, [sp, #40]	; 0x28
        if (LoRaMacMcChannelSetup(&channel) != LORAMAC_STATUS_OK)
 802033e:	f002 fb15 	bl	802296c <LoRaMacMcChannelSetup>
        McSessionData[id].McGroupData.McFCountMax += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 8020342:	b2ff      	uxtb	r7, r7
        if (LoRaMacMcChannelSetup(&channel) != LORAMAC_STATUS_OK)
 8020344:	2101      	movs	r1, #1
 8020346:	b148      	cbz	r0, 802035c <LmhpRemoteMcastSetupOnMcpsIndication+0x360>
          status |= 0x04; /* IDerror bit */
 8020348:	f045 0104 	orr.w	r1, r5, #4
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_SETUP_ANS;
 802034c:	6872      	ldr	r2, [r6, #4]
 802034e:	2002      	movs	r0, #2
 8020350:	1c63      	adds	r3, r4, #1
 8020352:	5510      	strb	r0, [r2, r4]
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 8020354:	4404      	add	r4, r0
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_SETUP_ANS;
 8020356:	b2db      	uxtb	r3, r3
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 8020358:	b2e4      	uxtb	r4, r4
 802035a:	e6fd      	b.n	8020158 <LmhpRemoteMcastSetupOnMcpsIndication+0x15c>
          McSessionData[id].McGroupData.McGroupEnabled = true;
 802035c:	f888 1008 	strb.w	r1, [r8, #8]
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 8020360:	4629      	mov	r1, r5
 8020362:	e7f3      	b.n	802034c <LmhpRemoteMcastSetupOnMcpsIndication+0x350>
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 8020364:	5dc5      	ldrb	r5, [r0, r7]
        McSessionData[id].McGroupData.IdHeader.Value = 0;
 8020366:	2034      	movs	r0, #52	; 0x34
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 8020368:	f005 0503 	and.w	r5, r5, #3
        McSessionData[id].McGroupData.IdHeader.Value = 0;
 802036c:	fb00 6705 	mla	r7, r0, r5, r6
 8020370:	f04f 0900 	mov.w	r9, #0
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 8020374:	3202      	adds	r2, #2
        UTIL_MEM_set_8(McSessionData[id].McGroupData.McKeyEncrypted, 0x00, 16);
 8020376:	fb00 b005 	mla	r0, r0, r5, fp
        McSessionData[id].McGroupData.IdHeader.Value = 0;
 802037a:	f887 9009 	strb.w	r9, [r7, #9]
        McSessionData[id].McGroupData.McAddr = 0;
 802037e:	f8c7 900c 	str.w	r9, [r7, #12]
        UTIL_MEM_set_8(McSessionData[id].McGroupData.McKeyEncrypted, 0x00, 16);
 8020382:	4649      	mov	r1, r9
 8020384:	3008      	adds	r0, #8
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 8020386:	fa5f f882 	uxtb.w	r8, r2
        UTIL_MEM_set_8(McSessionData[id].McGroupData.McKeyEncrypted, 0x00, 16);
 802038a:	2210      	movs	r2, #16
 802038c:	f006 fb9e 	bl	8026acc <UTIL_MEM_set_8>
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_DELETE_ANS;
 8020390:	6873      	ldr	r3, [r6, #4]
 8020392:	2203      	movs	r2, #3
        McSessionData[id].McGroupData.McFCountMax = 0;
 8020394:	e9c7 9908 	strd	r9, r9, [r7, #32]
        if (LoRaMacMcChannelDelete((AddressIdentifier_t)id) != LORAMAC_STATUS_OK)
 8020398:	4628      	mov	r0, r5
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_DELETE_ANS;
 802039a:	f104 0901 	add.w	r9, r4, #1
 802039e:	551a      	strb	r2, [r3, r4]
 80203a0:	fa5f f989 	uxtb.w	r9, r9
        if (LoRaMacMcChannelDelete((AddressIdentifier_t)id) != LORAMAC_STATUS_OK)
 80203a4:	f002 fb38 	bl	8022a18 <LoRaMacMcChannelDelete>
 80203a8:	b140      	cbz	r0, 80203bc <LmhpRemoteMcastSetupOnMcpsIndication+0x3c0>
          status |= 0x04; /* McGroupUndefined bit set */
 80203aa:	f045 0304 	orr.w	r3, r5, #4
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 80203ae:	6872      	ldr	r2, [r6, #4]
 80203b0:	3402      	adds	r4, #2
 80203b2:	f802 3009 	strb.w	r3, [r2, r9]
 80203b6:	b2e4      	uxtb	r4, r4
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 80203b8:	4647      	mov	r7, r8
        break;
 80203ba:	e6e7      	b.n	802018c <LmhpRemoteMcastSetupOnMcpsIndication+0x190>
          McSessionData[id].McGroupData.McGroupEnabled = false;
 80203bc:	7238      	strb	r0, [r7, #8]
        uint8_t status = id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 80203be:	462b      	mov	r3, r5
 80203c0:	e7f5      	b.n	80203ae <LmhpRemoteMcastSetupOnMcpsIndication+0x3b2>
        uint8_t status = 0x00;
 80203c2:	f04f 0800 	mov.w	r8, #0
 80203c6:	f88d 801f 	strb.w	r8, [sp, #31]
        id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 80203ca:	5dc5      	ldrb	r5, [r0, r7]
        McSessionData[id].SessionTime += UNIX_GPS_EPOCH_OFFSET;
 80203cc:	494a      	ldr	r1, [pc, #296]	; (80204f8 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
        id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 80203ce:	1c93      	adds	r3, r2, #2
 80203d0:	f005 0503 	and.w	r5, r5, #3
        McSessionData[id].SessionTime = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 80203d4:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80203d8:	b2db      	uxtb	r3, r3
 80203da:	fb0c 6a05 	mla	sl, ip, r5, r6
 80203de:	1cd7      	adds	r7, r2, #3
 80203e0:	5cc3      	ldrb	r3, [r0, r3]
 80203e2:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
        McSessionData[id].SessionTime += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 80203e6:	b2ff      	uxtb	r7, r7
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_ANS;
 80203e8:	f104 0901 	add.w	r9, r4, #1
        McSessionData[id].SessionTime += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 80203ec:	5dc7      	ldrb	r7, [r0, r7]
 80203ee:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80203f2:	1d17      	adds	r7, r2, #4
        McSessionData[id].SessionTime += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 80203f4:	b2ff      	uxtb	r7, r7
        McSessionData[id].SessionTime += (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 80203f6:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
        McSessionData[id].SessionTime += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 80203fa:	5dc7      	ldrb	r7, [r0, r7]
 80203fc:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8020400:	1d57      	adds	r7, r2, #5
        McSessionData[id].SessionTime += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 8020402:	b2ff      	uxtb	r7, r7
        McSessionData[id].SessionTime += (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 8020404:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
        McSessionData[id].SessionTime += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 8020408:	5dc7      	ldrb	r7, [r0, r7]
        McSessionData[id].SessionTime += UNIX_GPS_EPOCH_OFFSET;
 802040a:	eb01 6707 	add.w	r7, r1, r7, lsl #24
 802040e:	443b      	add	r3, r7
 8020410:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
        McSessionData[id].SessionTime += (mcpsIndication->Buffer[cmdIndex++] << 24) & 0xFF000000;
 8020414:	1d93      	adds	r3, r2, #6
        McSessionData[id].SessionTimeout =  mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 8020416:	b2db      	uxtb	r3, r3
        McSessionData[id].RxParams.ClassC.Frequency = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 8020418:	f102 0708 	add.w	r7, r2, #8
        McSessionData[id].SessionTimeout =  mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 802041c:	5cc3      	ldrb	r3, [r0, r3]
 802041e:	f003 030f 	and.w	r3, r3, #15
 8020422:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 8020426:	1dd3      	adds	r3, r2, #7
        McSessionData[id].RxParams.ClassC.Frequency = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 8020428:	b2db      	uxtb	r3, r3
        McSessionData[id].RxParams.ClassC.Frequency |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 802042a:	b2ff      	uxtb	r7, r7
        McSessionData[id].RxParams.ClassC.Frequency = (mcpsIndication->Buffer[cmdIndex++] << 0) & 0x000000FF;
 802042c:	5cc3      	ldrb	r3, [r0, r3]
 802042e:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        McSessionData[id].RxParams.ClassC.Frequency |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 8020432:	5dc7      	ldrb	r7, [r0, r7]
 8020434:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8020438:	f102 0709 	add.w	r7, r2, #9
        McSessionData[id].RxParams.ClassC.Frequency |= (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 802043c:	b2ff      	uxtb	r7, r7
        McSessionData[id].RxParams.ClassC.Frequency |= (mcpsIndication->Buffer[cmdIndex++] << 8) & 0x0000FF00;
 802043e:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        McSessionData[id].RxParams.ClassC.Frequency |= (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 8020442:	5dc7      	ldrb	r7, [r0, r7]
 8020444:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
        McSessionData[id].RxParams.ClassC.Frequency *= 100;
 8020448:	2764      	movs	r7, #100	; 0x64
 802044a:	437b      	muls	r3, r7
        McSessionData[id].RxParams.ClassC.Datarate = mcpsIndication->Buffer[cmdIndex++];
 802044c:	f102 070b 	add.w	r7, r2, #11
        McSessionData[id].RxParams.ClassC.Frequency |= (mcpsIndication->Buffer[cmdIndex++] << 16) & 0x00FF0000;
 8020450:	320a      	adds	r2, #10
        McSessionData[id].RxParams.ClassC.Datarate = mcpsIndication->Buffer[cmdIndex++];
 8020452:	b2d2      	uxtb	r2, r2
        McSessionData[id].RxParams.ClassC.Frequency *= 100;
 8020454:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        McSessionData[id].RxParams.ClassC.Datarate = mcpsIndication->Buffer[cmdIndex++];
 8020458:	5c83      	ldrb	r3, [r0, r2]
 802045a:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_ANS;
 802045e:	fa5f f389 	uxtb.w	r3, r9
 8020462:	9303      	str	r3, [sp, #12]
 8020464:	6873      	ldr	r3, [r6, #4]
 8020466:	2204      	movs	r2, #4
        if (LoRaMacMcChannelSetupRxParams((AddressIdentifier_t)id, &McSessionData[id].RxParams, &status) == LORAMAC_STATUS_OK)
 8020468:	fb0c b105 	mla	r1, ip, r5, fp
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_ANS;
 802046c:	551a      	strb	r2, [r3, r4]
        if (LoRaMacMcChannelSetupRxParams((AddressIdentifier_t)id, &McSessionData[id].RxParams, &status) == LORAMAC_STATUS_OK)
 802046e:	312c      	adds	r1, #44	; 0x2c
 8020470:	f10d 021f 	add.w	r2, sp, #31
 8020474:	4628      	mov	r0, r5
 8020476:	f002 fb05 	bl	8022a84 <LoRaMacMcChannelSetupRxParams>
        McSessionData[id].RxParams.ClassC.Datarate = mcpsIndication->Buffer[cmdIndex++];
 802047a:	b2ff      	uxtb	r7, r7
        if (LoRaMacMcChannelSetupRxParams((AddressIdentifier_t)id, &McSessionData[id].RxParams, &status) == LORAMAC_STATUS_OK)
 802047c:	4681      	mov	r9, r0
 802047e:	b9e0      	cbnz	r0, 80204ba <LmhpRemoteMcastSetupOnMcpsIndication+0x4be>
          curTime = SysTimeGet();
 8020480:	a808      	add	r0, sp, #32
 8020482:	f006 fb8b 	bl	8026b9c <SysTimeGet>
 8020486:	9b08      	ldr	r3, [sp, #32]
          if ((McSessionData[id].SessionTime - curTime.Seconds) > 0)
 8020488:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 802048c:	4299      	cmp	r1, r3
 802048e:	d02b      	beq.n	80204e8 <LmhpRemoteMcastSetupOnMcpsIndication+0x4ec>
            timeToSessionStart = McSessionData[id].SessionTime - curTime.Seconds;
 8020490:	eba1 0803 	sub.w	r8, r1, r3
            TimerSetValue(&SessionStartTimer, timeToSessionStart * 1000);
 8020494:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8020498:	fb0a fa08 	mul.w	sl, sl, r8
 802049c:	4651      	mov	r1, sl
 802049e:	4817      	ldr	r0, [pc, #92]	; (80204fc <LmhpRemoteMcastSetupOnMcpsIndication+0x500>)
 80204a0:	f006 fcaa 	bl	8026df8 <UTIL_TIMER_SetPeriod>
            TimerStart(&SessionStartTimer);
 80204a4:	4815      	ldr	r0, [pc, #84]	; (80204fc <LmhpRemoteMcastSetupOnMcpsIndication+0x500>)
 80204a6:	f006 fc6d 	bl	8026d84 <UTIL_TIMER_Start>
            MW_LOG(TS_OFF, VLEVEL_M, "Time2SessionStart: %d ms\r\n", timeToSessionStart * 1000);
 80204aa:	4b15      	ldr	r3, [pc, #84]	; (8020500 <LmhpRemoteMcastSetupOnMcpsIndication+0x504>)
 80204ac:	f8cd a000 	str.w	sl, [sp]
 80204b0:	464a      	mov	r2, r9
 80204b2:	4649      	mov	r1, r9
 80204b4:	2002      	movs	r0, #2
 80204b6:	f006 fa03 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 80204ba:	6872      	ldr	r2, [r6, #4]
 80204bc:	9903      	ldr	r1, [sp, #12]
 80204be:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80204c2:	5453      	strb	r3, [r2, r1]
 80204c4:	1ca3      	adds	r3, r4, #2
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (timeToSessionStart >> 0) & 0xFF;
 80204c6:	b2db      	uxtb	r3, r3
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (timeToSessionStart >> 8) & 0xFF;
 80204c8:	1d21      	adds	r1, r4, #4
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (timeToSessionStart >> 0) & 0xFF;
 80204ca:	f802 8003 	strb.w	r8, [r2, r3]
 80204ce:	1ce3      	adds	r3, r4, #3
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (timeToSessionStart >> 8) & 0xFF;
 80204d0:	b2c9      	uxtb	r1, r1
 80204d2:	b2db      	uxtb	r3, r3
 80204d4:	ea4f 2028 	mov.w	r0, r8, asr #8
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (timeToSessionStart >> 16) & 0xFF;
 80204d8:	3405      	adds	r4, #5
 80204da:	ea4f 4828 	mov.w	r8, r8, asr #16
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (timeToSessionStart >> 8) & 0xFF;
 80204de:	54d0      	strb	r0, [r2, r3]
        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = (timeToSessionStart >> 16) & 0xFF;
 80204e0:	b2e4      	uxtb	r4, r4
 80204e2:	f802 8001 	strb.w	r8, [r2, r1]
        break;
 80204e6:	e651      	b.n	802018c <LmhpRemoteMcastSetupOnMcpsIndication+0x190>
            status |= 0x20;
 80204e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80204ec:	f043 0320 	orr.w	r3, r3, #32
 80204f0:	f88d 301f 	strb.w	r3, [sp, #31]
        int32_t timeToSessionStart = 0;
 80204f4:	46c8      	mov	r8, r9
 80204f6:	e7e0      	b.n	80204ba <LmhpRemoteMcastSetupOnMcpsIndication+0x4be>
 80204f8:	12d53d80 	.word	0x12d53d80
 80204fc:	20001aa0 	.word	0x20001aa0
 8020500:	08027fe3 	.word	0x08027fe3

08020504 <LmhpRemoteMcastSetupInit>:
{
 8020504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020506:	4c10      	ldr	r4, [pc, #64]	; (8020548 <LmhpRemoteMcastSetupInit+0x44>)
  if (dataBuffer != NULL)
 8020508:	b1d9      	cbz	r1, 8020542 <LmhpRemoteMcastSetupInit+0x3e>
    LmhpRemoteMcastSetupState.Initialized = true;
 802050a:	4620      	mov	r0, r4
    TimerInit(&SessionStartTimer, OnSessionStartTimer);
 802050c:	2500      	movs	r5, #0
    LmhpRemoteMcastSetupState.Initialized = true;
 802050e:	f240 1301 	movw	r3, #257	; 0x101
 8020512:	f820 3b3c 	strh.w	r3, [r0], #60
    LmhpRemoteMcastSetupState.DataBuffer = dataBuffer;
 8020516:	6061      	str	r1, [r4, #4]
    TimerInit(&SessionStartTimer, OnSessionStartTimer);
 8020518:	4b0c      	ldr	r3, [pc, #48]	; (802054c <LmhpRemoteMcastSetupInit+0x48>)
    LmhpRemoteMcastSetupState.DataBufferMaxSize = dataBufferMaxSize;
 802051a:	70e2      	strb	r2, [r4, #3]
    TimerInit(&SessionStartTimer, OnSessionStartTimer);
 802051c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020520:	462a      	mov	r2, r5
 8020522:	9500      	str	r5, [sp, #0]
 8020524:	f006 fb80 	bl	8026c28 <UTIL_TIMER_Create>
    TimerInit(&SessionStopTimer, OnSessionStopTimer);
 8020528:	4b09      	ldr	r3, [pc, #36]	; (8020550 <LmhpRemoteMcastSetupInit+0x4c>)
 802052a:	9500      	str	r5, [sp, #0]
 802052c:	462a      	mov	r2, r5
 802052e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020532:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8020536:	f006 fb77 	bl	8026c28 <UTIL_TIMER_Create>
    McSessionData[id].McGroupData.McGroupEnabled = false;
 802053a:	2300      	movs	r3, #0
 802053c:	7223      	strb	r3, [r4, #8]
}
 802053e:	b003      	add	sp, #12
 8020540:	bd30      	pop	{r4, r5, pc}
    LmhpRemoteMcastSetupState.Initialized = false;
 8020542:	8021      	strh	r1, [r4, #0]
 8020544:	e7f9      	b.n	802053a <LmhpRemoteMcastSetupInit+0x36>
 8020546:	bf00      	nop
 8020548:	20001a64 	.word	0x20001a64
 802054c:	080205c5 	.word	0x080205c5
 8020550:	08020555 	.word	0x08020555

08020554 <OnSessionStopTimer>:
  LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_START;
  LmhpRemoteMcastSetupProcess();
}

static void OnSessionStopTimer(void *context)
{
 8020554:	b510      	push	{r4, lr}
  TimerStop(&SessionStopTimer);
 8020556:	4c04      	ldr	r4, [pc, #16]	; (8020568 <OnSessionStopTimer+0x14>)
 8020558:	f104 0054 	add.w	r0, r4, #84	; 0x54
 802055c:	f006 fbc2 	bl	8026ce4 <UTIL_TIMER_Stop>
  LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_STOP;
 8020560:	2302      	movs	r3, #2
 8020562:	70a3      	strb	r3, [r4, #2]
}
 8020564:	bd10      	pop	{r4, pc}
 8020566:	bf00      	nop
 8020568:	20001a64 	.word	0x20001a64

0802056c <LmhpRemoteMcastSetupProcess>:
{
 802056c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802056e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8020572:	b672      	cpsid	i
  state = LmhpRemoteMcastSetupState.SessionState;
 8020574:	4c12      	ldr	r4, [pc, #72]	; (80205c0 <LmhpRemoteMcastSetupProcess+0x54>)
 8020576:	78a3      	ldrb	r3, [r4, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020578:	f382 8810 	msr	PRIMASK, r2
  switch (state)
 802057c:	2b01      	cmp	r3, #1
 802057e:	d002      	beq.n	8020586 <LmhpRemoteMcastSetupProcess+0x1a>
 8020580:	2b02      	cmp	r3, #2
 8020582:	d015      	beq.n	80205b0 <LmhpRemoteMcastSetupProcess+0x44>
}
 8020584:	bd10      	pop	{r4, pc}
      if (LmHandlerRequestClass(CLASS_C) == LORAMAC_HANDLER_SUCCESS)
 8020586:	2002      	movs	r0, #2
 8020588:	f7fe fd36 	bl	801eff8 <LmHandlerRequestClass>
 802058c:	2800      	cmp	r0, #0
 802058e:	d1f9      	bne.n	8020584 <LmhpRemoteMcastSetupProcess+0x18>
        TimerSetValue(&SessionStopTimer, (1 << McSessionData[0].SessionTimeout) * 1000);
 8020590:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
        LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_IDLE;
 8020594:	70a0      	strb	r0, [r4, #2]
        TimerSetValue(&SessionStopTimer, (1 << McSessionData[0].SessionTimeout) * 1000);
 8020596:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 802059a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 802059e:	4099      	lsls	r1, r3
 80205a0:	f006 fc2a 	bl	8026df8 <UTIL_TIMER_SetPeriod>
        TimerStart(&SessionStopTimer);
 80205a4:	f104 0054 	add.w	r0, r4, #84	; 0x54
}
 80205a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        TimerStart(&SessionStopTimer);
 80205ac:	f006 bbea 	b.w	8026d84 <UTIL_TIMER_Start>
      if (LmHandlerRequestClass(CLASS_A) == LORAMAC_HANDLER_SUCCESS)
 80205b0:	2000      	movs	r0, #0
 80205b2:	f7fe fd21 	bl	801eff8 <LmHandlerRequestClass>
 80205b6:	2800      	cmp	r0, #0
 80205b8:	d1e4      	bne.n	8020584 <LmhpRemoteMcastSetupProcess+0x18>
        LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_IDLE;
 80205ba:	70a0      	strb	r0, [r4, #2]
}
 80205bc:	e7e2      	b.n	8020584 <LmhpRemoteMcastSetupProcess+0x18>
 80205be:	bf00      	nop
 80205c0:	20001a64 	.word	0x20001a64

080205c4 <OnSessionStartTimer>:
{
 80205c4:	b510      	push	{r4, lr}
  TimerStop(&SessionStartTimer);
 80205c6:	4c05      	ldr	r4, [pc, #20]	; (80205dc <OnSessionStartTimer+0x18>)
 80205c8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80205cc:	f006 fb8a 	bl	8026ce4 <UTIL_TIMER_Stop>
  LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_START;
 80205d0:	2301      	movs	r3, #1
 80205d2:	70a3      	strb	r3, [r4, #2]
}
 80205d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LmhpRemoteMcastSetupProcess();
 80205d8:	f7ff bfc8 	b.w	802056c <LmhpRemoteMcastSetupProcess>
 80205dc:	20001a64 	.word	0x20001a64

080205e0 <LmhpRemoteMcastSetupPackageFactory>:
}
 80205e0:	4800      	ldr	r0, [pc, #0]	; (80205e4 <LmhpRemoteMcastSetupPackageFactory+0x4>)
 80205e2:	4770      	bx	lr
 80205e4:	200011d0 	.word	0x200011d0

080205e8 <NvmCtxMgmtEvent>:
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80205e8:	4770      	bx	lr

080205ea <NvmCtxMgmtStore>:

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80205ea:	2001      	movs	r0, #1
 80205ec:	4770      	bx	lr

080205ee <NvmCtxMgmtRestore>:
 80205ee:	2001      	movs	r0, #1
 80205f0:	4770      	bx	lr
	...

080205f4 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 80205f4:	4b05      	ldr	r3, [pc, #20]	; (802060c <OnRadioRxError+0x18>)
 80205f6:	781a      	ldrb	r2, [r3, #0]
 80205f8:	f042 0202 	orr.w	r2, r2, #2
 80205fc:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80205fe:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8020602:	b113      	cbz	r3, 802060a <OnRadioRxError+0x16>
 8020604:	68db      	ldr	r3, [r3, #12]
 8020606:	b103      	cbz	r3, 802060a <OnRadioRxError+0x16>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8020608:	4718      	bx	r3
    }
}
 802060a:	4770      	bx	lr
 802060c:	20001ad0 	.word	0x20001ad0

08020610 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8020610:	4a05      	ldr	r2, [pc, #20]	; (8020628 <UpdateRxSlotIdleState+0x18>)
 8020612:	f8d2 3488 	ldr.w	r3, [r2, #1160]	; 0x488
 8020616:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 802061a:	2b02      	cmp	r3, #2
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 802061c:	bf18      	it	ne
 802061e:	2306      	movne	r3, #6
 8020620:	f882 3484 	strb.w	r3, [r2, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8020624:	4770      	bx	lr
 8020626:	bf00      	nop
 8020628:	20001ad0 	.word	0x20001ad0

0802062c <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 802062c:	4b10      	ldr	r3, [pc, #64]	; (8020670 <StopRetransmission+0x44>)
 802062e:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8020632:	0792      	lsls	r2, r2, #30
 8020634:	d503      	bpl.n	802063e <StopRetransmission+0x12>
 8020636:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 802063a:	2a01      	cmp	r2, #1
 802063c:	d909      	bls.n	8020652 <StopRetransmission+0x26>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 802063e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8020642:	f892 107e 	ldrb.w	r1, [r2, #126]	; 0x7e
 8020646:	b121      	cbz	r1, 8020652 <StopRetransmission+0x26>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8020648:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 802064c:	3101      	adds	r1, #1
 802064e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8020652:	2200      	movs	r2, #0
 8020654:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.NodeAckRequested = false;
 8020658:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.AckTimeoutRetry = false;
 802065c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8020660:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8020664:	f022 0202 	bic.w	r2, r2, #2
 8020668:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    return true;
}
 802066c:	2001      	movs	r0, #1
 802066e:	4770      	bx	lr
 8020670:	20001ad0 	.word	0x20001ad0

08020674 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8020674:	4b03      	ldr	r3, [pc, #12]	; (8020684 <CallNvmCtxCallback+0x10>)
 8020676:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 802067a:	b113      	cbz	r3, 8020682 <CallNvmCtxCallback+0xe>
 802067c:	689b      	ldr	r3, [r3, #8]
 802067e:	b103      	cbz	r3, 8020682 <CallNvmCtxCallback+0xe>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8020680:	4718      	bx	r3
    }
}
 8020682:	4770      	bx	lr
 8020684:	20001ad0 	.word	0x20001ad0

08020688 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8020688:	2000      	movs	r0, #0
 802068a:	f7ff bff3 	b.w	8020674 <CallNvmCtxCallback>

0802068e <EventRegionNvmCtxChanged>:
}

static void EventRegionNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 802068e:	2001      	movs	r0, #1
 8020690:	f7ff bff0 	b.w	8020674 <CallNvmCtxCallback>

08020694 <EventCryptoNvmCtxChanged>:
}

static void EventCryptoNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8020694:	2002      	movs	r0, #2
 8020696:	f7ff bfed 	b.w	8020674 <CallNvmCtxCallback>

0802069a <EventSecureElementNvmCtxChanged>:
}

static void EventSecureElementNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 802069a:	2003      	movs	r0, #3
 802069c:	f7ff bfea 	b.w	8020674 <CallNvmCtxCallback>

080206a0 <EventCommandsNvmCtxChanged>:
}

static void EventCommandsNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 80206a0:	2004      	movs	r0, #4
 80206a2:	f7ff bfe7 	b.w	8020674 <CallNvmCtxCallback>

080206a6 <EventClassBNvmCtxChanged>:
}

static void EventClassBNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 80206a6:	2005      	movs	r0, #5
 80206a8:	f7ff bfe4 	b.w	8020674 <CallNvmCtxCallback>

080206ac <EventConfirmQueueNvmCtxChanged>:
}

static void EventConfirmQueueNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 80206ac:	2006      	movs	r0, #6
 80206ae:	f7ff bfe1 	b.w	8020674 <CallNvmCtxCallback>
	...

080206b4 <GetMaxAppPayloadWithoutFOptsLength>:
{
 80206b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80206b6:	4b0d      	ldr	r3, [pc, #52]	; (80206ec <GetMaxAppPayloadWithoutFOptsLength+0x38>)
    getPhy.Datarate = datarate;
 80206b8:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80206bc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80206c0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80206c4:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80206c8:	220d      	movs	r2, #13
 80206ca:	f88d 2008 	strb.w	r2, [sp, #8]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 80206ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 80206d2:	b112      	cbz	r2, 80206da <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80206d4:	220e      	movs	r2, #14
 80206d6:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80206da:	7818      	ldrb	r0, [r3, #0]
 80206dc:	a902      	add	r1, sp, #8
 80206de:	f003 fc7c 	bl	8023fda <RegionGetPhyParam>
}
 80206e2:	b2c0      	uxtb	r0, r0
 80206e4:	b005      	add	sp, #20
 80206e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80206ea:	bf00      	nop
 80206ec:	20001ad0 	.word	0x20001ad0

080206f0 <OnAckTimeoutTimerEvent>:
{
 80206f0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 80206f2:	4c10      	ldr	r4, [pc, #64]	; (8020734 <OnAckTimeoutTimerEvent+0x44>)
 80206f4:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 80206f8:	f006 faf4 	bl	8026ce4 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80206fc:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8020700:	4623      	mov	r3, r4
 8020702:	b112      	cbz	r2, 802070a <OnAckTimeoutTimerEvent+0x1a>
        MacCtx.AckTimeoutRetry = true;
 8020704:	2201      	movs	r2, #1
 8020706:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 802070a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 802070e:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 8020712:	2a02      	cmp	r2, #2
        MacCtx.MacFlags.Bits.MacDone = 1;
 8020714:	bf02      	ittt	eq
 8020716:	f893 2485 	ldrbeq.w	r2, [r3, #1157]	; 0x485
 802071a:	f042 0220 	orreq.w	r2, r2, #32
 802071e:	f883 2485 	strbeq.w	r2, [r3, #1157]	; 0x485
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8020722:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8020726:	b123      	cbz	r3, 8020732 <OnAckTimeoutTimerEvent+0x42>
 8020728:	68db      	ldr	r3, [r3, #12]
 802072a:	b113      	cbz	r3, 8020732 <OnAckTimeoutTimerEvent+0x42>
}
 802072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8020730:	4718      	bx	r3
}
 8020732:	bd10      	pop	{r4, pc}
 8020734:	20001ad0 	.word	0x20001ad0

08020738 <PrepareRxDoneAbort>:
{
 8020738:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 802073a:	4c0c      	ldr	r4, [pc, #48]	; (802076c <PrepareRxDoneAbort+0x34>)
 802073c:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 8020740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8020744:	f8c4 2344 	str.w	r2, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == true )
 8020748:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 802074c:	b112      	cbz	r2, 8020754 <PrepareRxDoneAbort+0x1c>
        OnAckTimeoutTimerEvent( NULL );
 802074e:	2000      	movs	r0, #0
 8020750:	f7ff ffce 	bl	80206f0 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8020754:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8020758:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 802075c:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8020760:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
}
 8020764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 8020768:	f7ff bf52 	b.w	8020610 <UpdateRxSlotIdleState>
 802076c:	20001ad0 	.word	0x20001ad0

08020770 <HandleRadioRxErrorTimeout>:
{
 8020770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8020774:	4c30      	ldr	r4, [pc, #192]	; (8020838 <HandleRadioRxErrorTimeout+0xc8>)
 8020776:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 802077a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 802077e:	2b02      	cmp	r3, #2
{
 8020780:	4607      	mov	r7, r0
 8020782:	460e      	mov	r6, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8020784:	d002      	beq.n	802078c <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 8020786:	4b2d      	ldr	r3, [pc, #180]	; (802083c <HandleRadioRxErrorTimeout+0xcc>)
 8020788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802078a:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 802078c:	f002 fd05 	bl	802319a <LoRaMacClassBIsBeaconExpected>
 8020790:	4605      	mov	r5, r0
 8020792:	b128      	cbz	r0, 80207a0 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8020794:	2002      	movs	r0, #2
 8020796:	f002 fcf6 	bl	8023186 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 802079a:	2000      	movs	r0, #0
 802079c:	f002 fcf8 	bl	8023190 <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80207a0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80207a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80207a8:	2b01      	cmp	r3, #1
 80207aa:	d117      	bne.n	80207dc <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80207ac:	f002 fcf7 	bl	802319e <LoRaMacClassBIsPingExpected>
 80207b0:	4680      	mov	r8, r0
 80207b2:	b130      	cbz	r0, 80207c2 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80207b4:	2000      	movs	r0, #0
 80207b6:	f002 fce7 	bl	8023188 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80207ba:	2000      	movs	r0, #0
 80207bc:	f002 fce9 	bl	8023192 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80207c0:	4645      	mov	r5, r8
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80207c2:	f002 fcee 	bl	80231a2 <LoRaMacClassBIsMulticastExpected>
 80207c6:	b148      	cbz	r0, 80207dc <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80207c8:	2000      	movs	r0, #0
 80207ca:	f002 fcde 	bl	802318a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80207ce:	2000      	movs	r0, #0
 80207d0:	f002 fce0 	bl	8023194 <LoRaMacClassBMulticastSlotTimerEvent>
}
 80207d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 80207d8:	f7ff bf1a 	b.w	8020610 <UpdateRxSlotIdleState>
    if( classBRx == false )
 80207dc:	2d00      	cmp	r5, #0
 80207de:	d1f9      	bne.n	80207d4 <HandleRadioRxErrorTimeout+0x64>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80207e0:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 80207e4:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80207e8:	b9ca      	cbnz	r2, 802081e <HandleRadioRxErrorTimeout+0xae>
            if( MacCtx.NodeAckRequested == true )
 80207ea:	b10b      	cbz	r3, 80207f0 <HandleRadioRxErrorTimeout+0x80>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80207ec:	f884 7441 	strb.w	r7, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80207f0:	4638      	mov	r0, r7
 80207f2:	f002 feb7 	bl	8023564 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80207f6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80207fa:	f8d3 0150 	ldr.w	r0, [r3, #336]	; 0x150
 80207fe:	f006 fa37 	bl	8026c70 <UTIL_TIMER_GetElapsedTime>
 8020802:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8020806:	4298      	cmp	r0, r3
 8020808:	d3e4      	bcc.n	80207d4 <HandleRadioRxErrorTimeout+0x64>
                TimerStop( &MacCtx.RxWindowTimer2 );
 802080a:	480d      	ldr	r0, [pc, #52]	; (8020840 <HandleRadioRxErrorTimeout+0xd0>)
 802080c:	f006 fa6a 	bl	8026ce4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8020810:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8020814:	f043 0320 	orr.w	r3, r3, #32
 8020818:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 802081c:	e7da      	b.n	80207d4 <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 802081e:	b10b      	cbz	r3, 8020824 <HandleRadioRxErrorTimeout+0xb4>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8020820:	f884 6441 	strb.w	r6, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8020824:	4630      	mov	r0, r6
 8020826:	f002 fe9d 	bl	8023564 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 802082a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 802082e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8020832:	2b02      	cmp	r3, #2
 8020834:	d1ec      	bne.n	8020810 <HandleRadioRxErrorTimeout+0xa0>
 8020836:	e7cd      	b.n	80207d4 <HandleRadioRxErrorTimeout+0x64>
 8020838:	20001ad0 	.word	0x20001ad0
 802083c:	08027928 	.word	0x08027928
 8020840:	20001e6c 	.word	0x20001e6c

08020844 <ResetMacParameters>:
{
 8020844:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8020846:	4c2d      	ldr	r4, [pc, #180]	; (80208fc <ResetMacParameters+0xb8>)
    MacCtx.ChannelsNbTransCounter = 0;
 8020848:	4a2d      	ldr	r2, [pc, #180]	; (8020900 <ResetMacParameters+0xbc>)
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 802084a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 802084e:	2500      	movs	r5, #0
 8020850:	f883 5164 	strb.w	r5, [r3, #356]	; 0x164
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8020854:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
    MacCtx.ChannelsNbTransCounter = 0;
 8020858:	f8c4 2414 	str.w	r2, [r4, #1044]	; 0x414
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 802085c:	8899      	ldrh	r1, [r3, #4]
 802085e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8020862:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 8020866:	f883 10a5 	strb.w	r1, [r3, #165]	; 0xa5
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 802086a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 802086e:	2201      	movs	r2, #1
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8020870:	f103 06a8 	add.w	r6, r3, #168	; 0xa8
    MacCtx.NvmCtx->MaxDCycle = 0;
 8020874:	f883 50c8 	strb.w	r5, [r3, #200]	; 0xc8
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8020878:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 802087c:	e886 0003 	stmia.w	r6, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8020880:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8020884:	f103 06b0 	add.w	r6, r3, #176	; 0xb0
 8020888:	e886 0003 	stmia.w	r6, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 802088c:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 802088e:	f8a3 10b8 	strh.w	r1, [r3, #184]	; 0xb8
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8020892:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8020894:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8020898:	6c19      	ldr	r1, [r3, #64]	; 0x40
 802089a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 802089e:	f88d 2004 	strb.w	r2, [sp, #4]
    MacCtx.NodeAckRequested = false;
 80208a2:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
    params.NvmCtx = NULL;
 80208a6:	9500      	str	r5, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80208a8:	7818      	ldrb	r0, [r3, #0]
    MacCtx.NvmCtx->SrvAckRequested = false;
 80208aa:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80208ae:	4669      	mov	r1, sp
 80208b0:	f003 fba3 	bl	8023ffa <RegionInitDefaults>
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80208b4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80208b8:	f884 53d0 	strb.w	r5, [r4, #976]	; 0x3d0
    MacCtx.Channel = 0;
 80208bc:	f884 5419 	strb.w	r5, [r4, #1049]	; 0x419
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80208c0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80208c4:	f8c4 23d4 	str.w	r2, [r4, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80208c8:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80208cc:	f884 23e0 	strb.w	r2, [r4, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80208d0:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80208d4:	f884 33e1 	strb.w	r3, [r4, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80208d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80208dc:	f8a4 33e2 	strh.w	r3, [r4, #994]	; 0x3e2
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80208e0:	f504 7674 	add.w	r6, r4, #976	; 0x3d0
 80208e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80208e6:	f504 7579 	add.w	r5, r4, #996	; 0x3e4
 80208ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80208ec:	6833      	ldr	r3, [r6, #0]
 80208ee:	602b      	str	r3, [r5, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80208f0:	f240 2301 	movw	r3, #513	; 0x201
 80208f4:	f8a4 33f6 	strh.w	r3, [r4, #1014]	; 0x3f6
}
 80208f8:	b002      	add	sp, #8
 80208fa:	bd70      	pop	{r4, r5, r6, pc}
 80208fc:	20001ad0 	.word	0x20001ad0
 8020900:	00010100 	.word	0x00010100

08020904 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8020904:	4b09      	ldr	r3, [pc, #36]	; (802092c <OnRadioRxTimeout+0x28>)
 8020906:	781a      	ldrb	r2, [r3, #0]
 8020908:	f042 0201 	orr.w	r2, r2, #1
{
 802090c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 802090e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8020910:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8020914:	b113      	cbz	r3, 802091c <OnRadioRxTimeout+0x18>
 8020916:	68db      	ldr	r3, [r3, #12]
 8020918:	b103      	cbz	r3, 802091c <OnRadioRxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 802091a:	4798      	blx	r3
}
 802091c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8020920:	4b03      	ldr	r3, [pc, #12]	; (8020930 <OnRadioRxTimeout+0x2c>)
 8020922:	2201      	movs	r2, #1
 8020924:	2100      	movs	r1, #0
 8020926:	2002      	movs	r0, #2
 8020928:	f005 bfca 	b.w	80268c0 <UTIL_ADV_TRACE_COND_FSend>
 802092c:	20001ad0 	.word	0x20001ad0
 8020930:	080280b6 	.word	0x080280b6

08020934 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8020934:	4b09      	ldr	r3, [pc, #36]	; (802095c <OnRadioTxTimeout+0x28>)
 8020936:	781a      	ldrb	r2, [r3, #0]
 8020938:	f042 0204 	orr.w	r2, r2, #4
{
 802093c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 802093e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8020940:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8020944:	b113      	cbz	r3, 802094c <OnRadioTxTimeout+0x18>
 8020946:	68db      	ldr	r3, [r3, #12]
 8020948:	b103      	cbz	r3, 802094c <OnRadioTxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 802094a:	4798      	blx	r3
}
 802094c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8020950:	4b03      	ldr	r3, [pc, #12]	; (8020960 <OnRadioTxTimeout+0x2c>)
 8020952:	2201      	movs	r2, #1
 8020954:	2100      	movs	r1, #0
 8020956:	2002      	movs	r0, #2
 8020958:	f005 bfb2 	b.w	80268c0 <UTIL_ADV_TRACE_COND_FSend>
 802095c:	20001ad0 	.word	0x20001ad0
 8020960:	080280c6 	.word	0x080280c6

08020964 <OnRadioRxDone>:
{
 8020964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020968:	4616      	mov	r6, r2
 802096a:	461d      	mov	r5, r3
 802096c:	4680      	mov	r8, r0
 802096e:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8020970:	f006 f974 	bl	8026c5c <UTIL_TIMER_GetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 8020974:	4b0c      	ldr	r3, [pc, #48]	; (80209a8 <OnRadioRxDone+0x44>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8020976:	4c0d      	ldr	r4, [pc, #52]	; (80209ac <OnRadioRxDone+0x48>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8020978:	781a      	ldrb	r2, [r3, #0]
    RxDoneParams.Size = size;
 802097a:	8127      	strh	r7, [r4, #8]
    LoRaMacRadioEvents.Events.RxDone = 1;
 802097c:	f042 0208 	orr.w	r2, r2, #8
 8020980:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8020982:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
    RxDoneParams.Rssi = rssi;
 8020986:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Payload = payload;
 8020988:	e9c4 0800 	strd	r0, r8, [r4]
    RxDoneParams.Snr = snr;
 802098c:	7325      	strb	r5, [r4, #12]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 802098e:	b113      	cbz	r3, 8020996 <OnRadioRxDone+0x32>
 8020990:	68db      	ldr	r3, [r3, #12]
 8020992:	b103      	cbz	r3, 8020996 <OnRadioRxDone+0x32>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8020994:	4798      	blx	r3
}
 8020996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 802099a:	4b05      	ldr	r3, [pc, #20]	; (80209b0 <OnRadioRxDone+0x4c>)
 802099c:	2201      	movs	r2, #1
 802099e:	2100      	movs	r1, #0
 80209a0:	2002      	movs	r0, #2
 80209a2:	f005 bf8d 	b.w	80268c0 <UTIL_ADV_TRACE_COND_FSend>
 80209a6:	bf00      	nop
 80209a8:	20001ad0 	.word	0x20001ad0
 80209ac:	20002a7c 	.word	0x20002a7c
 80209b0:	080280d6 	.word	0x080280d6

080209b4 <OnRadioTxDone>:
{
 80209b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80209b6:	f006 f951 	bl	8026c5c <UTIL_TIMER_GetCurrentTime>
 80209ba:	4b10      	ldr	r3, [pc, #64]	; (80209fc <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80209bc:	4c10      	ldr	r4, [pc, #64]	; (8020a00 <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80209be:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80209c0:	466d      	mov	r5, sp
 80209c2:	4628      	mov	r0, r5
 80209c4:	f006 f8ea 	bl	8026b9c <SysTimeGet>
 80209c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80209cc:	f504 734f 	add.w	r3, r4, #828	; 0x33c
 80209d0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80209d4:	7823      	ldrb	r3, [r4, #0]
 80209d6:	f043 0310 	orr.w	r3, r3, #16
 80209da:	7023      	strb	r3, [r4, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80209dc:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
 80209e0:	b113      	cbz	r3, 80209e8 <OnRadioTxDone+0x34>
 80209e2:	68db      	ldr	r3, [r3, #12]
 80209e4:	b103      	cbz	r3, 80209e8 <OnRadioTxDone+0x34>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80209e6:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80209e8:	4b06      	ldr	r3, [pc, #24]	; (8020a04 <OnRadioTxDone+0x50>)
 80209ea:	2201      	movs	r2, #1
 80209ec:	2100      	movs	r1, #0
 80209ee:	2002      	movs	r0, #2
}
 80209f0:	b003      	add	sp, #12
 80209f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80209f6:	f005 bf63 	b.w	80268c0 <UTIL_ADV_TRACE_COND_FSend>
 80209fa:	bf00      	nop
 80209fc:	20002a78 	.word	0x20002a78
 8020a00:	20001ad0 	.word	0x20001ad0
 8020a04:	080280e3 	.word	0x080280e3

08020a08 <ScheduleTx>:
{
 8020a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a0a:	b095      	sub	sp, #84	; 0x54
 8020a0c:	4606      	mov	r6, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8020a0e:	f002 fbc4 	bl	802319a <LoRaMacClassBIsBeaconExpected>
 8020a12:	2800      	cmp	r0, #0
 8020a14:	f040 8177 	bne.w	8020d06 <ScheduleTx+0x2fe>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8020a18:	4cbc      	ldr	r4, [pc, #752]	; (8020d0c <ScheduleTx+0x304>)
 8020a1a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020a1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8020a22:	2b01      	cmp	r3, #1
 8020a24:	d00b      	beq.n	8020a3e <ScheduleTx+0x36>
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8020a26:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020a2a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8020a2e:	b192      	cbz	r2, 8020a56 <ScheduleTx+0x4e>
    switch( MacCtx.TxMsg.Type )
 8020a30:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8020a34:	b1c3      	cbz	r3, 8020a68 <ScheduleTx+0x60>
 8020a36:	2b04      	cmp	r3, #4
 8020a38:	d078      	beq.n	8020b2c <ScheduleTx+0x124>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8020a3a:	2503      	movs	r5, #3
 8020a3c:	e003      	b.n	8020a46 <ScheduleTx+0x3e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8020a3e:	f002 fbae 	bl	802319e <LoRaMacClassBIsPingExpected>
 8020a42:	b118      	cbz	r0, 8020a4c <ScheduleTx+0x44>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8020a44:	250f      	movs	r5, #15
}
 8020a46:	4628      	mov	r0, r5
 8020a48:	b015      	add	sp, #84	; 0x54
 8020a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8020a4c:	f002 fba9 	bl	80231a2 <LoRaMacClassBIsMulticastExpected>
 8020a50:	2800      	cmp	r0, #0
 8020a52:	d0e8      	beq.n	8020a26 <ScheduleTx+0x1e>
 8020a54:	e7f6      	b.n	8020a44 <ScheduleTx+0x3c>
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8020a56:	f8b3 214c 	ldrh.w	r2, [r3, #332]	; 0x14c
 8020a5a:	1e51      	subs	r1, r2, #1
 8020a5c:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
 8020a60:	434a      	muls	r2, r1
 8020a62:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8020a66:	e7e3      	b.n	8020a30 <ScheduleTx+0x28>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8020a68:	48a9      	ldr	r0, [pc, #676]	; (8020d10 <ScheduleTx+0x308>)
 8020a6a:	f003 fa12 	bl	8023e92 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8020a6e:	2800      	cmp	r0, #0
 8020a70:	f040 8145 	bne.w	8020cfe <ScheduleTx+0x2f6>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8020a74:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8020a78:	80a3      	strh	r3, [r4, #4]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8020a7a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8020a7e:	af08      	add	r7, sp, #32
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8020a80:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8020a84:	920e      	str	r2, [sp, #56]	; 0x38
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8020a86:	4638      	mov	r0, r7
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8020a88:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8020a8c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8020a90:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8020a94:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8020a98:	f006 f8a6 	bl	8026be8 <SysTimeGetMcuTime>
 8020a9c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020aa0:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8020aa4:	9200      	str	r2, [sp, #0]
 8020aa6:	ad04      	add	r5, sp, #16
 8020aa8:	e897 0006 	ldmia.w	r7, {r1, r2}
 8020aac:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8020ab0:	4628      	mov	r0, r5
 8020ab2:	f006 f82e 	bl	8026b12 <SysTimeSub>
 8020ab6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020aba:	ab11      	add	r3, sp, #68	; 0x44
 8020abc:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8020ac0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020ac4:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8020ac8:	920f      	str	r2, [sp, #60]	; 0x3c
    nextChan.LastTxIsJoinRequest = false;
 8020aca:	2200      	movs	r2, #0
 8020acc:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    nextChan.PktLen = MacCtx.PktBufferLen;
 8020ad0:	88a2      	ldrh	r2, [r4, #4]
 8020ad2:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8020ad6:	f893 2164 	ldrb.w	r2, [r3, #356]	; 0x164
    nextChan.Joined = true;
 8020ada:	2101      	movs	r1, #1
 8020adc:	f88d 1041 	strb.w	r1, [sp, #65]	; 0x41
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8020ae0:	b91a      	cbnz	r2, 8020aea <ScheduleTx+0xe2>
        nextChan.LastTxIsJoinRequest = true;
 8020ae2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
        nextChan.Joined = false;
 8020ae6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8020aea:	7818      	ldrb	r0, [r3, #0]
 8020aec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8020af0:	9300      	str	r3, [sp, #0]
 8020af2:	4b88      	ldr	r3, [pc, #544]	; (8020d14 <ScheduleTx+0x30c>)
 8020af4:	a90e      	add	r1, sp, #56	; 0x38
 8020af6:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8020afa:	f003 fafd 	bl	80240f8 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8020afe:	4605      	mov	r5, r0
 8020b00:	b1c0      	cbz	r0, 8020b34 <ScheduleTx+0x12c>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8020b02:	280b      	cmp	r0, #11
 8020b04:	d19f      	bne.n	8020a46 <ScheduleTx+0x3e>
 8020b06:	2e00      	cmp	r6, #0
 8020b08:	d09d      	beq.n	8020a46 <ScheduleTx+0x3e>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8020b0a:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
 8020b0e:	b159      	cbz	r1, 8020b28 <ScheduleTx+0x120>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8020b10:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8020b14:	4880      	ldr	r0, [pc, #512]	; (8020d18 <ScheduleTx+0x310>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8020b16:	f043 0320 	orr.w	r3, r3, #32
 8020b1a:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8020b1e:	f006 f96b 	bl	8026df8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8020b22:	487d      	ldr	r0, [pc, #500]	; (8020d18 <ScheduleTx+0x310>)
 8020b24:	f006 f92e 	bl	8026d84 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 8020b28:	2500      	movs	r5, #0
 8020b2a:	e78c      	b.n	8020a46 <ScheduleTx+0x3e>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8020b2c:	4878      	ldr	r0, [pc, #480]	; (8020d10 <ScheduleTx+0x308>)
 8020b2e:	f003 f9e4 	bl	8023efa <LoRaMacSerializerData>
 8020b32:	e79c      	b.n	8020a6e <ScheduleTx+0x66>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8020b34:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 8020b38:	4e78      	ldr	r6, [pc, #480]	; (8020d1c <ScheduleTx+0x314>)
 8020b3a:	780f      	ldrb	r7, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8020b3c:	f991 30a5 	ldrsb.w	r3, [r1, #165]	; 0xa5
 8020b40:	f991 2085 	ldrsb.w	r2, [r1, #133]	; 0x85
 8020b44:	f891 10b9 	ldrb.w	r1, [r1, #185]	; 0xb9
 8020b48:	4638      	mov	r0, r7
 8020b4a:	f003 faeb 	bl	8024124 <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8020b4e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8020b52:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8020b56:	9600      	str	r6, [sp, #0]
 8020b58:	b241      	sxtb	r1, r0
 8020b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020b5e:	4638      	mov	r0, r7
 8020b60:	f003 fa6e 	bl	8024040 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8020b64:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020b68:	3614      	adds	r6, #20
 8020b6a:	f993 10ac 	ldrsb.w	r1, [r3, #172]	; 0xac
 8020b6e:	7818      	ldrb	r0, [r3, #0]
 8020b70:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8020b74:	9600      	str	r6, [sp, #0]
 8020b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020b7a:	f003 fa61 	bl	8024040 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8020b7e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020b82:	f8d4 63c8 	ldr.w	r6, [r4, #968]	; 0x3c8
 8020b86:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8020b8a:	f8d4 03dc 	ldr.w	r0, [r4, #988]	; 0x3dc
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8020b8e:	4431      	add	r1, r6
 8020b90:	f8c4 13b4 	str.w	r1, [r4, #948]	; 0x3b4
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8020b94:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8020b98:	4401      	add	r1, r0
 8020b9a:	f8c4 13b8 	str.w	r1, [r4, #952]	; 0x3b8
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8020b9e:	f893 1164 	ldrb.w	r1, [r3, #356]	; 0x164
 8020ba2:	b949      	cbnz	r1, 8020bb8 <ScheduleTx+0x1b0>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8020ba4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8020ba8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8020bac:	4432      	add	r2, r6
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8020bae:	4403      	add	r3, r0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8020bb0:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8020bb4:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
    size_t macCmdsSize = 0;
 8020bb8:	2300      	movs	r3, #0
 8020bba:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8020bbc:	b191      	cbz	r1, 8020be4 <ScheduleTx+0x1dc>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8020bbe:	a80a      	add	r0, sp, #40	; 0x28
 8020bc0:	f002 fbde 	bl	8023380 <LoRaMacCommandsGetSizeSerializedCmds>
 8020bc4:	2800      	cmp	r0, #0
 8020bc6:	d14f      	bne.n	8020c68 <ScheduleTx+0x260>
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8020bc8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020bcc:	f894 623b 	ldrb.w	r6, [r4, #571]	; 0x23b
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8020bd0:	f993 0085 	ldrsb.w	r0, [r3, #133]	; 0x85
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8020bd4:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8020bd8:	f7ff fd6c 	bl	80206b4 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8020bdc:	443e      	add	r6, r7
 8020bde:	b280      	uxth	r0, r0
 8020be0:	42b0      	cmp	r0, r6
 8020be2:	d33f      	bcc.n	8020c64 <ScheduleTx+0x25c>
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8020be4:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
    return SendFrameOnChannel( MacCtx.Channel );
 8020be8:	f894 6419 	ldrb.w	r6, [r4, #1049]	; 0x419
    txConfig.Channel = channel;
 8020bec:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
    int8_t txPower = 0;
 8020bf0:	2300      	movs	r3, #0
 8020bf2:	f88d 301b 	strb.w	r3, [sp, #27]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8020bf6:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
 8020bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8020bfe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8020c02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8020c06:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8020c0a:	930b      	str	r3, [sp, #44]	; 0x2c
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8020c0c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8020c10:	930c      	str	r3, [sp, #48]	; 0x30
    txConfig.PktLen = MacCtx.PktBufferLen;
 8020c12:	88a3      	ldrh	r3, [r4, #4]
 8020c14:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8020c18:	7800      	ldrb	r0, [r0, #0]
 8020c1a:	4b41      	ldr	r3, [pc, #260]	; (8020d20 <ScheduleTx+0x318>)
 8020c1c:	f10d 021b 	add.w	r2, sp, #27
 8020c20:	a90a      	add	r1, sp, #40	; 0x28
 8020c22:	f003 fa25 	bl	8024070 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8020c26:	2301      	movs	r3, #1
 8020c28:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8020c2c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020c30:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8020c34:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8020c38:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8020c3c:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8020c40:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 8020c44:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8020c48:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8020c4c:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8020c50:	f002 faa9 	bl	80231a6 <LoRaMacClassBIsBeaconModeActive>
 8020c54:	b150      	cbz	r0, 8020c6c <ScheduleTx+0x264>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8020c56:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8020c5a:	f002 fab6 	bl	80231ca <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8020c5e:	b128      	cbz	r0, 8020c6c <ScheduleTx+0x264>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8020c60:	2510      	movs	r5, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8020c62:	e6f0      	b.n	8020a46 <ScheduleTx+0x3e>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8020c64:	2508      	movs	r5, #8
 8020c66:	e6ee      	b.n	8020a46 <ScheduleTx+0x3e>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8020c68:	2513      	movs	r5, #19
 8020c6a:	e6ec      	b.n	8020a46 <ScheduleTx+0x3e>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8020c6c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020c70:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8020c74:	2b01      	cmp	r3, #1
 8020c76:	d101      	bne.n	8020c7c <ScheduleTx+0x274>
        LoRaMacClassBStopRxSlots( );
 8020c78:	f002 faa9 	bl	80231ce <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 8020c7c:	f002 fa96 	bl	80231ac <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8020c80:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020c84:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 8020c88:	f993 6085 	ldrsb.w	r6, [r3, #133]	; 0x85
    uint32_t fCntUp = 0;
 8020c8c:	2300      	movs	r3, #0
 8020c8e:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 8020c90:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8020c94:	b1c3      	cbz	r3, 8020cc8 <ScheduleTx+0x2c0>
 8020c96:	2b04      	cmp	r3, #4
 8020c98:	f47f aecf 	bne.w	8020a3a <ScheduleTx+0x32>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8020c9c:	a807      	add	r0, sp, #28
 8020c9e:	9203      	str	r2, [sp, #12]
 8020ca0:	f002 fe10 	bl	80238c4 <LoRaMacCryptoGetFCntUp>
 8020ca4:	bb68      	cbnz	r0, 8020d02 <ScheduleTx+0x2fa>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8020ca6:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8020caa:	9a03      	ldr	r2, [sp, #12]
 8020cac:	b91b      	cbnz	r3, 8020cb6 <ScheduleTx+0x2ae>
 8020cae:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8020cb2:	2b01      	cmp	r3, #1
 8020cb4:	d902      	bls.n	8020cbc <ScheduleTx+0x2b4>
                fCntUp -= 1;
 8020cb6:	9b07      	ldr	r3, [sp, #28]
 8020cb8:	3b01      	subs	r3, #1
 8020cba:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8020cbc:	4b14      	ldr	r3, [pc, #80]	; (8020d10 <ScheduleTx+0x308>)
 8020cbe:	9807      	ldr	r0, [sp, #28]
 8020cc0:	b2f1      	uxtb	r1, r6
 8020cc2:	f002 fe7f 	bl	80239c4 <LoRaMacCryptoSecureMessage>
 8020cc6:	e002      	b.n	8020cce <ScheduleTx+0x2c6>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8020cc8:	4811      	ldr	r0, [pc, #68]	; (8020d10 <ScheduleTx+0x308>)
 8020cca:	f002 fe4f 	bl	802396c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8020cce:	b9b0      	cbnz	r0, 8020cfe <ScheduleTx+0x2f6>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8020cd0:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8020cd4:	80a3      	strh	r3, [r4, #4]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8020cd6:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8020cda:	f043 0302 	orr.w	r3, r3, #2
 8020cde:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == false )
 8020ce2:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8020ce6:	b923      	cbnz	r3, 8020cf2 <ScheduleTx+0x2ea>
        MacCtx.ChannelsNbTransCounter++;
 8020ce8:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8020cec:	3301      	adds	r3, #1
 8020cee:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8020cf2:	4b0c      	ldr	r3, [pc, #48]	; (8020d24 <ScheduleTx+0x31c>)
 8020cf4:	7921      	ldrb	r1, [r4, #4]
 8020cf6:	480c      	ldr	r0, [pc, #48]	; (8020d28 <ScheduleTx+0x320>)
 8020cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020cfa:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8020cfc:	e6a3      	b.n	8020a46 <ScheduleTx+0x3e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8020cfe:	2511      	movs	r5, #17
 8020d00:	e6a1      	b.n	8020a46 <ScheduleTx+0x3e>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8020d02:	2512      	movs	r5, #18
 8020d04:	e69f      	b.n	8020a46 <ScheduleTx+0x3e>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8020d06:	250e      	movs	r5, #14
 8020d08:	e69d      	b.n	8020a46 <ScheduleTx+0x3e>
 8020d0a:	bf00      	nop
 8020d0c:	20001ad0 	.word	0x20001ad0
 8020d10:	20001bdc 	.word	0x20001bdc
 8020d14:	20001f5c 	.word	0x20001f5c
 8020d18:	20001e3c 	.word	0x20001e3c
 8020d1c:	20001e8c 	.word	0x20001e8c
 8020d20:	20001eec 	.word	0x20001eec
 8020d24:	08027928 	.word	0x08027928
 8020d28:	20001ad6 	.word	0x20001ad6

08020d2c <OnTxDelayedTimerEvent>:
{
 8020d2c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8020d2e:	4c12      	ldr	r4, [pc, #72]	; (8020d78 <OnTxDelayedTimerEvent+0x4c>)
 8020d30:	f504 705b 	add.w	r0, r4, #876	; 0x36c
 8020d34:	f005 ffd6 	bl	8026ce4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8020d38:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 8020d3c:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8020d3e:	f023 0320 	bic.w	r3, r3, #32
 8020d42:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 8020d46:	f7ff fe5f 	bl	8020a08 <ScheduleTx>
 8020d4a:	b1a0      	cbz	r0, 8020d76 <OnTxDelayedTimerEvent+0x4a>
 8020d4c:	280b      	cmp	r0, #11
 8020d4e:	d012      	beq.n	8020d76 <OnTxDelayedTimerEvent+0x4a>
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8020d50:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020d54:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8020d58:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8020d5c:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8020d5e:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8020d62:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8020d66:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8020d6a:	f002 fbfb 	bl	8023564 <LoRaMacConfirmQueueSetStatusCmn>
}
 8020d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8020d72:	f7ff bc5b 	b.w	802062c <StopRetransmission>
}
 8020d76:	bd10      	pop	{r4, pc}
 8020d78:	20001ad0 	.word	0x20001ad0

08020d7c <OpenContinuousRxCWindow>:
{
 8020d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8020d7e:	4c13      	ldr	r4, [pc, #76]	; (8020dcc <OpenContinuousRxCWindow+0x50>)
 8020d80:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020d84:	f504 7579 	add.w	r5, r4, #996	; 0x3e4
 8020d88:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8020d8c:	f993 10b4 	ldrsb.w	r1, [r3, #180]	; 0xb4
 8020d90:	7818      	ldrb	r0, [r3, #0]
 8020d92:	9500      	str	r5, [sp, #0]
 8020d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020d98:	f003 f952 	bl	8024040 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8020d9c:	f240 2301 	movw	r3, #513	; 0x201
 8020da0:	f8a4 33f6 	strh.w	r3, [r4, #1014]	; 0x3f6
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8020da4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020da8:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8020dac:	7818      	ldrb	r0, [r3, #0]
 8020dae:	4629      	mov	r1, r5
 8020db0:	f003 f955 	bl	802405e <RegionRxConfig>
 8020db4:	b138      	cbz	r0, 8020dc6 <OpenContinuousRxCWindow+0x4a>
        Radio.Rx( 0 ); // Continuous mode
 8020db6:	4b06      	ldr	r3, [pc, #24]	; (8020dd0 <OpenContinuousRxCWindow+0x54>)
 8020db8:	2000      	movs	r0, #0
 8020dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020dbc:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8020dbe:	f894 33f7 	ldrb.w	r3, [r4, #1015]	; 0x3f7
 8020dc2:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 8020dc6:	b003      	add	sp, #12
 8020dc8:	bd30      	pop	{r4, r5, pc}
 8020dca:	bf00      	nop
 8020dcc:	20001ad0 	.word	0x20001ad0
 8020dd0:	08027928 	.word	0x08027928

08020dd4 <SwitchClass>:
{
 8020dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 8020dd8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8020ea4 <SwitchClass+0xd0>
 8020ddc:	f8d8 5488 	ldr.w	r5, [r8, #1160]	; 0x488
 8020de0:	f895 407c 	ldrb.w	r4, [r5, #124]	; 0x7c
 8020de4:	2c01      	cmp	r4, #1
{
 8020de6:	4606      	mov	r6, r0
 8020de8:	4647      	mov	r7, r8
    switch( MacCtx.NvmCtx->DeviceClass )
 8020dea:	d046      	beq.n	8020e7a <SwitchClass+0xa6>
 8020dec:	2c02      	cmp	r4, #2
 8020dee:	d04e      	beq.n	8020e8e <SwitchClass+0xba>
 8020df0:	b934      	cbnz	r4, 8020e00 <SwitchClass+0x2c>
            if( deviceClass == CLASS_A )
 8020df2:	b938      	cbnz	r0, 8020e04 <SwitchClass+0x30>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8020df4:	e9d5 012a 	ldrd	r0, r1, [r5, #168]	; 0xa8
 8020df8:	f105 03b0 	add.w	r3, r5, #176	; 0xb0
 8020dfc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8020e00:	2403      	movs	r4, #3
 8020e02:	e037      	b.n	8020e74 <SwitchClass+0xa0>
            if( deviceClass == CLASS_B )
 8020e04:	2801      	cmp	r0, #1
 8020e06:	d038      	beq.n	8020e7a <SwitchClass+0xa6>
            if( deviceClass == CLASS_C )
 8020e08:	2802      	cmp	r0, #2
 8020e0a:	d1f9      	bne.n	8020e00 <SwitchClass+0x2c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8020e0c:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8020e10:	f508 7e74 	add.w	lr, r8, #976	; 0x3d0
 8020e14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020e18:	f508 7c79 	add.w	ip, r8, #996	; 0x3e4
 8020e1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020e20:	f8de 3000 	ldr.w	r3, [lr]
 8020e24:	f8cc 3000 	str.w	r3, [ip]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8020e28:	f888 63f7 	strb.w	r6, [r8, #1015]	; 0x3f7
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8020e2c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8020e30:	b1c3      	cbz	r3, 8020e64 <SwitchClass+0x90>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8020e32:	6eab      	ldr	r3, [r5, #104]	; 0x68
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8020e34:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8020e38:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8020e3c:	f885 20b4 	strb.w	r2, [r5, #180]	; 0xb4
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8020e40:	f898 2419 	ldrb.w	r2, [r8, #1049]	; 0x419
 8020e44:	f888 23e4 	strb.w	r2, [r8, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8020e48:	f8c8 33e8 	str.w	r3, [r8, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8020e4c:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
 8020e50:	f888 33f4 	strb.w	r3, [r8, #1012]	; 0x3f4
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8020e54:	f895 30ca 	ldrb.w	r3, [r5, #202]	; 0xca
 8020e58:	f888 33f5 	strb.w	r3, [r8, #1013]	; 0x3f5
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8020e5c:	f240 3301 	movw	r3, #769	; 0x301
 8020e60:	f8a8 33f6 	strh.w	r3, [r8, #1014]	; 0x3f6
                MacCtx.NodeAckRequested = false;
 8020e64:	2300      	movs	r3, #0
 8020e66:	f887 3418 	strb.w	r3, [r7, #1048]	; 0x418
                Radio.Sleep( );
 8020e6a:	4b0d      	ldr	r3, [pc, #52]	; (8020ea0 <SwitchClass+0xcc>)
 8020e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e6e:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8020e70:	f7ff ff84 	bl	8020d7c <OpenContinuousRxCWindow>
}
 8020e74:	4620      	mov	r0, r4
 8020e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            status = LoRaMacClassBSwitchClass( deviceClass );
 8020e7a:	f002 f999 	bl	80231b0 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8020e7e:	4604      	mov	r4, r0
 8020e80:	2800      	cmp	r0, #0
 8020e82:	d1f7      	bne.n	8020e74 <SwitchClass+0xa0>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8020e84:	f8d8 3488 	ldr.w	r3, [r8, #1160]	; 0x488
 8020e88:	f883 607c 	strb.w	r6, [r3, #124]	; 0x7c
 8020e8c:	e7f2      	b.n	8020e74 <SwitchClass+0xa0>
            if( deviceClass == CLASS_A )
 8020e8e:	2800      	cmp	r0, #0
 8020e90:	d1b6      	bne.n	8020e00 <SwitchClass+0x2c>
                Radio.Sleep( );
 8020e92:	4b03      	ldr	r3, [pc, #12]	; (8020ea0 <SwitchClass+0xcc>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8020e94:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
                Radio.Sleep( );
 8020e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e9a:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8020e9c:	4634      	mov	r4, r6
 8020e9e:	e7e9      	b.n	8020e74 <SwitchClass+0xa0>
 8020ea0:	08027928 	.word	0x08027928
 8020ea4:	20001ad0 	.word	0x20001ad0

08020ea8 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8020ea8:	b570      	push	{r4, r5, r6, lr}
    Radio.Standby( );
 8020eaa:	4e0d      	ldr	r6, [pc, #52]	; (8020ee0 <RxWindowSetup.constprop.0+0x38>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8020eac:	4c0d      	ldr	r4, [pc, #52]	; (8020ee4 <RxWindowSetup.constprop.0+0x3c>)
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8020eae:	460d      	mov	r5, r1
    TimerStop( rxTimer );
 8020eb0:	f005 ff18 	bl	8026ce4 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8020eb4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8020eb6:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8020eb8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8020ebc:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8020ec0:	7818      	ldrb	r0, [r3, #0]
 8020ec2:	4629      	mov	r1, r5
 8020ec4:	f003 f8cb 	bl	802405e <RegionRxConfig>
 8020ec8:	b140      	cbz	r0, 8020edc <RxWindowSetup.constprop.0+0x34>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8020eca:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8020ece:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8020ed0:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8020ed4:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8020ed6:	7ceb      	ldrb	r3, [r5, #19]
 8020ed8:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 8020edc:	bd70      	pop	{r4, r5, r6, pc}
 8020ede:	bf00      	nop
 8020ee0:	08027928 	.word	0x08027928
 8020ee4:	20001ad0 	.word	0x20001ad0

08020ee8 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8020ee8:	480d      	ldr	r0, [pc, #52]	; (8020f20 <OnRxWindow1TimerEvent+0x38>)
 8020eea:	f890 3419 	ldrb.w	r3, [r0, #1049]	; 0x419
 8020eee:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8020ef2:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
 8020ef6:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8020efa:	f880 23bf 	strb.w	r2, [r0, #959]	; 0x3bf
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8020efe:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8020f02:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8020f06:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8020f0a:	f880 33cd 	strb.w	r3, [r0, #973]	; 0x3cd
    MacCtx.RxWindow1Config.RxContinuous = false;
 8020f0e:	2300      	movs	r3, #0
 8020f10:	f8a0 33ce 	strh.w	r3, [r0, #974]	; 0x3ce
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8020f14:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8020f18:	f500 7061 	add.w	r0, r0, #900	; 0x384
 8020f1c:	f7ff bfc4 	b.w	8020ea8 <RxWindowSetup.constprop.0>
 8020f20:	20001ad0 	.word	0x20001ad0

08020f24 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8020f24:	4810      	ldr	r0, [pc, #64]	; (8020f68 <OnRxWindow2TimerEvent+0x44>)
 8020f26:	f890 3484 	ldrb.w	r3, [r0, #1156]	; 0x484
 8020f2a:	b1db      	cbz	r3, 8020f64 <OnRxWindow2TimerEvent+0x40>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8020f2c:	f890 3419 	ldrb.w	r3, [r0, #1049]	; 0x419
 8020f30:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8020f34:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
 8020f38:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8020f3c:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8020f40:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8020f44:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8020f48:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8020f4c:	f880 33e1 	strb.w	r3, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8020f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020f54:	f8a0 33e2 	strh.w	r3, [r0, #994]	; 0x3e2
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8020f58:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 8020f5c:	f500 7067 	add.w	r0, r0, #924	; 0x39c
 8020f60:	f7ff bfa2 	b.w	8020ea8 <RxWindowSetup.constprop.0>
}
 8020f64:	4770      	bx	lr
 8020f66:	bf00      	nop
 8020f68:	20001ad0 	.word	0x20001ad0

08020f6c <ProcessMacCommands.isra.0.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8020f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f70:	b091      	sub	sp, #68	; 0x44
    uint8_t status = 0;
 8020f72:	2700      	movs	r7, #0
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8020f74:	4ec7      	ldr	r6, [pc, #796]	; (8021294 <ProcessMacCommands.isra.0.constprop.0+0x328>)
    uint8_t status = 0;
 8020f76:	f88d 7015 	strb.w	r7, [sp, #21]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8020f7a:	4605      	mov	r5, r0
 8020f7c:	4688      	mov	r8, r1
 8020f7e:	4693      	mov	fp, r2
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8020f80:	f8ad 7018 	strh.w	r7, [sp, #24]
    while( macIndex < commandsSize )
 8020f84:	46b9      	mov	r9, r7
 8020f86:	45c1      	cmp	r9, r8
 8020f88:	d302      	bcc.n	8020f90 <ProcessMacCommands.isra.0.constprop.0+0x24>
}
 8020f8a:	b011      	add	sp, #68	; 0x44
 8020f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8020f90:	f815 0009 	ldrb.w	r0, [r5, r9]
 8020f94:	f002 fa44 	bl	8023420 <LoRaMacCommandsGetCmdSize>
 8020f98:	4448      	add	r0, r9
 8020f9a:	4540      	cmp	r0, r8
 8020f9c:	dcf5      	bgt.n	8020f8a <ProcessMacCommands.isra.0.constprop.0+0x1e>
        switch( payload[macIndex++] )
 8020f9e:	f815 3009 	ldrb.w	r3, [r5, r9]
 8020fa2:	f109 0401 	add.w	r4, r9, #1
 8020fa6:	3b02      	subs	r3, #2
 8020fa8:	b2e4      	uxtb	r4, r4
 8020faa:	2b11      	cmp	r3, #17
 8020fac:	d8ed      	bhi.n	8020f8a <ProcessMacCommands.isra.0.constprop.0+0x1e>
 8020fae:	a201      	add	r2, pc, #4	; (adr r2, 8020fb4 <ProcessMacCommands.isra.0.constprop.0+0x48>)
 8020fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020fb4:	08020ffd 	.word	0x08020ffd
 8020fb8:	0802102d 	.word	0x0802102d
 8020fbc:	080210ef 	.word	0x080210ef
 8020fc0:	0802111b 	.word	0x0802111b
 8020fc4:	080211b9 	.word	0x080211b9
 8020fc8:	080211e1 	.word	0x080211e1
 8020fcc:	0802124d 	.word	0x0802124d
 8020fd0:	08021299 	.word	0x08021299
 8020fd4:	0802132d 	.word	0x0802132d
 8020fd8:	08020f8b 	.word	0x08020f8b
 8020fdc:	08020f8b 	.word	0x08020f8b
 8020fe0:	08021385 	.word	0x08021385
 8020fe4:	08020f8b 	.word	0x08020f8b
 8020fe8:	08020f8b 	.word	0x08020f8b
 8020fec:	0802143b 	.word	0x0802143b
 8020ff0:	08021461 	.word	0x08021461
 8020ff4:	080214a5 	.word	0x080214a5
 8020ff8:	080214e3 	.word	0x080214e3
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8020ffc:	2004      	movs	r0, #4
 8020ffe:	f002 fac9 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
 8021002:	b188      	cbz	r0, 8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8021004:	2104      	movs	r1, #4
 8021006:	2000      	movs	r0, #0
 8021008:	f002 fa8a 	bl	8023520 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 802100c:	5d2b      	ldrb	r3, [r5, r4]
 802100e:	f886 345c 	strb.w	r3, [r6, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8021012:	f109 0403 	add.w	r4, r9, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8021016:	f109 0902 	add.w	r9, r9, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 802101a:	fa5f f989 	uxtb.w	r9, r9
 802101e:	b2e4      	uxtb	r4, r4
 8021020:	f815 3009 	ldrb.w	r3, [r5, r9]
 8021024:	f886 345d 	strb.w	r3, [r6, #1117]	; 0x45d
                uint8_t eirpDwellTime = payload[macIndex++];
 8021028:	46a1      	mov	r9, r4
 802102a:	e7ac      	b.n	8020f86 <ProcessMacCommands.isra.0.constprop.0+0x1a>
                int8_t linkAdrDatarate = DR_0;
 802102c:	2300      	movs	r3, #0
 802102e:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 8021032:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 8021036:	f88d 301c 	strb.w	r3, [sp, #28]
                uint8_t linkAdrNbBytesParsed = 0;
 802103a:	f88d 3020 	strb.w	r3, [sp, #32]
                if( adrBlockFound == false )
 802103e:	2f00      	cmp	r7, #0
 8021040:	d153      	bne.n	80210ea <ProcessMacCommands.isra.0.constprop.0+0x17e>
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8021042:	eba8 0309 	sub.w	r3, r8, r9
 8021046:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 802104a:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    linkAdrReq.Payload = &payload[macIndex - 1];
 802104e:	3c01      	subs	r4, #1
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8021050:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8021054:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8021058:	442c      	add	r4, r5
 802105a:	940d      	str	r4, [sp, #52]	; 0x34
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 802105c:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8021060:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8021064:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 8021068:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 802106c:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8021070:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8021074:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8021078:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 802107c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8021080:	920c      	str	r2, [sp, #48]	; 0x30
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8021082:	7818      	ldrb	r0, [r3, #0]
 8021084:	ab08      	add	r3, sp, #32
 8021086:	9301      	str	r3, [sp, #4]
 8021088:	ab07      	add	r3, sp, #28
 802108a:	9300      	str	r3, [sp, #0]
 802108c:	f10d 0216 	add.w	r2, sp, #22
 8021090:	f10d 0317 	add.w	r3, sp, #23
 8021094:	a90c      	add	r1, sp, #48	; 0x30
 8021096:	f002 fffa 	bl	802408e <RegionLinkAdrReq>
 802109a:	f88d 0015 	strb.w	r0, [sp, #21]
                    if( ( status & 0x07 ) == 0x07 )
 802109e:	f000 0007 	and.w	r0, r0, #7
 80210a2:	2807      	cmp	r0, #7
 80210a4:	d10d      	bne.n	80210c2 <ProcessMacCommands.isra.0.constprop.0+0x156>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 80210a6:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80210aa:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80210ae:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80210b2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80210b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80210ba:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80210be:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80210c2:	2700      	movs	r7, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80210c4:	f04f 0a05 	mov.w	sl, #5
 80210c8:	e006      	b.n	80210d8 <ProcessMacCommands.isra.0.constprop.0+0x16c>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80210ca:	2201      	movs	r2, #1
 80210cc:	f10d 0115 	add.w	r1, sp, #21
 80210d0:	2003      	movs	r0, #3
 80210d2:	f002 f8ab 	bl	802322c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80210d6:	3701      	adds	r7, #1
 80210d8:	b2fb      	uxtb	r3, r7
 80210da:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80210de:	fbb4 f2fa 	udiv	r2, r4, sl
 80210e2:	429a      	cmp	r2, r3
 80210e4:	d8f1      	bhi.n	80210ca <ProcessMacCommands.isra.0.constprop.0+0x15e>
                    macIndex += linkAdrNbBytesParsed - 1;
 80210e6:	444c      	add	r4, r9
 80210e8:	b2e4      	uxtb	r4, r4
                break;
 80210ea:	2701      	movs	r7, #1
 80210ec:	e79c      	b.n	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80210ee:	5d2b      	ldrb	r3, [r5, r4]
 80210f0:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
 80210f4:	f003 030f 	and.w	r3, r3, #15
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 80210f8:	2201      	movs	r2, #1
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80210fa:	f881 30c8 	strb.w	r3, [r1, #200]	; 0xc8
 80210fe:	f109 0902 	add.w	r9, r9, #2
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8021102:	fa02 f303 	lsl.w	r3, r2, r3
 8021106:	f8a1 314c 	strh.w	r3, [r1, #332]	; 0x14c
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 802110a:	fa5f f989 	uxtb.w	r9, r9
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 802110e:	2200      	movs	r2, #0
 8021110:	a906      	add	r1, sp, #24
 8021112:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8021114:	f002 f88a 	bl	802322c <LoRaMacCommandsAddCmd>
                break;
 8021118:	e0b9      	b.n	802128e <ProcessMacCommands.isra.0.constprop.0+0x322>
                status = 0x07;
 802111a:	2307      	movs	r3, #7
 802111c:	f88d 3015 	strb.w	r3, [sp, #21]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8021120:	5d2b      	ldrb	r3, [r5, r4]
 8021122:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8021126:	f003 030f 	and.w	r3, r3, #15
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 802112a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 802112e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8021132:	f109 0204 	add.w	r2, r9, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8021136:	f109 0303 	add.w	r3, r9, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 802113a:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 802113c:	b2d2      	uxtb	r2, r2
 802113e:	f109 0405 	add.w	r4, r9, #5
                macIndex++;
 8021142:	f109 0902 	add.w	r9, r9, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8021146:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8021148:	5cab      	ldrb	r3, [r5, r2]
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 802114a:	fa5f f989 	uxtb.w	r9, r9
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 802114e:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8021150:	f815 2009 	ldrb.w	r2, [r5, r9]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8021154:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8021158:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 802115a:	2264      	movs	r2, #100	; 0x64
 802115c:	4353      	muls	r3, r2
 802115e:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8021160:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8021164:	a90c      	add	r1, sp, #48	; 0x30
 8021166:	7818      	ldrb	r0, [r3, #0]
 8021168:	f002 ffa1 	bl	80240ae <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 802116c:	f000 0307 	and.w	r3, r0, #7
 8021170:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8021172:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8021174:	f88d 0015 	strb.w	r0, [sp, #21]
                if( ( status & 0x07 ) == 0x07 )
 8021178:	d110      	bne.n	802119c <ProcessMacCommands.isra.0.constprop.0+0x230>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 802117a:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 802117e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8021182:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8021186:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 802118a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802118c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8021190:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8021194:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8021198:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
                macCmdPayload[0] = status;
 802119c:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80211a0:	2201      	movs	r2, #1
 80211a2:	a906      	add	r1, sp, #24
 80211a4:	2005      	movs	r0, #5
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80211a6:	f002 f841 	bl	802322c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80211aa:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
 80211ae:	f043 0310 	orr.w	r3, r3, #16
 80211b2:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
                break;
 80211b6:	e737      	b.n	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80211b8:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
 80211bc:	b173      	cbz	r3, 80211dc <ProcessMacCommands.isra.0.constprop.0+0x270>
 80211be:	681b      	ldr	r3, [r3, #0]
 80211c0:	b163      	cbz	r3, 80211dc <ProcessMacCommands.isra.0.constprop.0+0x270>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80211c2:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80211c4:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
                macCmdPayload[0] = batteryLevel;
 80211c8:	f88d 0018 	strb.w	r0, [sp, #24]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80211cc:	f88d 3019 	strb.w	r3, [sp, #25]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80211d0:	2202      	movs	r2, #2
 80211d2:	a906      	add	r1, sp, #24
 80211d4:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80211d6:	f002 f829 	bl	802322c <LoRaMacCommandsAddCmd>
                break;
 80211da:	e725      	b.n	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80211dc:	20ff      	movs	r0, #255	; 0xff
 80211de:	e7f1      	b.n	80211c4 <ProcessMacCommands.isra.0.constprop.0+0x258>
                status = 0x03;
 80211e0:	2303      	movs	r3, #3
 80211e2:	f88d 3015 	strb.w	r3, [sp, #21]
                newChannelReq.ChannelId = payload[macIndex++];
 80211e6:	5d2b      	ldrb	r3, [r5, r4]
 80211e8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 80211ec:	ab0c      	add	r3, sp, #48	; 0x30
 80211ee:	9308      	str	r3, [sp, #32]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80211f0:	f109 0204 	add.w	r2, r9, #4
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80211f4:	f109 0303 	add.w	r3, r9, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80211f8:	b2db      	uxtb	r3, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80211fa:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80211fc:	5ce9      	ldrb	r1, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80211fe:	5cab      	ldrb	r3, [r5, r2]
                newChannelReq.ChannelId = payload[macIndex++];
 8021200:	f109 0202 	add.w	r2, r9, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8021204:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8021206:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8021208:	5caa      	ldrb	r2, [r5, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 802120a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 802120e:	4313      	orrs	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8021210:	f109 0406 	add.w	r4, r9, #6
                chParam.Frequency *= 100;
 8021214:	2264      	movs	r2, #100	; 0x64
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8021216:	f109 0905 	add.w	r9, r9, #5
                chParam.Frequency *= 100;
 802121a:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 802121c:	fa5f f989 	uxtb.w	r9, r9
                chParam.Frequency *= 100;
 8021220:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 8021222:	2300      	movs	r3, #0
 8021224:	930d      	str	r3, [sp, #52]	; 0x34
                chParam.DrRange.Value = payload[macIndex++];
 8021226:	f815 3009 	ldrb.w	r3, [r5, r9]
 802122a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 802122e:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8021232:	a908      	add	r1, sp, #32
 8021234:	7818      	ldrb	r0, [r3, #0]
 8021236:	f002 ff41 	bl	80240bc <RegionNewChannelReq>
                chParam.DrRange.Value = payload[macIndex++];
 802123a:	b2e4      	uxtb	r4, r4
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 802123c:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 8021240:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8021244:	2201      	movs	r2, #1
 8021246:	a906      	add	r1, sp, #24
 8021248:	2007      	movs	r0, #7
 802124a:	e7c4      	b.n	80211d6 <ProcessMacCommands.isra.0.constprop.0+0x26a>
                uint8_t delay = payload[macIndex++] & 0x0F;
 802124c:	5d2b      	ldrb	r3, [r5, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 802124e:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
                uint8_t delay = payload[macIndex++] & 0x0F;
 8021252:	f003 030f 	and.w	r3, r3, #15
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8021256:	2b01      	cmp	r3, #1
 8021258:	bf38      	it	cc
 802125a:	2301      	movcc	r3, #1
 802125c:	461a      	mov	r2, r3
 802125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021262:	4353      	muls	r3, r2
 8021264:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8021268:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 802126c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8021270:	2200      	movs	r2, #0
 8021272:	a906      	add	r1, sp, #24
 8021274:	2008      	movs	r0, #8
 8021276:	f001 ffd9 	bl	802322c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 802127a:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 802127e:	f109 0902 	add.w	r9, r9, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8021282:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 8021286:	fa5f f989 	uxtb.w	r9, r9
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 802128a:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 802128e:	464c      	mov	r4, r9
}
 8021290:	e6ca      	b.n	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
 8021292:	bf00      	nop
 8021294:	20001ad0 	.word	0x20001ad0
                uint8_t eirpDwellTime = payload[macIndex++];
 8021298:	5d2b      	ldrb	r3, [r5, r4]
                txParamSetupReq.UplinkDwellTime = 0;
 802129a:	2200      	movs	r2, #0
 802129c:	f88d 201c 	strb.w	r2, [sp, #28]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80212a0:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 80212a4:	bf18      	it	ne
 80212a6:	2201      	movne	r2, #1
 80212a8:	f88d 201d 	strb.w	r2, [sp, #29]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80212ac:	06da      	lsls	r2, r3, #27
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80212ae:	f003 030f 	and.w	r3, r3, #15
                    txParamSetupReq.UplinkDwellTime = 1;
 80212b2:	bf48      	it	mi
 80212b4:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80212b6:	f88d 301e 	strb.w	r3, [sp, #30]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80212ba:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    txParamSetupReq.UplinkDwellTime = 1;
 80212be:	bf48      	it	mi
 80212c0:	f88d 201c 	strbmi.w	r2, [sp, #28]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80212c4:	7818      	ldrb	r0, [r3, #0]
 80212c6:	a907      	add	r1, sp, #28
 80212c8:	f002 feff 	bl	80240ca <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 80212cc:	f109 0902 	add.w	r9, r9, #2
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80212d0:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 80212d2:	fa5f f989 	uxtb.w	r9, r9
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80212d6:	d0da      	beq.n	802128e <ProcessMacCommands.isra.0.constprop.0+0x322>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80212d8:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80212dc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80212e0:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80212e4:	f8a3 10b8 	strh.w	r1, [r3, #184]	; 0xb8
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80212e8:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80212ec:	488b      	ldr	r0, [pc, #556]	; (802151c <ProcessMacCommands.isra.0.constprop.0+0x5b0>)
 80212ee:	5c41      	ldrb	r1, [r0, r1]
 80212f0:	ee07 1a90 	vmov	s15, r1
 80212f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80212f8:	2102      	movs	r1, #2
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80212fa:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80212fe:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8021302:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021306:	7818      	ldrb	r0, [r3, #0]
 8021308:	a90c      	add	r1, sp, #48	; 0x30
 802130a:	f002 fe66 	bl	8023fda <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 802130e:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021312:	9008      	str	r0, [sp, #32]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8021314:	f993 2085 	ldrsb.w	r2, [r3, #133]	; 0x85
 8021318:	b240      	sxtb	r0, r0
 802131a:	4290      	cmp	r0, r2
 802131c:	bfb8      	it	lt
 802131e:	4610      	movlt	r0, r2
 8021320:	f883 0085 	strb.w	r0, [r3, #133]	; 0x85
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8021324:	2200      	movs	r2, #0
 8021326:	a906      	add	r1, sp, #24
 8021328:	2009      	movs	r0, #9
 802132a:	e6f3      	b.n	8021114 <ProcessMacCommands.isra.0.constprop.0+0x1a8>
                status = 0x03;
 802132c:	2303      	movs	r3, #3
 802132e:	f88d 3015 	strb.w	r3, [sp, #21]
                dlChannelReq.ChannelId = payload[macIndex++];
 8021332:	5d2b      	ldrb	r3, [r5, r4]
 8021334:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8021338:	f109 0204 	add.w	r2, r9, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 802133c:	f109 0303 	add.w	r3, r9, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8021340:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8021342:	b2d2      	uxtb	r2, r2
 8021344:	f109 0405 	add.w	r4, r9, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8021348:	f109 0902 	add.w	r9, r9, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 802134c:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 802134e:	5cab      	ldrb	r3, [r5, r2]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8021350:	fa5f f989 	uxtb.w	r9, r9
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8021354:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8021356:	f815 2009 	ldrb.w	r2, [r5, r9]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 802135a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 802135e:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8021360:	2264      	movs	r2, #100	; 0x64
 8021362:	4353      	muls	r3, r2
 8021364:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8021366:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 802136a:	a90c      	add	r1, sp, #48	; 0x30
 802136c:	7818      	ldrb	r0, [r3, #0]
 802136e:	f002 feb3 	bl	80240d8 <RegionDlChannelReq>
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8021372:	b2e4      	uxtb	r4, r4
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8021374:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 8021378:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 802137c:	2201      	movs	r2, #1
 802137e:	a906      	add	r1, sp, #24
 8021380:	200a      	movs	r0, #10
 8021382:	e710      	b.n	80211a6 <ProcessMacCommands.isra.0.constprop.0+0x23a>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8021384:	200a      	movs	r0, #10
 8021386:	f002 f905 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
 802138a:	2800      	cmp	r0, #0
 802138c:	f43f ae4c 	beq.w	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8021390:	210a      	movs	r1, #10
 8021392:	2000      	movs	r0, #0
 8021394:	f002 f8c4 	bl	8023520 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8021398:	2300      	movs	r3, #0
 802139a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 802139e:	f109 0203 	add.w	r2, r9, #3
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80213a2:	f109 0302 	add.w	r3, r9, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80213a6:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80213a8:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80213aa:	5ce9      	ldrb	r1, [r5, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80213ac:	5cab      	ldrb	r3, [r5, r2]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80213ae:	5d2a      	ldrb	r2, [r5, r4]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80213b0:	041b      	lsls	r3, r3, #16
 80213b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80213b6:	4313      	orrs	r3, r2
 80213b8:	f109 0204 	add.w	r2, r9, #4
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80213bc:	f109 0406 	add.w	r4, r9, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80213c0:	b2d2      	uxtb	r2, r2
 80213c2:	f109 0905 	add.w	r9, r9, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80213c6:	fa5f f989 	uxtb.w	r9, r9
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80213ca:	5caa      	ldrb	r2, [r5, r2]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80213cc:	f815 1009 	ldrb.w	r1, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80213d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80213d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80213d8:	434a      	muls	r2, r1
                    sysTimeCurrent = SysTimeGet( );
 80213da:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80213de:	1212      	asrs	r2, r2, #8
                    sysTimeCurrent = SysTimeGet( );
 80213e0:	4650      	mov	r0, sl
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80213e2:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80213e4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                    sysTimeCurrent = SysTimeGet( );
 80213e8:	f005 fbd8 	bl	8026b9c <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80213ec:	9b03      	ldr	r3, [sp, #12]
 80213ee:	f103 5396 	add.w	r3, r3, #314572800	; 0x12c00000
 80213f2:	f503 13a9 	add.w	r3, r3, #1384448	; 0x152000
 80213f6:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80213fa:	9308      	str	r3, [sp, #32]
 80213fc:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 8021400:	9300      	str	r3, [sp, #0]
 8021402:	f10d 0920 	add.w	r9, sp, #32
 8021406:	e899 0006 	ldmia.w	r9, {r1, r2}
 802140a:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 802140e:	a80a      	add	r0, sp, #40	; 0x28
 8021410:	f005 fb7f 	bl	8026b12 <SysTimeSub>
 8021414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021416:	9300      	str	r3, [sp, #0]
 8021418:	e89a 0006 	ldmia.w	sl, {r1, r2}
 802141c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802141e:	4648      	mov	r0, r9
 8021420:	f005 fb5b 	bl	8026ada <SysTimeAdd>
                    SysTimeSet( sysTime );
 8021424:	e899 0003 	ldmia.w	r9, {r0, r1}
 8021428:	f005 fb90 	bl	8026b4c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 802142c:	f001 feca 	bl	80231c4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8021430:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8021432:	b2e4      	uxtb	r4, r4
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8021434:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 8021438:	e5f6      	b.n	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 802143a:	200d      	movs	r0, #13
 802143c:	f002 f8aa 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
 8021440:	2800      	cmp	r0, #0
 8021442:	f43f adf1 	beq.w	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8021446:	210d      	movs	r1, #13
 8021448:	2000      	movs	r0, #0
 802144a:	f002 f869 	bl	8023520 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 802144e:	f896 3484 	ldrb.w	r3, [r6, #1156]	; 0x484
 8021452:	3b04      	subs	r3, #4
 8021454:	2b01      	cmp	r3, #1
 8021456:	f67f ade7 	bls.w	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                        LoRaMacClassBPingSlotInfoAns( );
 802145a:	f001 feaf 	bl	80231bc <LoRaMacClassBPingSlotInfoAns>
 802145e:	e5e3      	b.n	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                frequency = ( uint32_t )payload[macIndex++];
 8021460:	f109 0202 	add.w	r2, r9, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8021464:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 8021466:	5d29      	ldrb	r1, [r5, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8021468:	5ca8      	ldrb	r0, [r5, r2]
 802146a:	f109 0203 	add.w	r2, r9, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 802146e:	b2d2      	uxtb	r2, r2
                datarate = payload[macIndex++] & 0x0F;
 8021470:	f109 0405 	add.w	r4, r9, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8021474:	5cab      	ldrb	r3, [r5, r2]
 8021476:	f109 0904 	add.w	r9, r9, #4
                datarate = payload[macIndex++] & 0x0F;
 802147a:	fa5f f989 	uxtb.w	r9, r9
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 802147e:	041b      	lsls	r3, r3, #16
 8021480:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 8021484:	f815 0009 	ldrb.w	r0, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8021488:	430b      	orrs	r3, r1
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 802148a:	2164      	movs	r1, #100	; 0x64
 802148c:	4359      	muls	r1, r3
 802148e:	f000 000f 	and.w	r0, r0, #15
 8021492:	f001 fe94 	bl	80231be <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
 8021496:	b2e4      	uxtb	r4, r4
                macCmdPayload[0] = status;
 8021498:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 802149c:	2201      	movs	r2, #1
 802149e:	a906      	add	r1, sp, #24
 80214a0:	2011      	movs	r0, #17
 80214a2:	e698      	b.n	80211d6 <ProcessMacCommands.isra.0.constprop.0+0x26a>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80214a4:	200e      	movs	r0, #14
 80214a6:	f002 f875 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
 80214aa:	2800      	cmp	r0, #0
 80214ac:	f43f adbc 	beq.w	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80214b0:	210e      	movs	r1, #14
 80214b2:	2000      	movs	r0, #0
 80214b4:	f002 f834 	bl	8023520 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80214b8:	f109 0302 	add.w	r3, r9, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80214bc:	b2db      	uxtb	r3, r3
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80214be:	4a18      	ldr	r2, [pc, #96]	; (8021520 <ProcessMacCommands.isra.0.constprop.0+0x5b4>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80214c0:	5ce8      	ldrb	r0, [r5, r3]
 80214c2:	5d2b      	ldrb	r3, [r5, r4]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80214c4:	6812      	ldr	r2, [r2, #0]
                    beaconTimingChannel = payload[macIndex++];
 80214c6:	f109 0404 	add.w	r4, r9, #4
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80214ca:	f109 0903 	add.w	r9, r9, #3
                    beaconTimingChannel = payload[macIndex++];
 80214ce:	fa5f f989 	uxtb.w	r9, r9
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80214d2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80214d6:	f815 1009 	ldrb.w	r1, [r5, r9]
                    beaconTimingChannel = payload[macIndex++];
 80214da:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80214dc:	f001 fe71 	bl	80231c2 <LoRaMacClassBBeaconTimingAns>
 80214e0:	e5a2      	b.n	8021028 <ProcessMacCommands.isra.0.constprop.0+0xbc>
                    frequency = ( uint32_t )payload[macIndex++];
 80214e2:	5d28      	ldrb	r0, [r5, r4]
 80214e4:	f109 0302 	add.w	r3, r9, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80214e8:	f109 0404 	add.w	r4, r9, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80214ec:	f109 0903 	add.w	r9, r9, #3
 80214f0:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80214f2:	fa5f f989 	uxtb.w	r9, r9
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80214f6:	5cea      	ldrb	r2, [r5, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80214f8:	f815 3009 	ldrb.w	r3, [r5, r9]
 80214fc:	041b      	lsls	r3, r3, #16
 80214fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021502:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8021504:	2064      	movs	r0, #100	; 0x64
 8021506:	4358      	muls	r0, r3
 8021508:	f001 fe5d 	bl	80231c6 <LoRaMacClassBBeaconFreqReq>
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 802150c:	b2e4      	uxtb	r4, r4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 802150e:	f88d 0018 	strb.w	r0, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8021512:	2201      	movs	r2, #1
 8021514:	a906      	add	r1, sp, #24
 8021516:	2013      	movs	r0, #19
 8021518:	e65d      	b.n	80211d6 <ProcessMacCommands.isra.0.constprop.0+0x26a>
 802151a:	bf00      	nop
 802151c:	0802779c 	.word	0x0802779c
 8021520:	20002a7c 	.word	0x20002a7c

08021524 <LoRaMacIsBusy>:
}

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8021524:	4b05      	ldr	r3, [pc, #20]	; (802153c <LoRaMacIsBusy+0x18>)
 8021526:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 802152a:	b92a      	cbnz	r2, 8021538 <LoRaMacIsBusy+0x14>
 802152c:	f893 0486 	ldrb.w	r0, [r3, #1158]	; 0x486
 8021530:	3801      	subs	r0, #1
 8021532:	bf18      	it	ne
 8021534:	2001      	movne	r0, #1
 8021536:	4770      	bx	lr
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
    {
        return false;
    }
    return true;
 8021538:	2001      	movs	r0, #1
}
 802153a:	4770      	bx	lr
 802153c:	20001ad0 	.word	0x20001ad0

08021540 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8021540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021544:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021546:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 802154a:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 802154c:	4cc5      	ldr	r4, [pc, #788]	; (8021864 <LoRaMacProcess+0x324>)
    LoRaMacRadioEvents.Value = 0;
 802154e:	2100      	movs	r1, #0
    events = LoRaMacRadioEvents;
 8021550:	6823      	ldr	r3, [r4, #0]
    LoRaMacRadioEvents.Value = 0;
 8021552:	6021      	str	r1, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021554:	f382 8810 	msr	PRIMASK, r2
    if( events.Value != 0 )
 8021558:	2b00      	cmp	r3, #0
 802155a:	f000 80db 	beq.w	8021714 <LoRaMacProcess+0x1d4>
        if( events.Events.TxDone == 1 )
 802155e:	06df      	lsls	r7, r3, #27
 8021560:	fa5f fa83 	uxtb.w	sl, r3
 8021564:	d56b      	bpl.n	802163e <LoRaMacProcess+0xfe>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8021566:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 802156a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 802156e:	2b02      	cmp	r3, #2
 8021570:	d002      	beq.n	8021578 <LoRaMacProcess+0x38>
        Radio.Sleep( );
 8021572:	4bbd      	ldr	r3, [pc, #756]	; (8021868 <LoRaMacProcess+0x328>)
 8021574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021576:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8021578:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 802157c:	48bb      	ldr	r0, [pc, #748]	; (802186c <LoRaMacProcess+0x32c>)
 802157e:	f005 fc3b 	bl	8026df8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8021582:	48ba      	ldr	r0, [pc, #744]	; (802186c <LoRaMacProcess+0x32c>)
 8021584:	f005 fbfe 	bl	8026d84 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8021588:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 802158c:	48b8      	ldr	r0, [pc, #736]	; (8021870 <LoRaMacProcess+0x330>)
 802158e:	f005 fc33 	bl	8026df8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8021592:	48b7      	ldr	r0, [pc, #732]	; (8021870 <LoRaMacProcess+0x330>)
 8021594:	f005 fbf6 	bl	8026d84 <UTIL_TIMER_Start>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8021598:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 802159c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 80215a0:	2a02      	cmp	r2, #2
 80215a2:	d002      	beq.n	80215aa <LoRaMacProcess+0x6a>
 80215a4:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 80215a8:	b182      	cbz	r2, 80215cc <LoRaMacProcess+0x8c>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80215aa:	2216      	movs	r2, #22
 80215ac:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80215b0:	7818      	ldrb	r0, [r3, #0]
 80215b2:	a90e      	add	r1, sp, #56	; 0x38
 80215b4:	f002 fd11 	bl	8023fda <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80215b8:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80215bc:	900c      	str	r0, [sp, #48]	; 0x30
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80215be:	4401      	add	r1, r0
 80215c0:	48ac      	ldr	r0, [pc, #688]	; (8021874 <LoRaMacProcess+0x334>)
 80215c2:	f005 fc19 	bl	8026df8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80215c6:	48ab      	ldr	r0, [pc, #684]	; (8021874 <LoRaMacProcess+0x334>)
 80215c8:	f005 fbdc 	bl	8026d84 <UTIL_TIMER_Start>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 80215cc:	4baa      	ldr	r3, [pc, #680]	; (8021878 <LoRaMacProcess+0x338>)
 80215ce:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 80215d2:	681b      	ldr	r3, [r3, #0]
 80215d4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80215d8:	ae0a      	add	r6, sp, #40	; 0x28
    txDone.Channel = MacCtx.Channel;
 80215da:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 80215de:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80215e2:	4630      	mov	r0, r6
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80215e4:	9319      	str	r3, [sp, #100]	; 0x64
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80215e6:	f005 faff 	bl	8026be8 <SysTimeGetMcuTime>
 80215ea:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80215ee:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 80215f2:	9200      	str	r2, [sp, #0]
 80215f4:	ad04      	add	r5, sp, #16
 80215f6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80215fa:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80215fe:	4628      	mov	r0, r5
 8021600:	f005 fa87 	bl	8026b12 <SysTimeSub>
 8021604:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021608:	ab1b      	add	r3, sp, #108	; 0x6c
 802160a:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 802160e:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8021612:	931a      	str	r3, [sp, #104]	; 0x68
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8021614:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
    txDone.Joined  = true;
 8021618:	2301      	movs	r3, #1
 802161a:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 802161e:	f892 1164 	ldrb.w	r1, [r2, #356]	; 0x164
        txDone.Joined  = false;
 8021622:	2900      	cmp	r1, #0
 8021624:	bf08      	it	eq
 8021626:	460b      	moveq	r3, r1
 8021628:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 802162c:	7810      	ldrb	r0, [r2, #0]
 802162e:	a918      	add	r1, sp, #96	; 0x60
 8021630:	f002 fcdd 	bl	8023fee <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8021634:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8021638:	b90b      	cbnz	r3, 802163e <LoRaMacProcess+0xfe>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 802163a:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
        if( events.Events.RxDone == 1 )
 802163e:	f01a 0f08 	tst.w	sl, #8
 8021642:	d03a      	beq.n	80216ba <LoRaMacProcess+0x17a>
    uint8_t *payload = RxDoneParams.Payload;
 8021644:	4b8d      	ldr	r3, [pc, #564]	; (802187c <LoRaMacProcess+0x33c>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8021646:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
    uint8_t *payload = RxDoneParams.Payload;
 802164a:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 802164c:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 802164e:	f9b3 700a 	ldrsh.w	r7, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8021652:	f993 900c 	ldrsb.w	r9, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8021656:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8021658:	9203      	str	r2, [sp, #12]
    uint32_t downLinkCounter = 0;
 802165a:	2300      	movs	r3, #0
 802165c:	9307      	str	r3, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 802165e:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.McpsIndication.Multicast = 0;
 8021662:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 8021666:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 802166a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 802166e:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.AckReceived = false;
 8021672:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8021676:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 802167a:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 802167e:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8021682:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 8021686:	4b78      	ldr	r3, [pc, #480]	; (8021868 <LoRaMacProcess+0x328>)
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8021688:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
    Radio.Sleep( );
 802168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 802168e:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.Rssi = rssi;
 8021692:	f8a4 742e 	strh.w	r7, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.Snr = snr;
 8021696:	f884 9430 	strb.w	r9, [r4, #1072]	; 0x430
    Radio.Sleep( );
 802169a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 802169c:	4874      	ldr	r0, [pc, #464]	; (8021870 <LoRaMacProcess+0x330>)
 802169e:	f005 fb21 	bl	8026ce4 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80216a2:	4629      	mov	r1, r5
 80216a4:	4630      	mov	r0, r6
 80216a6:	f001 fd76 	bl	8023196 <LoRaMacClassBRxBeacon>
 80216aa:	4680      	mov	r8, r0
 80216ac:	2800      	cmp	r0, #0
 80216ae:	f000 80ef 	beq.w	8021890 <LoRaMacProcess+0x350>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80216b2:	f8a4 747a 	strh.w	r7, [r4, #1146]	; 0x47a
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80216b6:	f884 947c 	strb.w	r9, [r4, #1148]	; 0x47c
        if( events.Events.TxTimeout == 1 )
 80216ba:	f01a 0f04 	tst.w	sl, #4
 80216be:	d01b      	beq.n	80216f8 <LoRaMacProcess+0x1b8>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80216c0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80216c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80216c8:	2b02      	cmp	r3, #2
 80216ca:	d002      	beq.n	80216d2 <LoRaMacProcess+0x192>
        Radio.Sleep( );
 80216cc:	4b66      	ldr	r3, [pc, #408]	; (8021868 <LoRaMacProcess+0x328>)
 80216ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80216d0:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 80216d2:	f7fe ff9d 	bl	8020610 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80216d6:	2002      	movs	r0, #2
 80216d8:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80216dc:	f001 ff42 	bl	8023564 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80216e0:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80216e4:	b113      	cbz	r3, 80216ec <LoRaMacProcess+0x1ac>
        MacCtx.AckTimeoutRetry = true;
 80216e6:	2301      	movs	r3, #1
 80216e8:	f884 3417 	strb.w	r3, [r4, #1047]	; 0x417
    MacCtx.MacFlags.Bits.MacDone = 1;
 80216ec:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80216f0:	f043 0320 	orr.w	r3, r3, #32
 80216f4:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        if( events.Events.RxError == 1 )
 80216f8:	f01a 0f02 	tst.w	sl, #2
 80216fc:	d003      	beq.n	8021706 <LoRaMacProcess+0x1c6>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80216fe:	2106      	movs	r1, #6
 8021700:	2005      	movs	r0, #5
 8021702:	f7ff f835 	bl	8020770 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8021706:	f01a 0f01 	tst.w	sl, #1
 802170a:	d003      	beq.n	8021714 <LoRaMacProcess+0x1d4>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 802170c:	2104      	movs	r1, #4
 802170e:	2003      	movs	r0, #3
 8021710:	f7ff f82e 	bl	8020770 <HandleRadioRxErrorTimeout>
    uint8_t noTx = 0x00;

    LoRaMacHandleIrqEvents( );
    LoRaMacClassBProcess( );
 8021714:	f001 fd5d 	bl	80231d2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8021718:	f894 2485 	ldrb.w	r2, [r4, #1157]	; 0x485
 802171c:	0690      	lsls	r0, r2, #26
 802171e:	d56b      	bpl.n	80217f8 <LoRaMacProcess+0x2b8>
    MacCtx.AllowRequests = requestState;
 8021720:	2300      	movs	r3, #0
 8021722:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8021726:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 802172a:	0619      	lsls	r1, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 802172c:	bf44      	itt	mi
 802172e:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
 8021732:	f8c4 3344 	strmi.w	r3, [r4, #836]	; 0x344
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8021736:	f012 0f05 	tst.w	r2, #5
 802173a:	f000 82bb 	beq.w	8021cb4 <LoRaMacProcess+0x774>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 802173e:	200c      	movs	r0, #12
 8021740:	f001 ff28 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
 8021744:	2800      	cmp	r0, #0
 8021746:	f000 82b5 	beq.w	8021cb4 <LoRaMacProcess+0x774>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 802174a:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 802174e:	07df      	lsls	r7, r3, #31
 8021750:	f100 82b0 	bmi.w	8021cb4 <LoRaMacProcess+0x774>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8021754:	075e      	lsls	r6, r3, #29
 8021756:	f140 82c1 	bpl.w	8021cdc <LoRaMacProcess+0x79c>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 802175a:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 802175e:	f023 0302 	bic.w	r3, r3, #2
 8021762:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacState == LORAMAC_IDLE )
 8021766:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 802176a:	2a00      	cmp	r2, #0
 802176c:	d141      	bne.n	80217f2 <LoRaMacProcess+0x2b2>
 802176e:	f894 5485 	ldrb.w	r5, [r4, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8021772:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8021776:	bf1e      	ittt	ne
 8021778:	462b      	movne	r3, r5
 802177a:	f362 0300 	bfine	r3, r2, #0, #1
 802177e:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8021782:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8021786:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8021788:	bf44      	itt	mi
 802178a:	f36f 0382 	bfcmi	r3, #2, #1
 802178e:	f884 3485 	strbmi.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 8021792:	2301      	movs	r3, #1
 8021794:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 8021798:	b121      	cbz	r1, 80217a4 <LoRaMacProcess+0x264>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 802179a:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 802179e:	4838      	ldr	r0, [pc, #224]	; (8021880 <LoRaMacProcess+0x340>)
 80217a0:	681b      	ldr	r3, [r3, #0]
 80217a2:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80217a4:	076d      	lsls	r5, r5, #29
 80217a6:	d50b      	bpl.n	80217c0 <LoRaMacProcess+0x280>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80217a8:	4836      	ldr	r0, [pc, #216]	; (8021884 <LoRaMacProcess+0x344>)
 80217aa:	f001 feff 	bl	80235ac <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80217ae:	f001 ff29 	bl	8023604 <LoRaMacConfirmQueueGetCnt>
 80217b2:	b128      	cbz	r0, 80217c0 <LoRaMacProcess+0x280>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80217b4:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80217b8:	f043 0304 	orr.w	r3, r3, #4
 80217bc:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        LoRaMacClassBResumeBeaconing( );
 80217c0:	f001 fcf5 	bl	80231ae <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80217c4:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80217c8:	f36f 1345 	bfc	r3, #5, #1
 80217cc:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 80217d0:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 80217d4:	b96b      	cbnz	r3, 80217f2 <LoRaMacProcess+0x2b2>
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80217d6:	a818      	add	r0, sp, #96	; 0x60
        bool isStickyMacCommandPending = false;
 80217d8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80217dc:	f001 fe0e 	bl	80233fc <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80217e0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80217e4:	b12b      	cbz	r3, 80217f2 <LoRaMacProcess+0x2b2>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80217e6:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80217ea:	f043 0310 	orr.w	r3, r3, #16
 80217ee:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 80217f2:	2301      	movs	r3, #1
 80217f4:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80217f8:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80217fc:	0718      	lsls	r0, r3, #28
 80217fe:	d508      	bpl.n	8021812 <LoRaMacProcess+0x2d2>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8021800:	f36f 03c3 	bfc	r3, #3, #1
 8021804:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8021808:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 802180c:	481e      	ldr	r0, [pc, #120]	; (8021888 <LoRaMacProcess+0x348>)
 802180e:	68db      	ldr	r3, [r3, #12]
 8021810:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8021812:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8021816:	06d9      	lsls	r1, r3, #27
 8021818:	d50d      	bpl.n	8021836 <LoRaMacProcess+0x2f6>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 802181a:	2307      	movs	r3, #7
 802181c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8021820:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8021824:	a818      	add	r0, sp, #96	; 0x60
 8021826:	68db      	ldr	r3, [r3, #12]
 8021828:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 802182a:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 802182e:	f36f 1304 	bfc	r3, #4, #1
 8021832:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8021836:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 802183a:	079a      	lsls	r2, r3, #30
 802183c:	d508      	bpl.n	8021850 <LoRaMacProcess+0x310>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 802183e:	f36f 0341 	bfc	r3, #1, #1
 8021842:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8021846:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 802184a:	4810      	ldr	r0, [pc, #64]	; (802188c <LoRaMacProcess+0x34c>)
 802184c:	685b      	ldr	r3, [r3, #4]
 802184e:	4798      	blx	r3
        LoRaMacHandleRequestEvents( );
        LoRaMacHandleScheduleUplinkEvent( );
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    }
    LoRaMacHandleIndicationEvents( );
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8021850:	f894 3484 	ldrb.w	r3, [r4, #1156]	; 0x484
 8021854:	2b02      	cmp	r3, #2
 8021856:	d101      	bne.n	802185c <LoRaMacProcess+0x31c>
    {
        OpenContinuousRxCWindow( );
 8021858:	f7ff fa90 	bl	8020d7c <OpenContinuousRxCWindow>
    }
}
 802185c:	b025      	add	sp, #148	; 0x94
 802185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021862:	bf00      	nop
 8021864:	20001ad0 	.word	0x20001ad0
 8021868:	08027928 	.word	0x08027928
 802186c:	20001e54 	.word	0x20001e54
 8021870:	20001e6c 	.word	0x20001e6c
 8021874:	20001ecc 	.word	0x20001ecc
 8021878:	20002a78 	.word	0x20002a78
 802187c:	20002a7c 	.word	0x20002a7c
 8021880:	20001f10 	.word	0x20001f10
 8021884:	20001f24 	.word	0x20001f24
 8021888:	20001f38 	.word	0x20001f38
 802188c:	20001ef0 	.word	0x20001ef0
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8021890:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8021894:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8021898:	2b01      	cmp	r3, #1
 802189a:	d10c      	bne.n	80218b6 <LoRaMacProcess+0x376>
        if( LoRaMacClassBIsPingExpected( ) == true )
 802189c:	f001 fc7f 	bl	802319e <LoRaMacClassBIsPingExpected>
 80218a0:	4607      	mov	r7, r0
 80218a2:	b1c8      	cbz	r0, 80218d8 <LoRaMacProcess+0x398>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80218a4:	4640      	mov	r0, r8
 80218a6:	f001 fc6f 	bl	8023188 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80218aa:	4640      	mov	r0, r8
 80218ac:	f001 fc71 	bl	8023192 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80218b0:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80218b2:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
 80218b6:	f896 b000 	ldrb.w	fp, [r6]
    switch( macHdr.Bits.MType )
 80218ba:	ea4f 135b 	mov.w	r3, fp, lsr #5
 80218be:	3b01      	subs	r3, #1
 80218c0:	2b06      	cmp	r3, #6
 80218c2:	f200 81e9 	bhi.w	8021c98 <LoRaMacProcess+0x758>
 80218c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80218ca:	0013      	.short	0x0013
 80218cc:	009401e7 	.word	0x009401e7
 80218d0:	009101e7 	.word	0x009101e7
 80218d4:	01d801e7 	.word	0x01d801e7
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80218d8:	f001 fc63 	bl	80231a2 <LoRaMacClassBIsMulticastExpected>
 80218dc:	2800      	cmp	r0, #0
 80218de:	d0ea      	beq.n	80218b6 <LoRaMacProcess+0x376>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80218e0:	4638      	mov	r0, r7
 80218e2:	f001 fc52 	bl	802318a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80218e6:	4638      	mov	r0, r7
 80218e8:	f001 fc54 	bl	8023194 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80218ec:	2305      	movs	r3, #5
 80218ee:	e7e0      	b.n	80218b2 <LoRaMacProcess+0x372>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80218f0:	2d10      	cmp	r5, #16
 80218f2:	d803      	bhi.n	80218fc <LoRaMacProcess+0x3bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80218f4:	2301      	movs	r3, #1
 80218f6:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 80218fa:	e121      	b.n	8021b40 <LoRaMacProcess+0x600>
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80218fc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            macMsgJoinAccept.Buffer = payload;
 8021900:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgJoinAccept.BufSize = size;
 8021902:	b2ed      	uxtb	r5, r5
 8021904:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8021908:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 802190c:	2b00      	cmp	r3, #0
 802190e:	d1f1      	bne.n	80218f4 <LoRaMacProcess+0x3b4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8021910:	f7fc ff76 	bl	801e800 <SecureElementGetJoinEui>
 8021914:	aa0e      	add	r2, sp, #56	; 0x38
 8021916:	4601      	mov	r1, r0
 8021918:	20ff      	movs	r0, #255	; 0xff
 802191a:	f002 f95d 	bl	8023bd8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 802191e:	2800      	cmp	r0, #0
 8021920:	d15c      	bne.n	80219dc <LoRaMacProcess+0x49c>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8021922:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8021926:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 802192a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 802192e:	0412      	lsls	r2, r2, #16
 8021930:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8021934:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8021938:	430a      	orrs	r2, r1
 802193a:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 802193c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802193e:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8021940:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8021944:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8021948:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 802194c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8021950:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8021954:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8021958:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 802195c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8021960:	b3d2      	cbz	r2, 80219d8 <LoRaMacProcess+0x498>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8021962:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8021966:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 802196a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802196e:	434a      	muls	r2, r1
 8021970:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8021974:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8021978:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 802197c:	2600      	movs	r6, #0
                applyCFList.Payload = macMsgJoinAccept.CFList;
 802197e:	f10d 024a 	add.w	r2, sp, #74	; 0x4a
                applyCFList.Size = size - 17;
 8021982:	3d11      	subs	r5, #17
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8021984:	f883 6162 	strb.w	r6, [r3, #354]	; 0x162
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8021988:	920c      	str	r2, [sp, #48]	; 0x30
                applyCFList.Size = size - 17;
 802198a:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 802198e:	7818      	ldrb	r0, [r3, #0]
 8021990:	a90c      	add	r1, sp, #48	; 0x30
 8021992:	f002 fb48 	bl	8024026 <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8021996:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 802199a:	2202      	movs	r2, #2
 802199c:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80219a0:	2001      	movs	r0, #1
 80219a2:	f001 fdf7 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
 80219a6:	b118      	cbz	r0, 80219b0 <LoRaMacProcess+0x470>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80219a8:	2101      	movs	r1, #1
 80219aa:	4630      	mov	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80219ac:	f001 fdb8 	bl	8023520 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 80219b0:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	f000 8175 	beq.w	8021ca4 <LoRaMacProcess+0x764>
        if( MacCtx.McpsConfirm.AckReceived == true )
 80219ba:	f894 3444 	ldrb.w	r3, [r4, #1092]	; 0x444
 80219be:	b113      	cbz	r3, 80219c6 <LoRaMacProcess+0x486>
            OnAckTimeoutTimerEvent( NULL );
 80219c0:	2000      	movs	r0, #0
 80219c2:	f7fe fe95 	bl	80206f0 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 80219c6:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 80219ca:	f043 0320 	orr.w	r3, r3, #32
 80219ce:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 80219d2:	f7fe fe1d 	bl	8020610 <UpdateRxSlotIdleState>
 80219d6:	e670      	b.n	80216ba <LoRaMacProcess+0x17a>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 80219d8:	2201      	movs	r2, #1
 80219da:	e7c2      	b.n	8021962 <LoRaMacProcess+0x422>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80219dc:	2001      	movs	r0, #1
 80219de:	f001 fdd9 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
 80219e2:	2800      	cmp	r0, #0
 80219e4:	d0e4      	beq.n	80219b0 <LoRaMacProcess+0x470>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80219e6:	2101      	movs	r1, #1
 80219e8:	2007      	movs	r0, #7
 80219ea:	e7df      	b.n	80219ac <LoRaMacProcess+0x46c>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80219ec:	2301      	movs	r3, #1
 80219ee:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80219f2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80219f6:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80219fa:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80219fe:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
 8021a02:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8021a06:	220d      	movs	r2, #13
 8021a08:	f88d 2020 	strb.w	r2, [sp, #32]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8021a0c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 8021a10:	b112      	cbz	r2, 8021a18 <LoRaMacProcess+0x4d8>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8021a12:	220e      	movs	r2, #14
 8021a14:	f88d 2020 	strb.w	r2, [sp, #32]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021a18:	7818      	ldrb	r0, [r3, #0]
 8021a1a:	a908      	add	r1, sp, #32
 8021a1c:	f002 fadd 	bl	8023fda <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8021a20:	f1a5 030d 	sub.w	r3, r5, #13
 8021a24:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021a26:	9006      	str	r0, [sp, #24]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8021a28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021a2c:	b200      	sxth	r0, r0
 8021a2e:	4283      	cmp	r3, r0
 8021a30:	f73f af60 	bgt.w	80218f4 <LoRaMacProcess+0x3b4>
 8021a34:	2d0b      	cmp	r5, #11
 8021a36:	f67f af5d 	bls.w	80218f4 <LoRaMacProcess+0x3b4>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8021a3a:	4bbc      	ldr	r3, [pc, #752]	; (8021d2c <LoRaMacProcess+0x7ec>)
 8021a3c:	9321      	str	r3, [sp, #132]	; 0x84
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8021a3e:	a818      	add	r0, sp, #96	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8021a40:	23ff      	movs	r3, #255	; 0xff
            macMsgData.Buffer = payload;
 8021a42:	9618      	str	r6, [sp, #96]	; 0x60
            macMsgData.BufSize = size;
 8021a44:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8021a48:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8021a4c:	f002 f9c6 	bl	8023ddc <LoRaMacParserData>
 8021a50:	4606      	mov	r6, r0
 8021a52:	2800      	cmp	r0, #0
 8021a54:	f47f af4e 	bne.w	80218f4 <LoRaMacProcess+0x3b4>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8021a58:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8021a5c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8021a5e:	f8c4 0438 	str.w	r0, [r4, #1080]	; 0x438
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8021a62:	f012 030f 	ands.w	r3, r2, #15
 8021a66:	d003      	beq.n	8021a70 <LoRaMacProcess+0x530>
 8021a68:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
 8021a6c:	2900      	cmp	r1, #0
 8021a6e:	d16a      	bne.n	8021b46 <LoRaMacProcess+0x606>
    else if( macMsg->FRMPayloadSize == 0 )
 8021a70:	f89d 1088 	ldrb.w	r1, [sp, #136]	; 0x88
 8021a74:	2900      	cmp	r1, #0
 8021a76:	d068      	beq.n	8021b4a <LoRaMacProcess+0x60a>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	f47f af3b 	bne.w	80218f4 <LoRaMacProcess+0x3b4>
 8021a7e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
        *fType = FRAME_TYPE_D;
 8021a82:	2b00      	cmp	r3, #0
 8021a84:	bf0c      	ite	eq
 8021a86:	2502      	moveq	r5, #2
 8021a88:	2503      	movne	r5, #3
            downLinkCounter = 0;
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	9307      	str	r3, [sp, #28]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8021a8e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8021a92:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8021a94:	4288      	cmp	r0, r1
 8021a96:	d15a      	bne.n	8021b4e <LoRaMacProcess+0x60e>
 8021a98:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 8021a9c:	2800      	cmp	r0, #0
 8021a9e:	d056      	beq.n	8021b4e <LoRaMacProcess+0x60e>
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8021aa0:	6f18      	ldr	r0, [r3, #112]	; 0x70
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 8021aa2:	f893 8053 	ldrb.w	r8, [r3, #83]	; 0x53
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8021aa6:	6800      	ldr	r0, [r0, #0]
 8021aa8:	9007      	str	r0, [sp, #28]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8021aaa:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
 8021aae:	2802      	cmp	r0, #2
 8021ab0:	d102      	bne.n	8021ab8 <LoRaMacProcess+0x578>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8021ab2:	2003      	movs	r0, #3
 8021ab4:	f884 0431 	strb.w	r0, [r4, #1073]	; 0x431
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8021ab8:	2d03      	cmp	r5, #3
 8021aba:	f47f af1b 	bne.w	80218f4 <LoRaMacProcess+0x3b4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8021abe:	f012 0f60 	tst.w	r2, #96	; 0x60
 8021ac2:	f47f af17 	bne.w	80218f4 <LoRaMacProcess+0x3b4>
 8021ac6:	9103      	str	r1, [sp, #12]
 8021ac8:	2601      	movs	r6, #1
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8021aca:	2215      	movs	r2, #21
 8021acc:	f88d 2020 	strb.w	r2, [sp, #32]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021ad0:	7818      	ldrb	r0, [r3, #0]
 8021ad2:	a908      	add	r1, sp, #32
 8021ad4:	f002 fa81 	bl	8023fda <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8021ad8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021adc:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8021ade:	f893 7162 	ldrb.w	r7, [r3, #354]	; 0x162
    switch( addrID )
 8021ae2:	f1b8 0f00 	cmp.w	r8, #0
 8021ae6:	d035      	beq.n	8021b54 <LoRaMacProcess+0x614>
 8021ae8:	f1b8 0f01 	cmp.w	r8, #1
 8021aec:	d13e      	bne.n	8021b6c <LoRaMacProcess+0x62c>
            if( lrWanVersion.Fields.Minor == 1 )
 8021aee:	2f01      	cmp	r7, #1
 8021af0:	d132      	bne.n	8021b58 <LoRaMacProcess+0x618>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8021af2:	b39d      	cbz	r5, 8021b5c <LoRaMacProcess+0x61c>
                    *fCntID = A_FCNT_DOWN;
 8021af4:	2d03      	cmp	r5, #3
 8021af6:	bf14      	ite	ne
 8021af8:	4647      	movne	r7, r8
 8021afa:	2702      	moveq	r7, #2
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8021afc:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 8021b00:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021b04:	ab07      	add	r3, sp, #28
 8021b06:	4638      	mov	r0, r7
 8021b08:	f001 fee8 	bl	80238dc <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8021b0c:	b380      	cbz	r0, 8021b70 <LoRaMacProcess+0x630>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8021b0e:	2807      	cmp	r0, #7
 8021b10:	d126      	bne.n	8021b60 <LoRaMacProcess+0x620>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8021b12:	2308      	movs	r3, #8
 8021b14:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 8021b18:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8021b1c:	f893 2162 	ldrb.w	r2, [r3, #354]	; 0x162
 8021b20:	b95a      	cbnz	r2, 8021b3a <LoRaMacProcess+0x5fa>
 8021b22:	f00b 02e0 	and.w	r2, fp, #224	; 0xe0
 8021b26:	2aa0      	cmp	r2, #160	; 0xa0
 8021b28:	d107      	bne.n	8021b3a <LoRaMacProcess+0x5fa>
 8021b2a:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
 8021b2e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021b30:	4291      	cmp	r1, r2
 8021b32:	d102      	bne.n	8021b3a <LoRaMacProcess+0x5fa>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8021b34:	2201      	movs	r2, #1
 8021b36:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8021b3a:	9b07      	ldr	r3, [sp, #28]
 8021b3c:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 8021b40:	f7fe fdfa 	bl	8020738 <PrepareRxDoneAbort>
                return;
 8021b44:	e5b9      	b.n	80216ba <LoRaMacProcess+0x17a>
        *fType = FRAME_TYPE_A;
 8021b46:	4635      	mov	r5, r6
 8021b48:	e79f      	b.n	8021a8a <LoRaMacProcess+0x54a>
        *fType = FRAME_TYPE_B;
 8021b4a:	2501      	movs	r5, #1
 8021b4c:	e79d      	b.n	8021a8a <LoRaMacProcess+0x54a>
 8021b4e:	f04f 0801 	mov.w	r8, #1
 8021b52:	e7ba      	b.n	8021aca <LoRaMacProcess+0x58a>
    switch( addrID )
 8021b54:	2704      	movs	r7, #4
 8021b56:	e7d1      	b.n	8021afc <LoRaMacProcess+0x5bc>
                *fCntID = FCNT_DOWN;
 8021b58:	2703      	movs	r7, #3
 8021b5a:	e7cf      	b.n	8021afc <LoRaMacProcess+0x5bc>
                    *fCntID = A_FCNT_DOWN;
 8021b5c:	2702      	movs	r7, #2
 8021b5e:	e7cd      	b.n	8021afc <LoRaMacProcess+0x5bc>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8021b60:	2808      	cmp	r0, #8
 8021b62:	d103      	bne.n	8021b6c <LoRaMacProcess+0x62c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8021b64:	230a      	movs	r3, #10
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8021b66:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 8021b6a:	e7e6      	b.n	8021b3a <LoRaMacProcess+0x5fa>
 8021b6c:	2301      	movs	r3, #1
 8021b6e:	e7fa      	b.n	8021b66 <LoRaMacProcess+0x626>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8021b70:	ab18      	add	r3, sp, #96	; 0x60
 8021b72:	9300      	str	r3, [sp, #0]
 8021b74:	9903      	ldr	r1, [sp, #12]
 8021b76:	9b07      	ldr	r3, [sp, #28]
 8021b78:	463a      	mov	r2, r7
 8021b7a:	4640      	mov	r0, r8
 8021b7c:	f001 ff8c 	bl	8023a98 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8021b80:	b120      	cbz	r0, 8021b8c <LoRaMacProcess+0x64c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8021b82:	2802      	cmp	r0, #2
 8021b84:	bf0c      	ite	eq
 8021b86:	230b      	moveq	r3, #11
 8021b88:	230c      	movne	r3, #12
 8021b8a:	e6b4      	b.n	80218f6 <LoRaMacProcess+0x3b6>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8021b8c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8021b90:	f894 1431 	ldrb.w	r1, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8021b94:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8021b98:	f3c3 1200 	ubfx	r2, r3, #4, #1
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8021b9c:	2901      	cmp	r1, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8021b9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8021ba2:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8021ba6:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8021baa:	bf98      	it	ls
 8021bac:	f8d4 3488 	ldrls.w	r3, [r4, #1160]	; 0x488
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8021bb0:	f884 2425 	strb.w	r2, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8021bb4:	9a07      	ldr	r2, [sp, #28]
            MacCtx.McpsIndication.Multicast = multicast;
 8021bb6:	f884 6422 	strb.w	r6, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8021bba:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8021bbe:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8021bc2:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8021bc6:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8021bca:	bf98      	it	ls
 8021bcc:	f8c3 0080 	strls.w	r0, [r3, #128]	; 0x80
            if( multicast == 1 )
 8021bd0:	2e01      	cmp	r6, #1
 8021bd2:	d12b      	bne.n	8021c2c <LoRaMacProcess+0x6ec>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8021bd4:	2302      	movs	r3, #2
 8021bd6:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8021bda:	2901      	cmp	r1, #1
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8021bdc:	f894 2440 	ldrb.w	r2, [r4, #1088]	; 0x440
 8021be0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8021be4:	d805      	bhi.n	8021bf2 <LoRaMacProcess+0x6b2>
        if( request == MCPS_CONFIRMED )
 8021be6:	2a01      	cmp	r2, #1
 8021be8:	d101      	bne.n	8021bee <LoRaMacProcess+0x6ae>
            if( fCtrl.Bits.Ack == 1 )
 8021bea:	069e      	lsls	r6, r3, #26
 8021bec:	d501      	bpl.n	8021bf2 <LoRaMacProcess+0x6b2>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8021bee:	f001 fbb1 	bl	8023354 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8021bf2:	2d02      	cmp	r5, #2
 8021bf4:	d030      	beq.n	8021c58 <LoRaMacProcess+0x718>
 8021bf6:	2d03      	cmp	r5, #3
 8021bf8:	d009      	beq.n	8021c0e <LoRaMacProcess+0x6ce>
 8021bfa:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8021bfe:	2d01      	cmp	r5, #1
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8021c00:	464a      	mov	r2, r9
 8021c02:	f001 010f 	and.w	r1, r1, #15
 8021c06:	a81c      	add	r0, sp, #112	; 0x70
 8021c08:	d02a      	beq.n	8021c60 <LoRaMacProcess+0x720>
 8021c0a:	f7ff f9af 	bl	8020f6c <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8021c0e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8021c12:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8021c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021c18:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8021c1c:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 8021c20:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8021c24:	2301      	movs	r3, #1
 8021c26:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
                    break;
 8021c2a:	e01f      	b.n	8021c6c <LoRaMacProcess+0x72c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8021c2c:	f00b 02e0 	and.w	r2, fp, #224	; 0xe0
 8021c30:	2aa0      	cmp	r2, #160	; 0xa0
 8021c32:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8021c36:	d10b      	bne.n	8021c50 <LoRaMacProcess+0x710>
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8021c38:	f893 0162 	ldrb.w	r0, [r3, #354]	; 0x162
                    MacCtx.NvmCtx->SrvAckRequested = true;
 8021c3c:	2201      	movs	r2, #1
 8021c3e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8021c42:	b910      	cbnz	r0, 8021c4a <LoRaMacProcess+0x70a>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 8021c44:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021c46:	f8c3 0168 	str.w	r0, [r3, #360]	; 0x168
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8021c4a:	f884 2420 	strb.w	r2, [r4, #1056]	; 0x420
 8021c4e:	e7c4      	b.n	8021bda <LoRaMacProcess+0x69a>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 8021c50:	2200      	movs	r2, #0
 8021c52:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8021c56:	e7f8      	b.n	8021c4a <LoRaMacProcess+0x70a>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8021c58:	f89d 1088 	ldrb.w	r1, [sp, #136]	; 0x88
 8021c5c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8021c5e:	464a      	mov	r2, r9
 8021c60:	f7ff f984 	bl	8020f6c <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8021c64:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8021c68:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8021c6c:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8021c70:	f043 0302 	orr.w	r3, r3, #2
 8021c74:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
            break;
 8021c78:	e69a      	b.n	80219b0 <LoRaMacProcess+0x470>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8021c7a:	4f2c      	ldr	r7, [pc, #176]	; (8021d2c <LoRaMacProcess+0x7ec>)
 8021c7c:	3d01      	subs	r5, #1
 8021c7e:	b2aa      	uxth	r2, r5
 8021c80:	1c71      	adds	r1, r6, #1
 8021c82:	4638      	mov	r0, r7
 8021c84:	f003 fa8a 	bl	802519c <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8021c88:	2303      	movs	r3, #3
 8021c8a:	f8a4 3420 	strh.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8021c8e:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8021c92:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 8021c96:	e7e9      	b.n	8021c6c <LoRaMacProcess+0x72c>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8021c98:	2301      	movs	r3, #1
 8021c9a:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8021c9e:	f7fe fd4b 	bl	8020738 <PrepareRxDoneAbort>
            break;
 8021ca2:	e685      	b.n	80219b0 <LoRaMacProcess+0x470>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8021ca4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8021ca8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8021cac:	2b02      	cmp	r3, #2
 8021cae:	f47f ae8a 	bne.w	80219c6 <LoRaMacProcess+0x486>
 8021cb2:	e685      	b.n	80219c0 <LoRaMacProcess+0x480>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8021cb4:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8021cb8:	075d      	lsls	r5, r3, #29
 8021cba:	d50f      	bpl.n	8021cdc <LoRaMacProcess+0x79c>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8021cbc:	2001      	movs	r0, #1
 8021cbe:	f001 fc69 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
 8021cc2:	b3b8      	cbz	r0, 8021d34 <LoRaMacProcess+0x7f4>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8021cc4:	2001      	movs	r0, #1
 8021cc6:	f001 fc3d 	bl	8023544 <LoRaMacConfirmQueueGetStatus>
 8021cca:	b908      	cbnz	r0, 8021cd0 <LoRaMacProcess+0x790>
                MacCtx.ChannelsNbTransCounter = 0;
 8021ccc:	f884 0414 	strb.w	r0, [r4, #1044]	; 0x414
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8021cd0:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8021cd4:	f023 0302 	bic.w	r3, r3, #2
 8021cd8:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8021cdc:	f894 1485 	ldrb.w	r1, [r4, #1157]	; 0x485
 8021ce0:	07c8      	lsls	r0, r1, #31
 8021ce2:	f57f ad40 	bpl.w	8021766 <LoRaMacProcess+0x226>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8021ce6:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8021cea:	b10b      	cbz	r3, 8021cf0 <LoRaMacProcess+0x7b0>
 8021cec:	2b03      	cmp	r3, #3
 8021cee:	d12c      	bne.n	8021d4a <LoRaMacProcess+0x80a>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8021cf0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.ChannelsNbTransCounter >=
 8021cf4:	f894 0414 	ldrb.w	r0, [r4, #1044]	; 0x414
 8021cf8:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8021cfc:	4290      	cmp	r0, r2
 8021cfe:	d208      	bcs.n	8021d12 <LoRaMacProcess+0x7d2>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8021d00:	078a      	lsls	r2, r1, #30
 8021d02:	d557      	bpl.n	8021db4 <LoRaMacProcess+0x874>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8021d04:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8021d08:	b11b      	cbz	r3, 8021d12 <LoRaMacProcess+0x7d2>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8021d0a:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8021d0e:	2b00      	cmp	r3, #0
 8021d10:	d150      	bne.n	8021db4 <LoRaMacProcess+0x874>
            TimerStop( &MacCtx.TxDelayedTimer );
 8021d12:	4807      	ldr	r0, [pc, #28]	; (8021d30 <LoRaMacProcess+0x7f0>)
 8021d14:	f004 ffe6 	bl	8026ce4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8021d18:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8021d1c:	f023 0320 	bic.w	r3, r3, #32
 8021d20:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
            StopRetransmission( );
 8021d24:	f7fe fc82 	bl	802062c <StopRetransmission>
 8021d28:	e51d      	b.n	8021766 <LoRaMacProcess+0x226>
 8021d2a:	bf00      	nop
 8021d2c:	20001d0c 	.word	0x20001d0c
 8021d30:	20001e3c 	.word	0x20001e3c
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8021d34:	2005      	movs	r0, #5
 8021d36:	f001 fc2d 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
 8021d3a:	2800      	cmp	r0, #0
 8021d3c:	d1c8      	bne.n	8021cd0 <LoRaMacProcess+0x790>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8021d3e:	2006      	movs	r0, #6
 8021d40:	f001 fc28 	bl	8023594 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8021d44:	2800      	cmp	r0, #0
 8021d46:	d1c3      	bne.n	8021cd0 <LoRaMacProcess+0x790>
 8021d48:	e7c8      	b.n	8021cdc <LoRaMacProcess+0x79c>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8021d4a:	2b01      	cmp	r3, #1
 8021d4c:	d132      	bne.n	8021db4 <LoRaMacProcess+0x874>
            if( MacCtx.AckTimeoutRetry == true )
 8021d4e:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
 8021d52:	2a00      	cmp	r2, #0
 8021d54:	f43f ad07 	beq.w	8021766 <LoRaMacProcess+0x226>
    if( MacCtx.AckTimeoutRetriesCounter >=
 8021d58:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
        MacCtx.AckTimeoutRetries )
 8021d5c:	f894 5415 	ldrb.w	r5, [r4, #1045]	; 0x415
    if( MacCtx.AckTimeoutRetriesCounter >=
 8021d60:	42ab      	cmp	r3, r5
 8021d62:	d204      	bcs.n	8021d6e <LoRaMacProcess+0x82e>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8021d64:	f011 0202 	ands.w	r2, r1, #2
        if( MacCtx.McpsConfirm.AckReceived == true )
 8021d68:	bf18      	it	ne
 8021d6a:	f894 2444 	ldrbne.w	r2, [r4, #1092]	; 0x444
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8021d6e:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 8021d72:	f890 1162 	ldrb.w	r1, [r0, #354]	; 0x162
 8021d76:	2900      	cmp	r1, #0
 8021d78:	d13e      	bne.n	8021df8 <LoRaMacProcess+0x8b8>
                    if( stopRetransmission == false )
 8021d7a:	bb3a      	cbnz	r2, 8021dcc <LoRaMacProcess+0x88c>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8021d7c:	42ab      	cmp	r3, r5
 8021d7e:	d219      	bcs.n	8021db4 <LoRaMacProcess+0x874>
        MacCtx.AckTimeoutRetriesCounter++;
 8021d80:	3301      	adds	r3, #1
 8021d82:	b2db      	uxtb	r3, r3
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8021d84:	07df      	lsls	r7, r3, #31
        MacCtx.AckTimeoutRetriesCounter++;
 8021d86:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8021d8a:	d513      	bpl.n	8021db4 <LoRaMacProcess+0x874>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8021d8c:	2322      	movs	r3, #34	; 0x22
 8021d8e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8021d92:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 8021d96:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8021d9a:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
 8021d9e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021da2:	7800      	ldrb	r0, [r0, #0]
 8021da4:	a918      	add	r1, sp, #96	; 0x60
 8021da6:	f002 f918 	bl	8023fda <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8021daa:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021dae:	900e      	str	r0, [sp, #56]	; 0x38
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8021db0:	f883 0085 	strb.w	r0, [r3, #133]	; 0x85
            MacCtx.MacFlags.Bits.MacDone = 0;
 8021db4:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8021db8:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8021dba:	f36f 1345 	bfc	r3, #5, #1
 8021dbe:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8021dc2:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
            OnTxDelayedTimerEvent( NULL );
 8021dc6:	f7fe ffb1 	bl	8020d2c <OnTxDelayedTimerEvent>
 8021dca:	e4cc      	b.n	8021766 <LoRaMacProcess+0x226>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8021dcc:	f894 5444 	ldrb.w	r5, [r4, #1092]	; 0x444
 8021dd0:	b96d      	cbnz	r5, 8021dee <LoRaMacProcess+0x8ae>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8021dd2:	2302      	movs	r3, #2
 8021dd4:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
        params.NvmCtx = Contexts.RegionNvmCtx;
 8021dd8:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 8021ddc:	9318      	str	r3, [sp, #96]	; 0x60
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8021dde:	7800      	ldrb	r0, [r0, #0]
 8021de0:	a918      	add	r1, sp, #96	; 0x60
 8021de2:	f002 f90a 	bl	8023ffa <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8021de6:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
        MacCtx.McpsConfirm.AckReceived = false;
 8021dea:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8021dee:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8021df2:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
        if( stopRetransmission == true )
 8021df6:	e78c      	b.n	8021d12 <LoRaMacProcess+0x7d2>
 8021df8:	2a00      	cmp	r2, #0
 8021dfa:	d0db      	beq.n	8021db4 <LoRaMacProcess+0x874>
 8021dfc:	e789      	b.n	8021d12 <LoRaMacProcess+0x7d2>
 8021dfe:	bf00      	nop

08021e00 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8021e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e04:	460f      	mov	r7, r1
 8021e06:	b094      	sub	sp, #80	; 0x50
 8021e08:	4691      	mov	r9, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 8021e0a:	4606      	mov	r6, r0
 8021e0c:	2800      	cmp	r0, #0
 8021e0e:	f000 81e3 	beq.w	80221d8 <LoRaMacInitialization+0x3d8>
 8021e12:	2900      	cmp	r1, #0
 8021e14:	f000 81e0 	beq.w	80221d8 <LoRaMacInitialization+0x3d8>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8021e18:	6803      	ldr	r3, [r0, #0]
 8021e1a:	2b00      	cmp	r3, #0
 8021e1c:	f000 81dc 	beq.w	80221d8 <LoRaMacInitialization+0x3d8>
 8021e20:	6843      	ldr	r3, [r0, #4]
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	f000 81d8 	beq.w	80221d8 <LoRaMacInitialization+0x3d8>
        ( primitives->MacMcpsIndication == NULL ) ||
 8021e28:	6883      	ldr	r3, [r0, #8]
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	f000 81d4 	beq.w	80221d8 <LoRaMacInitialization+0x3d8>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8021e30:	68c3      	ldr	r3, [r0, #12]
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	f000 81d0 	beq.w	80221d8 <LoRaMacInitialization+0x3d8>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8021e38:	4610      	mov	r0, r2
 8021e3a:	f002 f8ca 	bl	8023fd2 <RegionIsActive>
 8021e3e:	2800      	cmp	r0, #0
 8021e40:	f000 81cc 	beq.w	80221dc <LoRaMacInitialization+0x3dc>

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8021e44:	4cb6      	ldr	r4, [pc, #728]	; (8022120 <LoRaMacInitialization+0x320>)
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8021e46:	49b7      	ldr	r1, [pc, #732]	; (8022124 <LoRaMacInitialization+0x324>)
 8021e48:	4630      	mov	r0, r6
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8021e4a:	f504 6599 	add.w	r5, r4, #1224	; 0x4c8
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8021e4e:	f001 fb0d 	bl	802346c <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8021e52:	4628      	mov	r0, r5
 8021e54:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8021e58:	2100      	movs	r1, #0
 8021e5a:	f003 f9b3 	bl	80251c4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8021e5e:	f240 428c 	movw	r2, #1164	; 0x48c
 8021e62:	2100      	movs	r1, #0
 8021e64:	1d20      	adds	r0, r4, #4
 8021e66:	f003 f9ad 	bl	80251c4 <memset1>
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
    MacCtx.NvmCtx->RepeaterSupport = false;

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8021e6a:	4baf      	ldr	r3, [pc, #700]	; (8022128 <LoRaMacInitialization+0x328>)
    MacCtx.NvmCtx = &NvmMacCtx;
 8021e6c:	f8c4 5488 	str.w	r5, [r4, #1160]	; 0x488
    MacCtx.AckTimeoutRetriesCounter = 1;
 8021e70:	f04f 0801 	mov.w	r8, #1
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8021e74:	2500      	movs	r5, #0
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8021e76:	f8c4 3628 	str.w	r3, [r4, #1576]	; 0x628

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021e7a:	a906      	add	r1, sp, #24
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8021e7c:	230f      	movs	r3, #15
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021e7e:	4648      	mov	r0, r9
    MacCtx.NvmCtx->Region = region;
 8021e80:	f884 94c8 	strb.w	r9, [r4, #1224]	; 0x4c8
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8021e84:	f884 5544 	strb.w	r5, [r4, #1348]	; 0x544
    MacCtx.NvmCtx->RepeaterSupport = false;
 8021e88:	f884 5592 	strb.w	r5, [r4, #1426]	; 0x592
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8021e8c:	f88d 3018 	strb.w	r3, [sp, #24]
    MacCtx.AckTimeoutRetriesCounter = 1;
 8021e90:	f884 8416 	strb.w	r8, [r4, #1046]	; 0x416
    MacCtx.AckTimeoutRetries = 1;
 8021e94:	f884 8415 	strb.w	r8, [r4, #1045]	; 0x415
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021e98:	f002 f89f 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8021e9c:	f04f 0a0a 	mov.w	sl, #10
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8021ea0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021ea4:	9005      	str	r0, [sp, #20]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8021ea6:	1b40      	subs	r0, r0, r5
 8021ea8:	bf18      	it	ne
 8021eaa:	2001      	movne	r0, #1
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8021eac:	f88d a018 	strb.w	sl, [sp, #24]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8021eb0:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021eb4:	a906      	add	r1, sp, #24
 8021eb6:	7818      	ldrb	r0, [r3, #0]
 8021eb8:	f002 f88f 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 8021ebc:	f04f 0906 	mov.w	r9, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8021ec0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    getPhy.Attribute = PHY_DEF_TX_DR;
 8021ec4:	f88d 9018 	strb.w	r9, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8021ec8:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021eca:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021ecc:	a906      	add	r1, sp, #24
 8021ece:	7818      	ldrb	r0, [r3, #0]
 8021ed0:	f002 f883 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8021ed4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021ed8:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8021eda:	2210      	movs	r2, #16
 8021edc:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8021ee0:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021ee2:	a906      	add	r1, sp, #24
 8021ee4:	7818      	ldrb	r0, [r3, #0]
 8021ee6:	f002 f878 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8021eea:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021eee:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8021ef0:	2211      	movs	r2, #17
 8021ef2:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8021ef6:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021ef8:	a906      	add	r1, sp, #24
 8021efa:	7818      	ldrb	r0, [r3, #0]
 8021efc:	f002 f86d 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8021f00:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f04:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8021f06:	2212      	movs	r2, #18
 8021f08:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8021f0c:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f0e:	a906      	add	r1, sp, #24
 8021f10:	7818      	ldrb	r0, [r3, #0]
 8021f12:	f002 f862 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8021f16:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f1a:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8021f1c:	2213      	movs	r2, #19
 8021f1e:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8021f22:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f24:	a906      	add	r1, sp, #24
 8021f26:	7818      	ldrb	r0, [r3, #0]
 8021f28:	f002 f857 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8021f2c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f30:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8021f32:	2214      	movs	r2, #20
 8021f34:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8021f38:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f3a:	a906      	add	r1, sp, #24
 8021f3c:	7818      	ldrb	r0, [r3, #0]
 8021f3e:	f002 f84c 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8021f42:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f46:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8021f48:	2217      	movs	r2, #23
 8021f4a:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8021f4e:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f50:	a906      	add	r1, sp, #24
 8021f52:	7818      	ldrb	r0, [r3, #0]
 8021f54:	f002 f841 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8021f58:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f5c:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8021f5e:	2218      	movs	r2, #24
 8021f60:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8021f64:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f68:	eb0d 0102 	add.w	r1, sp, r2
 8021f6c:	7818      	ldrb	r0, [r3, #0]
 8021f6e:	f002 f834 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8021f72:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f76:	9005      	str	r0, [sp, #20]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8021f78:	2219      	movs	r2, #25
 8021f7a:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8021f7e:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8021f80:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f82:	a906      	add	r1, sp, #24
 8021f84:	7818      	ldrb	r0, [r3, #0]
 8021f86:	f002 f828 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8021f8a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021f8e:	9005      	str	r0, [sp, #20]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8021f90:	221e      	movs	r2, #30
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8021f92:	b2c0      	uxtb	r0, r0
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8021f94:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8021f98:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8021f9c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021fa0:	a906      	add	r1, sp, #24
 8021fa2:	7818      	ldrb	r0, [r3, #0]
 8021fa4:	f002 f819 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8021fa8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021fac:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8021fae:	221f      	movs	r2, #31
 8021fb0:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8021fb4:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021fb8:	a906      	add	r1, sp, #24
 8021fba:	7818      	ldrb	r0, [r3, #0]
 8021fbc:	f002 f80d 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8021fc0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021fc4:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8021fc6:	2220      	movs	r2, #32
 8021fc8:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8021fcc:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021fd0:	a906      	add	r1, sp, #24
 8021fd2:	7818      	ldrb	r0, [r3, #0]
 8021fd4:	f002 f801 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8021fd8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021fdc:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8021fde:	2221      	movs	r2, #33	; 0x21
 8021fe0:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8021fe4:	63d8      	str	r0, [r3, #60]	; 0x3c
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021fe6:	a906      	add	r1, sp, #24
 8021fe8:	7818      	ldrb	r0, [r3, #0]
 8021fea:	f001 fff6 	bl	8023fda <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8021fee:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021ff2:	9005      	str	r0, [sp, #20]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8021ff4:	220b      	movs	r2, #11
 8021ff6:	f88d 2018 	strb.w	r2, [sp, #24]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8021ffa:	6418      	str	r0, [r3, #64]	; 0x40
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8021ffc:	a906      	add	r1, sp, #24
 8021ffe:	7818      	ldrb	r0, [r3, #0]
 8022000:	f001 ffeb 	bl	8023fda <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8022004:	230c      	movs	r3, #12
 8022006:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 802200a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    MacCtx.AdrAckLimit = phyParam.Value;
 802200e:	f8a4 03f8 	strh.w	r0, [r4, #1016]	; 0x3f8
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8022012:	9005      	str	r0, [sp, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8022014:	a906      	add	r1, sp, #24
 8022016:	7818      	ldrb	r0, [r3, #0]
 8022018:	f001 ffdf 	bl	8023fda <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 802201c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    MacCtx.AdrAckDelay = phyParam.Value;
 8022020:	f8a4 03fa 	strh.w	r0, [r4, #1018]	; 0x3fa
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8022024:	691a      	ldr	r2, [r3, #16]
 8022026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 802202a:	695a      	ldr	r2, [r3, #20]
 802202c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8022030:	699a      	ldr	r2, [r3, #24]
 8022032:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8022036:	69da      	ldr	r2, [r3, #28]
 8022038:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 802203c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8022040:	6a1a      	ldr	r2, [r3, #32]
    params.NvmCtx = NULL;
 8022042:	950a      	str	r5, [sp, #40]	; 0x28
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8022044:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8022048:	f883 8024 	strb.w	r8, [r3, #36]	; 0x24
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 802204c:	f8c3 a008 	str.w	sl, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8022050:	f883 900c 	strb.w	r9, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8022054:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8022058:	f883 908c 	strb.w	r9, [r3, #140]	; 0x8c
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 802205c:	f883 80a4 	strb.w	r8, [r3, #164]	; 0xa4
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8022060:	a90a      	add	r1, sp, #40	; 0x28
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8022062:	9005      	str	r0, [sp, #20]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8022064:	7818      	ldrb	r0, [r3, #0]
 8022066:	f001 ffc8 	bl	8023ffa <RegionInitDefaults>

    ResetMacParameters( );
 802206a:	f7fe fbeb 	bl	8020844 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 802206e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8022072:	462a      	mov	r2, r5
    MacCtx.NvmCtx->PublicNetwork = true;
 8022074:	f883 807d 	strb.w	r8, [r3, #125]	; 0x7d
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8022078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    MacCtx.MacCallbacks = callbacks;
 802207c:	e9c4 67d2 	strd	r6, r7, [r4, #840]	; 0x348
    MacCtx.MacFlags.Value = 0;
 8022080:	f884 5485 	strb.w	r5, [r4, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8022084:	f8c4 8344 	str.w	r8, [r4, #836]	; 0x344
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8022088:	f504 705b 	add.w	r0, r4, #876	; 0x36c
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 802208c:	e9c3 5554 	strd	r5, r5, [r3, #336]	; 0x150
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8022090:	4b26      	ldr	r3, [pc, #152]	; (802212c <LoRaMacInitialization+0x32c>)
 8022092:	9500      	str	r5, [sp, #0]
 8022094:	f004 fdc8 	bl	8026c28 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8022098:	462a      	mov	r2, r5
 802209a:	4b25      	ldr	r3, [pc, #148]	; (8022130 <LoRaMacInitialization+0x330>)
 802209c:	9500      	str	r5, [sp, #0]
 802209e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80220a2:	f504 7061 	add.w	r0, r4, #900	; 0x384
 80220a6:	f004 fdbf 	bl	8026c28 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80220aa:	462a      	mov	r2, r5
 80220ac:	4b21      	ldr	r3, [pc, #132]	; (8022134 <LoRaMacInitialization+0x334>)
 80220ae:	9500      	str	r5, [sp, #0]
 80220b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80220b4:	f504 7067 	add.w	r0, r4, #924	; 0x39c
 80220b8:	f004 fdb6 	bl	8026c28 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 80220bc:	ae02      	add	r6, sp, #8
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80220be:	462a      	mov	r2, r5
 80220c0:	4b1d      	ldr	r3, [pc, #116]	; (8022138 <LoRaMacInitialization+0x338>)
 80220c2:	9500      	str	r5, [sp, #0]
 80220c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80220c8:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 80220cc:	f004 fdac 	bl	8026c28 <UTIL_TIMER_Create>
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 80220d0:	4630      	mov	r0, r6
 80220d2:	f8d4 5488 	ldr.w	r5, [r4, #1160]	; 0x488
 80220d6:	f004 fd87 	bl	8026be8 <SysTimeGetMcuTime>
 80220da:	e896 0003 	ldmia.w	r6, {r0, r1}
 80220de:	f505 73ac 	add.w	r3, r5, #344	; 0x158
 80220e2:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80220e6:	4b15      	ldr	r3, [pc, #84]	; (802213c <LoRaMacInitialization+0x33c>)
 80220e8:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80220ec:	4b14      	ldr	r3, [pc, #80]	; (8022140 <LoRaMacInitialization+0x340>)
 80220ee:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80220f2:	4b14      	ldr	r3, [pc, #80]	; (8022144 <LoRaMacInitialization+0x344>)
 80220f4:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 80220f8:	4e13      	ldr	r6, [pc, #76]	; (8022148 <LoRaMacInitialization+0x348>)
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80220fa:	4b14      	ldr	r3, [pc, #80]	; (802214c <LoRaMacInitialization+0x34c>)
 80220fc:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8022100:	4b13      	ldr	r3, [pc, #76]	; (8022150 <LoRaMacInitialization+0x350>)
 8022102:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    Radio.Init( &MacCtx.RadioEvents );
 8022106:	f504 7054 	add.w	r0, r4, #848	; 0x350
 802210a:	6833      	ldr	r3, [r6, #0]
 802210c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 802210e:	4811      	ldr	r0, [pc, #68]	; (8022154 <LoRaMacInitialization+0x354>)
 8022110:	f7fc f952 	bl	801e3b8 <SecureElementInit>
 8022114:	b300      	cbz	r0, 8022158 <LoRaMacInitialization+0x358>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8022116:	2511      	movs	r5, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8022118:	4628      	mov	r0, r5
 802211a:	b014      	add	sp, #80	; 0x50
 802211c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022120:	20001ad0 	.word	0x20001ad0
 8022124:	080206ad 	.word	0x080206ad
 8022128:	01000300 	.word	0x01000300
 802212c:	08020d2d 	.word	0x08020d2d
 8022130:	08020ee9 	.word	0x08020ee9
 8022134:	08020f25 	.word	0x08020f25
 8022138:	080206f1 	.word	0x080206f1
 802213c:	080209b5 	.word	0x080209b5
 8022140:	08020965 	.word	0x08020965
 8022144:	080205f5 	.word	0x080205f5
 8022148:	08027928 	.word	0x08027928
 802214c:	08020935 	.word	0x08020935
 8022150:	08020905 	.word	0x08020905
 8022154:	0802069b 	.word	0x0802069b
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8022158:	4822      	ldr	r0, [pc, #136]	; (80221e4 <LoRaMacInitialization+0x3e4>)
 802215a:	f001 fb6f 	bl	802383c <LoRaMacCryptoInit>
 802215e:	2800      	cmp	r0, #0
 8022160:	d1d9      	bne.n	8022116 <LoRaMacInitialization+0x316>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8022162:	4821      	ldr	r0, [pc, #132]	; (80221e8 <LoRaMacInitialization+0x3e8>)
 8022164:	f001 f83e 	bl	80231e4 <LoRaMacCommandsInit>
 8022168:	2800      	cmp	r0, #0
 802216a:	d139      	bne.n	80221e0 <LoRaMacInitialization+0x3e0>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 802216c:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 8022170:	3050      	adds	r0, #80	; 0x50
 8022172:	f001 fbef 	bl	8023954 <LoRaMacCryptoSetMulticastReference>
 8022176:	4605      	mov	r5, r0
 8022178:	2800      	cmp	r0, #0
 802217a:	d1cc      	bne.n	8022116 <LoRaMacInitialization+0x316>
    srand1( Radio.Random( ) );
 802217c:	6973      	ldr	r3, [r6, #20]
 802217e:	4798      	blx	r3
 8022180:	f002 ffea 	bl	8025158 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8022184:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8022188:	6db3      	ldr	r3, [r6, #88]	; 0x58
 802218a:	f892 007d 	ldrb.w	r0, [r2, #125]	; 0x7d
 802218e:	4798      	blx	r3
    Radio.Sleep( );
 8022190:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8022192:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	9308      	str	r3, [sp, #32]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8022198:	68fb      	ldr	r3, [r7, #12]
 802219a:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 802219c:	4b13      	ldr	r3, [pc, #76]	; (80221ec <LoRaMacInitialization+0x3ec>)
 802219e:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80221a0:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 80221a4:	920d      	str	r2, [sp, #52]	; 0x34
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80221a6:	f1a3 0214 	sub.w	r2, r3, #20
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80221aa:	331d      	adds	r3, #29
 80221ac:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 80221ae:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80221b2:	920e      	str	r2, [sp, #56]	; 0x38
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 80221b4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 80221b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 80221bc:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80221c0:	9212      	str	r2, [sp, #72]	; 0x48
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80221c2:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80221c4:	4a0a      	ldr	r2, [pc, #40]	; (80221f0 <LoRaMacInitialization+0x3f0>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80221c6:	9313      	str	r3, [sp, #76]	; 0x4c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80221c8:	a908      	add	r1, sp, #32
 80221ca:	a80c      	add	r0, sp, #48	; 0x30
 80221cc:	f000 ffd4 	bl	8023178 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 80221d0:	2301      	movs	r3, #1
 80221d2:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    return LORAMAC_STATUS_OK;
 80221d6:	e79f      	b.n	8022118 <LoRaMacInitialization+0x318>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80221d8:	2503      	movs	r5, #3
 80221da:	e79d      	b.n	8022118 <LoRaMacInitialization+0x318>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80221dc:	2509      	movs	r5, #9
 80221de:	e79b      	b.n	8022118 <LoRaMacInitialization+0x318>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80221e0:	2513      	movs	r5, #19
 80221e2:	e799      	b.n	8022118 <LoRaMacInitialization+0x318>
 80221e4:	08020695 	.word	0x08020695
 80221e8:	080206a1 	.word	0x080206a1
 80221ec:	20001f38 	.word	0x20001f38
 80221f0:	080206a7 	.word	0x080206a7

080221f4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 80221f4:	4b02      	ldr	r3, [pc, #8]	; (8022200 <LoRaMacStart+0xc>)
 80221f6:	2000      	movs	r0, #0
 80221f8:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    return LORAMAC_STATUS_OK;
}
 80221fc:	4770      	bx	lr
 80221fe:	bf00      	nop
 8022200:	20001ad0 	.word	0x20001ad0

08022204 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8022204:	b570      	push	{r4, r5, r6, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8022206:	4a29      	ldr	r2, [pc, #164]	; (80222ac <LoRaMacQueryTxPossible+0xa8>)
 8022208:	f8d2 3488 	ldr.w	r3, [r2, #1160]	; 0x488
{
 802220c:	b088      	sub	sp, #32
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 802220e:	795c      	ldrb	r4, [r3, #5]
 8022210:	f88d 4002 	strb.w	r4, [sp, #2]
{
 8022214:	4605      	mov	r5, r0
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8022216:	791c      	ldrb	r4, [r3, #4]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8022218:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 802221c:	f88d 4003 	strb.w	r4, [sp, #3]
    size_t macCmdsSize = 0;
 8022220:	2600      	movs	r6, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8022222:	9001      	str	r0, [sp, #4]
    size_t macCmdsSize = 0;
 8022224:	9602      	str	r6, [sp, #8]

    if( txInfo == NULL )
 8022226:	460c      	mov	r4, r1
 8022228:	2900      	cmp	r1, #0
 802222a:	d03b      	beq.n	80222a4 <LoRaMacQueryTxPossible+0xa0>
    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
    adrNext.UpdateChanMask = false;
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 802222c:	f8d2 23f8 	ldr.w	r2, [r2, #1016]	; 0x3f8
 8022230:	9206      	str	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8022232:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
    adrNext.Version = MacCtx.NvmCtx->Version;
 8022236:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 802223a:	9103      	str	r1, [sp, #12]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 802223c:	ba52      	rev16	r2, r2
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 802223e:	f893 107e 	ldrb.w	r1, [r3, #126]	; 0x7e
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8022242:	f8ad 201c 	strh.w	r2, [sp, #28]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8022246:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 802224a:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 802224e:	9005      	str	r0, [sp, #20]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8022250:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.UpdateChanMask = false;
 8022254:	f88d 6010 	strb.w	r6, [sp, #16]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8022258:	781b      	ldrb	r3, [r3, #0]
 802225a:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 802225e:	f10d 0203 	add.w	r2, sp, #3
 8022262:	ab01      	add	r3, sp, #4
 8022264:	f10d 0102 	add.w	r1, sp, #2
 8022268:	a803      	add	r0, sp, #12
 802226a:	f000 ff17 	bl	802309c <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 802226e:	f99d 0002 	ldrsb.w	r0, [sp, #2]
 8022272:	f7fe fa1f 	bl	80206b4 <GetMaxAppPayloadWithoutFOptsLength>
 8022276:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8022278:	a802      	add	r0, sp, #8
 802227a:	f001 f881 	bl	8023380 <LoRaMacCommandsGetSizeSerializedCmds>
 802227e:	b998      	cbnz	r0, 80222a8 <LoRaMacQueryTxPossible+0xa4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8022280:	9b02      	ldr	r3, [sp, #8]
 8022282:	2b0f      	cmp	r3, #15
 8022284:	d80a      	bhi.n	802229c <LoRaMacQueryTxPossible+0x98>
 8022286:	7862      	ldrb	r2, [r4, #1]
 8022288:	4293      	cmp	r3, r2
 802228a:	d807      	bhi.n	802229c <LoRaMacQueryTxPossible+0x98>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 802228c:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 802228e:	441d      	add	r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8022290:	7021      	strb	r1, [r4, #0]
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8022292:	42aa      	cmp	r2, r5
 8022294:	bf38      	it	cc
 8022296:	2008      	movcc	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8022298:	b008      	add	sp, #32
 802229a:	bd70      	pop	{r4, r5, r6, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 802229c:	2300      	movs	r3, #0
 802229e:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80222a0:	2008      	movs	r0, #8
 80222a2:	e7f9      	b.n	8022298 <LoRaMacQueryTxPossible+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80222a4:	2003      	movs	r0, #3
 80222a6:	e7f7      	b.n	8022298 <LoRaMacQueryTxPossible+0x94>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80222a8:	2013      	movs	r0, #19
 80222aa:	e7f5      	b.n	8022298 <LoRaMacQueryTxPossible+0x94>
 80222ac:	20001ad0 	.word	0x20001ad0

080222b0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80222b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80222b2:	4604      	mov	r4, r0
{
 80222b4:	b085      	sub	sp, #20
    if( mibGet == NULL )
 80222b6:	2800      	cmp	r0, #0
 80222b8:	f000 8128 	beq.w	802250c <LoRaMacMibGetRequestConfirm+0x25c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 80222bc:	7800      	ldrb	r0, [r0, #0]
 80222be:	2828      	cmp	r0, #40	; 0x28
 80222c0:	f200 8120 	bhi.w	8022504 <LoRaMacMibGetRequestConfirm+0x254>
 80222c4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80222c8:	00310029 	.word	0x00310029
 80222cc:	003d0038 	.word	0x003d0038
 80222d0:	00460040 	.word	0x00460040
 80222d4:	011e004c 	.word	0x011e004c
 80222d8:	011e011e 	.word	0x011e011e
 80222dc:	011e011e 	.word	0x011e011e
 80222e0:	011e011e 	.word	0x011e011e
 80222e4:	0051011e 	.word	0x0051011e
 80222e8:	005d0057 	.word	0x005d0057
 80222ec:	00710068 	.word	0x00710068
 80222f0:	007f0078 	.word	0x007f0078
 80222f4:	00860088 	.word	0x00860088
 80222f8:	0090008a 	.word	0x0090008a
 80222fc:	009c0096 	.word	0x009c0096
 8022300:	00a800a2 	.word	0x00a800a2
 8022304:	00b300ae 	.word	0x00b300ae
 8022308:	00b900be 	.word	0x00b900be
 802230c:	00ca00c4 	.word	0x00ca00c4
 8022310:	010f00d0 	.word	0x010f00d0
 8022314:	011e00d7 	.word	0x011e00d7
 8022318:	0114      	.short	0x0114
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 802231a:	4b7d      	ldr	r3, [pc, #500]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802231c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022320:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8022324:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8022326:	b005      	add	sp, #20
 8022328:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 802232a:	4b79      	ldr	r3, [pc, #484]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802232c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022330:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8022334:	7123      	strb	r3, [r4, #4]
            break;
 8022336:	e002      	b.n	802233e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8022338:	f7fc fa4c 	bl	801e7d4 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 802233c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 802233e:	2000      	movs	r0, #0
            break;
 8022340:	e7f1      	b.n	8022326 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8022342:	f7fc fa5d 	bl	801e800 <SecureElementGetJoinEui>
 8022346:	e7f9      	b.n	802233c <LoRaMacMibGetRequestConfirm+0x8c>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8022348:	4b71      	ldr	r3, [pc, #452]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802234a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 802234e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8022352:	e7ef      	b.n	8022334 <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8022354:	4b6e      	ldr	r3, [pc, #440]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 8022356:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 802235a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 802235c:	6063      	str	r3, [r4, #4]
            break;
 802235e:	e7ee      	b.n	802233e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8022360:	4b6b      	ldr	r3, [pc, #428]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 8022362:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022368:	e7f8      	b.n	802235c <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 802236a:	4b69      	ldr	r3, [pc, #420]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802236c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022370:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8022374:	e7de      	b.n	8022334 <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8022376:	4b66      	ldr	r3, [pc, #408]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 8022378:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 802237c:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8022380:	e7d8      	b.n	8022334 <LoRaMacMibGetRequestConfirm+0x84>
            getPhy.Attribute = PHY_CHANNELS;
 8022382:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8022384:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8022388:	4b61      	ldr	r3, [pc, #388]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802238a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 802238e:	a902      	add	r1, sp, #8
 8022390:	7818      	ldrb	r0, [r3, #0]
 8022392:	f001 fe22 	bl	8023fda <RegionGetPhyParam>
 8022396:	e7d1      	b.n	802233c <LoRaMacMibGetRequestConfirm+0x8c>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8022398:	4b5d      	ldr	r3, [pc, #372]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802239a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 802239e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80223a2:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80223a4:	e884 0003 	stmia.w	r4, {r0, r1}
            break;
 80223a8:	e7c9      	b.n	802233e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80223aa:	4b59      	ldr	r3, [pc, #356]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 80223ac:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80223b0:	3404      	adds	r4, #4
 80223b2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80223b6:	e7f5      	b.n	80223a4 <LoRaMacMibGetRequestConfirm+0xf4>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 80223b8:	4b55      	ldr	r3, [pc, #340]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 80223ba:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80223be:	3404      	adds	r4, #4
 80223c0:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 80223c4:	e7ee      	b.n	80223a4 <LoRaMacMibGetRequestConfirm+0xf4>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80223c6:	4b52      	ldr	r3, [pc, #328]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 80223c8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80223cc:	3404      	adds	r4, #4
 80223ce:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80223d2:	e7e7      	b.n	80223a4 <LoRaMacMibGetRequestConfirm+0xf4>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80223d4:	231b      	movs	r3, #27
 80223d6:	e7d5      	b.n	8022384 <LoRaMacMibGetRequestConfirm+0xd4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80223d8:	231a      	movs	r3, #26
 80223da:	e7d3      	b.n	8022384 <LoRaMacMibGetRequestConfirm+0xd4>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 80223dc:	4b4c      	ldr	r3, [pc, #304]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 80223de:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80223e2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80223e6:	e7a5      	b.n	8022334 <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 80223e8:	4b49      	ldr	r3, [pc, #292]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 80223ea:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80223ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80223f2:	e7b3      	b.n	802235c <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 80223f4:	4b46      	ldr	r3, [pc, #280]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 80223f6:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80223fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80223fe:	e7ad      	b.n	802235c <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8022400:	4b43      	ldr	r3, [pc, #268]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 8022402:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802240a:	e7a7      	b.n	802235c <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 802240c:	4b40      	ldr	r3, [pc, #256]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802240e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8022416:	e7a1      	b.n	802235c <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8022418:	4b3d      	ldr	r3, [pc, #244]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802241a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 802241e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8022422:	e79b      	b.n	802235c <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8022424:	4b3a      	ldr	r3, [pc, #232]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 8022426:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 802242a:	795b      	ldrb	r3, [r3, #5]
 802242c:	e782      	b.n	8022334 <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 802242e:	4b38      	ldr	r3, [pc, #224]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 8022430:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022434:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8022438:	e77c      	b.n	8022334 <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 802243a:	4b35      	ldr	r3, [pc, #212]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802243c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022440:	791b      	ldrb	r3, [r3, #4]
 8022442:	e777      	b.n	8022334 <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8022444:	4b32      	ldr	r3, [pc, #200]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 8022446:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 802244a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802244e:	e771      	b.n	8022334 <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8022450:	4b2f      	ldr	r3, [pc, #188]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 8022452:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802245a:	e77f      	b.n	802235c <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 802245c:	4b2c      	ldr	r3, [pc, #176]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802245e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022462:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8022466:	e765      	b.n	8022334 <LoRaMacMibGetRequestConfirm+0x84>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8022468:	4b29      	ldr	r3, [pc, #164]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 802246a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 802246e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8022472:	6063      	str	r3, [r4, #4]
            break;
 8022474:	e763      	b.n	802233e <LoRaMacMibGetRequestConfirm+0x8e>
    Contexts.MacNvmCtx = &NvmMacCtx;
 8022476:	4e26      	ldr	r6, [pc, #152]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 8022478:	f506 6399 	add.w	r3, r6, #1224	; 0x4c8
 802247c:	f8c6 3490 	str.w	r3, [r6, #1168]	; 0x490
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8022480:	f206 40a4 	addw	r0, r6, #1188	; 0x4a4
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8022484:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8022488:	f8c6 3494 	str.w	r3, [r6, #1172]	; 0x494
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 802248c:	f001 fa14 	bl	80238b8 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 8022490:	2500      	movs	r5, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8022492:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8022496:	f8c6 04a0 	str.w	r0, [r6, #1184]	; 0x4a0
    GetNvmCtxParams_t params ={ 0 };
 802249a:	9502      	str	r5, [sp, #8]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 802249c:	a902      	add	r1, sp, #8
 802249e:	7818      	ldrb	r0, [r3, #0]
 80224a0:	f001 fdb1 	bl	8024006 <RegionGetNvmCtx>
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 80224a4:	9b02      	ldr	r3, [sp, #8]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 80224a6:	f8c6 0498 	str.w	r0, [r6, #1176]	; 0x498
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 80224aa:	f206 40ac 	addw	r0, r6, #1196	; 0x4ac
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 80224ae:	f8c6 349c 	str.w	r3, [r6, #1180]	; 0x49c
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 80224b2:	f7fc f87d 	bl	801e5b0 <SecureElementGetNvmCtx>
 80224b6:	f8c6 04a8 	str.w	r0, [r6, #1192]	; 0x4a8
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 80224ba:	f206 40b4 	addw	r0, r6, #1204	; 0x4b4
 80224be:	f000 feaf 	bl	8023220 <LoRaMacCommandsGetNvmCtx>
 80224c2:	f8c6 04b0 	str.w	r0, [r6, #1200]	; 0x4b0
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 80224c6:	f206 40bc 	addw	r0, r6, #1212	; 0x4bc
 80224ca:	f000 fe58 	bl	802317e <LoRaMacClassBGetNvmCtx>
 80224ce:	f8c6 04b8 	str.w	r0, [r6, #1208]	; 0x4b8
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 80224d2:	f206 40c4 	addw	r0, r6, #1220	; 0x4c4
 80224d6:	f000 ffed 	bl	80234b4 <LoRaMacConfirmQueueGetNvmCtx>
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 80224da:	f506 6792 	add.w	r7, r6, #1168	; 0x490
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 80224de:	f8c6 04c0 	str.w	r0, [r6, #1216]	; 0x4c0
            mibGet->Param.Contexts = GetCtxs( );
 80224e2:	6067      	str	r7, [r4, #4]
            break;
 80224e4:	e72b      	b.n	802233e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80224e6:	4b0a      	ldr	r3, [pc, #40]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 80224e8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80224ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80224ee:	e7c0      	b.n	8022472 <LoRaMacMibGetRequestConfirm+0x1c2>
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 80224f0:	4b07      	ldr	r3, [pc, #28]	; (8022510 <LoRaMacMibGetRequestConfirm+0x260>)
 80224f2:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80224f6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80224fa:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80224fc:	f001 fe22 	bl	8024144 <RegionGetVersion>
 8022500:	60a0      	str	r0, [r4, #8]
 8022502:	e71c      	b.n	802233e <LoRaMacMibGetRequestConfirm+0x8e>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8022504:	4620      	mov	r0, r4
 8022506:	f000 fe55 	bl	80231b4 <LoRaMacClassBMibGetRequestConfirm>
            break;
 802250a:	e70c      	b.n	8022326 <LoRaMacMibGetRequestConfirm+0x76>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 802250c:	2003      	movs	r0, #3
 802250e:	e70a      	b.n	8022326 <LoRaMacMibGetRequestConfirm+0x76>
 8022510:	20001ad0 	.word	0x20001ad0

08022514 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8022514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8022516:	4604      	mov	r4, r0
 8022518:	2800      	cmp	r0, #0
 802251a:	f000 8220 	beq.w	802295e <LoRaMacMibSetRequestConfirm+0x44a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 802251e:	4da9      	ldr	r5, [pc, #676]	; (80227c4 <LoRaMacMibSetRequestConfirm+0x2b0>)
 8022520:	f8d5 3344 	ldr.w	r3, [r5, #836]	; 0x344
 8022524:	079a      	lsls	r2, r3, #30
 8022526:	f100 821c 	bmi.w	8022962 <LoRaMacMibSetRequestConfirm+0x44e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 802252a:	7802      	ldrb	r2, [r0, #0]
 802252c:	2a27      	cmp	r2, #39	; 0x27
 802252e:	f200 8213 	bhi.w	8022958 <LoRaMacMibSetRequestConfirm+0x444>
 8022532:	e8df f012 	tbh	[pc, r2, lsl #1]
 8022536:	0028      	.short	0x0028
 8022538:	0036002d 	.word	0x0036002d
 802253c:	00450041 	.word	0x00450041
 8022540:	0050004b 	.word	0x0050004b
 8022544:	00610055 	.word	0x00610055
 8022548:	006b0066 	.word	0x006b0066
 802254c:	00750070 	.word	0x00750070
 8022550:	007f007a 	.word	0x007f007a
 8022554:	008f0084 	.word	0x008f0084
 8022558:	00950211 	.word	0x00950211
 802255c:	00cd00b8 	.word	0x00cd00b8
 8022560:	011a00f6 	.word	0x011a00f6
 8022564:	011e010b 	.word	0x011e010b
 8022568:	012e0128 	.word	0x012e0128
 802256c:	013a0134 	.word	0x013a0134
 8022570:	014b0140 	.word	0x014b0140
 8022574:	0189015e 	.word	0x0189015e
 8022578:	019d0176 	.word	0x019d0176
 802257c:	01ab01a4 	.word	0x01ab01a4
 8022580:	01b601b1 	.word	0x01b601b1
 8022584:	0204      	.short	0x0204
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8022586:	7900      	ldrb	r0, [r0, #4]
 8022588:	f7fe fc24 	bl	8020dd4 <SwitchClass>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 802258c:	4604      	mov	r4, r0
            break;
 802258e:	e00e      	b.n	80225ae <LoRaMacMibSetRequestConfirm+0x9a>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8022590:	7903      	ldrb	r3, [r0, #4]
 8022592:	2b02      	cmp	r3, #2
 8022594:	d00a      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8022596:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 802259a:	f882 3164 	strb.w	r3, [r2, #356]	; 0x164
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 802259e:	2400      	movs	r4, #0
            break;
 80225a0:	e005      	b.n	80225ae <LoRaMacMibSetRequestConfirm+0x9a>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80225a2:	6840      	ldr	r0, [r0, #4]
 80225a4:	f7fc f904 	bl	801e7b0 <SecureElementSetDevEui>
 80225a8:	2800      	cmp	r0, #0
 80225aa:	d0f8      	beq.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80225ac:	2403      	movs	r4, #3
        }
    }
    EventRegionNvmCtxChanged( );
 80225ae:	f7fe f86e 	bl	802068e <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 80225b2:	f7fe f869 	bl	8020688 <EventMacNvmCtxChanged>
    return status;
 80225b6:	e01c      	b.n	80225f2 <LoRaMacMibSetRequestConfirm+0xde>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80225b8:	6840      	ldr	r0, [r0, #4]
 80225ba:	f7fc f90f 	bl	801e7dc <SecureElementSetJoinEui>
 80225be:	e7f3      	b.n	80225a8 <LoRaMacMibSetRequestConfirm+0x94>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 80225c0:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80225c4:	7902      	ldrb	r2, [r0, #4]
 80225c6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            break;
 80225ca:	e7e8      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 80225cc:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80225d0:	6842      	ldr	r2, [r0, #4]
 80225d2:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 80225d4:	e7e3      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 80225d6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80225da:	6842      	ldr	r2, [r0, #4]
 80225dc:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 80225de:	e7de      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            if( mibSet->Param.AppKey != NULL )
 80225e0:	6841      	ldr	r1, [r0, #4]
 80225e2:	2900      	cmp	r1, #0
 80225e4:	d0e2      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80225e6:	2000      	movs	r0, #0
 80225e8:	f001 fae6 	bl	8023bb8 <LoRaMacCryptoSetKey>
 80225ec:	2800      	cmp	r0, #0
 80225ee:	d0d6      	beq.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80225f0:	2411      	movs	r4, #17
}
 80225f2:	4620      	mov	r0, r4
 80225f4:	b004      	add	sp, #16
 80225f6:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NwkKey != NULL )
 80225f8:	6841      	ldr	r1, [r0, #4]
 80225fa:	2900      	cmp	r1, #0
 80225fc:	d0d6      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80225fe:	2001      	movs	r0, #1
 8022600:	e7f2      	b.n	80225e8 <LoRaMacMibSetRequestConfirm+0xd4>
            if( mibSet->Param.NwkSKey != NULL )
 8022602:	6841      	ldr	r1, [r0, #4]
 8022604:	2900      	cmp	r1, #0
 8022606:	d0d1      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8022608:	2002      	movs	r0, #2
 802260a:	e7ed      	b.n	80225e8 <LoRaMacMibSetRequestConfirm+0xd4>
            if( mibSet->Param.AppSKey != NULL )
 802260c:	6841      	ldr	r1, [r0, #4]
 802260e:	2900      	cmp	r1, #0
 8022610:	d0cc      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8022612:	2003      	movs	r0, #3
 8022614:	e7e8      	b.n	80225e8 <LoRaMacMibSetRequestConfirm+0xd4>
            if( mibSet->Param.McKEKey != NULL )
 8022616:	6841      	ldr	r1, [r0, #4]
 8022618:	2900      	cmp	r1, #0
 802261a:	d0c7      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 802261c:	207f      	movs	r0, #127	; 0x7f
 802261e:	e7e3      	b.n	80225e8 <LoRaMacMibSetRequestConfirm+0xd4>
            if( mibSet->Param.McKey0 != NULL )
 8022620:	6841      	ldr	r1, [r0, #4]
 8022622:	2900      	cmp	r1, #0
 8022624:	d0c2      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8022626:	2080      	movs	r0, #128	; 0x80
 8022628:	e7de      	b.n	80225e8 <LoRaMacMibSetRequestConfirm+0xd4>
            if( mibSet->Param.McAppSKey0 != NULL )
 802262a:	6841      	ldr	r1, [r0, #4]
 802262c:	2900      	cmp	r1, #0
 802262e:	d0bd      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8022630:	2081      	movs	r0, #129	; 0x81
 8022632:	e7d9      	b.n	80225e8 <LoRaMacMibSetRequestConfirm+0xd4>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8022634:	6841      	ldr	r1, [r0, #4]
 8022636:	2900      	cmp	r1, #0
 8022638:	d0b8      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 802263a:	2082      	movs	r0, #130	; 0x82
 802263c:	e7d4      	b.n	80225e8 <LoRaMacMibSetRequestConfirm+0xd4>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 802263e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8022642:	4c61      	ldr	r4, [pc, #388]	; (80227c8 <LoRaMacMibSetRequestConfirm+0x2b4>)
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8022644:	7900      	ldrb	r0, [r0, #4]
 8022646:	f883 007d 	strb.w	r0, [r3, #125]	; 0x7d
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 802264a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802264c:	4798      	blx	r3
            Radio.Sleep( );
 802264e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022650:	4798      	blx	r3
            break;
 8022652:	e7a4      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8022654:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022658:	7902      	ldrb	r2, [r0, #4]
 802265a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
            break;
 802265e:	e79e      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8022660:	7a03      	ldrb	r3, [r0, #8]
 8022662:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8022666:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 802266a:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 802266e:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 8022672:	7818      	ldrb	r0, [r3, #0]
 8022674:	2207      	movs	r2, #7
 8022676:	a901      	add	r1, sp, #4
 8022678:	f001 fccc 	bl	8024014 <RegionVerify>
 802267c:	2800      	cmp	r0, #0
 802267e:	d095      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8022680:	6863      	ldr	r3, [r4, #4]
 8022682:	9301      	str	r3, [sp, #4]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 8022684:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022688:	2200      	movs	r2, #0
 802268a:	7818      	ldrb	r0, [r3, #0]
 802268c:	a901      	add	r1, sp, #4
 802268e:	f001 fcc1 	bl	8024014 <RegionVerify>
 8022692:	2800      	cmp	r0, #0
 8022694:	d08a      	beq.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8022696:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 802269a:	33a8      	adds	r3, #168	; 0xa8
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 802269c:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80226a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80226a4:	e77b      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80226a6:	7a03      	ldrb	r3, [r0, #8]
 80226a8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80226ac:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80226b0:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80226b4:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80226b8:	7818      	ldrb	r0, [r3, #0]
 80226ba:	2207      	movs	r2, #7
 80226bc:	a901      	add	r1, sp, #4
 80226be:	f001 fca9 	bl	8024014 <RegionVerify>
 80226c2:	2800      	cmp	r0, #0
 80226c4:	f43f af72 	beq.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80226c8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80226cc:	3328      	adds	r3, #40	; 0x28
 80226ce:	e7e5      	b.n	802269c <LoRaMacMibSetRequestConfirm+0x188>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80226d0:	7a03      	ldrb	r3, [r0, #8]
 80226d2:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80226d6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80226da:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80226de:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80226e2:	7818      	ldrb	r0, [r3, #0]
 80226e4:	2207      	movs	r2, #7
 80226e6:	a901      	add	r1, sp, #4
 80226e8:	f001 fc94 	bl	8024014 <RegionVerify>
 80226ec:	2800      	cmp	r0, #0
 80226ee:	f43f af5d 	beq.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80226f2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80226f6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80226fa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80226fe:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8022702:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8022706:	2a02      	cmp	r2, #2
 8022708:	f47f af49 	bne.w	802259e <LoRaMacMibSetRequestConfirm+0x8a>
 802270c:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 8022710:	2b00      	cmp	r3, #0
 8022712:	f43f af44 	beq.w	802259e <LoRaMacMibSetRequestConfirm+0x8a>
                    Radio.Sleep( );
 8022716:	4b2c      	ldr	r3, [pc, #176]	; (80227c8 <LoRaMacMibSetRequestConfirm+0x2b4>)
 8022718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802271a:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 802271c:	f7fe fb2e 	bl	8020d7c <OpenContinuousRxCWindow>
 8022720:	e73d      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8022722:	7a03      	ldrb	r3, [r0, #8]
 8022724:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8022728:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 802272c:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8022730:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8022734:	7818      	ldrb	r0, [r3, #0]
 8022736:	2207      	movs	r2, #7
 8022738:	a901      	add	r1, sp, #4
 802273a:	f001 fc6b 	bl	8024014 <RegionVerify>
 802273e:	2800      	cmp	r0, #0
 8022740:	f43f af34 	beq.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8022744:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022748:	3330      	adds	r3, #48	; 0x30
 802274a:	e7a7      	b.n	802269c <LoRaMacMibSetRequestConfirm+0x188>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 802274c:	6843      	ldr	r3, [r0, #4]
 802274e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8022750:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8022752:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8022756:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 802275a:	a902      	add	r1, sp, #8
 802275c:	7818      	ldrb	r0, [r3, #0]
 802275e:	f001 fc68 	bl	8024032 <RegionChanMaskSet>
 8022762:	2800      	cmp	r0, #0
 8022764:	f47f af1b 	bne.w	802259e <LoRaMacMibSetRequestConfirm+0x8a>
 8022768:	e720      	b.n	80225ac <LoRaMacMibSetRequestConfirm+0x98>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 802276a:	6843      	ldr	r3, [r0, #4]
 802276c:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 802276e:	2300      	movs	r3, #0
 8022770:	e7ef      	b.n	8022752 <LoRaMacMibSetRequestConfirm+0x23e>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8022772:	7903      	ldrb	r3, [r0, #4]
 8022774:	1e5a      	subs	r2, r3, #1
 8022776:	2a0e      	cmp	r2, #14
 8022778:	f63f af18 	bhi.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 802277c:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 8022780:	f882 30a4 	strb.w	r3, [r2, #164]	; 0xa4
 8022784:	e70b      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8022786:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 802278a:	6842      	ldr	r2, [r0, #4]
 802278c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            break;
 8022790:	e705      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8022792:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022796:	6842      	ldr	r2, [r0, #4]
 8022798:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 802279c:	e6ff      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 802279e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80227a2:	6842      	ldr	r2, [r0, #4]
 80227a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            break;
 80227a8:	e6f9      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80227aa:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80227ae:	6842      	ldr	r2, [r0, #4]
 80227b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            break;
 80227b4:	e6f3      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80227b6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80227ba:	6842      	ldr	r2, [r0, #4]
 80227bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            break;
 80227c0:	e6ed      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
 80227c2:	bf00      	nop
 80227c4:	20001ad0 	.word	0x20001ad0
 80227c8:	08027928 	.word	0x08027928
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80227cc:	7903      	ldrb	r3, [r0, #4]
 80227ce:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 80227d2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80227d6:	2206      	movs	r2, #6
 80227d8:	7818      	ldrb	r0, [r3, #0]
 80227da:	a901      	add	r1, sp, #4
 80227dc:	f001 fc1a 	bl	8024014 <RegionVerify>
 80227e0:	2800      	cmp	r0, #0
 80227e2:	f43f aee3 	beq.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 80227e6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80227ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80227ee:	715a      	strb	r2, [r3, #5]
 80227f0:	e6d5      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80227f2:	7903      	ldrb	r3, [r0, #4]
 80227f4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80227f8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80227fc:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8022800:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8022804:	7818      	ldrb	r0, [r3, #0]
 8022806:	2205      	movs	r2, #5
 8022808:	a901      	add	r1, sp, #4
 802280a:	f001 fc03 	bl	8024014 <RegionVerify>
 802280e:	2800      	cmp	r0, #0
 8022810:	f43f aecc 	beq.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8022814:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022818:	f89d 2004 	ldrb.w	r2, [sp, #4]
 802281c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8022820:	e6bd      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8022822:	7903      	ldrb	r3, [r0, #4]
 8022824:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8022828:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 802282c:	220a      	movs	r2, #10
 802282e:	7818      	ldrb	r0, [r3, #0]
 8022830:	a901      	add	r1, sp, #4
 8022832:	f001 fbef 	bl	8024014 <RegionVerify>
 8022836:	2800      	cmp	r0, #0
 8022838:	f43f aeb8 	beq.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 802283c:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022840:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8022844:	711a      	strb	r2, [r3, #4]
 8022846:	e6aa      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8022848:	7903      	ldrb	r3, [r0, #4]
 802284a:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 802284e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022852:	2209      	movs	r2, #9
 8022854:	7818      	ldrb	r0, [r3, #0]
 8022856:	a901      	add	r1, sp, #4
 8022858:	f001 fbdc 	bl	8024014 <RegionVerify>
 802285c:	2800      	cmp	r0, #0
 802285e:	f43f aea5 	beq.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8022862:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022866:	f89d 2004 	ldrb.w	r2, [sp, #4]
 802286a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 802286e:	e696      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8022870:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022874:	6842      	ldr	r2, [r0, #4]
 8022876:	609a      	str	r2, [r3, #8]
 8022878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802287c:	e68f      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 802287e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022882:	7902      	ldrb	r2, [r0, #4]
 8022884:	731a      	strb	r2, [r3, #12]
 8022886:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 802288a:	e688      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 802288c:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8022890:	6842      	ldr	r2, [r0, #4]
 8022892:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
            break;
 8022896:	e682      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8022898:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 802289c:	6842      	ldr	r2, [r0, #4]
 802289e:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 80228a0:	e67d      	b.n	802259e <LoRaMacMibSetRequestConfirm+0x8a>
            if( mibSet->Param.Contexts != 0 )
 80228a2:	6846      	ldr	r6, [r0, #4]
 80228a4:	2e00      	cmp	r6, #0
 80228a6:	f43f ae81 	beq.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80228aa:	2b01      	cmp	r3, #1
 80228ac:	d141      	bne.n	8022932 <LoRaMacMibSetRequestConfirm+0x41e>
    if( contexts->MacNvmCtx != NULL )
 80228ae:	6831      	ldr	r1, [r6, #0]
 80228b0:	b119      	cbz	r1, 80228ba <LoRaMacMibSetRequestConfirm+0x3a6>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 80228b2:	88b2      	ldrh	r2, [r6, #4]
 80228b4:	482c      	ldr	r0, [pc, #176]	; (8022968 <LoRaMacMibSetRequestConfirm+0x454>)
 80228b6:	f002 fc71 	bl	802519c <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 80228ba:	2303      	movs	r3, #3
 80228bc:	f88d 300c 	strb.w	r3, [sp, #12]
    params.NvmCtx = contexts->RegionNvmCtx;
 80228c0:	68b3      	ldr	r3, [r6, #8]
 80228c2:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80228c4:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80228c8:	a902      	add	r1, sp, #8
 80228ca:	7818      	ldrb	r0, [r3, #0]
 80228cc:	f001 fb95 	bl	8023ffa <RegionInitDefaults>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80228d0:	f895 3419 	ldrb.w	r3, [r5, #1049]	; 0x419
 80228d4:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80228d8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 80228dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80228e0:	f8c5 23e8 	str.w	r2, [r5, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80228e4:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80228e8:	f885 23f4 	strb.w	r2, [r5, #1012]	; 0x3f4
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80228ec:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80228f0:	f885 33f5 	strb.w	r3, [r5, #1013]	; 0x3f5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80228f4:	f240 2301 	movw	r3, #513	; 0x201
 80228f8:	f8a5 33f6 	strh.w	r3, [r5, #1014]	; 0x3f6
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 80228fc:	69b0      	ldr	r0, [r6, #24]
 80228fe:	f7fb fe49 	bl	801e594 <SecureElementRestoreNvmCtx>
 8022902:	b108      	cbz	r0, 8022908 <LoRaMacMibSetRequestConfirm+0x3f4>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8022904:	2411      	movs	r4, #17
 8022906:	e652      	b.n	80225ae <LoRaMacMibSetRequestConfirm+0x9a>
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8022908:	6930      	ldr	r0, [r6, #16]
 802290a:	f000 ffc7 	bl	802389c <LoRaMacCryptoRestoreNvmCtx>
 802290e:	2800      	cmp	r0, #0
 8022910:	d1f8      	bne.n	8022904 <LoRaMacMibSetRequestConfirm+0x3f0>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8022912:	6a30      	ldr	r0, [r6, #32]
 8022914:	f000 fc76 	bl	8023204 <LoRaMacCommandsRestoreNvmCtx>
 8022918:	4604      	mov	r4, r0
 802291a:	b960      	cbnz	r0, 8022936 <LoRaMacMibSetRequestConfirm+0x422>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 802291c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 802291e:	f000 fc2c 	bl	802317a <LoRaMacClassBRestoreNvmCtx>
 8022922:	b150      	cbz	r0, 802293a <LoRaMacMibSetRequestConfirm+0x426>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8022924:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8022926:	f000 fdb9 	bl	802349c <LoRaMacConfirmQueueRestoreNvmCtx>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 802292a:	2800      	cmp	r0, #0
 802292c:	bf08      	it	eq
 802292e:	2415      	moveq	r4, #21
 8022930:	e63d      	b.n	80225ae <LoRaMacMibSetRequestConfirm+0x9a>
        return LORAMAC_STATUS_BUSY;
 8022932:	2401      	movs	r4, #1
 8022934:	e63b      	b.n	80225ae <LoRaMacMibSetRequestConfirm+0x9a>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8022936:	2413      	movs	r4, #19
 8022938:	e639      	b.n	80225ae <LoRaMacMibSetRequestConfirm+0x9a>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 802293a:	2414      	movs	r4, #20
 802293c:	e637      	b.n	80225ae <LoRaMacMibSetRequestConfirm+0x9a>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 802293e:	7983      	ldrb	r3, [r0, #6]
 8022940:	2b01      	cmp	r3, #1
 8022942:	f63f ae33 	bhi.w	80225ac <LoRaMacMibSetRequestConfirm+0x98>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8022946:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 802294a:	6842      	ldr	r2, [r0, #4]
 802294c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8022950:	6840      	ldr	r0, [r0, #4]
 8022952:	f000 ff9b 	bl	802388c <LoRaMacCryptoSetLrWanVersion>
 8022956:	e649      	b.n	80225ec <LoRaMacMibSetRequestConfirm+0xd8>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8022958:	f000 fc2e 	bl	80231b8 <LoRaMacMibClassBSetRequestConfirm>
 802295c:	e616      	b.n	802258c <LoRaMacMibSetRequestConfirm+0x78>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 802295e:	2403      	movs	r4, #3
 8022960:	e647      	b.n	80225f2 <LoRaMacMibSetRequestConfirm+0xde>
        return LORAMAC_STATUS_BUSY;
 8022962:	2401      	movs	r4, #1
 8022964:	e645      	b.n	80225f2 <LoRaMacMibSetRequestConfirm+0xde>
 8022966:	bf00      	nop
 8022968:	20001f98 	.word	0x20001f98

0802296c <LoRaMacMcChannelSetup>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMcChannelSetup( McChannelParams_t *channel )
{
 802296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8022970:	4f28      	ldr	r7, [pc, #160]	; (8022a14 <LoRaMacMcChannelSetup+0xa8>)
 8022972:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8022976:	079b      	lsls	r3, r3, #30
{
 8022978:	4604      	mov	r4, r0
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 802297a:	d445      	bmi.n	8022a08 <LoRaMacMcChannelSetup+0x9c>
    {
        return LORAMAC_STATUS_BUSY;
    }

    if( channel->GroupID >= LORAMAC_MAX_MC_CTX )
 802297c:	f890 8003 	ldrb.w	r8, [r0, #3]
 8022980:	f1b8 0f00 	cmp.w	r8, #0
 8022984:	d143      	bne.n	8022a0e <LoRaMacMcChannelSetup+0xa2>
    {
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
    }

    MacCtx.NvmCtx->MulticastChannelList[channel->GroupID].ChannelParams = *channel;
 8022986:	4606      	mov	r6, r0
 8022988:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 802298a:	f8d7 5488 	ldr.w	r5, [r7, #1160]	; 0x488
 802298e:	3550      	adds	r5, #80	; 0x50
 8022990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8022992:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8022996:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    if( channel->IsRemotelySetup == true )
 802299a:	7823      	ldrb	r3, [r4, #0]
#if ( LORAMAC_MAX_MC_CTX == 1 )
        const KeyIdentifier_t mcKeys[LORAMAC_MAX_MC_CTX] = { MC_KEY_0 };
#else /* LORAMAC_MAX_MC_CTX > 1 */
        const KeyIdentifier_t mcKeys[LORAMAC_MAX_MC_CTX] = { MC_KEY_0, MC_KEY_1, MC_KEY_2, MC_KEY_3 };
#endif /* LORAMAC_MAX_MC_CTX */
        if( LoRaMacCryptoSetKey( mcKeys[channel->GroupID], channel->McKeys.McKeyE ) != LORAMAC_CRYPTO_SUCCESS )
 802299c:	68a1      	ldr	r1, [r4, #8]
    if( channel->IsRemotelySetup == true )
 802299e:	b34b      	cbz	r3, 80229f4 <LoRaMacMcChannelSetup+0x88>
        if( LoRaMacCryptoSetKey( mcKeys[channel->GroupID], channel->McKeys.McKeyE ) != LORAMAC_CRYPTO_SUCCESS )
 80229a0:	2080      	movs	r0, #128	; 0x80
 80229a2:	f001 f909 	bl	8023bb8 <LoRaMacCryptoSetKey>
 80229a6:	b120      	cbz	r0, 80229b2 <LoRaMacMcChannelSetup+0x46>
{
 80229a8:	f04f 0811 	mov.w	r8, #17
    *MacCtx.NvmCtx->MulticastChannelList[channel->GroupID].DownLinkCounter = FCNT_DOWN_INITAL_VALUE;

    EventMacNvmCtxChanged( );
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}
 80229ac:	4640      	mov	r0, r8
 80229ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( LoRaMacCryptoDeriveMcSessionKeyPair( channel->GroupID, channel->Address ) != LORAMAC_CRYPTO_SUCCESS )
 80229b2:	6861      	ldr	r1, [r4, #4]
 80229b4:	78e0      	ldrb	r0, [r4, #3]
 80229b6:	f001 f973 	bl	8023ca0 <LoRaMacCryptoDeriveMcSessionKeyPair>
        if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( mcNwkSKeys[channel->GroupID], channel->McKeys.Session.McNwkSKey ) )
 80229ba:	2800      	cmp	r0, #0
 80229bc:	d1f4      	bne.n	80229a8 <LoRaMacMcChannelSetup+0x3c>
    if( channel->Class == CLASS_B )
 80229be:	7863      	ldrb	r3, [r4, #1]
 80229c0:	2b01      	cmp	r3, #1
 80229c2:	d108      	bne.n	80229d6 <LoRaMacMcChannelSetup+0x6a>
        LoRaMacClassBSetMulticastPeriodicity( &MacCtx.NvmCtx->MulticastChannelList[channel->GroupID] );
 80229c4:	78e0      	ldrb	r0, [r4, #3]
 80229c6:	232c      	movs	r3, #44	; 0x2c
 80229c8:	4343      	muls	r3, r0
 80229ca:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 80229ce:	3350      	adds	r3, #80	; 0x50
 80229d0:	4418      	add	r0, r3
 80229d2:	f000 fbfd 	bl	80231d0 <LoRaMacClassBSetMulticastPeriodicity>
    *MacCtx.NvmCtx->MulticastChannelList[channel->GroupID].DownLinkCounter = FCNT_DOWN_INITAL_VALUE;
 80229d6:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 80229da:	78e3      	ldrb	r3, [r4, #3]
 80229dc:	212c      	movs	r1, #44	; 0x2c
 80229de:	fb01 2303 	mla	r3, r1, r3, r2
 80229e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80229e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80229e8:	601a      	str	r2, [r3, #0]
    EventMacNvmCtxChanged( );
 80229ea:	f7fd fe4d 	bl	8020688 <EventMacNvmCtxChanged>
    EventRegionNvmCtxChanged( );
 80229ee:	f7fd fe4e 	bl	802068e <EventRegionNvmCtxChanged>
    return LORAMAC_STATUS_OK;
 80229f2:	e7db      	b.n	80229ac <LoRaMacMcChannelSetup+0x40>
        if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( mcAppSKeys[channel->GroupID], channel->McKeys.Session.McAppSKey ) )
 80229f4:	2081      	movs	r0, #129	; 0x81
 80229f6:	f001 f8df 	bl	8023bb8 <LoRaMacCryptoSetKey>
 80229fa:	2800      	cmp	r0, #0
 80229fc:	d1d4      	bne.n	80229a8 <LoRaMacMcChannelSetup+0x3c>
        if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( mcNwkSKeys[channel->GroupID], channel->McKeys.Session.McNwkSKey ) )
 80229fe:	68e1      	ldr	r1, [r4, #12]
 8022a00:	2082      	movs	r0, #130	; 0x82
 8022a02:	f001 f8d9 	bl	8023bb8 <LoRaMacCryptoSetKey>
 8022a06:	e7d8      	b.n	80229ba <LoRaMacMcChannelSetup+0x4e>
        return LORAMAC_STATUS_BUSY;
 8022a08:	f04f 0801 	mov.w	r8, #1
 8022a0c:	e7ce      	b.n	80229ac <LoRaMacMcChannelSetup+0x40>
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 8022a0e:	f04f 0816 	mov.w	r8, #22
 8022a12:	e7cb      	b.n	80229ac <LoRaMacMcChannelSetup+0x40>
 8022a14:	20001ad0 	.word	0x20001ad0

08022a18 <LoRaMacMcChannelDelete>:

LoRaMacStatus_t LoRaMacMcChannelDelete( AddressIdentifier_t groupID )
{
 8022a18:	b570      	push	{r4, r5, r6, lr}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8022a1a:	4c13      	ldr	r4, [pc, #76]	; (8022a68 <LoRaMacMcChannelDelete+0x50>)
 8022a1c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8022a20:	079b      	lsls	r3, r3, #30
{
 8022a22:	b088      	sub	sp, #32
 8022a24:	4606      	mov	r6, r0
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8022a26:	d41b      	bmi.n	8022a60 <LoRaMacMcChannelDelete+0x48>
    {
        return LORAMAC_STATUS_BUSY;
    }

    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 8022a28:	b9e0      	cbnz	r0, 8022a64 <LoRaMacMcChannelDelete+0x4c>
        ( MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
 8022a2a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 8022a2e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8022a32:	b1bb      	cbz	r3, 8022a64 <LoRaMacMcChannelDelete+0x4c>
    }

    McChannelParams_t channel;

    // Set all channel fields with 0
    memset1( ( uint8_t* )&channel, 0, sizeof( McChannelParams_t ) );
 8022a34:	4601      	mov	r1, r0
 8022a36:	2220      	movs	r2, #32
 8022a38:	4668      	mov	r0, sp
 8022a3a:	f002 fbc3 	bl	80251c4 <memset1>

    MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams = channel;
 8022a3e:	f8d4 5488 	ldr.w	r5, [r4, #1160]	; 0x488
 8022a42:	466c      	mov	r4, sp
 8022a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022a46:	3550      	adds	r5, #80	; 0x50
 8022a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8022a4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8022a4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    EventMacNvmCtxChanged( );
 8022a52:	f7fd fe19 	bl	8020688 <EventMacNvmCtxChanged>
    EventRegionNvmCtxChanged( );
 8022a56:	f7fd fe1a 	bl	802068e <EventRegionNvmCtxChanged>
    return LORAMAC_STATUS_OK;
}
 8022a5a:	4630      	mov	r0, r6
 8022a5c:	b008      	add	sp, #32
 8022a5e:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_STATUS_BUSY;
 8022a60:	2601      	movs	r6, #1
 8022a62:	e7fa      	b.n	8022a5a <LoRaMacMcChannelDelete+0x42>
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 8022a64:	2616      	movs	r6, #22
 8022a66:	e7f8      	b.n	8022a5a <LoRaMacMcChannelDelete+0x42>
 8022a68:	20001ad0 	.word	0x20001ad0

08022a6c <LoRaMacMcChannelGetGroupId>:

uint8_t LoRaMacMcChannelGetGroupId( uint32_t mcAddress )
{
    for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        if( mcAddress == MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address )
 8022a6c:	4b04      	ldr	r3, [pc, #16]	; (8022a80 <LoRaMacMcChannelGetGroupId+0x14>)
 8022a6e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8022a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        {
            return i;
        }
    }
    return 0xFF;
}
 8022a74:	4283      	cmp	r3, r0
 8022a76:	bf14      	ite	ne
 8022a78:	20ff      	movne	r0, #255	; 0xff
 8022a7a:	2000      	moveq	r0, #0
 8022a7c:	4770      	bx	lr
 8022a7e:	bf00      	nop
 8022a80:	20001ad0 	.word	0x20001ad0

08022a84 <LoRaMacMcChannelSetupRxParams>:

LoRaMacStatus_t LoRaMacMcChannelSetupRxParams( AddressIdentifier_t groupID, McRxParams_t *rxParams, uint8_t *status )
{
   *status = 0x1C + ( groupID & 0x03 );
 8022a84:	f000 0303 	and.w	r3, r0, #3
{
 8022a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   *status = 0x1C + ( groupID & 0x03 );
 8022a8a:	331c      	adds	r3, #28

    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8022a8c:	4f29      	ldr	r7, [pc, #164]	; (8022b34 <LoRaMacMcChannelSetupRxParams+0xb0>)
   *status = 0x1C + ( groupID & 0x03 );
 8022a8e:	7013      	strb	r3, [r2, #0]
{
 8022a90:	4615      	mov	r5, r2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8022a92:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8022a96:	0792      	lsls	r2, r2, #30
{
 8022a98:	4604      	mov	r4, r0
 8022a9a:	460e      	mov	r6, r1
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8022a9c:	d444      	bmi.n	8022b28 <LoRaMacMcChannelSetupRxParams+0xa4>
    {
        return LORAMAC_STATUS_BUSY;
    }

    DeviceClass_t devClass = MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams.Class;
 8022a9e:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8022aa2:	222c      	movs	r2, #44	; 0x2c
 8022aa4:	fb02 1200 	mla	r2, r2, r0, r1
 8022aa8:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
    if( ( devClass == CLASS_A ) || ( devClass > CLASS_C ) )
 8022aac:	1e50      	subs	r0, r2, #1
 8022aae:	2801      	cmp	r0, #1
 8022ab0:	d83c      	bhi.n	8022b2c <LoRaMacMcChannelSetupRxParams+0xa8>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 8022ab2:	2c00      	cmp	r4, #0
 8022ab4:	d13c      	bne.n	8022b30 <LoRaMacMcChannelSetupRxParams+0xac>
 8022ab6:	f891 1052 	ldrb.w	r1, [r1, #82]	; 0x52
 8022aba:	2900      	cmp	r1, #0
 8022abc:	d038      	beq.n	8022b30 <LoRaMacMcChannelSetupRxParams+0xac>
        ( MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
    {
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
    }
    /* ST_WORAROUND_BEGIN: only clean one bit */
    *status &= 0xEF; // groupID OK
 8022abe:	f023 0310 	bic.w	r3, r3, #16
 8022ac2:	702b      	strb	r3, [r5, #0]

    VerifyParams_t verify;
    // Check datarate
    if( devClass == CLASS_B )
    {
        verify.DatarateParams.Datarate = rxParams->ClassB.Datarate;
 8022ac4:	f996 3004 	ldrsb.w	r3, [r6, #4]
 8022ac8:	f88d 3004 	strb.w	r3, [sp, #4]
    }
    else
    {
        verify.DatarateParams.Datarate = rxParams->ClassC.Datarate;
    }
    verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8022acc:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8022ad0:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8022ad4:	f88d 2005 	strb.w	r2, [sp, #5]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8022ad8:	7818      	ldrb	r0, [r3, #0]
 8022ada:	2207      	movs	r2, #7
 8022adc:	a901      	add	r1, sp, #4
 8022ade:	f001 fa99 	bl	8024014 <RegionVerify>
 8022ae2:	b118      	cbz	r0, 8022aec <LoRaMacMcChannelSetupRxParams+0x68>
    {
        *status &= 0xFB; // datarate OK
 8022ae4:	782b      	ldrb	r3, [r5, #0]
 8022ae6:	f023 0304 	bic.w	r3, r3, #4
 8022aea:	702b      	strb	r3, [r5, #0]
    }

    // Check frequency
    if( devClass == CLASS_B )
 8022aec:	6833      	ldr	r3, [r6, #0]
 8022aee:	9301      	str	r3, [sp, #4]
    }
    else
    {
        verify.Frequency = rxParams->ClassC.Frequency;
    }
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) == true )
 8022af0:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8022af4:	2200      	movs	r2, #0
 8022af6:	7818      	ldrb	r0, [r3, #0]
 8022af8:	a901      	add	r1, sp, #4
 8022afa:	f001 fa8b 	bl	8024014 <RegionVerify>
 8022afe:	b118      	cbz	r0, 8022b08 <LoRaMacMcChannelSetupRxParams+0x84>
    {
        *status &= 0xF7; // frequency OK
 8022b00:	782b      	ldrb	r3, [r5, #0]
 8022b02:	f023 0308 	bic.w	r3, r3, #8
 8022b06:	702b      	strb	r3, [r5, #0]
    }

    if( *status == ( groupID & 0x03 ) )
 8022b08:	782b      	ldrb	r3, [r5, #0]
 8022b0a:	b933      	cbnz	r3, 8022b1a <LoRaMacMcChannelSetupRxParams+0x96>
    {
        // Apply parameters
        MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams.RxParams = *rxParams;
 8022b0c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8022b10:	e896 0003 	ldmia.w	r6, {r0, r1}
 8022b14:	3368      	adds	r3, #104	; 0x68
 8022b16:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    EventMacNvmCtxChanged( );
 8022b1a:	f7fd fdb5 	bl	8020688 <EventMacNvmCtxChanged>
    EventRegionNvmCtxChanged( );
 8022b1e:	f7fd fdb6 	bl	802068e <EventRegionNvmCtxChanged>
    return LORAMAC_STATUS_OK;
}
 8022b22:	4620      	mov	r0, r4
 8022b24:	b003      	add	sp, #12
 8022b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_BUSY;
 8022b28:	2401      	movs	r4, #1
 8022b2a:	e7fa      	b.n	8022b22 <LoRaMacMcChannelSetupRxParams+0x9e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8022b2c:	2403      	movs	r4, #3
 8022b2e:	e7f8      	b.n	8022b22 <LoRaMacMcChannelSetupRxParams+0x9e>
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 8022b30:	2416      	movs	r4, #22
 8022b32:	e7f6      	b.n	8022b22 <LoRaMacMcChannelSetupRxParams+0x9e>
 8022b34:	20001ad0 	.word	0x20001ad0

08022b38 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8022b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b3a:	b087      	sub	sp, #28
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8022b3c:	2300      	movs	r3, #0
 8022b3e:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 8022b42:	4606      	mov	r6, r0
 8022b44:	2800      	cmp	r0, #0
 8022b46:	f000 80e6 	beq.w	8022d16 <LoRaMacMlmeRequest+0x1de>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8022b4a:	f7fe fceb 	bl	8021524 <LoRaMacIsBusy>
 8022b4e:	b118      	cbz	r0, 8022b58 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 8022b50:	2501      	movs	r5, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 8022b52:	4628      	mov	r0, r5
 8022b54:	b007      	add	sp, #28
 8022b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8022b58:	f000 fd5a 	bl	8023610 <LoRaMacConfirmQueueIsFull>
 8022b5c:	2800      	cmp	r0, #0
 8022b5e:	d1f7      	bne.n	8022b50 <LoRaMacMlmeRequest+0x18>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8022b60:	f000 fd50 	bl	8023604 <LoRaMacConfirmQueueGetCnt>
 8022b64:	4601      	mov	r1, r0
 8022b66:	b918      	cbnz	r0, 8022b70 <LoRaMacMlmeRequest+0x38>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8022b68:	486c      	ldr	r0, [pc, #432]	; (8022d1c <LoRaMacMlmeRequest+0x1e4>)
 8022b6a:	2214      	movs	r2, #20
 8022b6c:	f002 fb2a 	bl	80251c4 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8022b70:	4c6b      	ldr	r4, [pc, #428]	; (8022d20 <LoRaMacMlmeRequest+0x1e8>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8022b72:	f894 2485 	ldrb.w	r2, [r4, #1157]	; 0x485
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8022b76:	2301      	movs	r3, #1
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8022b78:	f042 0204 	orr.w	r2, r2, #4
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8022b7c:	f884 3455 	strb.w	r3, [r4, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8022b80:	f884 2485 	strb.w	r2, [r4, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8022b84:	7832      	ldrb	r2, [r6, #0]
 8022b86:	f88d 2004 	strb.w	r2, [sp, #4]
    queueElement.RestrictCommonReadyToHandle = false;
 8022b8a:	2100      	movs	r1, #0
 8022b8c:	3a01      	subs	r2, #1
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8022b8e:	f88d 3005 	strb.w	r3, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 8022b92:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( mlmeRequest->Type )
 8022b96:	2a0d      	cmp	r2, #13
 8022b98:	f200 80b3 	bhi.w	8022d02 <LoRaMacMlmeRequest+0x1ca>
 8022b9c:	e8df f002 	tbb	[pc, r2]
 8022ba0:	59b1b107 	.word	0x59b1b107
 8022ba4:	b1b18563 	.word	0xb1b18563
 8022ba8:	a5b18db1 	.word	0xa5b18db1
 8022bac:	a191      	.short	0xa191
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8022bae:	f8d4 5344 	ldr.w	r5, [r4, #836]	; 0x344
 8022bb2:	f015 0520 	ands.w	r5, r5, #32
 8022bb6:	d1cb      	bne.n	8022b50 <LoRaMacMlmeRequest+0x18>
            ResetMacParameters( );
 8022bb8:	f7fd fe44 	bl	8020844 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8022bbc:	f8d4 7488 	ldr.w	r7, [r4, #1160]	; 0x488
 8022bc0:	f996 1004 	ldrsb.w	r1, [r6, #4]
 8022bc4:	7838      	ldrb	r0, [r7, #0]
 8022bc6:	462a      	mov	r2, r5
 8022bc8:	f001 fa8d 	bl	80240e6 <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8022bcc:	2307      	movs	r3, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8022bce:	f887 0085 	strb.w	r0, [r7, #133]	; 0x85
            SwitchClass( CLASS_A );
 8022bd2:	4628      	mov	r0, r5
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8022bd4:	4f53      	ldr	r7, [pc, #332]	; (8022d24 <LoRaMacMlmeRequest+0x1ec>)
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8022bd6:	f88d 3005 	strb.w	r3, [sp, #5]
            SwitchClass( CLASS_A );
 8022bda:	f7fe f8fb 	bl	8020dd4 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8022bde:	23ff      	movs	r3, #255	; 0xff
 8022be0:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8022be4:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8022be8:	f884 5111 	strb.w	r5, [r4, #273]	; 0x111
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8022bec:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8022bf0:	f7fb fe06 	bl	801e800 <SecureElementGetJoinEui>
 8022bf4:	2208      	movs	r2, #8
 8022bf6:	4601      	mov	r1, r0
 8022bf8:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8022bfc:	f002 face 	bl	802519c <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8022c00:	f7fb fde8 	bl	801e7d4 <SecureElementGetDevEui>
 8022c04:	2208      	movs	r2, #8
 8022c06:	4601      	mov	r1, r0
 8022c08:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8022c0c:	f002 fac6 	bl	802519c <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 8022c10:	4628      	mov	r0, r5
 8022c12:	f7fd fef9 	bl	8020a08 <ScheduleTx>
            if( status != LORAMAC_STATUS_OK )
 8022c16:	4605      	mov	r5, r0
 8022c18:	b148      	cbz	r0, 8022c2e <LoRaMacMlmeRequest+0xf6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8022c1a:	f8d4 7488 	ldr.w	r7, [r4, #1160]	; 0x488
 8022c1e:	f996 1004 	ldrsb.w	r1, [r6, #4]
 8022c22:	7838      	ldrb	r0, [r7, #0]
 8022c24:	2201      	movs	r2, #1
 8022c26:	f001 fa5e 	bl	80240e6 <RegionAlternateDr>
 8022c2a:	f887 0085 	strb.w	r0, [r7, #133]	; 0x85
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8022c2e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8022c32:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 8022c34:	2d00      	cmp	r5, #0
 8022c36:	d068      	beq.n	8022d0a <LoRaMacMlmeRequest+0x1d2>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8022c38:	f000 fce4 	bl	8023604 <LoRaMacConfirmQueueGetCnt>
 8022c3c:	2800      	cmp	r0, #0
 8022c3e:	d188      	bne.n	8022b52 <LoRaMacMlmeRequest+0x1a>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8022c40:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
            MacCtx.NodeAckRequested = false;
 8022c44:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8022c48:	f360 0382 	bfi	r3, r0, #2, #1
 8022c4c:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 8022c50:	e77f      	b.n	8022b52 <LoRaMacMlmeRequest+0x1a>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8022c52:	2200      	movs	r2, #0
 8022c54:	4669      	mov	r1, sp
 8022c56:	2002      	movs	r0, #2
 8022c58:	f000 fae8 	bl	802322c <LoRaMacCommandsAddCmd>
 8022c5c:	b908      	cbnz	r0, 8022c62 <LoRaMacMlmeRequest+0x12a>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8022c5e:	2500      	movs	r5, #0
            break;
 8022c60:	e7e5      	b.n	8022c2e <LoRaMacMlmeRequest+0xf6>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8022c62:	2513      	movs	r5, #19
 8022c64:	e7e3      	b.n	8022c2e <LoRaMacMlmeRequest+0xf6>
    continuousWave.Channel = MacCtx.Channel;
 8022c66:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 8022c6a:	f88d 3008 	strb.w	r3, [sp, #8]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8022c6e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8022c72:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8022c74:	f893 1085 	ldrb.w	r1, [r3, #133]	; 0x85
 8022c78:	f88d 1009 	strb.w	r1, [sp, #9]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8022c7c:	f893 1084 	ldrb.w	r1, [r3, #132]	; 0x84
 8022c80:	f88d 100a 	strb.w	r1, [sp, #10]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8022c84:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8022c88:	9103      	str	r1, [sp, #12]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8022c8a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8022c8e:	9104      	str	r1, [sp, #16]
    continuousWave.Timeout = timeout;
 8022c90:	f8ad 2014 	strh.w	r2, [sp, #20]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8022c94:	7818      	ldrb	r0, [r3, #0]
 8022c96:	a902      	add	r1, sp, #8
 8022c98:	f001 fa3e 	bl	8024118 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8022c9c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8022ca0:	f043 0302 	orr.w	r3, r3, #2
 8022ca4:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
 8022ca8:	e7d9      	b.n	8022c5e <LoRaMacMlmeRequest+0x126>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8022caa:	4b1f      	ldr	r3, [pc, #124]	; (8022d28 <LoRaMacMlmeRequest+0x1f0>)
 8022cac:	88b2      	ldrh	r2, [r6, #4]
 8022cae:	f996 100c 	ldrsb.w	r1, [r6, #12]
 8022cb2:	68b0      	ldr	r0, [r6, #8]
 8022cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022cb6:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8022cb8:	e7f0      	b.n	8022c9c <LoRaMacMlmeRequest+0x164>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8022cba:	2200      	movs	r2, #0
 8022cbc:	4669      	mov	r1, sp
 8022cbe:	200d      	movs	r0, #13
 8022cc0:	e7ca      	b.n	8022c58 <LoRaMacMlmeRequest+0x120>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8022cc2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8022cc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8022cca:	b9d3      	cbnz	r3, 8022d02 <LoRaMacMlmeRequest+0x1ca>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8022ccc:	7935      	ldrb	r5, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8022cce:	f005 0007 	and.w	r0, r5, #7
 8022cd2:	f000 fa6a 	bl	80231aa <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8022cd6:	f88d 5000 	strb.w	r5, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8022cda:	2201      	movs	r2, #1
 8022cdc:	4669      	mov	r1, sp
 8022cde:	2010      	movs	r0, #16
 8022ce0:	e7ba      	b.n	8022c58 <LoRaMacMlmeRequest+0x120>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8022ce2:	2200      	movs	r2, #0
 8022ce4:	4669      	mov	r1, sp
 8022ce6:	2012      	movs	r0, #18
 8022ce8:	e7b6      	b.n	8022c58 <LoRaMacMlmeRequest+0x120>
            queueElement.RestrictCommonReadyToHandle = true;
 8022cea:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8022cee:	f000 fa4d 	bl	802318c <LoRaMacClassBIsAcquisitionInProgress>
 8022cf2:	4605      	mov	r5, r0
 8022cf4:	b938      	cbnz	r0, 8022d06 <LoRaMacMlmeRequest+0x1ce>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8022cf6:	f000 fa46 	bl	8023186 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8022cfa:	4628      	mov	r0, r5
 8022cfc:	f000 fa48 	bl	8023190 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8022d00:	e795      	b.n	8022c2e <LoRaMacMlmeRequest+0xf6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8022d02:	2502      	movs	r5, #2
 8022d04:	e793      	b.n	8022c2e <LoRaMacMlmeRequest+0xf6>
                status = LORAMAC_STATUS_BUSY;
 8022d06:	2501      	movs	r5, #1
 8022d08:	e791      	b.n	8022c2e <LoRaMacMlmeRequest+0xf6>
        LoRaMacConfirmQueueAdd( &queueElement );
 8022d0a:	a801      	add	r0, sp, #4
 8022d0c:	f000 fbd8 	bl	80234c0 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8022d10:	f7fd fcba 	bl	8020688 <EventMacNvmCtxChanged>
 8022d14:	e71d      	b.n	8022b52 <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8022d16:	2503      	movs	r5, #3
 8022d18:	e71b      	b.n	8022b52 <LoRaMacMlmeRequest+0x1a>
 8022d1a:	bf00      	nop
 8022d1c:	20001f24 	.word	0x20001f24
 8022d20:	20001ad0 	.word	0x20001ad0
 8022d24:	20001ad6 	.word	0x20001ad6
 8022d28:	08027928 	.word	0x08027928

08022d2c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8022d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d30:	ed2d 8b02 	vpush	{d8}
 8022d34:	2600      	movs	r6, #0
 8022d36:	ee08 1a10 	vmov	s16, r1
 8022d3a:	b08f      	sub	sp, #60	; 0x3c
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8022d3c:	4605      	mov	r5, r0
 8022d3e:	b930      	cbnz	r0, 8022d4e <LoRaMacMcpsRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8022d40:	2603      	movs	r6, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8022d42:	4630      	mov	r0, r6
 8022d44:	b00f      	add	sp, #60	; 0x3c
 8022d46:	ecbd 8b02 	vpop	{d8}
 8022d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacIsBusy( ) == true )
 8022d4e:	f7fe fbe9 	bl	8021524 <LoRaMacIsBusy>
 8022d52:	4680      	mov	r8, r0
 8022d54:	2800      	cmp	r0, #0
 8022d56:	f040 8175 	bne.w	8023044 <LoRaMacMcpsRequest+0x318>
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8022d5a:	4cc1      	ldr	r4, [pc, #772]	; (8023060 <LoRaMacMcpsRequest+0x334>)
 8022d5c:	4601      	mov	r1, r0
    macHdr.Value = 0;
 8022d5e:	4607      	mov	r7, r0
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8022d60:	2214      	movs	r2, #20
 8022d62:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 8022d66:	f002 fa2d 	bl	80251c4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8022d6a:	2101      	movs	r1, #1
 8022d6c:	f884 1441 	strb.w	r1, [r4, #1089]	; 0x441
    MacCtx.AckTimeoutRetriesCounter = 1;
 8022d70:	f884 1416 	strb.w	r1, [r4, #1046]	; 0x416
    switch( mcpsRequest->Type )
 8022d74:	7828      	ldrb	r0, [r5, #0]
 8022d76:	4288      	cmp	r0, r1
 8022d78:	f000 80b5 	beq.w	8022ee6 <LoRaMacMcpsRequest+0x1ba>
 8022d7c:	2803      	cmp	r0, #3
 8022d7e:	f000 80c4 	beq.w	8022f0a <LoRaMacMcpsRequest+0x1de>
 8022d82:	2800      	cmp	r0, #0
 8022d84:	f040 80ce 	bne.w	8022f24 <LoRaMacMcpsRequest+0x1f8>
            MacCtx.AckTimeoutRetries = 1;
 8022d88:	f884 1415 	strb.w	r1, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8022d8c:	2302      	movs	r3, #2
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8022d8e:	f895 a004 	ldrb.w	sl, [r5, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8022d92:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8022d96:	89ae      	ldrh	r6, [r5, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8022d98:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8022d9c:	f363 1747 	bfi	r7, r3, #5, #3
            readyToSend = true;
 8022da0:	4688      	mov	r8, r1
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8022da2:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
    getPhy.Attribute = PHY_MIN_TX_DR;
 8022da6:	2302      	movs	r3, #2
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8022da8:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    getPhy.Attribute = PHY_MIN_TX_DR;
 8022dac:	f88d 301c 	strb.w	r3, [sp, #28]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8022db0:	f88d 101e 	strb.w	r1, [sp, #30]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8022db4:	7800      	ldrb	r0, [r0, #0]
 8022db6:	a907      	add	r1, sp, #28
 8022db8:	f001 f90f 	bl	8023fda <RegionGetPhyParam>
    if( readyToSend == true )
 8022dbc:	2302      	movs	r3, #2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8022dbe:	9002      	str	r0, [sp, #8]
    if( readyToSend == true )
 8022dc0:	f1b8 0f00 	cmp.w	r8, #0
 8022dc4:	f000 813c 	beq.w	8023040 <LoRaMacMcpsRequest+0x314>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8022dc8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8022dcc:	f893 107e 	ldrb.w	r1, [r3, #126]	; 0x7e
 8022dd0:	b9b9      	cbnz	r1, 8022e02 <LoRaMacMcpsRequest+0xd6>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8022dd2:	b240      	sxtb	r0, r0
 8022dd4:	4558      	cmp	r0, fp
 8022dd6:	4602      	mov	r2, r0
 8022dd8:	bfb8      	it	lt
 8022dda:	465a      	movlt	r2, fp
            verify.DatarateParams.Datarate = datarate;
 8022ddc:	f88d 200c 	strb.w	r2, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8022de0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8022de4:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8022de8:	7818      	ldrb	r0, [r3, #0]
 8022dea:	2205      	movs	r2, #5
 8022dec:	a903      	add	r1, sp, #12
 8022dee:	f001 f911 	bl	8024014 <RegionVerify>
 8022df2:	2800      	cmp	r0, #0
 8022df4:	d0a4      	beq.n	8022d40 <LoRaMacMcpsRequest+0x14>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8022df6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8022dfa:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8022dfe:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8022e02:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8022e06:	f8b1 2084 	ldrh.w	r2, [r1, #132]	; 0x84
 8022e0a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8022e0e:	9201      	str	r2, [sp, #4]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8022e10:	f891 2164 	ldrb.w	r2, [r1, #356]	; 0x164
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8022e14:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
 8022e18:	9004      	str	r0, [sp, #16]
 8022e1a:	ba5b      	rev16	r3, r3
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8022e1c:	2a00      	cmp	r2, #0
 8022e1e:	f000 810d 	beq.w	802303c <LoRaMacMcpsRequest+0x310>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8022e22:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
 8022e26:	b90a      	cbnz	r2, 8022e2c <LoRaMacMcpsRequest+0x100>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8022e28:	f8c1 2154 	str.w	r2, [r1, #340]	; 0x154
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8022e2c:	f891 207c 	ldrb.w	r2, [r1, #124]	; 0x7c
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8022e30:	f891 c07e 	ldrb.w	ip, [r1, #126]	; 0x7e
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8022e34:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    fCtrl.Value = 0;
 8022e38:	f04f 0800 	mov.w	r8, #0
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8022e3c:	f1de 0200 	rsbs	r2, lr, #0
 8022e40:	eb42 020e 	adc.w	r2, r2, lr
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8022e44:	f36c 18c7 	bfi	r8, ip, #7, #1
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8022e48:	f362 1804 	bfi	r8, r2, #4, #1
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8022e4c:	f891 214b 	ldrb.w	r2, [r1, #331]	; 0x14b
 8022e50:	b10a      	cbz	r2, 8022e56 <LoRaMacMcpsRequest+0x12a>
        fCtrl.Bits.Ack = 1;
 8022e52:	f048 0820 	orr.w	r8, r8, #32
    adrNext.Version = MacCtx.NvmCtx->Version;
 8022e56:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8022e5a:	9209      	str	r2, [sp, #36]	; 0x24
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8022e5c:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8022e60:	920c      	str	r2, [sp, #48]	; 0x30
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8022e62:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    adrNext.Region = MacCtx.NvmCtx->Region;
 8022e66:	460a      	mov	r2, r1
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8022e68:	f891 30b8 	ldrb.w	r3, [r1, #184]	; 0xb8
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8022e6c:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    adrNext.UpdateChanMask = true;
 8022e70:	f04f 0b01 	mov.w	fp, #1
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8022e74:	900b      	str	r0, [sp, #44]	; 0x2c
    adrNext.UpdateChanMask = true;
 8022e76:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8022e7a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    adrNext.Region = MacCtx.NvmCtx->Region;
 8022e7e:	f812 3b84 	ldrb.w	r3, [r2], #132
 8022e82:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8022e86:	3185      	adds	r1, #133	; 0x85
 8022e88:	ab04      	add	r3, sp, #16
 8022e8a:	a809      	add	r0, sp, #36	; 0x24
 8022e8c:	f000 f906 	bl	802309c <LoRaMacAdrCalcNext>
    MacCtx.PktBufferLen = 0;
 8022e90:	2300      	movs	r3, #0
        fBufferSize = 0;
 8022e92:	4599      	cmp	r9, r3
 8022e94:	bf08      	it	eq
 8022e96:	461e      	moveq	r6, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8022e98:	4632      	mov	r2, r6
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8022e9a:	f360 1886 	bfi	r8, r0, #6, #1
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8022e9e:	4649      	mov	r1, r9
 8022ea0:	4870      	ldr	r0, [pc, #448]	; (8023064 <LoRaMacMcpsRequest+0x338>)
    MacCtx.PktBufferLen = 0;
 8022ea2:	80a3      	strh	r3, [r4, #4]
    size_t macCmdsSize = 0;
 8022ea4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    MacCtx.NodeAckRequested = false;
 8022ea8:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8022eac:	f002 f976 	bl	802519c <memcpy1>
    MacCtx.PktBuffer[0] = macHdr->Value;
 8022eb0:	b2fb      	uxtb	r3, r7
 8022eb2:	71a7      	strb	r7, [r4, #6]
    switch( macHdr->Bits.MType )
 8022eb4:	f3c7 1742 	ubfx	r7, r7, #5, #3
    MacCtx.AppDataSize = fBufferSize;
 8022eb8:	b2f2      	uxtb	r2, r6
    switch( macHdr->Bits.MType )
 8022eba:	2f04      	cmp	r7, #4
    MacCtx.AppDataSize = fBufferSize;
 8022ebc:	f884 223b 	strb.w	r2, [r4, #571]	; 0x23b
    switch( macHdr->Bits.MType )
 8022ec0:	d033      	beq.n	8022f2a <LoRaMacMcpsRequest+0x1fe>
 8022ec2:	2f07      	cmp	r7, #7
 8022ec4:	f000 80aa 	beq.w	802301c <LoRaMacMcpsRequest+0x2f0>
 8022ec8:	2f02      	cmp	r7, #2
 8022eca:	d030      	beq.n	8022f2e <LoRaMacMcpsRequest+0x202>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8022ecc:	2602      	movs	r6, #2
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8022ece:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8022ed2:	9a01      	ldr	r2, [sp, #4]
 8022ed4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
            MacCtx.NodeAckRequested = false;
 8022ed8:	2300      	movs	r3, #0
 8022eda:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8022ede:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8022ee2:	612b      	str	r3, [r5, #16]
    return status;
 8022ee4:	e72d      	b.n	8022d42 <LoRaMacMcpsRequest+0x16>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8022ee6:	7beb      	ldrb	r3, [r5, #15]
 8022ee8:	2b08      	cmp	r3, #8
 8022eea:	bf28      	it	cs
 8022eec:	2308      	movcs	r3, #8
 8022eee:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8022ef2:	2304      	movs	r3, #4
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8022ef4:	f895 a004 	ldrb.w	sl, [r5, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8022ef8:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8022efc:	89ae      	ldrh	r6, [r5, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8022efe:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8022f02:	f363 1747 	bfi	r7, r3, #5, #3
            readyToSend = true;
 8022f06:	4680      	mov	r8, r0
            break;
 8022f08:	e74b      	b.n	8022da2 <LoRaMacMcpsRequest+0x76>
            MacCtx.AckTimeoutRetries = 1;
 8022f0a:	f884 1415 	strb.w	r1, [r4, #1045]	; 0x415
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8022f0e:	f8d5 9004 	ldr.w	r9, [r5, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8022f12:	892e      	ldrh	r6, [r5, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8022f14:	f995 b00a 	ldrsb.w	fp, [r5, #10]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8022f18:	f067 071f 	orn	r7, r7, #31
            readyToSend = true;
 8022f1c:	4688      	mov	r8, r1
    uint8_t fPort = 0;
 8022f1e:	f04f 0a00 	mov.w	sl, #0
            break;
 8022f22:	e73e      	b.n	8022da2 <LoRaMacMcpsRequest+0x76>
    switch( mcpsRequest->Type )
 8022f24:	46c3      	mov	fp, r8
 8022f26:	46c2      	mov	sl, r8
 8022f28:	e73b      	b.n	8022da2 <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = true;
 8022f2a:	f884 b418 	strb.w	fp, [r4, #1048]	; 0x418
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8022f2e:	2104      	movs	r1, #4
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8022f30:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8022f34:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8022f38:	4e4b      	ldr	r6, [pc, #300]	; (8023068 <LoRaMacMcpsRequest+0x33c>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8022f3a:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8022f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022f40:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8022f44:	21ff      	movs	r1, #255	; 0xff
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8022f46:	f506 739b 	add.w	r3, r6, #310	; 0x136
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8022f4a:	a805      	add	r0, sp, #20
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8022f4c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8022f50:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8022f54:	f884 a12c 	strb.w	sl, [r4, #300]	; 0x12c
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8022f58:	f884 8118 	strb.w	r8, [r4, #280]	; 0x118
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8022f5c:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8022f60:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8022f64:	f000 fcae 	bl	80238c4 <LoRaMacCryptoGetFCntUp>
 8022f68:	2800      	cmp	r0, #0
 8022f6a:	d165      	bne.n	8023038 <LoRaMacMcpsRequest+0x30c>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8022f6c:	9b05      	ldr	r3, [sp, #20]
            MacCtx.McpsConfirm.AckReceived = false;
 8022f6e:	f8a4 0444 	strh.w	r0, [r4, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8022f72:	a806      	add	r0, sp, #24
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8022f74:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8022f78:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8022f7c:	f000 fa00 	bl	8023380 <LoRaMacCommandsGetSizeSerializedCmds>
 8022f80:	2800      	cmp	r0, #0
 8022f82:	d136      	bne.n	8022ff2 <LoRaMacMcpsRequest+0x2c6>
            if( macCmdsSize > 0 )
 8022f84:	9b06      	ldr	r3, [sp, #24]
 8022f86:	b1bb      	cbz	r3, 8022fb8 <LoRaMacMcpsRequest+0x28c>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8022f88:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8022f8c:	f993 0085 	ldrsb.w	r0, [r3, #133]	; 0x85
 8022f90:	f7fd fb90 	bl	80206b4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8022f94:	f894 323b 	ldrb.w	r3, [r4, #571]	; 0x23b
 8022f98:	b36b      	cbz	r3, 8022ff6 <LoRaMacMcpsRequest+0x2ca>
 8022f9a:	9b06      	ldr	r3, [sp, #24]
 8022f9c:	2b0f      	cmp	r3, #15
 8022f9e:	d820      	bhi.n	8022fe2 <LoRaMacMcpsRequest+0x2b6>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8022fa0:	f506 728b 	add.w	r2, r6, #278	; 0x116
 8022fa4:	a906      	add	r1, sp, #24
 8022fa6:	200f      	movs	r0, #15
 8022fa8:	f000 f9f6 	bl	8023398 <LoRaMacCommandsSerializeCmds>
 8022fac:	bb08      	cbnz	r0, 8022ff2 <LoRaMacMcpsRequest+0x2c6>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8022fae:	9b06      	ldr	r3, [sp, #24]
 8022fb0:	f363 0803 	bfi	r8, r3, #0, #4
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8022fb4:	f884 8118 	strb.w	r8, [r4, #280]	; 0x118
        status = ScheduleTx( allowDelayedTx );
 8022fb8:	ee18 0a10 	vmov	r0, s16
 8022fbc:	f7fd fd24 	bl	8020a08 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 8022fc0:	4606      	mov	r6, r0
 8022fc2:	2800      	cmp	r0, #0
 8022fc4:	d183      	bne.n	8022ece <LoRaMacMcpsRequest+0x1a2>
        MacCtx.NvmCtx->SrvAckRequested = false;
 8022fc6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8022fca:	9a04      	ldr	r2, [sp, #16]
        MacCtx.NvmCtx->SrvAckRequested = false;
 8022fcc:	f883 014b 	strb.w	r0, [r3, #331]	; 0x14b
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8022fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8022fd4:	f000 f9ac 	bl	8023330 <LoRaMacCommandsRemoveNoneStickyCmds>
 8022fd8:	4606      	mov	r6, r0
 8022fda:	2800      	cmp	r0, #0
 8022fdc:	d034      	beq.n	8023048 <LoRaMacMcpsRequest+0x31c>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8022fde:	2613      	movs	r6, #19
 8022fe0:	e77a      	b.n	8022ed8 <LoRaMacMcpsRequest+0x1ac>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8022fe2:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8022fe6:	a906      	add	r1, sp, #24
 8022fe8:	32cb      	adds	r2, #203	; 0xcb
 8022fea:	f000 f9d5 	bl	8023398 <LoRaMacCommandsSerializeCmds>
 8022fee:	2800      	cmp	r0, #0
 8022ff0:	d0e2      	beq.n	8022fb8 <LoRaMacMcpsRequest+0x28c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8022ff2:	2613      	movs	r6, #19
 8022ff4:	e76b      	b.n	8022ece <LoRaMacMcpsRequest+0x1a2>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8022ff6:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8022ffa:	a906      	add	r1, sp, #24
 8022ffc:	32cb      	adds	r2, #203	; 0xcb
 8022ffe:	f000 f9cb 	bl	8023398 <LoRaMacCommandsSerializeCmds>
 8023002:	2800      	cmp	r0, #0
 8023004:	d1f5      	bne.n	8022ff2 <LoRaMacMcpsRequest+0x2c6>
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8023006:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 802300a:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 802300e:	33cb      	adds	r3, #203	; 0xcb
 8023010:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8023014:	9b06      	ldr	r3, [sp, #24]
 8023016:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 802301a:	e7cd      	b.n	8022fb8 <LoRaMacMcpsRequest+0x28c>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 802301c:	f1b9 0f00 	cmp.w	r9, #0
 8023020:	d0ca      	beq.n	8022fb8 <LoRaMacMcpsRequest+0x28c>
 8023022:	2a00      	cmp	r2, #0
 8023024:	d0c8      	beq.n	8022fb8 <LoRaMacMcpsRequest+0x28c>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8023026:	4811      	ldr	r0, [pc, #68]	; (802306c <LoRaMacMcpsRequest+0x340>)
 8023028:	4649      	mov	r1, r9
 802302a:	f002 f8b7 	bl	802519c <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 802302e:	f894 323b 	ldrb.w	r3, [r4, #571]	; 0x23b
 8023032:	3301      	adds	r3, #1
 8023034:	80a3      	strh	r3, [r4, #4]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8023036:	e7bf      	b.n	8022fb8 <LoRaMacMcpsRequest+0x28c>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8023038:	2612      	movs	r6, #18
 802303a:	e748      	b.n	8022ece <LoRaMacMcpsRequest+0x1a2>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 802303c:	2607      	movs	r6, #7
 802303e:	e74b      	b.n	8022ed8 <LoRaMacMcpsRequest+0x1ac>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8023040:	461e      	mov	r6, r3
 8023042:	e74c      	b.n	8022ede <LoRaMacMcpsRequest+0x1b2>
        return LORAMAC_STATUS_BUSY;
 8023044:	2601      	movs	r6, #1
 8023046:	e67c      	b.n	8022d42 <LoRaMacMcpsRequest+0x16>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8023048:	782b      	ldrb	r3, [r5, #0]
 802304a:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 802304e:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8023052:	f043 0301 	orr.w	r3, r3, #1
 8023056:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
            EventMacNvmCtxChanged( );
 802305a:	f7fd fb15 	bl	8020688 <EventMacNvmCtxChanged>
 802305e:	e73e      	b.n	8022ede <LoRaMacMcpsRequest+0x1b2>
 8023060:	20001ad0 	.word	0x20001ad0
 8023064:	20001c0c 	.word	0x20001c0c
 8023068:	20001ad6 	.word	0x20001ad6
 802306c:	20001ad7 	.word	0x20001ad7

08023070 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8023070:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8023072:	4d09      	ldr	r5, [pc, #36]	; (8023098 <LoRaMacTestSetDutyCycleOn+0x28>)
    verify.DutyCycle = enable;
 8023074:	f88d 0004 	strb.w	r0, [sp, #4]
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8023078:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
{
 802307c:	4604      	mov	r4, r0
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 802307e:	220f      	movs	r2, #15
 8023080:	7818      	ldrb	r0, [r3, #0]
 8023082:	a901      	add	r1, sp, #4
 8023084:	f000 ffc6 	bl	8024014 <RegionVerify>
 8023088:	b118      	cbz	r0, 8023092 <LoRaMacTestSetDutyCycleOn+0x22>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 802308a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 802308e:	f883 40c9 	strb.w	r4, [r3, #201]	; 0xc9
    }
}
 8023092:	b003      	add	sp, #12
 8023094:	bd30      	pop	{r4, r5, pc}
 8023096:	bf00      	nop
 8023098:	20001ad0 	.word	0x20001ad0

0802309c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 802309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 80230a0:	f890 9002 	ldrb.w	r9, [r0, #2]
{
 80230a4:	b08b      	sub	sp, #44	; 0x2c
 80230a6:	4604      	mov	r4, r0
 80230a8:	468a      	mov	sl, r1
 80230aa:	9201      	str	r2, [sp, #4]
    if( adrNext->Version.Fields.Minor == 0 )
 80230ac:	f1b9 0f00 	cmp.w	r9, #0
 80230b0:	d160      	bne.n	8023174 <LoRaMacAdrCalcNext+0xd8>
    if( adrNext->AdrEnabled == true )
 80230b2:	7945      	ldrb	r5, [r0, #5]
    *adrAckCounter = adrNext->AdrAckCounter;
 80230b4:	6881      	ldr	r1, [r0, #8]
    int8_t datarate = adrNext->Datarate;
 80230b6:	f990 2010 	ldrsb.w	r2, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 80230ba:	f990 8011 	ldrsb.w	r8, [r0, #17]
    *adrAckCounter = adrNext->AdrAckCounter;
 80230be:	6019      	str	r1, [r3, #0]
    if( adrNext->AdrEnabled == true )
 80230c0:	2d00      	cmp	r5, #0
 80230c2:	d055      	beq.n	8023170 <LoRaMacAdrCalcNext+0xd4>
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80230c4:	7c81      	ldrb	r1, [r0, #18]
 80230c6:	f88d 101a 	strb.w	r1, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80230ca:	7cc0      	ldrb	r0, [r0, #19]
        getPhy.Attribute = PHY_MIN_TX_DR;
 80230cc:	f04f 0b02 	mov.w	fp, #2
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80230d0:	a906      	add	r1, sp, #24
 80230d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
        getPhy.Attribute = PHY_MIN_TX_DR;
 80230d6:	f88d b018 	strb.w	fp, [sp, #24]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80230da:	f000 ff7e 	bl	8023fda <RegionGetPhyParam>
        datarate = MAX( datarate, minTxDatarate );
 80230de:	9a02      	ldr	r2, [sp, #8]
        minTxDatarate = phyParam.Value;
 80230e0:	b247      	sxtb	r7, r0
        datarate = MAX( datarate, minTxDatarate );
 80230e2:	42ba      	cmp	r2, r7
 80230e4:	4616      	mov	r6, r2
 80230e6:	bfb8      	it	lt
 80230e8:	463e      	movlt	r6, r7
        if( datarate == minTxDatarate )
 80230ea:	42ba      	cmp	r2, r7
 80230ec:	dc0c      	bgt.n	8023108 <LoRaMacAdrCalcNext+0x6c>
            *adrAckCounter = 0;
 80230ee:	9b03      	ldr	r3, [sp, #12]
 80230f0:	f8c3 9000 	str.w	r9, [r3]
                        adrAckReq = false;
 80230f4:	464d      	mov	r5, r9
    *txPowOut = txPower;
 80230f6:	9b01      	ldr	r3, [sp, #4]
    *drOut = datarate;
 80230f8:	f88a 6000 	strb.w	r6, [sl]
    *txPowOut = txPower;
 80230fc:	f883 8000 	strb.w	r8, [r3]
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
}
 8023100:	4628      	mov	r0, r5
 8023102:	b00b      	add	sp, #44	; 0x2c
 8023104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8023108:	68a2      	ldr	r2, [r4, #8]
 802310a:	89a1      	ldrh	r1, [r4, #12]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 802310c:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 802310e:	428a      	cmp	r2, r1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8023110:	440b      	add	r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8023112:	bf34      	ite	cc
 8023114:	2500      	movcc	r5, #0
 8023116:	2501      	movcs	r5, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8023118:	429a      	cmp	r2, r3
 802311a:	d3ec      	bcc.n	80230f6 <LoRaMacAdrCalcNext+0x5a>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 802311c:	2308      	movs	r3, #8
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 802311e:	a906      	add	r1, sp, #24
 8023120:	7ce0      	ldrb	r0, [r4, #19]
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8023122:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8023126:	f000 ff58 	bl	8023fda <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 802312a:	89e2      	ldrh	r2, [r4, #14]
 802312c:	68a1      	ldr	r1, [r4, #8]
 802312e:	fbb1 f3f2 	udiv	r3, r1, r2
 8023132:	fb02 1313 	mls	r3, r2, r3, r1
 8023136:	2b01      	cmp	r3, #1
                txPower = phyParam.Value;
 8023138:	fa4f f880 	sxtb.w	r8, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 802313c:	d1db      	bne.n	80230f6 <LoRaMacAdrCalcNext+0x5a>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 802313e:	2322      	movs	r3, #34	; 0x22
 8023140:	f88d 3018 	strb.w	r3, [sp, #24]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8023144:	7ce0      	ldrb	r0, [r4, #19]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8023146:	7ca3      	ldrb	r3, [r4, #18]
                    getPhy.Datarate = datarate;
 8023148:	f88d 6019 	strb.w	r6, [sp, #25]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 802314c:	a906      	add	r1, sp, #24
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 802314e:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8023152:	f000 ff42 	bl	8023fda <RegionGetPhyParam>
                    datarate = phyParam.Value;
 8023156:	b246      	sxtb	r6, r0
                    if( datarate == minTxDatarate )
 8023158:	42b7      	cmp	r7, r6
 802315a:	d1cc      	bne.n	80230f6 <LoRaMacAdrCalcNext+0x5a>
                        if( adrNext->UpdateChanMask == true )
 802315c:	7925      	ldrb	r5, [r4, #4]
 802315e:	2d00      	cmp	r5, #0
 8023160:	d0c9      	beq.n	80230f6 <LoRaMacAdrCalcNext+0x5a>
                            RegionInitDefaults( adrNext->Region, &params );
 8023162:	7ce0      	ldrb	r0, [r4, #19]
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8023164:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
                            RegionInitDefaults( adrNext->Region, &params );
 8023168:	a908      	add	r1, sp, #32
 802316a:	f000 ff46 	bl	8023ffa <RegionInitDefaults>
 802316e:	e7c1      	b.n	80230f4 <LoRaMacAdrCalcNext+0x58>
    int8_t datarate = adrNext->Datarate;
 8023170:	4616      	mov	r6, r2
 8023172:	e7c0      	b.n	80230f6 <LoRaMacAdrCalcNext+0x5a>
    return false;
 8023174:	2500      	movs	r5, #0
 8023176:	e7c3      	b.n	8023100 <LoRaMacAdrCalcNext+0x64>

08023178 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8023178:	4770      	bx	lr

0802317a <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 802317a:	2001      	movs	r0, #1
 802317c:	4770      	bx	lr

0802317e <LoRaMacClassBGetNvmCtx>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 802317e:	2300      	movs	r3, #0
 8023180:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 8023182:	4618      	mov	r0, r3
 8023184:	4770      	bx	lr

08023186 <LoRaMacClassBSetBeaconState>:
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8023186:	4770      	bx	lr

08023188 <LoRaMacClassBSetPingSlotState>:
 8023188:	4770      	bx	lr

0802318a <LoRaMacClassBSetMulticastSlotState>:
 802318a:	4770      	bx	lr

0802318c <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 802318c:	2000      	movs	r0, #0
 802318e:	4770      	bx	lr

08023190 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8023190:	4770      	bx	lr

08023192 <LoRaMacClassBPingSlotTimerEvent>:
 8023192:	4770      	bx	lr

08023194 <LoRaMacClassBMulticastSlotTimerEvent>:
 8023194:	4770      	bx	lr

08023196 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8023196:	2000      	movs	r0, #0
 8023198:	4770      	bx	lr

0802319a <LoRaMacClassBIsBeaconExpected>:
 802319a:	2000      	movs	r0, #0
 802319c:	4770      	bx	lr

0802319e <LoRaMacClassBIsPingExpected>:
 802319e:	2000      	movs	r0, #0
 80231a0:	4770      	bx	lr

080231a2 <LoRaMacClassBIsMulticastExpected>:
 80231a2:	2000      	movs	r0, #0
 80231a4:	4770      	bx	lr

080231a6 <LoRaMacClassBIsBeaconModeActive>:
 80231a6:	2000      	movs	r0, #0
 80231a8:	4770      	bx	lr

080231aa <LoRaMacClassBSetPingSlotInfo>:
 80231aa:	4770      	bx	lr

080231ac <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80231ac:	4770      	bx	lr

080231ae <LoRaMacClassBResumeBeaconing>:
 80231ae:	4770      	bx	lr

080231b0 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80231b0:	2002      	movs	r0, #2
 80231b2:	4770      	bx	lr

080231b4 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80231b4:	2002      	movs	r0, #2
 80231b6:	4770      	bx	lr

080231b8 <LoRaMacMibClassBSetRequestConfirm>:
 80231b8:	2002      	movs	r0, #2
 80231ba:	4770      	bx	lr

080231bc <LoRaMacClassBPingSlotInfoAns>:
 80231bc:	4770      	bx	lr

080231be <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80231be:	2000      	movs	r0, #0
 80231c0:	4770      	bx	lr

080231c2 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80231c2:	4770      	bx	lr

080231c4 <LoRaMacClassBDeviceTimeAns>:
 80231c4:	4770      	bx	lr

080231c6 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80231c6:	2000      	movs	r0, #0
 80231c8:	4770      	bx	lr

080231ca <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80231ca:	2000      	movs	r0, #0
 80231cc:	4770      	bx	lr

080231ce <LoRaMacClassBStopRxSlots>:
 80231ce:	4770      	bx	lr

080231d0 <LoRaMacClassBSetMulticastPeriodicity>:
 80231d0:	4770      	bx	lr

080231d2 <LoRaMacClassBProcess>:
 80231d2:	4770      	bx	lr

080231d4 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 80231d4:	4b02      	ldr	r3, [pc, #8]	; (80231e0 <NvmCtxCallback+0xc>)
 80231d6:	681b      	ldr	r3, [r3, #0]
 80231d8:	b103      	cbz	r3, 80231dc <NvmCtxCallback+0x8>
    {
        CommandsNvmCtxChanged( );
 80231da:	4718      	bx	r3
    }
}
 80231dc:	4770      	bx	lr
 80231de:	bf00      	nop
 80231e0:	20002104 	.word	0x20002104

080231e4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 80231e4:	b538      	push	{r3, r4, r5, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 80231e6:	4c06      	ldr	r4, [pc, #24]	; (8023200 <LoRaMacCommandsInit+0x1c>)
{
 80231e8:	4605      	mov	r5, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 80231ea:	22fc      	movs	r2, #252	; 0xfc
 80231ec:	1d20      	adds	r0, r4, #4
 80231ee:	2100      	movs	r1, #0
 80231f0:	f001 ffe8 	bl	80251c4 <memset1>
    list->First = NULL;
 80231f4:	2000      	movs	r0, #0
    list->Last = NULL;
 80231f6:	e9c4 0001 	strd	r0, r0, [r4, #4]

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 80231fa:	6025      	str	r5, [r4, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 80231fc:	bd38      	pop	{r3, r4, r5, pc}
 80231fe:	bf00      	nop
 8023200:	20002104 	.word	0x20002104

08023204 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8023204:	b508      	push	{r3, lr}
    // Restore module context
    if( commandsNvmCtx != NULL )
 8023206:	4601      	mov	r1, r0
 8023208:	b128      	cbz	r0, 8023216 <LoRaMacCommandsRestoreNvmCtx+0x12>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 802320a:	4804      	ldr	r0, [pc, #16]	; (802321c <LoRaMacCommandsRestoreNvmCtx+0x18>)
 802320c:	22fc      	movs	r2, #252	; 0xfc
 802320e:	f001 ffc5 	bl	802519c <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8023212:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
}
 8023214:	bd08      	pop	{r3, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8023216:	2001      	movs	r0, #1
 8023218:	e7fc      	b.n	8023214 <LoRaMacCommandsRestoreNvmCtx+0x10>
 802321a:	bf00      	nop
 802321c:	20002108 	.word	0x20002108

08023220 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8023220:	23fc      	movs	r3, #252	; 0xfc
 8023222:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 8023224:	4800      	ldr	r0, [pc, #0]	; (8023228 <LoRaMacCommandsGetNvmCtx+0x8>)
 8023226:	4770      	bx	lr
 8023228:	20002108 	.word	0x20002108

0802322c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 802322c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023230:	4680      	mov	r8, r0
 8023232:	4616      	mov	r6, r2
    if( payload == NULL )
 8023234:	2900      	cmp	r1, #0
 8023236:	d041      	beq.n	80232bc <LoRaMacCommandsAddCmd+0x90>
 8023238:	4c24      	ldr	r4, [pc, #144]	; (80232cc <LoRaMacCommandsAddCmd+0xa0>)
 802323a:	2300      	movs	r3, #0
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 802323c:	1c65      	adds	r5, r4, #1
 802323e:	4622      	mov	r2, r4
 8023240:	0118      	lsls	r0, r3, #4
 8023242:	3410      	adds	r4, #16
        if( mem[size] != 0x00 )
 8023244:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8023248:	2f00      	cmp	r7, #0
 802324a:	d139      	bne.n	80232c0 <LoRaMacCommandsAddCmd+0x94>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 802324c:	42a2      	cmp	r2, r4
 802324e:	d1f9      	bne.n	8023244 <LoRaMacCommandsAddCmd+0x18>
    if( list->First == NULL )
 8023250:	4c1f      	ldr	r4, [pc, #124]	; (80232d0 <LoRaMacCommandsAddCmd+0xa4>)
 8023252:	6862      	ldr	r2, [r4, #4]
 8023254:	b902      	cbnz	r2, 8023258 <LoRaMacCommandsAddCmd+0x2c>
        list->First = element;
 8023256:	6065      	str	r5, [r4, #4]
    if( list->Last )
 8023258:	68a2      	ldr	r2, [r4, #8]
 802325a:	b102      	cbz	r2, 802325e <LoRaMacCommandsAddCmd+0x32>
        list->Last->Next = element;
 802325c:	6015      	str	r5, [r2, #0]
    list->Last = element;
 802325e:	60a5      	str	r5, [r4, #8]
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 8023260:	1c5d      	adds	r5, r3, #1
 8023262:	eb04 1305 	add.w	r3, r4, r5, lsl #4
    element->Next = NULL;
 8023266:	1822      	adds	r2, r4, r0
    newCmd->PayloadSize = payloadSize;
 8023268:	605e      	str	r6, [r3, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 802326a:	4b1a      	ldr	r3, [pc, #104]	; (80232d4 <LoRaMacCommandsAddCmd+0xa8>)
    newCmd->CID = cid;
 802326c:	f882 8010 	strb.w	r8, [r2, #16]
    element->Next = NULL;
 8023270:	f04f 0c00 	mov.w	ip, #0
 8023274:	f8c2 c00c 	str.w	ip, [r2, #12]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8023278:	4418      	add	r0, r3
 802327a:	b2b2      	uxth	r2, r6
 802327c:	f001 ff8e 	bl	802519c <memcpy1>
    switch( cid )
 8023280:	f1b8 0f05 	cmp.w	r8, #5
 8023284:	d017      	beq.n	80232b6 <LoRaMacCommandsAddCmd+0x8a>
 8023286:	f1a8 0808 	sub.w	r8, r8, #8
 802328a:	f1b8 0f02 	cmp.w	r8, #2
 802328e:	bf8c      	ite	hi
 8023290:	f04f 0800 	movhi.w	r8, #0
 8023294:	f04f 0801 	movls.w	r8, #1
    newCmd->IsSticky = IsSticky( cid );
 8023298:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 802329c:	f883 8008 	strb.w	r8, [r3, #8]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80232a0:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80232a4:	1c59      	adds	r1, r3, #1
 80232a6:	4431      	add	r1, r6
 80232a8:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc

    NvmCtxCallback( );
 80232ac:	f7ff ff92 	bl	80231d4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 80232b0:	4638      	mov	r0, r7
 80232b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return true;
 80232b6:	f04f 0801 	mov.w	r8, #1
 80232ba:	e7ed      	b.n	8023298 <LoRaMacCommandsAddCmd+0x6c>
        return LORAMAC_COMMANDS_ERROR_NPE;
 80232bc:	2701      	movs	r7, #1
 80232be:	e7f7      	b.n	80232b0 <LoRaMacCommandsAddCmd+0x84>
        if( itr == NUM_OF_MAC_COMMANDS )
 80232c0:	3301      	adds	r3, #1
 80232c2:	2b0f      	cmp	r3, #15
 80232c4:	d1ba      	bne.n	802323c <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80232c6:	2702      	movs	r7, #2
 80232c8:	e7f2      	b.n	80232b0 <LoRaMacCommandsAddCmd+0x84>
 80232ca:	bf00      	nop
 80232cc:	2000210f 	.word	0x2000210f
 80232d0:	20002104 	.word	0x20002104
 80232d4:	20002115 	.word	0x20002115

080232d8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80232d8:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 80232da:	b320      	cbz	r0, 8023326 <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
 80232dc:	4b13      	ldr	r3, [pc, #76]	; (802332c <LoRaMacCommandsRemoveCmd+0x54>)
 80232de:	685a      	ldr	r2, [r3, #4]
    if( element != curElement )
 80232e0:	4290      	cmp	r0, r2
 80232e2:	d104      	bne.n	80232ee <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 80232e4:	6802      	ldr	r2, [r0, #0]
 80232e6:	605a      	str	r2, [r3, #4]
 80232e8:	2200      	movs	r2, #0
 80232ea:	e004      	b.n	80232f6 <LoRaMacCommandsRemoveCmd+0x1e>
 80232ec:	460a      	mov	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80232ee:	b112      	cbz	r2, 80232f6 <LoRaMacCommandsRemoveCmd+0x1e>
 80232f0:	6811      	ldr	r1, [r2, #0]
 80232f2:	4288      	cmp	r0, r1
 80232f4:	d1fa      	bne.n	80232ec <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 80232f6:	6899      	ldr	r1, [r3, #8]
 80232f8:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 80232fa:	bf08      	it	eq
 80232fc:	609a      	streq	r2, [r3, #8]
    if( PrevElement != NULL )
 80232fe:	b10a      	cbz	r2, 8023304 <LoRaMacCommandsRemoveCmd+0x2c>
        PrevElement->Next = element->Next;
 8023300:	6801      	ldr	r1, [r0, #0]
 8023302:	6011      	str	r1, [r2, #0]
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8023304:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8023308:	6881      	ldr	r1, [r0, #8]
 802330a:	3a01      	subs	r2, #1
    element->Next = NULL;
 802330c:	2400      	movs	r4, #0
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 802330e:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 8023310:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8023312:	4621      	mov	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8023314:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8023318:	2210      	movs	r2, #16
 802331a:	f001 ff53 	bl	80251c4 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 802331e:	f7ff ff59 	bl	80231d4 <NvmCtxCallback>
 8023322:	4620      	mov	r0, r4

    return LORAMAC_COMMANDS_SUCCESS;
}
 8023324:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8023326:	2001      	movs	r0, #1
 8023328:	e7fc      	b.n	8023324 <LoRaMacCommandsRemoveCmd+0x4c>
 802332a:	bf00      	nop
 802332c:	20002104 	.word	0x20002104

08023330 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8023330:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8023332:	4b07      	ldr	r3, [pc, #28]	; (8023350 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>)
 8023334:	685c      	ldr	r4, [r3, #4]

    // Loop through all elements
    while( curElement != NULL )
 8023336:	b91c      	cbnz	r4, 8023340 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 8023338:	f7ff ff4c 	bl	80231d4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 802333c:	4620      	mov	r0, r4
 802333e:	bd38      	pop	{r3, r4, r5, pc}
        if( curElement->IsSticky == false )
 8023340:	7b23      	ldrb	r3, [r4, #12]
 8023342:	6825      	ldr	r5, [r4, #0]
 8023344:	b913      	cbnz	r3, 802334c <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
 8023346:	4620      	mov	r0, r4
 8023348:	f7ff ffc6 	bl	80232d8 <LoRaMacCommandsRemoveCmd>
{
 802334c:	462c      	mov	r4, r5
 802334e:	e7f2      	b.n	8023336 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 8023350:	20002104 	.word	0x20002104

08023354 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8023354:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8023356:	4b09      	ldr	r3, [pc, #36]	; (802337c <LoRaMacCommandsRemoveStickyAnsCmds+0x28>)
 8023358:	685c      	ldr	r4, [r3, #4]

    // Loop through all elements
    while( curElement != NULL )
 802335a:	b91c      	cbnz	r4, 8023364 <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 802335c:	f7ff ff3a 	bl	80231d4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 8023360:	4620      	mov	r0, r4
 8023362:	bd38      	pop	{r3, r4, r5, pc}
        if( IsSticky( curElement->CID ) == true )
 8023364:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 8023366:	6825      	ldr	r5, [r4, #0]
    switch( cid )
 8023368:	2b05      	cmp	r3, #5
 802336a:	d002      	beq.n	8023372 <LoRaMacCommandsRemoveStickyAnsCmds+0x1e>
 802336c:	3b08      	subs	r3, #8
 802336e:	2b02      	cmp	r3, #2
 8023370:	d802      	bhi.n	8023378 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>
            LoRaMacCommandsRemoveCmd( curElement );
 8023372:	4620      	mov	r0, r4
 8023374:	f7ff ffb0 	bl	80232d8 <LoRaMacCommandsRemoveCmd>
{
 8023378:	462c      	mov	r4, r5
 802337a:	e7ee      	b.n	802335a <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 802337c:	20002104 	.word	0x20002104

08023380 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 8023380:	b128      	cbz	r0, 802338e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = NvmCtx.SerializedCmdsSize;
 8023382:	4b04      	ldr	r3, [pc, #16]	; (8023394 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 8023384:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8023388:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 802338a:	2000      	movs	r0, #0
 802338c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 802338e:	2001      	movs	r0, #1
}
 8023390:	4770      	bx	lr
 8023392:	bf00      	nop
 8023394:	20002104 	.word	0x20002104

08023398 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8023398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802339c:	4607      	mov	r7, r0
 802339e:	460e      	mov	r6, r1
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80233a0:	4615      	mov	r5, r2
 80233a2:	b332      	cbz	r2, 80233f2 <LoRaMacCommandsSerializeCmds+0x5a>
 80233a4:	b329      	cbz	r1, 80233f2 <LoRaMacCommandsSerializeCmds+0x5a>
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 80233a6:	4b14      	ldr	r3, [pc, #80]	; (80233f8 <LoRaMacCommandsSerializeCmds+0x60>)
 80233a8:	685c      	ldr	r4, [r3, #4]
    uint8_t itr = 0;
 80233aa:	2300      	movs	r3, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 80233ac:	b92c      	cbnz	r4, 80233ba <LoRaMacCommandsSerializeCmds+0x22>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80233ae:	4630      	mov	r0, r6
 80233b0:	f7ff ffe6 	bl	8023380 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80233b4:	2000      	movs	r0, #0
}
 80233b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80233ba:	68a2      	ldr	r2, [r4, #8]
 80233bc:	1af9      	subs	r1, r7, r3
 80233be:	3201      	adds	r2, #1
 80233c0:	4291      	cmp	r1, r2
 80233c2:	d30f      	bcc.n	80233e4 <LoRaMacCommandsSerializeCmds+0x4c>
            buffer[itr++] = curElement->CID;
 80233c4:	7922      	ldrb	r2, [r4, #4]
 80233c6:	54ea      	strb	r2, [r5, r3]
 80233c8:	1c58      	adds	r0, r3, #1
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80233ca:	8922      	ldrh	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
 80233cc:	fa5f f880 	uxtb.w	r8, r0
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80233d0:	1d61      	adds	r1, r4, #5
 80233d2:	fa55 f080 	uxtab	r0, r5, r0
 80233d6:	f001 fee1 	bl	802519c <memcpy1>
            itr += curElement->PayloadSize;
 80233da:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 80233dc:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 80233de:	4443      	add	r3, r8
 80233e0:	b2db      	uxtb	r3, r3
        curElement = curElement->Next;
 80233e2:	e7e3      	b.n	80233ac <LoRaMacCommandsSerializeCmds+0x14>
        nextElement = curElement->Next;
 80233e4:	4620      	mov	r0, r4
 80233e6:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 80233e8:	f7ff ff76 	bl	80232d8 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 80233ec:	2c00      	cmp	r4, #0
 80233ee:	d1f9      	bne.n	80233e4 <LoRaMacCommandsSerializeCmds+0x4c>
 80233f0:	e7dd      	b.n	80233ae <LoRaMacCommandsSerializeCmds+0x16>
        return LORAMAC_COMMANDS_ERROR_NPE;
 80233f2:	2001      	movs	r0, #1
 80233f4:	e7df      	b.n	80233b6 <LoRaMacCommandsSerializeCmds+0x1e>
 80233f6:	bf00      	nop
 80233f8:	20002104 	.word	0x20002104

080233fc <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 80233fc:	b160      	cbz	r0, 8023418 <LoRaMacCommandsStickyCmdsPending+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80233fe:	4b07      	ldr	r3, [pc, #28]	; (802341c <LoRaMacCommandsStickyCmdsPending+0x20>)

    *cmdsPending = false;
 8023400:	2200      	movs	r2, #0
    curElement = NvmCtx.MacCommandList.First;
 8023402:	685b      	ldr	r3, [r3, #4]
    *cmdsPending = false;
 8023404:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 8023406:	b11b      	cbz	r3, 8023410 <LoRaMacCommandsStickyCmdsPending+0x14>
    {
        if( curElement->IsSticky == true )
 8023408:	7b1a      	ldrb	r2, [r3, #12]
 802340a:	b11a      	cbz	r2, 8023414 <LoRaMacCommandsStickyCmdsPending+0x18>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 802340c:	2301      	movs	r3, #1
 802340e:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8023410:	2000      	movs	r0, #0
 8023412:	4770      	bx	lr
        }
        curElement = curElement->Next;
 8023414:	681b      	ldr	r3, [r3, #0]
 8023416:	e7f6      	b.n	8023406 <LoRaMacCommandsStickyCmdsPending+0xa>
        return LORAMAC_COMMANDS_ERROR_NPE;
 8023418:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 802341a:	4770      	bx	lr
 802341c:	20002104 	.word	0x20002104

08023420 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 8023420:	3802      	subs	r0, #2
 8023422:	b2c0      	uxtb	r0, r0
 8023424:	2811      	cmp	r0, #17
 8023426:	bf9a      	itte	ls
 8023428:	4b01      	ldrls	r3, [pc, #4]	; (8023430 <LoRaMacCommandsGetCmdSize+0x10>)
 802342a:	5c18      	ldrbls	r0, [r3, r0]
{
 802342c:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 802342e:	4770      	bx	lr
 8023430:	080277ac 	.word	0x080277ac

08023434 <GetElement.isra.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 8023434:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8023436:	4b0c      	ldr	r3, [pc, #48]	; (8023468 <GetElement.isra.0+0x34>)
 8023438:	691c      	ldr	r4, [r3, #16]
 802343a:	7d23      	ldrb	r3, [r4, #20]
    if( count == 0 )
 802343c:	b18b      	cbz	r3, 8023462 <GetElement.isra.0+0x2e>
 802343e:	2200      	movs	r2, #0
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8023440:	f104 0610 	add.w	r6, r4, #16
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8023444:	b2d5      	uxtb	r5, r2
 8023446:	42ab      	cmp	r3, r5
 8023448:	d802      	bhi.n	8023450 <GetElement.isra.0+0x1c>
        return NULL;
 802344a:	2100      	movs	r1, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 802344c:	4608      	mov	r0, r1
 802344e:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 8023450:	780d      	ldrb	r5, [r1, #0]
 8023452:	4285      	cmp	r5, r0
 8023454:	d0fa      	beq.n	802344c <GetElement.isra.0+0x18>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8023456:	42b1      	cmp	r1, r6
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8023458:	bf0c      	ite	eq
 802345a:	4621      	moveq	r1, r4
        bufferPointer++;
 802345c:	3104      	addne	r1, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 802345e:	3201      	adds	r2, #1
 8023460:	e7f0      	b.n	8023444 <GetElement.isra.0+0x10>
        return NULL;
 8023462:	4619      	mov	r1, r3
 8023464:	e7f2      	b.n	802344c <GetElement.isra.0+0x18>
 8023466:	bf00      	nop
 8023468:	20002204 	.word	0x20002204

0802346c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 802346c:	b538      	push	{r3, r4, r5, lr}
    ConfirmQueueCtx.Primitives = primitives;
 802346e:	4c0a      	ldr	r4, [pc, #40]	; (8023498 <LoRaMacConfirmQueueInit+0x2c>)
 8023470:	4623      	mov	r3, r4

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8023472:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 8023474:	f843 0b14 	str.w	r0, [r3], #20
{
 8023478:	460d      	mov	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 802347a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 802347e:	4618      	mov	r0, r3
 8023480:	2214      	movs	r2, #20
 8023482:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8023484:	e9c4 3301 	strd	r3, r3, [r4, #4]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8023488:	6123      	str	r3, [r4, #16]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 802348a:	f001 fe9b 	bl	80251c4 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 802348e:	6923      	ldr	r3, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8023490:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8023492:	2201      	movs	r2, #1
 8023494:	755a      	strb	r2, [r3, #21]
}
 8023496:	bd38      	pop	{r3, r4, r5, pc}
 8023498:	20002204 	.word	0x20002204

0802349c <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 802349c:	b508      	push	{r3, lr}
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 802349e:	b128      	cbz	r0, 80234ac <LoRaMacConfirmQueueRestoreNvmCtx+0x10>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80234a0:	4601      	mov	r1, r0
 80234a2:	2216      	movs	r2, #22
 80234a4:	4802      	ldr	r0, [pc, #8]	; (80234b0 <LoRaMacConfirmQueueRestoreNvmCtx+0x14>)
 80234a6:	f001 fe79 	bl	802519c <memcpy1>
        return true;
 80234aa:	2001      	movs	r0, #1
    }
    else
    {
        return false;
    }
}
 80234ac:	bd08      	pop	{r3, pc}
 80234ae:	bf00      	nop
 80234b0:	20002218 	.word	0x20002218

080234b4 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 80234b4:	2316      	movs	r3, #22
 80234b6:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 80234b8:	4800      	ldr	r0, [pc, #0]	; (80234bc <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 80234ba:	4770      	bx	lr
 80234bc:	20002218 	.word	0x20002218

080234c0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80234c0:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80234c2:	490d      	ldr	r1, [pc, #52]	; (80234f8 <LoRaMacConfirmQueueAdd+0x38>)
 80234c4:	690b      	ldr	r3, [r1, #16]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80234c6:	7d1a      	ldrb	r2, [r3, #20]
 80234c8:	2a04      	cmp	r2, #4
 80234ca:	d813      	bhi.n	80234f4 <LoRaMacConfirmQueueAdd+0x34>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80234cc:	688a      	ldr	r2, [r1, #8]
 80234ce:	7804      	ldrb	r4, [r0, #0]
 80234d0:	7014      	strb	r4, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80234d2:	7844      	ldrb	r4, [r0, #1]
 80234d4:	7054      	strb	r4, [r2, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80234d6:	78c0      	ldrb	r0, [r0, #3]
 80234d8:	70d0      	strb	r0, [r2, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80234da:	2000      	movs	r0, #0
 80234dc:	7090      	strb	r0, [r2, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 80234de:	7d18      	ldrb	r0, [r3, #20]
 80234e0:	3001      	adds	r0, #1
 80234e2:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80234e4:	f103 0010 	add.w	r0, r3, #16
 80234e8:	4282      	cmp	r2, r0
        bufferPointer++;
 80234ea:	bf18      	it	ne
 80234ec:	1d13      	addne	r3, r2, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80234ee:	608b      	str	r3, [r1, #8]

    return true;
 80234f0:	2001      	movs	r0, #1
}
 80234f2:	bd10      	pop	{r4, pc}
        return false;
 80234f4:	2000      	movs	r0, #0
 80234f6:	e7fc      	b.n	80234f2 <LoRaMacConfirmQueueAdd+0x32>
 80234f8:	20002204 	.word	0x20002204

080234fc <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80234fc:	4a07      	ldr	r2, [pc, #28]	; (802351c <LoRaMacConfirmQueueRemoveFirst+0x20>)
 80234fe:	6913      	ldr	r3, [r2, #16]
 8023500:	7d18      	ldrb	r0, [r3, #20]
    if( count == 0 )
 8023502:	b148      	cbz	r0, 8023518 <LoRaMacConfirmQueueRemoveFirst+0x1c>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8023504:	6851      	ldr	r1, [r2, #4]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8023506:	3801      	subs	r0, #1
 8023508:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 802350a:	f103 0010 	add.w	r0, r3, #16
 802350e:	4281      	cmp	r1, r0
        bufferPointer++;
 8023510:	bf18      	it	ne
 8023512:	1d0b      	addne	r3, r1, #4
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8023514:	6053      	str	r3, [r2, #4]

    return true;
 8023516:	2001      	movs	r0, #1
}
 8023518:	4770      	bx	lr
 802351a:	bf00      	nop
 802351c:	20002204 	.word	0x20002204

08023520 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8023520:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8023522:	4b07      	ldr	r3, [pc, #28]	; (8023540 <LoRaMacConfirmQueueSetStatus+0x20>)
 8023524:	691a      	ldr	r2, [r3, #16]
    if( count == 0 )
 8023526:	7d12      	ldrb	r2, [r2, #20]
{
 8023528:	4604      	mov	r4, r0
 802352a:	4608      	mov	r0, r1
    if( count == 0 )
 802352c:	b132      	cbz	r2, 802353c <LoRaMacConfirmQueueSetStatus+0x1c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 802352e:	6859      	ldr	r1, [r3, #4]
 8023530:	f7ff ff80 	bl	8023434 <GetElement.isra.0>
        if( element != NULL )
 8023534:	b110      	cbz	r0, 802353c <LoRaMacConfirmQueueSetStatus+0x1c>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 8023536:	2301      	movs	r3, #1
            element->Status = status;
 8023538:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 802353a:	7083      	strb	r3, [r0, #2]
        }
    }
}
 802353c:	bd10      	pop	{r4, pc}
 802353e:	bf00      	nop
 8023540:	20002204 	.word	0x20002204

08023544 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8023544:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8023546:	4b06      	ldr	r3, [pc, #24]	; (8023560 <LoRaMacConfirmQueueGetStatus+0x1c>)
 8023548:	691a      	ldr	r2, [r3, #16]
    if( count == 0 )
 802354a:	7d12      	ldrb	r2, [r2, #20]
 802354c:	b12a      	cbz	r2, 802355a <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 802354e:	6859      	ldr	r1, [r3, #4]
 8023550:	f7ff ff70 	bl	8023434 <GetElement.isra.0>
        if( element != NULL )
 8023554:	b108      	cbz	r0, 802355a <LoRaMacConfirmQueueGetStatus+0x16>
        {
            return element->Status;
 8023556:	7840      	ldrb	r0, [r0, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
 8023558:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 802355a:	2001      	movs	r0, #1
 802355c:	e7fc      	b.n	8023558 <LoRaMacConfirmQueueGetStatus+0x14>
 802355e:	bf00      	nop
 8023560:	20002204 	.word	0x20002204

08023564 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8023564:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8023566:	490a      	ldr	r1, [pc, #40]	; (8023590 <LoRaMacConfirmQueueSetStatusCmn+0x2c>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8023568:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 802356a:	684b      	ldr	r3, [r1, #4]
    if( count == 0 )
 802356c:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 802356e:	7550      	strb	r0, [r2, #21]
    if( count == 0 )
 8023570:	b16c      	cbz	r4, 802358e <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 8023572:	6889      	ldr	r1, [r1, #8]
                element->ReadyToHandle = true;
 8023574:	2501      	movs	r5, #1
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8023576:	f102 0410 	add.w	r4, r2, #16
            if( element->RestrictCommonReadyToHandle == false )
 802357a:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 802357c:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 802357e:	b906      	cbnz	r6, 8023582 <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 8023580:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8023582:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8023584:	bf0c      	ite	eq
 8023586:	4613      	moveq	r3, r2
        bufferPointer++;
 8023588:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 802358a:	4299      	cmp	r1, r3
 802358c:	d1f5      	bne.n	802357a <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 802358e:	bd70      	pop	{r4, r5, r6, pc}
 8023590:	20002204 	.word	0x20002204

08023594 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8023594:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8023596:	4b04      	ldr	r3, [pc, #16]	; (80235a8 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 8023598:	6859      	ldr	r1, [r3, #4]
 802359a:	f7ff ff4b 	bl	8023434 <GetElement.isra.0>
    {
        return true;
    }
    return false;
}
 802359e:	3800      	subs	r0, #0
 80235a0:	bf18      	it	ne
 80235a2:	2001      	movne	r0, #1
 80235a4:	bd08      	pop	{r3, pc}
 80235a6:	bf00      	nop
 80235a8:	20002204 	.word	0x20002204

080235ac <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80235ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80235b0:	4d13      	ldr	r5, [pc, #76]	; (8023600 <LoRaMacConfirmQueueHandleCb+0x54>)
 80235b2:	692b      	ldr	r3, [r5, #16]
 80235b4:	f893 8014 	ldrb.w	r8, [r3, #20]
{
 80235b8:	4604      	mov	r4, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80235ba:	2600      	movs	r6, #0
 80235bc:	b2f3      	uxtb	r3, r6
 80235be:	4598      	cmp	r8, r3
 80235c0:	d802      	bhi.n	80235c8 <LoRaMacConfirmQueueHandleCb+0x1c>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 80235c2:	b002      	add	sp, #8
 80235c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80235c8:	686b      	ldr	r3, [r5, #4]
 80235ca:	7819      	ldrb	r1, [r3, #0]
 80235cc:	7021      	strb	r1, [r4, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80235ce:	785a      	ldrb	r2, [r3, #1]
 80235d0:	7062      	strb	r2, [r4, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80235d2:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 80235d4:	b15f      	cbz	r7, 80235ee <LoRaMacConfirmQueueHandleCb+0x42>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80235d6:	682b      	ldr	r3, [r5, #0]
 80235d8:	4620      	mov	r0, r4
 80235da:	689b      	ldr	r3, [r3, #8]
 80235dc:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 80235de:	f7ff ff8d 	bl	80234fc <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 80235e2:	b917      	cbnz	r7, 80235ea <LoRaMacConfirmQueueHandleCb+0x3e>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80235e4:	a801      	add	r0, sp, #4
 80235e6:	f7ff ff6b 	bl	80234c0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80235ea:	3601      	adds	r6, #1
 80235ec:	e7e6      	b.n	80235bc <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80235ee:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80235f0:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80235f4:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80235f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80235fc:	e7ef      	b.n	80235de <LoRaMacConfirmQueueHandleCb+0x32>
 80235fe:	bf00      	nop
 8023600:	20002204 	.word	0x20002204

08023604 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8023604:	4b01      	ldr	r3, [pc, #4]	; (802360c <LoRaMacConfirmQueueGetCnt+0x8>)
 8023606:	691b      	ldr	r3, [r3, #16]
}
 8023608:	7d18      	ldrb	r0, [r3, #20]
 802360a:	4770      	bx	lr
 802360c:	20002204 	.word	0x20002204

08023610 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8023610:	4b03      	ldr	r3, [pc, #12]	; (8023620 <LoRaMacConfirmQueueIsFull+0x10>)
 8023612:	691b      	ldr	r3, [r3, #16]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8023614:	7d18      	ldrb	r0, [r3, #20]
    }
    else
    {
        return false;
    }
}
 8023616:	2804      	cmp	r0, #4
 8023618:	bf94      	ite	ls
 802361a:	2000      	movls	r0, #0
 802361c:	2001      	movhi	r0, #1
 802361e:	4770      	bx	lr
 8023620:	20002204 	.word	0x20002204

08023624 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 8023624:	4770      	bx	lr
	...

08023628 <DeriveSessionKey10x>:
{
 8023628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802362a:	4604      	mov	r4, r0
    uint8_t compBase[16] = { 0 };
 802362c:	2000      	movs	r0, #0
 802362e:	e9cd 0000 	strd	r0, r0, [sp]
 8023632:	e9cd 0002 	strd	r0, r0, [sp, #8]
{
 8023636:	4616      	mov	r6, r2
 8023638:	461d      	mov	r5, r3
    memcpy1( compBase + 1, joinNonce, 3 );
 802363a:	f10d 0001 	add.w	r0, sp, #1
    switch( keyID )
 802363e:	1e63      	subs	r3, r4, #1
    memcpy1( compBase + 1, joinNonce, 3 );
 8023640:	2203      	movs	r2, #3
 8023642:	f88d 3000 	strb.w	r3, [sp]
 8023646:	f001 fda9 	bl	802519c <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 802364a:	4631      	mov	r1, r6
 802364c:	a801      	add	r0, sp, #4
 802364e:	2203      	movs	r2, #3
 8023650:	f001 fda4 	bl	802519c <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8023654:	4629      	mov	r1, r5
 8023656:	f10d 0007 	add.w	r0, sp, #7
 802365a:	2202      	movs	r2, #2
 802365c:	f001 fd9e 	bl	802519c <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8023660:	4b06      	ldr	r3, [pc, #24]	; (802367c <DeriveSessionKey10x+0x54>)
 8023662:	6818      	ldr	r0, [r3, #0]
 8023664:	2201      	movs	r2, #1
 8023666:	4623      	mov	r3, r4
 8023668:	4669      	mov	r1, sp
 802366a:	6800      	ldr	r0, [r0, #0]
 802366c:	f7fb f833 	bl	801e6d6 <SecureElementDeriveAndStoreKey>
 8023670:	2800      	cmp	r0, #0
}
 8023672:	bf18      	it	ne
 8023674:	200f      	movne	r0, #15
 8023676:	b004      	add	sp, #16
 8023678:	bd70      	pop	{r4, r5, r6, pc}
 802367a:	bf00      	nop
 802367c:	20002230 	.word	0x20002230

08023680 <PayloadEncrypt>:
{
 8023680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023684:	b088      	sub	sp, #32
 8023686:	460d      	mov	r5, r1
 8023688:	4690      	mov	r8, r2
 802368a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    if( buffer == 0 )
 802368c:	4606      	mov	r6, r0
 802368e:	2800      	cmp	r0, #0
 8023690:	d04d      	beq.n	802372e <PayloadEncrypt+0xae>
    uint8_t sBlock[16] = { 0 };
 8023692:	2400      	movs	r4, #0
    aBlock[0] = 0x01;
 8023694:	2001      	movs	r0, #1
    uint8_t aBlock[16] = { 0 };
 8023696:	e9cd 4404 	strd	r4, r4, [sp, #16]
    aBlock[0] = 0x01;
 802369a:	f88d 0010 	strb.w	r0, [sp, #16]
    aBlock[5] = dir;
 802369e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80236a2:	f88d 0015 	strb.w	r0, [sp, #21]
    aBlock[6] = address & 0xFF;
 80236a6:	f8ad 3016 	strh.w	r3, [sp, #22]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80236aa:	0c18      	lsrs	r0, r3, #16
    uint8_t sBlock[16] = { 0 };
 80236ac:	e9cd 4400 	strd	r4, r4, [sp]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80236b0:	0e1b      	lsrs	r3, r3, #24
    uint8_t sBlock[16] = { 0 };
 80236b2:	e9cd 4402 	strd	r4, r4, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80236b6:	f88d 3019 	strb.w	r3, [sp, #25]
    aBlock[10] = frameCounter & 0xFF;
 80236ba:	f8ad 101a 	strh.w	r1, [sp, #26]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80236be:	0c0b      	lsrs	r3, r1, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80236c0:	0e09      	lsrs	r1, r1, #24
    uint8_t aBlock[16] = { 0 };
 80236c2:	9407      	str	r4, [sp, #28]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80236c4:	f88d 0018 	strb.w	r0, [sp, #24]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80236c8:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80236cc:	f88d 101d 	strb.w	r1, [sp, #29]
    while( size > 0 )
 80236d0:	b2e3      	uxtb	r3, r4
 80236d2:	011f      	lsls	r7, r3, #4
 80236d4:	2d00      	cmp	r5, #0
 80236d6:	b2ff      	uxtb	r7, r7
 80236d8:	dc03      	bgt.n	80236e2 <PayloadEncrypt+0x62>
    return LORAMAC_CRYPTO_SUCCESS;
 80236da:	2000      	movs	r0, #0
}
 80236dc:	b008      	add	sp, #32
 80236de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        aBlock[15] = ctr & 0xFF;
 80236e2:	3301      	adds	r3, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80236e4:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 80236e6:	f88d 301f 	strb.w	r3, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80236ea:	4642      	mov	r2, r8
 80236ec:	466b      	mov	r3, sp
 80236ee:	eb0d 0001 	add.w	r0, sp, r1
 80236f2:	f7fa ff7f 	bl	801e5f4 <SecureElementAesEncrypt>
 80236f6:	4603      	mov	r3, r0
 80236f8:	b9d8      	cbnz	r0, 8023732 <PayloadEncrypt+0xb2>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80236fa:	2d10      	cmp	r5, #16
 80236fc:	46ae      	mov	lr, r5
 80236fe:	bfa8      	it	ge
 8023700:	f04f 0e10 	movge.w	lr, #16
 8023704:	b2d9      	uxtb	r1, r3
 8023706:	4571      	cmp	r1, lr
 8023708:	f103 0301 	add.w	r3, r3, #1
 802370c:	db03      	blt.n	8023716 <PayloadEncrypt+0x96>
        size -= 16;
 802370e:	3d10      	subs	r5, #16
 8023710:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 8023712:	3401      	adds	r4, #1
 8023714:	e7dc      	b.n	80236d0 <PayloadEncrypt+0x50>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8023716:	aa08      	add	r2, sp, #32
 8023718:	eb07 0c01 	add.w	ip, r7, r1
 802371c:	4411      	add	r1, r2
 802371e:	f816 000c 	ldrb.w	r0, [r6, ip]
 8023722:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8023726:	4041      	eors	r1, r0
 8023728:	f806 100c 	strb.w	r1, [r6, ip]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 802372c:	e7ea      	b.n	8023704 <PayloadEncrypt+0x84>
        return LORAMAC_CRYPTO_ERROR_NPE;
 802372e:	200a      	movs	r0, #10
 8023730:	e7d4      	b.n	80236dc <PayloadEncrypt+0x5c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8023732:	200f      	movs	r0, #15
 8023734:	e7d2      	b.n	80236dc <PayloadEncrypt+0x5c>
	...

08023738 <GetLastFcntDown>:
    switch( fCntID )
 8023738:	3801      	subs	r0, #1
 802373a:	2803      	cmp	r0, #3
 802373c:	d81d      	bhi.n	802377a <GetLastFcntDown+0x42>
 802373e:	e8df f000 	tbb	[pc, r0]
 8023742:	0b02      	.short	0x0b02
 8023744:	1711      	.short	0x1711
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8023746:	4b0e      	ldr	r3, [pc, #56]	; (8023780 <GetLastFcntDown+0x48>)
 8023748:	681a      	ldr	r2, [r3, #0]
 802374a:	4613      	mov	r3, r2
 802374c:	f853 0f10 	ldr.w	r0, [r3, #16]!
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8023750:	6008      	str	r0, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8023752:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 8023754:	2000      	movs	r0, #0
            break;
 8023756:	4770      	bx	lr
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8023758:	4b09      	ldr	r3, [pc, #36]	; (8023780 <GetLastFcntDown+0x48>)
 802375a:	681a      	ldr	r2, [r3, #0]
 802375c:	4613      	mov	r3, r2
 802375e:	f853 0f14 	ldr.w	r0, [r3, #20]!
 8023762:	e7f5      	b.n	8023750 <GetLastFcntDown+0x18>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8023764:	4b06      	ldr	r3, [pc, #24]	; (8023780 <GetLastFcntDown+0x48>)
 8023766:	681a      	ldr	r2, [r3, #0]
 8023768:	4613      	mov	r3, r2
 802376a:	f853 0f18 	ldr.w	r0, [r3, #24]!
 802376e:	e7ef      	b.n	8023750 <GetLastFcntDown+0x18>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8023770:	4b03      	ldr	r3, [pc, #12]	; (8023780 <GetLastFcntDown+0x48>)
 8023772:	681b      	ldr	r3, [r3, #0]
 8023774:	69db      	ldr	r3, [r3, #28]
 8023776:	600b      	str	r3, [r1, #0]
            break;
 8023778:	e7ec      	b.n	8023754 <GetLastFcntDown+0x1c>
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 802377a:	2005      	movs	r0, #5
}
 802377c:	4770      	bx	lr
 802377e:	bf00      	nop
 8023780:	20002230 	.word	0x20002230

08023784 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 8023784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 8023786:	2300      	movs	r3, #0
 8023788:	e9cd 3300 	strd	r3, r3, [sp]
 802378c:	e9cd 3302 	strd	r3, r3, [sp, #8]

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8023790:	4b06      	ldr	r3, [pc, #24]	; (80237ac <LoRaMacCryptoDeriveMcKEKey.part.0+0x28>)
 8023792:	6818      	ldr	r0, [r3, #0]
 8023794:	2204      	movs	r2, #4
 8023796:	237f      	movs	r3, #127	; 0x7f
 8023798:	4669      	mov	r1, sp
 802379a:	6800      	ldr	r0, [r0, #0]
 802379c:	f7fa ff9b 	bl	801e6d6 <SecureElementDeriveAndStoreKey>
 80237a0:	2800      	cmp	r0, #0
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 80237a2:	bf18      	it	ne
 80237a4:	200f      	movne	r0, #15
 80237a6:	b005      	add	sp, #20
 80237a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80237ac:	20002230 	.word	0x20002230

080237b0 <VerifyCmacB0.isra.0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 80237b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80237b4:	b0c4      	sub	sp, #272	; 0x110
 80237b6:	460c      	mov	r4, r1
 80237b8:	9e4a      	ldr	r6, [sp, #296]	; 0x128
 80237ba:	4617      	mov	r7, r2
 80237bc:	461d      	mov	r5, r3
    if( msg == 0 )
 80237be:	4680      	mov	r8, r0
 80237c0:	b3b8      	cbz	r0, 8023832 <VerifyCmacB0.isra.0.constprop.0+0x82>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80237c2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80237c6:	d836      	bhi.n	8023836 <VerifyCmacB0.isra.0.constprop.0+0x86>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80237c8:	f44f 7288 	mov.w	r2, #272	; 0x110
 80237cc:	2100      	movs	r1, #0
 80237ce:	4668      	mov	r0, sp
 80237d0:	f001 fcf8 	bl	80251c4 <memset1>
    b0[0] = 0x49;
 80237d4:	2349      	movs	r3, #73	; 0x49
 80237d6:	9300      	str	r3, [sp, #0]
    b0[4] = 0x00;
 80237d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80237dc:	f8ad 3004 	strh.w	r3, [sp, #4]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80237e0:	0c2b      	lsrs	r3, r5, #16
 80237e2:	f88d 3008 	strb.w	r3, [sp, #8]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80237e6:	0c33      	lsrs	r3, r6, #16
    b0[6] = devAddr & 0xFF;
 80237e8:	f8ad 5006 	strh.w	r5, [sp, #6]
    b0[10] = fCnt & 0xFF;
 80237ec:	f8ad 600a 	strh.w	r6, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80237f0:	f88d 300c 	strb.w	r3, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80237f4:	4622      	mov	r2, r4
    b0[14] = 0x00;
 80237f6:	2300      	movs	r3, #0
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80237f8:	4641      	mov	r1, r8
 80237fa:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80237fc:	0e2d      	lsrs	r5, r5, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80237fe:	0e36      	lsrs	r6, r6, #24
    b0[14] = 0x00;
 8023800:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8023804:	f88d 5009 	strb.w	r5, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8023808:	f88d 600d 	strb.w	r6, [sp, #13]
    b0[15] = msgLen & 0xFF;
 802380c:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8023810:	f001 fcc4 	bl	802519c <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8023814:	f104 0110 	add.w	r1, r4, #16
 8023818:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 802381a:	463b      	mov	r3, r7
 802381c:	b289      	uxth	r1, r1
 802381e:	4668      	mov	r0, sp
 8023820:	f7fa fed2 	bl	801e5c8 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8023824:	b110      	cbz	r0, 802382c <VerifyCmacB0.isra.0.constprop.0+0x7c>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8023826:	2801      	cmp	r0, #1
 8023828:	bf18      	it	ne
 802382a:	200f      	movne	r0, #15
}
 802382c:	b044      	add	sp, #272	; 0x110
 802382e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8023832:	200a      	movs	r0, #10
 8023834:	e7fa      	b.n	802382c <VerifyCmacB0.isra.0.constprop.0+0x7c>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8023836:	200e      	movs	r0, #14
 8023838:	e7f8      	b.n	802382c <VerifyCmacB0.isra.0.constprop.0+0x7c>
	...

0802383c <LoRaMacCryptoInit>:
{
 802383c:	b538      	push	{r3, r4, r5, lr}
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 802383e:	4a10      	ldr	r2, [pc, #64]	; (8023880 <LoRaMacCryptoInit+0x44>)
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8023840:	4c10      	ldr	r4, [pc, #64]	; (8023884 <LoRaMacCryptoInit+0x48>)
{
 8023842:	4603      	mov	r3, r0
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8023844:	2b00      	cmp	r3, #0
 8023846:	bf08      	it	eq
 8023848:	4613      	moveq	r3, r2
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 802384a:	f104 0008 	add.w	r0, r4, #8
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 802384e:	2224      	movs	r2, #36	; 0x24
 8023850:	2100      	movs	r1, #0
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8023852:	6020      	str	r0, [r4, #0]
    if( cryptoNvmCtxChanged != 0 )
 8023854:	6063      	str	r3, [r4, #4]
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8023856:	f001 fcb5 	bl	80251c4 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 802385a:	6823      	ldr	r3, [r4, #0]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 802385c:	4a0a      	ldr	r2, [pc, #40]	; (8023888 <LoRaMacCryptoInit+0x4c>)
 802385e:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8023860:	4619      	mov	r1, r3
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8023862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023866:	2500      	movs	r5, #0
 8023868:	e9c3 5203 	strd	r5, r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 802386c:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 802386e:	f841 2f18 	str.w	r2, [r1, #24]!
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8023872:	e9c3 2107 	strd	r2, r1, [r3, #28]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8023876:	6863      	ldr	r3, [r4, #4]
 8023878:	4798      	blx	r3
}
 802387a:	4628      	mov	r0, r5
 802387c:	bd38      	pop	{r3, r4, r5, pc}
 802387e:	bf00      	nop
 8023880:	08023625 	.word	0x08023625
 8023884:	20002230 	.word	0x20002230
 8023888:	01010100 	.word	0x01010100

0802388c <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 802388c:	4b02      	ldr	r3, [pc, #8]	; (8023898 <LoRaMacCryptoSetLrWanVersion+0xc>)
 802388e:	681b      	ldr	r3, [r3, #0]
 8023890:	6018      	str	r0, [r3, #0]
}
 8023892:	2000      	movs	r0, #0
 8023894:	4770      	bx	lr
 8023896:	bf00      	nop
 8023898:	20002230 	.word	0x20002230

0802389c <LoRaMacCryptoRestoreNvmCtx>:
{
 802389c:	b508      	push	{r3, lr}
    if( cryptoNvmCtx != 0 )
 802389e:	4601      	mov	r1, r0
 80238a0:	b128      	cbz	r0, 80238ae <LoRaMacCryptoRestoreNvmCtx+0x12>
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 80238a2:	4804      	ldr	r0, [pc, #16]	; (80238b4 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 80238a4:	2224      	movs	r2, #36	; 0x24
 80238a6:	f001 fc79 	bl	802519c <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 80238aa:	2000      	movs	r0, #0
}
 80238ac:	bd08      	pop	{r3, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80238ae:	200a      	movs	r0, #10
 80238b0:	e7fc      	b.n	80238ac <LoRaMacCryptoRestoreNvmCtx+0x10>
 80238b2:	bf00      	nop
 80238b4:	20002238 	.word	0x20002238

080238b8 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 80238b8:	2324      	movs	r3, #36	; 0x24
 80238ba:	6003      	str	r3, [r0, #0]
}
 80238bc:	4800      	ldr	r0, [pc, #0]	; (80238c0 <LoRaMacCryptoGetNvmCtx+0x8>)
 80238be:	4770      	bx	lr
 80238c0:	20002238 	.word	0x20002238

080238c4 <LoRaMacCryptoGetFCntUp>:
    if( currentUp == NULL )
 80238c4:	b130      	cbz	r0, 80238d4 <LoRaMacCryptoGetFCntUp+0x10>
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 80238c6:	4b04      	ldr	r3, [pc, #16]	; (80238d8 <LoRaMacCryptoGetFCntUp+0x14>)
 80238c8:	681b      	ldr	r3, [r3, #0]
 80238ca:	68db      	ldr	r3, [r3, #12]
 80238cc:	3301      	adds	r3, #1
 80238ce:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80238d0:	2000      	movs	r0, #0
 80238d2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 80238d4:	200a      	movs	r0, #10
}
 80238d6:	4770      	bx	lr
 80238d8:	20002230 	.word	0x20002230

080238dc <LoRaMacCryptoGetFCntDown>:
{
 80238dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80238e0:	4690      	mov	r8, r2
    uint32_t lastDown = 0;
 80238e2:	2200      	movs	r2, #0
{
 80238e4:	460f      	mov	r7, r1
    uint32_t lastDown = 0;
 80238e6:	9201      	str	r2, [sp, #4]
    if( currentDown == NULL )
 80238e8:	461c      	mov	r4, r3
 80238ea:	b373      	cbz	r3, 802394a <LoRaMacCryptoGetFCntDown+0x6e>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80238ec:	a901      	add	r1, sp, #4
 80238ee:	f7ff ff23 	bl	8023738 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80238f2:	bb00      	cbnz	r0, 8023936 <LoRaMacCryptoGetFCntDown+0x5a>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80238f4:	9e01      	ldr	r6, [sp, #4]
 80238f6:	1c73      	adds	r3, r6, #1
 80238f8:	d112      	bne.n	8023920 <LoRaMacCryptoGetFCntDown+0x44>
        *currentDown = frameFcnt;
 80238fa:	f8c4 8000 	str.w	r8, [r4]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80238fe:	4b14      	ldr	r3, [pc, #80]	; (8023950 <LoRaMacCryptoGetFCntDown+0x74>)
 8023900:	681b      	ldr	r3, [r3, #0]
 8023902:	789b      	ldrb	r3, [r3, #2]
 8023904:	b9bb      	cbnz	r3, 8023936 <LoRaMacCryptoGetFCntDown+0x5a>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8023906:	6820      	ldr	r0, [r4, #0]
 8023908:	b2ba      	uxth	r2, r7
 802390a:	1b80      	subs	r0, r0, r6
 802390c:	eb60 0100 	sbc.w	r1, r0, r0
 8023910:	2300      	movs	r3, #0
 8023912:	4290      	cmp	r0, r2
 8023914:	eb71 0303 	sbcs.w	r3, r1, r3
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8023918:	bfb4      	ite	lt
 802391a:	2000      	movlt	r0, #0
 802391c:	2008      	movge	r0, #8
 802391e:	e00a      	b.n	8023936 <LoRaMacCryptoGetFCntDown+0x5a>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8023920:	b2b1      	uxth	r1, r6
 8023922:	eba8 0101 	sub.w	r1, r8, r1
        if( fCntDiff > 0 )
 8023926:	2900      	cmp	r1, #0
 8023928:	dd02      	ble.n	8023930 <LoRaMacCryptoGetFCntDown+0x54>
            *currentDown = lastDown + fCntDiff;
 802392a:	4431      	add	r1, r6
 802392c:	6021      	str	r1, [r4, #0]
 802392e:	e7e6      	b.n	80238fe <LoRaMacCryptoGetFCntDown+0x22>
        else if( fCntDiff == 0 )
 8023930:	d104      	bne.n	802393c <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = lastDown;
 8023932:	6026      	str	r6, [r4, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8023934:	2007      	movs	r0, #7
}
 8023936:	b002      	add	sp, #8
 8023938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 802393c:	0c33      	lsrs	r3, r6, #16
 802393e:	041b      	lsls	r3, r3, #16
 8023940:	f503 3580 	add.w	r5, r3, #65536	; 0x10000
 8023944:	4445      	add	r5, r8
 8023946:	6025      	str	r5, [r4, #0]
 8023948:	e7d9      	b.n	80238fe <LoRaMacCryptoGetFCntDown+0x22>
        return LORAMAC_CRYPTO_ERROR_NPE;
 802394a:	200a      	movs	r0, #10
 802394c:	e7f3      	b.n	8023936 <LoRaMacCryptoGetFCntDown+0x5a>
 802394e:	bf00      	nop
 8023950:	20002230 	.word	0x20002230

08023954 <LoRaMacCryptoSetMulticastReference>:
    if( multicastList == NULL )
 8023954:	b128      	cbz	r0, 8023962 <LoRaMacCryptoSetMulticastReference+0xe>
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8023956:	4b04      	ldr	r3, [pc, #16]	; (8023968 <LoRaMacCryptoSetMulticastReference+0x14>)
 8023958:	681b      	ldr	r3, [r3, #0]
 802395a:	331c      	adds	r3, #28
 802395c:	6203      	str	r3, [r0, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 802395e:	2000      	movs	r0, #0
 8023960:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8023962:	200a      	movs	r0, #10
}
 8023964:	4770      	bx	lr
 8023966:	bf00      	nop
 8023968:	20002230 	.word	0x20002230

0802396c <LoRaMacCryptoPrepareJoinRequest>:
{
 802396c:	b530      	push	{r4, r5, lr}
    if( macMsg == 0 )
 802396e:	4604      	mov	r4, r0
{
 8023970:	b085      	sub	sp, #20
    if( macMsg == 0 )
 8023972:	b308      	cbz	r0, 80239b8 <LoRaMacCryptoPrepareJoinRequest+0x4c>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8023974:	4d12      	ldr	r5, [pc, #72]	; (80239c0 <LoRaMacCryptoPrepareJoinRequest+0x54>)
    uint32_t devNonce = 0;
 8023976:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 8023978:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 802397a:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 802397c:	f7fa ff0a 	bl	801e794 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8023980:	682b      	ldr	r3, [r5, #0]
 8023982:	9a03      	ldr	r2, [sp, #12]
 8023984:	809a      	strh	r2, [r3, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8023986:	686b      	ldr	r3, [r5, #4]
 8023988:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 802398a:	682b      	ldr	r3, [r5, #0]
 802398c:	889b      	ldrh	r3, [r3, #4]
 802398e:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8023990:	4620      	mov	r0, r4
 8023992:	f000 fa7e 	bl	8023e92 <LoRaMacSerializerJoinRequest>
 8023996:	b960      	cbnz	r0, 80239b2 <LoRaMacCryptoPrepareJoinRequest+0x46>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8023998:	f104 0318 	add.w	r3, r4, #24
 802399c:	9300      	str	r3, [sp, #0]
 802399e:	6821      	ldr	r1, [r4, #0]
 80239a0:	2301      	movs	r3, #1
 80239a2:	2213      	movs	r2, #19
 80239a4:	f7fa fe0a 	bl	801e5bc <SecureElementComputeAesCmac>
 80239a8:	b940      	cbnz	r0, 80239bc <LoRaMacCryptoPrepareJoinRequest+0x50>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80239aa:	4620      	mov	r0, r4
 80239ac:	f000 fa71 	bl	8023e92 <LoRaMacSerializerJoinRequest>
 80239b0:	b100      	cbz	r0, 80239b4 <LoRaMacCryptoPrepareJoinRequest+0x48>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80239b2:	2011      	movs	r0, #17
}
 80239b4:	b005      	add	sp, #20
 80239b6:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80239b8:	200a      	movs	r0, #10
 80239ba:	e7fb      	b.n	80239b4 <LoRaMacCryptoPrepareJoinRequest+0x48>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80239bc:	200f      	movs	r0, #15
 80239be:	e7f9      	b.n	80239b4 <LoRaMacCryptoPrepareJoinRequest+0x48>
 80239c0:	20002230 	.word	0x20002230

080239c4 <LoRaMacCryptoSecureMessage>:
{
 80239c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239c6:	4606      	mov	r6, r0
 80239c8:	b087      	sub	sp, #28
    if( macMsg == NULL )
 80239ca:	461d      	mov	r5, r3
 80239cc:	b333      	cbz	r3, 8023a1c <LoRaMacCryptoSecureMessage+0x58>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 80239ce:	4f31      	ldr	r7, [pc, #196]	; (8023a94 <LoRaMacCryptoSecureMessage+0xd0>)
 80239d0:	683b      	ldr	r3, [r7, #0]
 80239d2:	68db      	ldr	r3, [r3, #12]
 80239d4:	4283      	cmp	r3, r0
 80239d6:	d85b      	bhi.n	8023a90 <LoRaMacCryptoSecureMessage+0xcc>
    if( macMsg->FPort == 0 )
 80239d8:	f895 2020 	ldrb.w	r2, [r5, #32]
        payloadDecryptionKeyID = NWK_S_KEY;
 80239dc:	2a00      	cmp	r2, #0
 80239de:	bf14      	ite	ne
 80239e0:	2203      	movne	r2, #3
 80239e2:	2202      	moveq	r2, #2
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 80239e4:	4283      	cmp	r3, r0
 80239e6:	d305      	bcc.n	80239f4 <LoRaMacCryptoSecureMessage+0x30>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80239e8:	4628      	mov	r0, r5
 80239ea:	f000 fa86 	bl	8023efa <LoRaMacSerializerData>
 80239ee:	b180      	cbz	r0, 8023a12 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80239f0:	2411      	movs	r4, #17
 80239f2:	e00b      	b.n	8023a0c <LoRaMacCryptoSecureMessage+0x48>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80239f4:	2300      	movs	r3, #0
 80239f6:	9001      	str	r0, [sp, #4]
 80239f8:	9300      	str	r3, [sp, #0]
 80239fa:	68ab      	ldr	r3, [r5, #8]
 80239fc:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8023a00:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8023a02:	f7ff fe3d 	bl	8023680 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8023a06:	4604      	mov	r4, r0
 8023a08:	2800      	cmp	r0, #0
 8023a0a:	d0ed      	beq.n	80239e8 <LoRaMacCryptoSecureMessage+0x24>
}
 8023a0c:	4620      	mov	r0, r4
 8023a0e:	b007      	add	sp, #28
 8023a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8023a12:	792b      	ldrb	r3, [r5, #4]
 8023a14:	6829      	ldr	r1, [r5, #0]
 8023a16:	3b04      	subs	r3, #4
 8023a18:	b29a      	uxth	r2, r3
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8023a1a:	b909      	cbnz	r1, 8023a20 <LoRaMacCryptoSecureMessage+0x5c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8023a1c:	240a      	movs	r4, #10
 8023a1e:	e7f5      	b.n	8023a0c <LoRaMacCryptoSecureMessage+0x48>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8023a20:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8023a24:	d832      	bhi.n	8023a8c <LoRaMacCryptoSecureMessage+0xc8>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8023a26:	68ac      	ldr	r4, [r5, #8]
    b0[5] = dir;
 8023a28:	f8b5 c008 	ldrh.w	ip, [r5, #8]
    b0[6] = devAddr & 0xFF;
 8023a2c:	f8ad c00e 	strh.w	ip, [sp, #14]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8023a30:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8023a34:	0e24      	lsrs	r4, r4, #24
 8023a36:	f88d 4011 	strb.w	r4, [sp, #17]
    b0[15] = msgLen & 0xFF;
 8023a3a:	f88d 3017 	strb.w	r3, [sp, #23]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8023a3e:	0c34      	lsrs	r4, r6, #16
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8023a40:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    b0[0] = 0x49;
 8023a44:	f04f 0e49 	mov.w	lr, #73	; 0x49
    b0[4] = 0x00;
 8023a48:	f8ad 000c 	strh.w	r0, [sp, #12]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8023a4c:	f88d 4014 	strb.w	r4, [sp, #20]
    b0[14] = 0x00;
 8023a50:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8023a54:	0e34      	lsrs	r4, r6, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8023a56:	9300      	str	r3, [sp, #0]
 8023a58:	a802      	add	r0, sp, #8
 8023a5a:	2302      	movs	r3, #2
    b0[0] = 0x49;
 8023a5c:	f8cd e008 	str.w	lr, [sp, #8]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8023a60:	f88d c010 	strb.w	ip, [sp, #16]
    b0[10] = fCnt & 0xFF;
 8023a64:	f8ad 6012 	strh.w	r6, [sp, #18]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8023a68:	f88d 4015 	strb.w	r4, [sp, #21]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8023a6c:	f7fa fda6 	bl	801e5bc <SecureElementComputeAesCmac>
 8023a70:	b108      	cbz	r0, 8023a76 <LoRaMacCryptoSecureMessage+0xb2>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8023a72:	240f      	movs	r4, #15
 8023a74:	e7ca      	b.n	8023a0c <LoRaMacCryptoSecureMessage+0x48>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8023a76:	4628      	mov	r0, r5
 8023a78:	f000 fa3f 	bl	8023efa <LoRaMacSerializerData>
 8023a7c:	4604      	mov	r4, r0
 8023a7e:	2800      	cmp	r0, #0
 8023a80:	d1b6      	bne.n	80239f0 <LoRaMacCryptoSecureMessage+0x2c>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8023a82:	683b      	ldr	r3, [r7, #0]
 8023a84:	60de      	str	r6, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 8023a8a:	e7bf      	b.n	8023a0c <LoRaMacCryptoSecureMessage+0x48>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8023a8c:	240e      	movs	r4, #14
 8023a8e:	e7bd      	b.n	8023a0c <LoRaMacCryptoSecureMessage+0x48>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8023a90:	2406      	movs	r4, #6
 8023a92:	e7bb      	b.n	8023a0c <LoRaMacCryptoSecureMessage+0x48>
 8023a94:	20002230 	.word	0x20002230

08023a98 <LoRaMacCryptoUnsecureMessage>:
{
 8023a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023a9c:	b085      	sub	sp, #20
 8023a9e:	4604      	mov	r4, r0
 8023aa0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023aa2:	4688      	mov	r8, r1
 8023aa4:	4617      	mov	r7, r2
 8023aa6:	461d      	mov	r5, r3
    if( macMsg == 0 )
 8023aa8:	2e00      	cmp	r6, #0
 8023aaa:	d05b      	beq.n	8023b64 <LoRaMacCryptoUnsecureMessage+0xcc>
    uint32_t lastDown = 0;
 8023aac:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8023aae:	a903      	add	r1, sp, #12
 8023ab0:	4610      	mov	r0, r2
    uint32_t lastDown = 0;
 8023ab2:	9303      	str	r3, [sp, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8023ab4:	f7ff fe40 	bl	8023738 <GetLastFcntDown>
 8023ab8:	b120      	cbz	r0, 8023ac4 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8023aba:	2406      	movs	r4, #6
}
 8023abc:	4620      	mov	r0, r4
 8023abe:	b005      	add	sp, #20
 8023ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( currentDown > lastDown ) ||
 8023ac4:	9b03      	ldr	r3, [sp, #12]
 8023ac6:	429d      	cmp	r5, r3
 8023ac8:	d801      	bhi.n	8023ace <LoRaMacCryptoUnsecureMessage+0x36>
 8023aca:	3301      	adds	r3, #1
 8023acc:	d1f5      	bne.n	8023aba <LoRaMacCryptoUnsecureMessage+0x22>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8023ace:	4630      	mov	r0, r6
 8023ad0:	f000 f984 	bl	8023ddc <LoRaMacParserData>
 8023ad4:	2800      	cmp	r0, #0
 8023ad6:	d147      	bne.n	8023b68 <LoRaMacCryptoUnsecureMessage+0xd0>
        if( KeyAddrList[i].AddrID == addrID )
 8023ad8:	4b26      	ldr	r3, [pc, #152]	; (8023b74 <LoRaMacCryptoUnsecureMessage+0xdc>)
 8023ada:	781a      	ldrb	r2, [r3, #0]
 8023adc:	42a2      	cmp	r2, r4
 8023ade:	d003      	beq.n	8023ae8 <LoRaMacCryptoUnsecureMessage+0x50>
 8023ae0:	791a      	ldrb	r2, [r3, #4]
 8023ae2:	42a2      	cmp	r2, r4
 8023ae4:	d142      	bne.n	8023b6c <LoRaMacCryptoUnsecureMessage+0xd4>
 8023ae6:	2001      	movs	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 8023ae8:	68b2      	ldr	r2, [r6, #8]
 8023aea:	4542      	cmp	r2, r8
 8023aec:	d140      	bne.n	8023b70 <LoRaMacCryptoUnsecureMessage+0xd8>
    payloadDecryptionKeyID = curItem->AppSkey;
 8023aee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8023af2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 8023af4:	f890 9001 	ldrb.w	r9, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8023af8:	7931      	ldrb	r1, [r6, #4]
 8023afa:	e9cd 5300 	strd	r5, r3, [sp]
 8023afe:	3904      	subs	r1, #4
 8023b00:	7882      	ldrb	r2, [r0, #2]
 8023b02:	6830      	ldr	r0, [r6, #0]
 8023b04:	4643      	mov	r3, r8
 8023b06:	b289      	uxth	r1, r1
 8023b08:	f7ff fe52 	bl	80237b0 <VerifyCmacB0.isra.0.constprop.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8023b0c:	4604      	mov	r4, r0
 8023b0e:	2800      	cmp	r0, #0
 8023b10:	d1d4      	bne.n	8023abc <LoRaMacCryptoUnsecureMessage+0x24>
    if( macMsg->FPort == 0 )
 8023b12:	f896 3020 	ldrb.w	r3, [r6, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8023b16:	9501      	str	r5, [sp, #4]
        payloadDecryptionKeyID = NWK_S_KEY;
 8023b18:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8023b1a:	f04f 0301 	mov.w	r3, #1
 8023b1e:	9300      	str	r3, [sp, #0]
 8023b20:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8023b24:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8023b26:	4643      	mov	r3, r8
 8023b28:	bf14      	ite	ne
 8023b2a:	464a      	movne	r2, r9
 8023b2c:	2202      	moveq	r2, #2
 8023b2e:	f7ff fda7 	bl	8023680 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8023b32:	4604      	mov	r4, r0
 8023b34:	2800      	cmp	r0, #0
 8023b36:	d1c1      	bne.n	8023abc <LoRaMacCryptoUnsecureMessage+0x24>
    switch( fCntID )
 8023b38:	3f01      	subs	r7, #1
 8023b3a:	4b0f      	ldr	r3, [pc, #60]	; (8023b78 <LoRaMacCryptoUnsecureMessage+0xe0>)
 8023b3c:	2f03      	cmp	r7, #3
 8023b3e:	d805      	bhi.n	8023b4c <LoRaMacCryptoUnsecureMessage+0xb4>
 8023b40:	e8df f007 	tbb	[pc, r7]
 8023b44:	0d0a0702 	.word	0x0d0a0702
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8023b48:	681a      	ldr	r2, [r3, #0]
 8023b4a:	6115      	str	r5, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8023b4c:	685b      	ldr	r3, [r3, #4]
 8023b4e:	4798      	blx	r3
}
 8023b50:	e7b4      	b.n	8023abc <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 8023b52:	681a      	ldr	r2, [r3, #0]
 8023b54:	6155      	str	r5, [r2, #20]
            break;
 8023b56:	e7f9      	b.n	8023b4c <LoRaMacCryptoUnsecureMessage+0xb4>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8023b58:	681a      	ldr	r2, [r3, #0]
 8023b5a:	6195      	str	r5, [r2, #24]
            break;
 8023b5c:	e7f6      	b.n	8023b4c <LoRaMacCryptoUnsecureMessage+0xb4>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8023b5e:	681a      	ldr	r2, [r3, #0]
 8023b60:	61d5      	str	r5, [r2, #28]
            break;
 8023b62:	e7f3      	b.n	8023b4c <LoRaMacCryptoUnsecureMessage+0xb4>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8023b64:	240a      	movs	r4, #10
 8023b66:	e7a9      	b.n	8023abc <LoRaMacCryptoUnsecureMessage+0x24>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8023b68:	2410      	movs	r4, #16
 8023b6a:	e7a7      	b.n	8023abc <LoRaMacCryptoUnsecureMessage+0x24>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8023b6c:	240c      	movs	r4, #12
 8023b6e:	e7a5      	b.n	8023abc <LoRaMacCryptoUnsecureMessage+0x24>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8023b70:	2402      	movs	r4, #2
 8023b72:	e7a3      	b.n	8023abc <LoRaMacCryptoUnsecureMessage+0x24>
 8023b74:	200011fc 	.word	0x200011fc
 8023b78:	20002230 	.word	0x20002230

08023b7c <LoRaMacCryptoDeriveMcRootKey>:
{
 8023b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( keyID != APP_KEY )
 8023b7e:	b9b8      	cbnz	r0, 8023bb0 <LoRaMacCryptoDeriveMcRootKey+0x34>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8023b80:	4b0c      	ldr	r3, [pc, #48]	; (8023bb4 <LoRaMacCryptoDeriveMcRootKey+0x38>)
    uint8_t compBase[16] = { 0 };
 8023b82:	e9cd 0000 	strd	r0, r0, [sp]
 8023b86:	e9cd 0002 	strd	r0, r0, [sp, #8]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8023b8a:	6818      	ldr	r0, [r3, #0]
 8023b8c:	7883      	ldrb	r3, [r0, #2]
 8023b8e:	2b01      	cmp	r3, #1
        compBase[0] = 0x20;
 8023b90:	bf04      	itt	eq
 8023b92:	2320      	moveq	r3, #32
 8023b94:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8023b98:	6800      	ldr	r0, [r0, #0]
 8023b9a:	2304      	movs	r3, #4
 8023b9c:	2200      	movs	r2, #0
 8023b9e:	4669      	mov	r1, sp
 8023ba0:	f7fa fd99 	bl	801e6d6 <SecureElementDeriveAndStoreKey>
 8023ba4:	2800      	cmp	r0, #0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8023ba6:	bf18      	it	ne
 8023ba8:	200f      	movne	r0, #15
}
 8023baa:	b005      	add	sp, #20
 8023bac:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8023bb0:	200b      	movs	r0, #11
 8023bb2:	e7fa      	b.n	8023baa <LoRaMacCryptoDeriveMcRootKey+0x2e>
 8023bb4:	20002230 	.word	0x20002230

08023bb8 <LoRaMacCryptoSetKey>:
{
 8023bb8:	b538      	push	{r3, r4, r5, lr}
 8023bba:	4605      	mov	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8023bbc:	f7fa fd86 	bl	801e6cc <SecureElementSetKey>
 8023bc0:	4604      	mov	r4, r0
 8023bc2:	b930      	cbnz	r0, 8023bd2 <LoRaMacCryptoSetKey+0x1a>
    if( keyID == APP_KEY )
 8023bc4:	b935      	cbnz	r5, 8023bd4 <LoRaMacCryptoSetKey+0x1c>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8023bc6:	f7ff ffd9 	bl	8023b7c <LoRaMacCryptoDeriveMcRootKey>
 8023bca:	b910      	cbnz	r0, 8023bd2 <LoRaMacCryptoSetKey+0x1a>
    if( keyID != MC_ROOT_KEY )
 8023bcc:	f7ff fdda 	bl	8023784 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8023bd0:	b100      	cbz	r0, 8023bd4 <LoRaMacCryptoSetKey+0x1c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8023bd2:	240f      	movs	r4, #15
}
 8023bd4:	4620      	mov	r0, r4
 8023bd6:	bd38      	pop	{r3, r4, r5, pc}

08023bd8 <LoRaMacCryptoHandleJoinAccept>:
{
 8023bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023bdc:	4607      	mov	r7, r0
 8023bde:	b090      	sub	sp, #64	; 0x40
 8023be0:	460e      	mov	r6, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8023be2:	4614      	mov	r4, r2
 8023be4:	2a00      	cmp	r2, #0
 8023be6:	d053      	beq.n	8023c90 <LoRaMacCryptoHandleJoinAccept+0xb8>
 8023be8:	2900      	cmp	r1, #0
 8023bea:	d051      	beq.n	8023c90 <LoRaMacCryptoHandleJoinAccept+0xb8>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8023bec:	2500      	movs	r5, #0
 8023bee:	4629      	mov	r1, r5
 8023bf0:	221d      	movs	r2, #29
 8023bf2:	a808      	add	r0, sp, #32
 8023bf4:	9507      	str	r5, [sp, #28]
 8023bf6:	f003 fa55 	bl	80270a4 <memset>
    uint8_t versionMinor         = 0;
 8023bfa:	f88d 501b 	strb.w	r5, [sp, #27]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 8023bfe:	4d27      	ldr	r5, [pc, #156]	; (8023c9c <LoRaMacCryptoHandleJoinAccept+0xc4>)
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 8023c00:	682b      	ldr	r3, [r5, #0]
 8023c02:	f10d 081c 	add.w	r8, sp, #28
 8023c06:	791a      	ldrb	r2, [r3, #4]
 8023c08:	f8cd 8004 	str.w	r8, [sp, #4]
 8023c0c:	f10d 031b 	add.w	r3, sp, #27
 8023c10:	9302      	str	r3, [sp, #8]
 8023c12:	7923      	ldrb	r3, [r4, #4]
 8023c14:	9300      	str	r3, [sp, #0]
 8023c16:	6823      	ldr	r3, [r4, #0]
 8023c18:	4631      	mov	r1, r6
 8023c1a:	4638      	mov	r0, r7
 8023c1c:	f7fa fd77 	bl	801e70e <SecureElementProcessJoinAccept>
 8023c20:	2800      	cmp	r0, #0
 8023c22:	d137      	bne.n	8023c94 <LoRaMacCryptoHandleJoinAccept+0xbc>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8023c24:	6820      	ldr	r0, [r4, #0]
 8023c26:	7922      	ldrb	r2, [r4, #4]
 8023c28:	4641      	mov	r1, r8
 8023c2a:	f001 fab7 	bl	802519c <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8023c2e:	4620      	mov	r0, r4
 8023c30:	f000 f886 	bl	8023d40 <LoRaMacParserJoinAccept>
 8023c34:	bb80      	cbnz	r0, 8023c98 <LoRaMacCryptoHandleJoinAccept+0xc0>
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 8023c36:	f7ff ffa1 	bl	8023b7c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8023c3a:	4606      	mov	r6, r0
 8023c3c:	bb20      	cbnz	r0, 8023c88 <LoRaMacCryptoHandleJoinAccept+0xb0>
    if( keyID != MC_ROOT_KEY )
 8023c3e:	f7ff fda1 	bl	8023784 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8023c42:	4606      	mov	r6, r0
 8023c44:	bb00      	cbnz	r0, 8023c88 <LoRaMacCryptoHandleJoinAccept+0xb0>
    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8023c46:	682b      	ldr	r3, [r5, #0]
 8023c48:	1da1      	adds	r1, r4, #6
 8023c4a:	f104 0209 	add.w	r2, r4, #9
 8023c4e:	3304      	adds	r3, #4
 8023c50:	2003      	movs	r0, #3
 8023c52:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8023c56:	f7ff fce7 	bl	8023628 <DeriveSessionKey10x>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8023c5a:	4606      	mov	r6, r0
 8023c5c:	b9a0      	cbnz	r0, 8023c88 <LoRaMacCryptoHandleJoinAccept+0xb0>
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8023c5e:	682b      	ldr	r3, [r5, #0]
 8023c60:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8023c64:	3304      	adds	r3, #4
 8023c66:	2002      	movs	r0, #2
 8023c68:	f7ff fcde 	bl	8023628 <DeriveSessionKey10x>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8023c6c:	4606      	mov	r6, r0
 8023c6e:	b958      	cbnz	r0, 8023c88 <LoRaMacCryptoHandleJoinAccept+0xb0>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 8023c70:	682b      	ldr	r3, [r5, #0]
 8023c72:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8023c76:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8023c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8023c7c:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8023c80:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8023c82:	619a      	str	r2, [r3, #24]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8023c84:	686b      	ldr	r3, [r5, #4]
 8023c86:	4798      	blx	r3
}
 8023c88:	4630      	mov	r0, r6
 8023c8a:	b010      	add	sp, #64	; 0x40
 8023c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8023c90:	260a      	movs	r6, #10
 8023c92:	e7f9      	b.n	8023c88 <LoRaMacCryptoHandleJoinAccept+0xb0>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8023c94:	260f      	movs	r6, #15
 8023c96:	e7f7      	b.n	8023c88 <LoRaMacCryptoHandleJoinAccept+0xb0>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8023c98:	2610      	movs	r6, #16
 8023c9a:	e7f5      	b.n	8023c88 <LoRaMacCryptoHandleJoinAccept+0xb0>
 8023c9c:	20002230 	.word	0x20002230

08023ca0 <LoRaMacCryptoDeriveMcSessionKeyPair>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcSessionKeyPair( AddressIdentifier_t addrID, uint32_t mcAddr )
{
 8023ca0:	b570      	push	{r4, r5, r6, lr}
 8023ca2:	b088      	sub	sp, #32
    if( mcAddr == 0 )
 8023ca4:	2900      	cmp	r1, #0
 8023ca6:	d042      	beq.n	8023d2e <LoRaMacCryptoDeriveMcSessionKeyPair+0x8e>
        if( KeyAddrList[i].AddrID == addrID )
 8023ca8:	4c23      	ldr	r4, [pc, #140]	; (8023d38 <LoRaMacCryptoDeriveMcSessionKeyPair+0x98>)
 8023caa:	7823      	ldrb	r3, [r4, #0]
 8023cac:	4283      	cmp	r3, r0
 8023cae:	d03c      	beq.n	8023d2a <LoRaMacCryptoDeriveMcSessionKeyPair+0x8a>
 8023cb0:	7923      	ldrb	r3, [r4, #4]
 8023cb2:	4283      	cmp	r3, r0
 8023cb4:	d13d      	bne.n	8023d32 <LoRaMacCryptoDeriveMcSessionKeyPair+0x92>
 8023cb6:	2201      	movs	r2, #1

    uint8_t compBaseAppS[16] = { 0 };
    uint8_t compBaseNwkS[16] = { 0 };

    compBaseAppS[0] = 0x01;
    compBaseAppS[1] = mcAddr & 0xFF;
 8023cb8:	b2cd      	uxtb	r5, r1
    uint8_t compBaseAppS[16] = { 0 };
 8023cba:	2300      	movs	r3, #0
    compBaseAppS[1] = mcAddr & 0xFF;
 8023cbc:	f88d 5001 	strb.w	r5, [sp, #1]
    compBaseAppS[2] = ( mcAddr >> 8 ) & 0xFF;
    compBaseAppS[3] = ( mcAddr >> 16 ) & 0xFF;
    compBaseAppS[4] = ( mcAddr >> 24 ) & 0xFF;

    compBaseNwkS[0] = 0x02;
    compBaseNwkS[1] = mcAddr & 0xFF;
 8023cc0:	f88d 5011 	strb.w	r5, [sp, #17]
    compBaseNwkS[2] = ( mcAddr >> 8 ) & 0xFF;
    compBaseNwkS[3] = ( mcAddr >> 16 ) & 0xFF;
    compBaseNwkS[4] = ( mcAddr >> 24 ) & 0xFF;

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBaseAppS, curItem->RootKey, curItem->AppSkey ) != SECURE_ELEMENT_SUCCESS )
 8023cc4:	4d1d      	ldr	r5, [pc, #116]	; (8023d3c <LoRaMacCryptoDeriveMcSessionKeyPair+0x9c>)
    uint8_t compBaseAppS[16] = { 0 };
 8023cc6:	9303      	str	r3, [sp, #12]
    compBaseAppS[2] = ( mcAddr >> 8 ) & 0xFF;
 8023cc8:	f3c1 2007 	ubfx	r0, r1, #8, #8
    uint8_t compBaseAppS[16] = { 0 };
 8023ccc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    uint8_t compBaseNwkS[16] = { 0 };
 8023cd0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8023cd4:	9307      	str	r3, [sp, #28]
    compBaseAppS[0] = 0x01;
 8023cd6:	2301      	movs	r3, #1
 8023cd8:	f88d 3000 	strb.w	r3, [sp]
    compBaseAppS[2] = ( mcAddr >> 8 ) & 0xFF;
 8023cdc:	f88d 0002 	strb.w	r0, [sp, #2]
    compBaseAppS[3] = ( mcAddr >> 16 ) & 0xFF;
 8023ce0:	f3c1 4307 	ubfx	r3, r1, #16, #8
    compBaseNwkS[2] = ( mcAddr >> 8 ) & 0xFF;
 8023ce4:	f88d 0012 	strb.w	r0, [sp, #18]
    compBaseAppS[4] = ( mcAddr >> 24 ) & 0xFF;
 8023ce8:	0e09      	lsrs	r1, r1, #24
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBaseAppS, curItem->RootKey, curItem->AppSkey ) != SECURE_ELEMENT_SUCCESS )
 8023cea:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8023cee:	6828      	ldr	r0, [r5, #0]
    compBaseAppS[3] = ( mcAddr >> 16 ) & 0xFF;
 8023cf0:	f88d 3003 	strb.w	r3, [sp, #3]
    compBaseNwkS[0] = 0x02;
 8023cf4:	2602      	movs	r6, #2
    compBaseAppS[4] = ( mcAddr >> 24 ) & 0xFF;
 8023cf6:	f88d 1004 	strb.w	r1, [sp, #4]
    compBaseNwkS[3] = ( mcAddr >> 16 ) & 0xFF;
 8023cfa:	f88d 3013 	strb.w	r3, [sp, #19]
    compBaseNwkS[4] = ( mcAddr >> 24 ) & 0xFF;
 8023cfe:	f88d 1014 	strb.w	r1, [sp, #20]
    compBaseNwkS[0] = 0x02;
 8023d02:	f88d 6010 	strb.w	r6, [sp, #16]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBaseAppS, curItem->RootKey, curItem->AppSkey ) != SECURE_ELEMENT_SUCCESS )
 8023d06:	7863      	ldrb	r3, [r4, #1]
 8023d08:	78e2      	ldrb	r2, [r4, #3]
 8023d0a:	6800      	ldr	r0, [r0, #0]
 8023d0c:	4669      	mov	r1, sp
 8023d0e:	f7fa fce2 	bl	801e6d6 <SecureElementDeriveAndStoreKey>
 8023d12:	b938      	cbnz	r0, 8023d24 <LoRaMacCryptoDeriveMcSessionKeyPair+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBaseNwkS, curItem->RootKey, curItem->NwkSkey ) != SECURE_ELEMENT_SUCCESS )
 8023d14:	6828      	ldr	r0, [r5, #0]
 8023d16:	78a3      	ldrb	r3, [r4, #2]
 8023d18:	78e2      	ldrb	r2, [r4, #3]
 8023d1a:	6800      	ldr	r0, [r0, #0]
 8023d1c:	a904      	add	r1, sp, #16
 8023d1e:	f7fa fcda 	bl	801e6d6 <SecureElementDeriveAndStoreKey>
 8023d22:	b100      	cbz	r0, 8023d26 <LoRaMacCryptoDeriveMcSessionKeyPair+0x86>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8023d24:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8023d26:	b008      	add	sp, #32
 8023d28:	bd70      	pop	{r4, r5, r6, pc}
        if( KeyAddrList[i].AddrID == addrID )
 8023d2a:	2200      	movs	r2, #0
 8023d2c:	e7c4      	b.n	8023cb8 <LoRaMacCryptoDeriveMcSessionKeyPair+0x18>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8023d2e:	200a      	movs	r0, #10
 8023d30:	e7f9      	b.n	8023d26 <LoRaMacCryptoDeriveMcSessionKeyPair+0x86>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8023d32:	200c      	movs	r0, #12
 8023d34:	e7f7      	b.n	8023d26 <LoRaMacCryptoDeriveMcSessionKeyPair+0x86>
 8023d36:	bf00      	nop
 8023d38:	200011fc 	.word	0x200011fc
 8023d3c:	20002230 	.word	0x20002230

08023d40 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8023d40:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8023d42:	4604      	mov	r4, r0
 8023d44:	2800      	cmp	r0, #0
 8023d46:	d045      	beq.n	8023dd4 <LoRaMacParserJoinAccept+0x94>
 8023d48:	6801      	ldr	r1, [r0, #0]
 8023d4a:	2900      	cmp	r1, #0
 8023d4c:	d042      	beq.n	8023dd4 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8023d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023d52:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8023d54:	2203      	movs	r2, #3
 8023d56:	3006      	adds	r0, #6
 8023d58:	f001 fa20 	bl	802519c <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8023d5c:	4620      	mov	r0, r4
 8023d5e:	2203      	movs	r2, #3
 8023d60:	f850 1b09 	ldr.w	r1, [r0], #9
 8023d64:	3104      	adds	r1, #4
 8023d66:	f001 fa19 	bl	802519c <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8023d6a:	6821      	ldr	r1, [r4, #0]
 8023d6c:	79cb      	ldrb	r3, [r1, #7]
 8023d6e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8023d70:	7a0a      	ldrb	r2, [r1, #8]
 8023d72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023d76:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8023d78:	7a4a      	ldrb	r2, [r1, #9]
 8023d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023d7e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8023d80:	7a8a      	ldrb	r2, [r1, #10]
 8023d82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8023d86:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8023d88:	7acb      	ldrb	r3, [r1, #11]
 8023d8a:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8023d8c:	7b0b      	ldrb	r3, [r1, #12]
 8023d8e:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8023d90:	7923      	ldrb	r3, [r4, #4]
 8023d92:	2b21      	cmp	r3, #33	; 0x21
 8023d94:	d11a      	bne.n	8023dcc <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8023d96:	2210      	movs	r2, #16
 8023d98:	310d      	adds	r1, #13
 8023d9a:	f104 0012 	add.w	r0, r4, #18
 8023d9e:	f001 f9fd 	bl	802519c <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8023da2:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8023da4:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8023da6:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8023da8:	5c8b      	ldrb	r3, [r1, r2]
 8023daa:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8023dac:	5c08      	ldrb	r0, [r1, r0]
 8023dae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8023db2:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8023db4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8023db6:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8023db8:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8023dba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8023dbe:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8023dc0:	5c8a      	ldrb	r2, [r1, r2]
 8023dc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8023dc6:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8023dc8:	2000      	movs	r0, #0
}
 8023dca:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8023dcc:	2b11      	cmp	r3, #17
 8023dce:	dc03      	bgt.n	8023dd8 <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8023dd0:	220d      	movs	r2, #13
 8023dd2:	e7e7      	b.n	8023da4 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 8023dd4:	2002      	movs	r0, #2
 8023dd6:	e7f8      	b.n	8023dca <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 8023dd8:	2001      	movs	r0, #1
 8023dda:	e7f6      	b.n	8023dca <LoRaMacParserJoinAccept+0x8a>

08023ddc <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8023ddc:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8023dde:	4604      	mov	r4, r0
 8023de0:	2800      	cmp	r0, #0
 8023de2:	d054      	beq.n	8023e8e <LoRaMacParserData+0xb2>
 8023de4:	6801      	ldr	r1, [r0, #0]
 8023de6:	2900      	cmp	r1, #0
 8023de8:	d051      	beq.n	8023e8e <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8023dea:	780b      	ldrb	r3, [r1, #0]
 8023dec:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8023dee:	784b      	ldrb	r3, [r1, #1]
 8023df0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8023df2:	788a      	ldrb	r2, [r1, #2]
 8023df4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023df8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8023dfa:	78ca      	ldrb	r2, [r1, #3]
 8023dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023e00:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8023e02:	790a      	ldrb	r2, [r1, #4]
 8023e04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8023e08:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8023e0a:	794b      	ldrb	r3, [r1, #5]
 8023e0c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8023e0e:	798b      	ldrb	r3, [r1, #6]
 8023e10:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8023e12:	79ca      	ldrb	r2, [r1, #7]
 8023e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8023e18:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8023e1a:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8023e1c:	f002 020f 	and.w	r2, r2, #15
 8023e20:	3108      	adds	r1, #8
 8023e22:	3010      	adds	r0, #16
 8023e24:	f001 f9ba 	bl	802519c <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8023e28:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8023e2a:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8023e2c:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 8023e30:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 8023e34:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8023e38:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8023e3a:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8023e3e:	1a11      	subs	r1, r2, r0
 8023e40:	2904      	cmp	r1, #4
 8023e42:	dd0d      	ble.n	8023e60 <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8023e44:	6821      	ldr	r1, [r4, #0]
 8023e46:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8023e48:	3a04      	subs	r2, #4
 8023e4a:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8023e4c:	5c08      	ldrb	r0, [r1, r0]
 8023e4e:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8023e52:	b2d2      	uxtb	r2, r2
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8023e54:	6a60      	ldr	r0, [r4, #36]	; 0x24
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8023e56:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8023e5a:	4419      	add	r1, r3
 8023e5c:	f001 f99e 	bl	802519c <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8023e60:	7923      	ldrb	r3, [r4, #4]
 8023e62:	6822      	ldr	r2, [r4, #0]
 8023e64:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 8023e66:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8023e68:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8023e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8023e6e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8023e72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8023e76:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8023e78:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8023e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8023e80:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8023e82:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8023e86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8023e8a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8023e8c:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 8023e8e:	2002      	movs	r0, #2
 8023e90:	e7fc      	b.n	8023e8c <LoRaMacParserData+0xb0>

08023e92 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8023e92:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8023e94:	4604      	mov	r4, r0
 8023e96:	b360      	cbz	r0, 8023ef2 <LoRaMacSerializerJoinRequest+0x60>
 8023e98:	6803      	ldr	r3, [r0, #0]
 8023e9a:	b353      	cbz	r3, 8023ef2 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8023e9c:	7902      	ldrb	r2, [r0, #4]
 8023e9e:	2a16      	cmp	r2, #22
 8023ea0:	d929      	bls.n	8023ef6 <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8023ea2:	7942      	ldrb	r2, [r0, #5]
 8023ea4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8023ea6:	4601      	mov	r1, r0
 8023ea8:	2208      	movs	r2, #8
 8023eaa:	f851 0b06 	ldr.w	r0, [r1], #6
 8023eae:	3001      	adds	r0, #1
 8023eb0:	f001 f97e 	bl	80251b0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8023eb4:	4621      	mov	r1, r4
 8023eb6:	2208      	movs	r2, #8
 8023eb8:	f851 0b0e 	ldr.w	r0, [r1], #14
 8023ebc:	3009      	adds	r0, #9
 8023ebe:	f001 f977 	bl	80251b0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8023ec2:	6823      	ldr	r3, [r4, #0]
 8023ec4:	8ae2      	ldrh	r2, [r4, #22]
 8023ec6:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8023ec8:	8ae3      	ldrh	r3, [r4, #22]
 8023eca:	6822      	ldr	r2, [r4, #0]
 8023ecc:	0a1b      	lsrs	r3, r3, #8
 8023ece:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8023ed0:	6823      	ldr	r3, [r4, #0]
 8023ed2:	69a2      	ldr	r2, [r4, #24]
 8023ed4:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8023ed6:	69a3      	ldr	r3, [r4, #24]
 8023ed8:	6822      	ldr	r2, [r4, #0]
 8023eda:	0a1b      	lsrs	r3, r3, #8
 8023edc:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8023ede:	6823      	ldr	r3, [r4, #0]
 8023ee0:	8b62      	ldrh	r2, [r4, #26]
 8023ee2:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8023ee4:	6823      	ldr	r3, [r4, #0]
 8023ee6:	7ee2      	ldrb	r2, [r4, #27]
 8023ee8:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8023eea:	2317      	movs	r3, #23
 8023eec:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8023eee:	2000      	movs	r0, #0
}
 8023ef0:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8023ef2:	2001      	movs	r0, #1
 8023ef4:	e7fc      	b.n	8023ef0 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8023ef6:	2002      	movs	r0, #2
 8023ef8:	e7fa      	b.n	8023ef0 <LoRaMacSerializerJoinRequest+0x5e>

08023efa <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8023efa:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8023efc:	4604      	mov	r4, r0
 8023efe:	2800      	cmp	r0, #0
 8023f00:	d063      	beq.n	8023fca <LoRaMacSerializerData+0xd0>
 8023f02:	6801      	ldr	r1, [r0, #0]
 8023f04:	2900      	cmp	r1, #0
 8023f06:	d060      	beq.n	8023fca <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8023f08:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8023f0a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8023f0e:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 8023f12:	2a00      	cmp	r2, #0
 8023f14:	d157      	bne.n	8023fc6 <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8023f16:	3308      	adds	r3, #8
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
 8023f18:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8023f1a:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
 8023f1c:	4413      	add	r3, r2
 8023f1e:	4298      	cmp	r0, r3
 8023f20:	d355      	bcc.n	8023fce <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8023f22:	7963      	ldrb	r3, [r4, #5]
 8023f24:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8023f26:	6823      	ldr	r3, [r4, #0]
 8023f28:	68a2      	ldr	r2, [r4, #8]
 8023f2a:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8023f2c:	68a3      	ldr	r3, [r4, #8]
 8023f2e:	6822      	ldr	r2, [r4, #0]
 8023f30:	0a1b      	lsrs	r3, r3, #8
 8023f32:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8023f34:	6823      	ldr	r3, [r4, #0]
 8023f36:	8962      	ldrh	r2, [r4, #10]
 8023f38:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8023f3a:	6823      	ldr	r3, [r4, #0]
 8023f3c:	7ae2      	ldrb	r2, [r4, #11]
 8023f3e:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8023f40:	6823      	ldr	r3, [r4, #0]
 8023f42:	7b22      	ldrb	r2, [r4, #12]
 8023f44:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8023f46:	6823      	ldr	r3, [r4, #0]
 8023f48:	89e2      	ldrh	r2, [r4, #14]
 8023f4a:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8023f4c:	89e3      	ldrh	r3, [r4, #14]
 8023f4e:	6822      	ldr	r2, [r4, #0]
 8023f50:	0a1b      	lsrs	r3, r3, #8

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8023f52:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8023f54:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8023f56:	7b22      	ldrb	r2, [r4, #12]
 8023f58:	f851 0b10 	ldr.w	r0, [r1], #16
 8023f5c:	f002 020f 	and.w	r2, r2, #15
 8023f60:	3008      	adds	r0, #8
 8023f62:	f001 f91b 	bl	802519c <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8023f66:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8023f68:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8023f6c:	f003 030f 	and.w	r3, r3, #15
 8023f70:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 8023f74:	b12a      	cbz	r2, 8023f82 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8023f76:	6822      	ldr	r2, [r4, #0]
 8023f78:	f894 1020 	ldrb.w	r1, [r4, #32]
 8023f7c:	5551      	strb	r1, [r2, r5]
 8023f7e:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8023f82:	6820      	ldr	r0, [r4, #0]
 8023f84:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8023f88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023f8a:	4428      	add	r0, r5
 8023f8c:	f001 f906 	bl	802519c <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8023f90:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8023f94:	6822      	ldr	r2, [r4, #0]
 8023f96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8023f98:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8023f9a:	54d1      	strb	r1, [r2, r3]
 8023f9c:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8023f9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8023fa0:	6820      	ldr	r0, [r4, #0]
 8023fa2:	b292      	uxth	r2, r2
 8023fa4:	0a09      	lsrs	r1, r1, #8
 8023fa6:	5481      	strb	r1, [r0, r2]
 8023fa8:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8023faa:	6821      	ldr	r1, [r4, #0]
 8023fac:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8023fae:	b292      	uxth	r2, r2
 8023fb0:	5488      	strb	r0, [r1, r2]
 8023fb2:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8023fb4:	6821      	ldr	r1, [r4, #0]
 8023fb6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8023fba:	b292      	uxth	r2, r2
 8023fbc:	3304      	adds	r3, #4
 8023fbe:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 8023fc0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8023fc2:	2000      	movs	r0, #0
}
 8023fc4:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8023fc6:	3309      	adds	r3, #9
 8023fc8:	e7a6      	b.n	8023f18 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8023fca:	2001      	movs	r0, #1
 8023fcc:	e7fa      	b.n	8023fc4 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8023fce:	2002      	movs	r0, #2
 8023fd0:	e7f8      	b.n	8023fc4 <LoRaMacSerializerData+0xca>

08023fd2 <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 8023fd2:	1f43      	subs	r3, r0, #5
 8023fd4:	4258      	negs	r0, r3
 8023fd6:	4158      	adcs	r0, r3
 8023fd8:	4770      	bx	lr

08023fda <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    PhyParam_t phyParam = { 0 };
    switch( region )
 8023fda:	2805      	cmp	r0, #5
{
 8023fdc:	b082      	sub	sp, #8
    switch( region )
 8023fde:	d103      	bne.n	8023fe8 <RegionGetPhyParam+0xe>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8023fe0:	4608      	mov	r0, r1
        default:
        {
            return phyParam;
        }
    }
}
 8023fe2:	b002      	add	sp, #8
        EU868_GET_PHY_PARAM( );
 8023fe4:	f000 bbd2 	b.w	802478c <RegionEU868GetPhyParam>
}
 8023fe8:	2000      	movs	r0, #0
 8023fea:	b002      	add	sp, #8
 8023fec:	4770      	bx	lr

08023fee <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 8023fee:	2805      	cmp	r0, #5
 8023ff0:	d102      	bne.n	8023ff8 <RegionSetBandTxDone+0xa>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8023ff2:	4608      	mov	r0, r1
 8023ff4:	f000 bc58 	b.w	80248a8 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 8023ff8:	4770      	bx	lr

08023ffa <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 8023ffa:	2805      	cmp	r0, #5
 8023ffc:	d102      	bne.n	8024004 <RegionInitDefaults+0xa>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8023ffe:	4608      	mov	r0, r1
 8024000:	f000 bc6a 	b.w	80248d8 <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 8024004:	4770      	bx	lr

08024006 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
    switch( region )
 8024006:	2805      	cmp	r0, #5
 8024008:	d102      	bne.n	8024010 <RegionGetNvmCtx+0xa>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 802400a:	4608      	mov	r0, r1
 802400c:	f000 bcca 	b.w	80249a4 <RegionEU868GetNvmCtx>
        default:
        {
           return 0;
        }
    }
}
 8024010:	2000      	movs	r0, #0
 8024012:	4770      	bx	lr

08024014 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8024014:	4603      	mov	r3, r0
    switch( region )
 8024016:	2b05      	cmp	r3, #5
{
 8024018:	4608      	mov	r0, r1
 802401a:	4611      	mov	r1, r2
    switch( region )
 802401c:	d101      	bne.n	8024022 <RegionVerify+0xe>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 802401e:	f000 bcc9 	b.w	80249b4 <RegionEU868Verify>
        default:
        {
            return false;
        }
    }
}
 8024022:	2000      	movs	r0, #0
 8024024:	4770      	bx	lr

08024026 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 8024026:	2805      	cmp	r0, #5
 8024028:	d102      	bne.n	8024030 <RegionApplyCFList+0xa>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 802402a:	4608      	mov	r0, r1
 802402c:	f001 b80a 	b.w	8025044 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 8024030:	4770      	bx	lr

08024032 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 8024032:	2805      	cmp	r0, #5
 8024034:	d102      	bne.n	802403c <RegionChanMaskSet+0xa>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8024036:	4608      	mov	r0, r1
 8024038:	f000 bce4 	b.w	8024a04 <RegionEU868ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 802403c:	2000      	movs	r0, #0
 802403e:	4770      	bx	lr

08024040 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8024040:	b410      	push	{r4}
 8024042:	4604      	mov	r4, r0
    switch( region )
 8024044:	2c05      	cmp	r4, #5
{
 8024046:	4608      	mov	r0, r1
 8024048:	4611      	mov	r1, r2
 802404a:	461a      	mov	r2, r3
 802404c:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 802404e:	d103      	bne.n	8024058 <RegionComputeRxWindowParameters+0x18>
        default:
        {
            break;
        }
    }
}
 8024050:	f85d 4b04 	ldr.w	r4, [sp], #4
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8024054:	f000 bcf0 	b.w	8024a38 <RegionEU868ComputeRxWindowParameters>
}
 8024058:	f85d 4b04 	ldr.w	r4, [sp], #4
 802405c:	4770      	bx	lr

0802405e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 802405e:	4603      	mov	r3, r0
    switch( region )
 8024060:	2b05      	cmp	r3, #5
{
 8024062:	4608      	mov	r0, r1
 8024064:	4611      	mov	r1, r2
    switch( region )
 8024066:	d101      	bne.n	802406c <RegionRxConfig+0xe>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8024068:	f000 bd1a 	b.w	8024aa0 <RegionEU868RxConfig>
        default:
        {
            return false;
        }
    }
}
 802406c:	2000      	movs	r0, #0
 802406e:	4770      	bx	lr

08024070 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8024070:	b410      	push	{r4}
 8024072:	4604      	mov	r4, r0
    switch( region )
 8024074:	2c05      	cmp	r4, #5
{
 8024076:	4608      	mov	r0, r1
 8024078:	4611      	mov	r1, r2
 802407a:	461a      	mov	r2, r3
    switch( region )
 802407c:	d103      	bne.n	8024086 <RegionTxConfig+0x16>
        default:
        {
            return false;
        }
    }
}
 802407e:	f85d 4b04 	ldr.w	r4, [sp], #4
        EU868_TX_CONFIG( );
 8024082:	f000 bd8b 	b.w	8024b9c <RegionEU868TxConfig>
}
 8024086:	2000      	movs	r0, #0
 8024088:	f85d 4b04 	ldr.w	r4, [sp], #4
 802408c:	4770      	bx	lr

0802408e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 802408e:	b430      	push	{r4, r5}
 8024090:	4605      	mov	r5, r0
    switch( region )
 8024092:	2d05      	cmp	r5, #5
{
 8024094:	4608      	mov	r0, r1
 8024096:	4611      	mov	r1, r2
 8024098:	461a      	mov	r2, r3
 802409a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    switch( region )
 802409e:	d103      	bne.n	80240a8 <RegionLinkAdrReq+0x1a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80240a0:	9402      	str	r4, [sp, #8]
        default:
        {
            return 0;
        }
    }
}
 80240a2:	bc30      	pop	{r4, r5}
        EU868_LINK_ADR_REQ( );
 80240a4:	f000 bdf8 	b.w	8024c98 <RegionEU868LinkAdrReq>
}
 80240a8:	2000      	movs	r0, #0
 80240aa:	bc30      	pop	{r4, r5}
 80240ac:	4770      	bx	lr

080240ae <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 80240ae:	2805      	cmp	r0, #5
 80240b0:	d102      	bne.n	80240b8 <RegionRxParamSetupReq+0xa>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80240b2:	4608      	mov	r0, r1
 80240b4:	f000 be96 	b.w	8024de4 <RegionEU868RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 80240b8:	2000      	movs	r0, #0
 80240ba:	4770      	bx	lr

080240bc <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 80240bc:	2805      	cmp	r0, #5
 80240be:	d102      	bne.n	80240c6 <RegionNewChannelReq+0xa>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80240c0:	4608      	mov	r0, r1
 80240c2:	f000 bffd 	b.w	80250c0 <RegionEU868NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 80240c6:	2000      	movs	r0, #0
 80240c8:	4770      	bx	lr

080240ca <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 80240ca:	2805      	cmp	r0, #5
 80240cc:	d102      	bne.n	80240d4 <RegionTxParamSetupReq+0xa>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80240ce:	4608      	mov	r0, r1
 80240d0:	f000 beab 	b.w	8024e2a <RegionEU868TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 80240d4:	2000      	movs	r0, #0
 80240d6:	4770      	bx	lr

080240d8 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 80240d8:	2805      	cmp	r0, #5
 80240da:	d102      	bne.n	80240e2 <RegionDlChannelReq+0xa>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80240dc:	4608      	mov	r0, r1
 80240de:	f000 bea7 	b.w	8024e30 <RegionEU868DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 80240e2:	2000      	movs	r0, #0
 80240e4:	4770      	bx	lr

080240e6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80240e6:	4603      	mov	r3, r0
    switch( region )
 80240e8:	2b05      	cmp	r3, #5
{
 80240ea:	4608      	mov	r0, r1
 80240ec:	4611      	mov	r1, r2
    switch( region )
 80240ee:	d101      	bne.n	80240f4 <RegionAlternateDr+0xe>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80240f0:	f000 bec0 	b.w	8024e74 <RegionEU868AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 80240f4:	2000      	movs	r0, #0
 80240f6:	4770      	bx	lr

080240f8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80240f8:	b410      	push	{r4}
 80240fa:	4604      	mov	r4, r0
    switch( region )
 80240fc:	2c05      	cmp	r4, #5
{
 80240fe:	4608      	mov	r0, r1
 8024100:	4611      	mov	r1, r2
 8024102:	461a      	mov	r2, r3
 8024104:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 8024106:	d103      	bne.n	8024110 <RegionNextChannel+0x18>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 8024108:	f85d 4b04 	ldr.w	r4, [sp], #4
        EU868_NEXT_CHANNEL( );
 802410c:	f000 beb4 	b.w	8024e78 <RegionEU868NextChannel>
}
 8024110:	2009      	movs	r0, #9
 8024112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024116:	4770      	bx	lr

08024118 <RegionSetContinuousWave>:
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 8024118:	2805      	cmp	r0, #5
 802411a:	d102      	bne.n	8024122 <RegionSetContinuousWave+0xa>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 802411c:	4608      	mov	r0, r1
 802411e:	f000 bfef 	b.w	8025100 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 8024122:	4770      	bx	lr

08024124 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8024124:	b410      	push	{r4}
 8024126:	4604      	mov	r4, r0
    switch( region )
 8024128:	2c05      	cmp	r4, #5
{
 802412a:	4608      	mov	r0, r1
 802412c:	4611      	mov	r1, r2
 802412e:	461a      	mov	r2, r3
    switch( region )
 8024130:	d103      	bne.n	802413a <RegionApplyDrOffset+0x16>
        default:
        {
            return dr;
        }
    }
}
 8024132:	f85d 4b04 	ldr.w	r4, [sp], #4
        EU868_APPLY_DR_OFFSET( );
 8024136:	f001 b809 	b.w	802514c <RegionEU868ApplyDrOffset>
}
 802413a:	b2c8      	uxtb	r0, r1
 802413c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024140:	4770      	bx	lr
	...

08024144 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8024144:	4800      	ldr	r0, [pc, #0]	; (8024148 <RegionGetVersion+0x4>)
 8024146:	4770      	bx	lr
 8024148:	01000300 	.word	0x01000300

0802414c <RegionCommonChanVerifyDr>:
    }
    return dutyCycle;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 802414c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8024150:	429a      	cmp	r2, r3
{
 8024152:	9f07      	ldr	r7, [sp, #28]
    if( ( value >= min ) && ( value <= max ) )
 8024154:	db03      	blt.n	802415e <RegionCommonChanVerifyDr+0x12>
 8024156:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 802415a:	429a      	cmp	r2, r3
 802415c:	dd24      	ble.n	80241a8 <RegionCommonChanVerifyDr+0x5c>
        return false;
 802415e:	2000      	movs	r0, #0
}
 8024160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8024164:	f831 8014 	ldrh.w	r8, [r1, r4, lsl #1]
 8024168:	fb1e 7303 	smlabb	r3, lr, r3, r7
 802416c:	2500      	movs	r5, #0
 802416e:	fa48 f605 	asr.w	r6, r8, r5
 8024172:	07f6      	lsls	r6, r6, #31
 8024174:	d50e      	bpl.n	8024194 <RegionCommonChanVerifyDr+0x48>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8024176:	fb0e 3605 	mla	r6, lr, r5, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 802417a:	f896 c008 	ldrb.w	ip, [r6, #8]
 802417e:	f34c 1603 	sbfx	r6, ip, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 8024182:	f00c 0c0f 	and.w	ip, ip, #15
 8024186:	4562      	cmp	r2, ip
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8024188:	b276      	sxtb	r6, r6
    if( ( value >= min ) && ( value <= max ) )
 802418a:	db03      	blt.n	8024194 <RegionCommonChanVerifyDr+0x48>
 802418c:	f006 060f 	and.w	r6, r6, #15
 8024190:	42b2      	cmp	r2, r6
 8024192:	dd0d      	ble.n	80241b0 <RegionCommonChanVerifyDr+0x64>
        for( uint8_t j = 0; j < 16; j++ )
 8024194:	3501      	adds	r5, #1
 8024196:	2d10      	cmp	r5, #16
 8024198:	d1e9      	bne.n	802416e <RegionCommonChanVerifyDr+0x22>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 802419a:	3401      	adds	r4, #1
 802419c:	b2e4      	uxtb	r4, r4
 802419e:	0123      	lsls	r3, r4, #4
 80241a0:	b2db      	uxtb	r3, r3
 80241a2:	4298      	cmp	r0, r3
 80241a4:	d8de      	bhi.n	8024164 <RegionCommonChanVerifyDr+0x18>
 80241a6:	e7da      	b.n	802415e <RegionCommonChanVerifyDr+0x12>
 80241a8:	2400      	movs	r4, #0
 80241aa:	f04f 0e0c 	mov.w	lr, #12
 80241ae:	e7f6      	b.n	802419e <RegionCommonChanVerifyDr+0x52>
                    return true;
 80241b0:	2001      	movs	r0, #1
 80241b2:	e7d5      	b.n	8024160 <RegionCommonChanVerifyDr+0x14>

080241b4 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 80241b4:	4288      	cmp	r0, r1
 80241b6:	db04      	blt.n	80241c2 <RegionCommonValueInRange+0xe>
    {
        return 1;
 80241b8:	4290      	cmp	r0, r2
 80241ba:	bfcc      	ite	gt
 80241bc:	2000      	movgt	r0, #0
 80241be:	2001      	movle	r0, #1
 80241c0:	4770      	bx	lr
    }
    return 0;
 80241c2:	2000      	movs	r0, #0
}
 80241c4:	4770      	bx	lr

080241c6 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80241c6:	b510      	push	{r4, lr}
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80241c8:	0914      	lsrs	r4, r2, #4
 80241ca:	ebb4 1f11 	cmp.w	r4, r1, lsr #4
    uint8_t index = id / 16;
 80241ce:	ea4f 1311 	mov.w	r3, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80241d2:	d30f      	bcc.n	80241f4 <RegionCommonChanDisable+0x2e>
 80241d4:	4291      	cmp	r1, r2
 80241d6:	d20d      	bcs.n	80241f4 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80241d8:	b21a      	sxth	r2, r3
 80241da:	f001 010f 	and.w	r1, r1, #15
 80241de:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 80241e2:	2301      	movs	r3, #1
 80241e4:	fa03 f101 	lsl.w	r1, r3, r1
 80241e8:	ea24 0101 	bic.w	r1, r4, r1
 80241ec:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]

    return true;
 80241f0:	4618      	mov	r0, r3
}
 80241f2:	bd10      	pop	{r4, pc}
        return false;
 80241f4:	2000      	movs	r0, #0
 80241f6:	e7fc      	b.n	80241f2 <RegionCommonChanDisable+0x2c>

080241f8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80241f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 80241fa:	b128      	cbz	r0, 8024208 <RegionCommonCountChannels+0x10>
 80241fc:	eb00 0541 	add.w	r5, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8024200:	2601      	movs	r6, #1
    uint8_t nbChannels = 0;
 8024202:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8024204:	4291      	cmp	r1, r2
 8024206:	d300      	bcc.n	802420a <RegionCommonCountChannels+0x12>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 8024208:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 802420a:	2400      	movs	r4, #0
 802420c:	f835 7b02 	ldrh.w	r7, [r5], #2
    uint8_t nbActiveBits = 0;
 8024210:	4623      	mov	r3, r4
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8024212:	fa06 fc04 	lsl.w	ip, r6, r4
 8024216:	ea3c 0c07 	bics.w	ip, ip, r7
            nbActiveBits++;
 802421a:	bf08      	it	eq
 802421c:	3301      	addeq	r3, #1
 802421e:	f104 0401 	add.w	r4, r4, #1
 8024222:	bf08      	it	eq
 8024224:	b2db      	uxtbeq	r3, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 8024226:	2c10      	cmp	r4, #16
 8024228:	d1f3      	bne.n	8024212 <RegionCommonCountChannels+0x1a>
        nbChannels += CountChannels( channelsMask[i], 16 );
 802422a:	4418      	add	r0, r3
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 802422c:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 802422e:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8024230:	b2c9      	uxtb	r1, r1
 8024232:	e7e7      	b.n	8024204 <RegionCommonCountChannels+0xc>

08024234 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8024234:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8024236:	b100      	cbz	r0, 802423a <RegionCommonChanMaskCopy+0x6>
 8024238:	b949      	cbnz	r1, 802424e <RegionCommonChanMaskCopy+0x1a>
        for( uint8_t i = 0; i < len; i++ )
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 802423a:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 802423c:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8024240:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8024244:	3301      	adds	r3, #1
 8024246:	b2dc      	uxtb	r4, r3
 8024248:	42a2      	cmp	r2, r4
 802424a:	d8f7      	bhi.n	802423c <RegionCommonChanMaskCopy+0x8>
 802424c:	e7f5      	b.n	802423a <RegionCommonChanMaskCopy+0x6>
 802424e:	2300      	movs	r3, #0
 8024250:	e7f9      	b.n	8024246 <RegionCommonChanMaskCopy+0x12>

08024252 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8024252:	b082      	sub	sp, #8
 8024254:	b530      	push	{r4, r5, lr}
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8024256:	8804      	ldrh	r4, [r0, #0]
{
 8024258:	9304      	str	r3, [sp, #16]
    if( joined == false )
 802425a:	b972      	cbnz	r2, 802427a <RegionCommonSetBandTxDone+0x28>
    if( elapsedTime.Seconds < 3600 )
 802425c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8024260:	d319      	bcc.n	8024296 <RegionCommonSetBandTxDone+0x44>
        dutyCycle = BACKOFF_DC_24_HOURS;
 8024262:	f649 25af 	movw	r5, #39599	; 0x9aaf
 8024266:	f242 7210 	movw	r2, #10000	; 0x2710
 802426a:	42ab      	cmp	r3, r5
 802426c:	bf8c      	ite	hi
 802426e:	4613      	movhi	r3, r2
 8024270:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8024274:	429c      	cmp	r4, r3
 8024276:	bf38      	it	cc
 8024278:	461c      	movcc	r4, r3

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 802427a:	2c01      	cmp	r4, #1
 802427c:	bf38      	it	cc
 802427e:	2401      	movcc	r4, #1
 8024280:	4361      	muls	r1, r4
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8024282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8024286:	6883      	ldr	r3, [r0, #8]
 8024288:	428b      	cmp	r3, r1
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 802428a:	bf8c      	ite	hi
 802428c:	1a59      	subhi	r1, r3, r1
        band->TimeCredits = 0;
 802428e:	2100      	movls	r1, #0
 8024290:	6081      	str	r1, [r0, #8]
}
 8024292:	b002      	add	sp, #8
 8024294:	4770      	bx	lr
        dutyCycle = BACKOFF_DC_1_HOUR;
 8024296:	2364      	movs	r3, #100	; 0x64
 8024298:	e7ec      	b.n	8024274 <RegionCommonSetBandTxDone+0x22>
	...

0802429c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 802429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242a0:	b085      	sub	sp, #20
 80242a2:	461f      	mov	r7, r3
 80242a4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80242a8:	9302      	str	r3, [sp, #8]
 80242aa:	460c      	mov	r4, r1
 80242ac:	4691      	mov	r9, r2
 80242ae:	4606      	mov	r6, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80242b0:	f002 fcd4 	bl	8026c5c <UTIL_TIMER_GetCurrentTime>
 80242b4:	2214      	movs	r2, #20
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 80242b6:	4932      	ldr	r1, [pc, #200]	; (8024380 <RegionCommonUpdateBandTimeOff+0xe4>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80242b8:	9001      	str	r0, [sp, #4]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 80242ba:	fb12 4909 	smlabb	r9, r2, r9, r4
    uint8_t validBands = 0;
 80242be:	2500      	movs	r5, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80242c0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
        dutyCycle = BACKOFF_DC_1_HOUR;
 80242c4:	f04f 0b64 	mov.w	fp, #100	; 0x64
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 80242c8:	f649 2aaf 	movw	sl, #39599	; 0x9aaf
    for( uint8_t i = 0; i < nbBands; i++ )
 80242cc:	45a1      	cmp	r9, r4
 80242ce:	d107      	bne.n	80242e0 <RegionCommonUpdateBandTimeOff+0x44>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80242d0:	2d00      	cmp	r5, #0
    }
    return minTimeToWait;
}
 80242d2:	bf14      	ite	ne
 80242d4:	4640      	movne	r0, r8
 80242d6:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 80242da:	b005      	add	sp, #20
 80242dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80242e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    uint16_t dutyCycle = band->DCycle;
 80242e2:	8822      	ldrh	r2, [r4, #0]
    if( joined == false )
 80242e4:	b95e      	cbnz	r6, 80242fe <RegionCommonUpdateBandTimeOff+0x62>
    if( elapsedTime.Seconds < 3600 )
 80242e6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80242ea:	d31d      	bcc.n	8024328 <RegionCommonUpdateBandTimeOff+0x8c>
        dutyCycle = BACKOFF_DC_24_HOURS;
 80242ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80242f0:	4553      	cmp	r3, sl
 80242f2:	bf98      	it	ls
 80242f4:	f44f 707a 	movls.w	r0, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80242f8:	4282      	cmp	r2, r0
 80242fa:	bf38      	it	cc
 80242fc:	4602      	movcc	r2, r0
    if( dutyCycle == 0 )
 80242fe:	2a01      	cmp	r2, #1
 8024300:	bf38      	it	cc
 8024302:	2201      	movcc	r2, #1
    if( joined == false )
 8024304:	b996      	cbnz	r6, 802432c <RegionCommonUpdateBandTimeOff+0x90>
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 8024306:	fbb2 f0fb 	udiv	r0, r2, fp
 802430a:	b2c0      	uxtb	r0, r0
    if( band->LastBandUpdateTime == 0 )
 802430c:	f8d4 c004 	ldr.w	ip, [r4, #4]
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 8024310:	4348      	muls	r0, r1
 8024312:	60e0      	str	r0, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 8024314:	f1bc 0f00 	cmp.w	ip, #0
 8024318:	d100      	bne.n	802431c <RegionCommonUpdateBandTimeOff+0x80>
        band->TimeCredits = band->MaxTimeCredits;
 802431a:	60a0      	str	r0, [r4, #8]
    if( joined == false )
 802431c:	b946      	cbnz	r6, 8024330 <RegionCommonUpdateBandTimeOff+0x94>
        if( ( dutyCycleEnabled == false ) &&
 802431e:	b94f      	cbnz	r7, 8024334 <RegionCommonUpdateBandTimeOff+0x98>
 8024320:	9b02      	ldr	r3, [sp, #8]
 8024322:	b93b      	cbnz	r3, 8024334 <RegionCommonUpdateBandTimeOff+0x98>
            band->TimeCredits = band->MaxTimeCredits;
 8024324:	60a0      	str	r0, [r4, #8]
 8024326:	e005      	b.n	8024334 <RegionCommonUpdateBandTimeOff+0x98>
        dutyCycle = BACKOFF_DC_1_HOUR;
 8024328:	2064      	movs	r0, #100	; 0x64
 802432a:	e7e5      	b.n	80242f8 <RegionCommonUpdateBandTimeOff+0x5c>
    uint8_t timePeriodFactor = 1;
 802432c:	2001      	movs	r0, #1
 802432e:	e7ed      	b.n	802430c <RegionCommonUpdateBandTimeOff+0x70>
        if( dutyCycleEnabled == false )
 8024330:	2f00      	cmp	r7, #0
 8024332:	d0f7      	beq.n	8024324 <RegionCommonUpdateBandTimeOff+0x88>
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8024334:	4660      	mov	r0, ip
 8024336:	9203      	str	r2, [sp, #12]
 8024338:	f002 fc9a 	bl	8026c70 <UTIL_TIMER_GetElapsedTime>
 802433c:	68a3      	ldr	r3, [r4, #8]
    band->LastBandUpdateTime = currentTime;
 802433e:	9a01      	ldr	r2, [sp, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8024340:	9911      	ldr	r1, [sp, #68]	; 0x44
    band->LastBandUpdateTime = currentTime;
 8024342:	6062      	str	r2, [r4, #4]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8024344:	4418      	add	r0, r3
    if( band->TimeCredits > band->MaxTimeCredits )
 8024346:	68e3      	ldr	r3, [r4, #12]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8024348:	9a03      	ldr	r2, [sp, #12]
        band->TimeCredits = band->MaxTimeCredits;
 802434a:	4298      	cmp	r0, r3
 802434c:	bf28      	it	cs
 802434e:	4618      	movcs	r0, r3
        creditCosts = expectedTimeOnAir * dutyCycle;
 8024350:	434a      	muls	r2, r1
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8024352:	4290      	cmp	r0, r2
 8024354:	490a      	ldr	r1, [pc, #40]	; (8024380 <RegionCommonUpdateBandTimeOff+0xe4>)
        band->TimeCredits = band->MaxTimeCredits;
 8024356:	60a0      	str	r0, [r4, #8]
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8024358:	d800      	bhi.n	802435c <RegionCommonUpdateBandTimeOff+0xc0>
 802435a:	b92f      	cbnz	r7, 8024368 <RegionCommonUpdateBandTimeOff+0xcc>
            bands[i].ReadyForTransmission = true;
 802435c:	2201      	movs	r2, #1
 802435e:	7422      	strb	r2, [r4, #16]
            validBands++;
 8024360:	4415      	add	r5, r2
                validBands++;
 8024362:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < nbBands; i++ )
 8024364:	3414      	adds	r4, #20
 8024366:	e7b1      	b.n	80242cc <RegionCommonUpdateBandTimeOff+0x30>
            bands[i].ReadyForTransmission = false;
 8024368:	f04f 0e00 	mov.w	lr, #0
            if( bands[i].MaxTimeCredits > creditCosts )
 802436c:	429a      	cmp	r2, r3
            bands[i].ReadyForTransmission = false;
 802436e:	f884 e010 	strb.w	lr, [r4, #16]
            if( bands[i].MaxTimeCredits > creditCosts )
 8024372:	d2f7      	bcs.n	8024364 <RegionCommonUpdateBandTimeOff+0xc8>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8024374:	1a12      	subs	r2, r2, r0
 8024376:	4590      	cmp	r8, r2
 8024378:	bf28      	it	cs
 802437a:	4690      	movcs	r8, r2
                validBands++;
 802437c:	3501      	adds	r5, #1
 802437e:	e7f0      	b.n	8024362 <RegionCommonUpdateBandTimeOff+0xc6>
 8024380:	0036ee80 	.word	0x0036ee80

08024384 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8024384:	7803      	ldrb	r3, [r0, #0]
 8024386:	2b03      	cmp	r3, #3
 8024388:	d114      	bne.n	80243b4 <RegionCommonParseLinkAdrReq+0x30>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 802438a:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 802438c:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8024390:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8024392:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8024394:	704b      	strb	r3, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8024396:	7883      	ldrb	r3, [r0, #2]
 8024398:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 802439a:	78c2      	ldrb	r2, [r0, #3]
 802439c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80243a0:	808b      	strh	r3, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80243a2:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80243a4:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 80243a8:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80243ac:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 80243ae:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80243b0:	2005      	movs	r0, #5
 80243b2:	4770      	bx	lr
    uint8_t retIndex = 0;
 80243b4:	2000      	movs	r0, #0
    }
    return retIndex;
}
 80243b6:	4770      	bx	lr

080243b8 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80243b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80243bc:	4698      	mov	r8, r3
    int8_t datarate = verifyParams->Datarate;
    int8_t txPower = verifyParams->TxPower;
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80243be:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 80243c0:	7905      	ldrb	r5, [r0, #4]
    int8_t txPower = verifyParams->TxPower;
 80243c2:	f990 7007 	ldrsb.w	r7, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 80243c6:	7a06      	ldrb	r6, [r0, #8]
{
 80243c8:	4691      	mov	r9, r2
 80243ca:	4604      	mov	r4, r0
    int8_t datarate = verifyParams->Datarate;
 80243cc:	f990 2006 	ldrsb.w	r2, [r0, #6]
{
 80243d0:	468a      	mov	sl, r1
    if( verifyParams->AdrEnabled == false )
 80243d2:	b31b      	cbz	r3, 802441c <RegionCommonLinkAdrReqVerifyParams+0x64>
    int8_t nbRepetitions = verifyParams->NbRep;
 80243d4:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 80243d6:	b1bd      	cbz	r5, 8024408 <RegionCommonLinkAdrReqVerifyParams+0x50>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80243d8:	69a3      	ldr	r3, [r4, #24]
 80243da:	9301      	str	r3, [sp, #4]
 80243dc:	f994 3015 	ldrsb.w	r3, [r4, #21]
 80243e0:	9300      	str	r3, [sp, #0]
 80243e2:	6921      	ldr	r1, [r4, #16]
 80243e4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80243e8:	7b20      	ldrb	r0, [r4, #12]
 80243ea:	f7ff feaf 	bl	802414c <RegionCommonChanVerifyDr>
 80243ee:	b908      	cbnz	r0, 80243f4 <RegionCommonLinkAdrReqVerifyParams+0x3c>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 80243f0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80243f4:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80243f8:	f994 101c 	ldrsb.w	r1, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 80243fc:	42bb      	cmp	r3, r7
 80243fe:	dc14      	bgt.n	802442a <RegionCommonLinkAdrReqVerifyParams+0x72>
 8024400:	42b9      	cmp	r1, r7
 8024402:	da13      	bge.n	802442c <RegionCommonLinkAdrReqVerifyParams+0x74>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8024404:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 8024408:	4628      	mov	r0, r5
    *dr = datarate;
 802440a:	f88a 2000 	strb.w	r2, [sl]
    *txPow = txPower;
 802440e:	f889 7000 	strb.w	r7, [r9]
    *nbRep = nbRepetitions;
 8024412:	f888 6000 	strb.w	r6, [r8]
}
 8024416:	b002      	add	sp, #8
 8024418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nbRepetitions = verifyParams->CurrentNbRep;
 802441c:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8024420:	f990 2009 	ldrsb.w	r2, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8024424:	f990 700a 	ldrsb.w	r7, [r0, #10]
 8024428:	e7d5      	b.n	80243d6 <RegionCommonLinkAdrReqVerifyParams+0x1e>
 802442a:	461f      	mov	r7, r3
    if( status == 0x07 )
 802442c:	2d07      	cmp	r5, #7
 802442e:	d1eb      	bne.n	8024408 <RegionCommonLinkAdrReqVerifyParams+0x50>
            nbRepetitions = 1;
 8024430:	2e00      	cmp	r6, #0
 8024432:	bf08      	it	eq
 8024434:	2601      	moveq	r6, #1
 8024436:	e7e7      	b.n	8024408 <RegionCommonLinkAdrReqVerifyParams+0x50>

08024438 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return (1000000000UL/bandwidth) * (1 << phyDr);
 8024438:	4b02      	ldr	r3, [pc, #8]	; (8024444 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 802443a:	fbb3 f1f1 	udiv	r1, r3, r1
}
 802443e:	fa01 f000 	lsl.w	r0, r1, r0
 8024442:	4770      	bx	lr
 8024444:	3b9aca00 	.word	0x3b9aca00

08024448 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
    // ((8 * 1000000) / 50);
    return 160000UL;
}
 8024448:	4800      	ldr	r0, [pc, #0]	; (802444c <RegionCommonComputeSymbolTimeFsk+0x4>)
 802444a:	4770      	bx	lr
 802444c:	00027100 	.word	0x00027100

08024450 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8024450:	b530      	push	{r4, r5, lr}
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 8024452:	4d10      	ldr	r5, [pc, #64]	; (8024494 <RegionCommonComputeRxWindowParameters+0x44>)
 8024454:	1e44      	subs	r4, r0, #1
 8024456:	fb05 4202 	mla	r2, r5, r2, r4
 802445a:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
 802445e:	3c04      	subs	r4, #4
 8024460:	fbb2 f2f0 	udiv	r2, r2, r0
 8024464:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8024468:	428a      	cmp	r2, r1
 802446a:	bf38      	it	cc
 802446c:	460a      	movcc	r2, r1
 802446e:	9903      	ldr	r1, [sp, #12]
 8024470:	600a      	str	r2, [r1, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8024472:	4342      	muls	r2, r0
 8024474:	0852      	lsrs	r2, r2, #1
 8024476:	ebc2 0180 	rsb	r1, r2, r0, lsl #2
 802447a:	43db      	mvns	r3, r3
 802447c:	f501 2074 	add.w	r0, r1, #999424	; 0xf4000
 8024480:	4a05      	ldr	r2, [pc, #20]	; (8024498 <RegionCommonComputeRxWindowParameters+0x48>)
 8024482:	f200 203f 	addw	r0, r0, #575	; 0x23f
 8024486:	fb90 f0f2 	sdiv	r0, r0, r2
 802448a:	4418      	add	r0, r3
 802448c:	9b04      	ldr	r3, [sp, #16]
 802448e:	6018      	str	r0, [r3, #0]
}
 8024490:	bd30      	pop	{r4, r5, pc}
 8024492:	bf00      	nop
 8024494:	001e8480 	.word	0x001e8480
 8024498:	000f4240 	.word	0x000f4240

0802449c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 802449c:	0040      	lsls	r0, r0, #1
 802449e:	ee07 0a90 	vmov	s15, r0
 80244a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 80244a6:	b508      	push	{r3, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80244a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80244ac:	ee70 7a60 	vsub.f32	s15, s0, s1
 80244b0:	ee17 0a90 	vmov	r0, s15
 80244b4:	f7f4 f930 	bl	8018718 <__aeabi_f2d>
 80244b8:	ec41 0b10 	vmov	d0, r0, r1
 80244bc:	f002 fdfc 	bl	80270b8 <floor>
 80244c0:	ec51 0b10 	vmov	r0, r1, d0
 80244c4:	f7f4 fc1a 	bl	8018cfc <__aeabi_d2iz>

    return phyTxPower;
}
 80244c8:	b240      	sxtb	r0, r0
 80244ca:	bd08      	pop	{r3, pc}

080244cc <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80244cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244d0:	e9cd 2300 	strd	r2, r3, [sp]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80244d4:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 80244d6:	461d      	mov	r5, r3
    uint8_t nbChannelCount = 0;
 80244d8:	461e      	mov	r6, r3
    {
        for( uint8_t j = 0; j < 16; j++ )
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80244da:	f04f 080c 	mov.w	r8, #12
 80244de:	011a      	lsls	r2, r3, #4
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80244e0:	8a04      	ldrh	r4, [r0, #16]
 80244e2:	fa5f fe82 	uxtb.w	lr, r2
 80244e6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80244ea:	4294      	cmp	r4, r2
 80244ec:	d806      	bhi.n	80244fc <RegionCommonCountNbOfEnabledChannels+0x30>
                }
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80244ee:	9b00      	ldr	r3, [sp, #0]
 80244f0:	701e      	strb	r6, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80244f2:	9b01      	ldr	r3, [sp, #4]
 80244f4:	701d      	strb	r5, [r3, #0]
}
 80244f6:	b003      	add	sp, #12
 80244f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80244fc:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8024500:	2200      	movs	r2, #0
 8024502:	6844      	ldr	r4, [r0, #4]
 8024504:	f834 4009 	ldrh.w	r4, [r4, r9]
 8024508:	4114      	asrs	r4, r2
 802450a:	07e7      	lsls	r7, r4, #31
 802450c:	d528      	bpl.n	8024560 <RegionCommonCountNbOfEnabledChannels+0x94>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 802450e:	eb02 0c0e 	add.w	ip, r2, lr
 8024512:	6887      	ldr	r7, [r0, #8]
 8024514:	fb08 f40c 	mul.w	r4, r8, ip
 8024518:	eb07 0a04 	add.w	sl, r7, r4
 802451c:	593c      	ldr	r4, [r7, r4]
 802451e:	b1fc      	cbz	r4, 8024560 <RegionCommonCountNbOfEnabledChannels+0x94>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8024520:	7804      	ldrb	r4, [r0, #0]
 8024522:	b924      	cbnz	r4, 802452e <RegionCommonCountNbOfEnabledChannels+0x62>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 8024524:	8a44      	ldrh	r4, [r0, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8024526:	b114      	cbz	r4, 802452e <RegionCommonCountNbOfEnabledChannels+0x62>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8024528:	4114      	asrs	r4, r2
 802452a:	07e4      	lsls	r4, r4, #31
 802452c:	d518      	bpl.n	8024560 <RegionCommonCountNbOfEnabledChannels+0x94>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 802452e:	f89a 4008 	ldrb.w	r4, [sl, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8024532:	f990 b001 	ldrsb.w	fp, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8024536:	f344 0703 	sbfx	r7, r4, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 802453a:	b27f      	sxtb	r7, r7
 802453c:	455f      	cmp	r7, fp
 802453e:	dc0f      	bgt.n	8024560 <RegionCommonCountNbOfEnabledChannels+0x94>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8024540:	f344 1403 	sbfx	r4, r4, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 8024544:	b264      	sxtb	r4, r4
 8024546:	455c      	cmp	r4, fp
 8024548:	db0a      	blt.n	8024560 <RegionCommonCountNbOfEnabledChannels+0x94>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 802454a:	f89a 4009 	ldrb.w	r4, [sl, #9]
 802454e:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8024552:	68c4      	ldr	r4, [r0, #12]
 8024554:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8024558:	7c24      	ldrb	r4, [r4, #16]
 802455a:	b93c      	cbnz	r4, 802456c <RegionCommonCountNbOfEnabledChannels+0xa0>
                    nbRestrictedChannelsCount++;
 802455c:	3501      	adds	r5, #1
 802455e:	b2ed      	uxtb	r5, r5
        for( uint8_t j = 0; j < 16; j++ )
 8024560:	3201      	adds	r2, #1
 8024562:	2a10      	cmp	r2, #16
 8024564:	d1cd      	bne.n	8024502 <RegionCommonCountNbOfEnabledChannels+0x36>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8024566:	3301      	adds	r3, #1
 8024568:	b2db      	uxtb	r3, r3
 802456a:	e7b8      	b.n	80244de <RegionCommonCountNbOfEnabledChannels+0x12>
                enabledChannels[nbChannelCount++] = i + j;
 802456c:	1c74      	adds	r4, r6, #1
 802456e:	f801 c006 	strb.w	ip, [r1, r6]
 8024572:	b2e6      	uxtb	r6, r4
 8024574:	e7f4      	b.n	8024560 <RegionCommonCountNbOfEnabledChannels+0x94>

08024576 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8024576:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802457a:	4604      	mov	r4, r0
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 802457c:	6840      	ldr	r0, [r0, #4]
{
 802457e:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8024582:	461e      	mov	r6, r3
 8024584:	468a      	mov	sl, r1
 8024586:	4691      	mov	r9, r2
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8024588:	f002 fb72 	bl	8026c70 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 802458c:	6823      	ldr	r3, [r4, #0]
 802458e:	1a1b      	subs	r3, r3, r0
 8024590:	f8c8 3000 	str.w	r3, [r8]
    *nbRestrictedChannels = 1;
    *nbEnabledChannels = 0;
 8024594:	2500      	movs	r5, #0
    *nbRestrictedChannels = 1;
 8024596:	2301      	movs	r3, #1
 8024598:	703b      	strb	r3, [r7, #0]
    *nbEnabledChannels = 0;
 802459a:	7035      	strb	r5, [r6, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 802459c:	6863      	ldr	r3, [r4, #4]
 802459e:	b113      	cbz	r3, 80245a6 <RegionCommonIdentifyChannels+0x30>
 80245a0:	6823      	ldr	r3, [r4, #0]
 80245a2:	4283      	cmp	r3, r0
 80245a4:	d825      	bhi.n	80245f2 <RegionCommonIdentifyChannels+0x7c>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80245a6:	f8ca 5000 	str.w	r5, [sl]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80245aa:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 80245ae:	69a3      	ldr	r3, [r4, #24]
 80245b0:	f89c e000 	ldrb.w	lr, [ip]
 80245b4:	9303      	str	r3, [sp, #12]
 80245b6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80245ba:	ab01      	add	r3, sp, #4
 80245bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80245c0:	7d23      	ldrb	r3, [r4, #20]
 80245c2:	9300      	str	r3, [sp, #0]
 80245c4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80245c8:	7a23      	ldrb	r3, [r4, #8]
 80245ca:	7a62      	ldrb	r2, [r4, #9]
 80245cc:	4670      	mov	r0, lr
 80245ce:	f7ff fe65 	bl	802429c <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80245d2:	463b      	mov	r3, r7
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80245d4:	f8c8 0000 	str.w	r0, [r8]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80245d8:	4632      	mov	r2, r6
 80245da:	69e0      	ldr	r0, [r4, #28]
 80245dc:	4649      	mov	r1, r9
 80245de:	f7ff ff75 	bl	80244cc <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80245e2:	7833      	ldrb	r3, [r6, #0]
 80245e4:	b12b      	cbz	r3, 80245f2 <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
 80245e6:	f8c8 5000 	str.w	r5, [r8]
        return LORAMAC_STATUS_OK;
 80245ea:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 80245ec:	b004      	add	sp, #16
 80245ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( *nbRestrictedChannels > 0 )
 80245f2:	783b      	ldrb	r3, [r7, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80245f4:	2b00      	cmp	r3, #0
 80245f6:	bf14      	ite	ne
 80245f8:	200b      	movne	r0, #11
 80245fa:	200c      	moveq	r0, #12
 80245fc:	e7f6      	b.n	80245ec <RegionCommonIdentifyChannels+0x76>
	...

08024600 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8024600:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8024602:	4d13      	ldr	r5, [pc, #76]	; (8024650 <RegionCommonRxConfigPrint+0x50>)
{
 8024604:	4606      	mov	r6, r0
 8024606:	460f      	mov	r7, r1
 8024608:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 802460a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 802460c:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 802460e:	ac04      	add	r4, sp, #16
 8024610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024612:	e895 0003 	ldmia.w	r5, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8024616:	2e05      	cmp	r6, #5
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8024618:	e884 0003 	stmia.w	r4, {r0, r1}
    if ( rxSlot < RX_SLOT_NONE )
 802461c:	d80f      	bhi.n	802463e <RegionCommonRxConfigPrint+0x3e>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 802461e:	ab0a      	add	r3, sp, #40	; 0x28
 8024620:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 8024624:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8024628:	2201      	movs	r2, #1
 802462a:	f856 3c18 	ldr.w	r3, [r6, #-24]
 802462e:	9300      	str	r3, [sp, #0]
 8024630:	2100      	movs	r1, #0
 8024632:	4b08      	ldr	r3, [pc, #32]	; (8024654 <RegionCommonRxConfigPrint+0x54>)
 8024634:	2002      	movs	r0, #2
 8024636:	f002 f943 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 802463a:	b00b      	add	sp, #44	; 0x2c
 802463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 802463e:	e9cd 7c00 	strd	r7, ip, [sp]
 8024642:	4b05      	ldr	r3, [pc, #20]	; (8024658 <RegionCommonRxConfigPrint+0x58>)
 8024644:	2201      	movs	r2, #1
 8024646:	2100      	movs	r1, #0
 8024648:	2002      	movs	r0, #2
 802464a:	f002 f939 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
}
 802464e:	e7f4      	b.n	802463a <RegionCommonRxConfigPrint+0x3a>
 8024650:	080277c0 	.word	0x080277c0
 8024654:	0802811f 	.word	0x0802811f
 8024658:	0802813e 	.word	0x0802813e

0802465c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 802465c:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 802465e:	4b05      	ldr	r3, [pc, #20]	; (8024674 <RegionCommonTxConfigPrint+0x18>)
 8024660:	e9cd 0100 	strd	r0, r1, [sp]
 8024664:	2201      	movs	r2, #1
 8024666:	2100      	movs	r1, #0
 8024668:	2002      	movs	r0, #2
 802466a:	f002 f929 	bl	80268c0 <UTIL_ADV_TRACE_COND_FSend>
}
 802466e:	b003      	add	sp, #12
 8024670:	f85d fb04 	ldr.w	pc, [sp], #4
 8024674:	0802815a 	.word	0x0802815a

08024678 <GetBandwidth>:
    return nextLowerDr;
}

static uint32_t GetBandwidth( uint32_t drIndex )
{
    switch( BandwidthsEU868[drIndex] )
 8024678:	4b06      	ldr	r3, [pc, #24]	; (8024694 <GetBandwidth+0x1c>)
 802467a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802467e:	4b06      	ldr	r3, [pc, #24]	; (8024698 <GetBandwidth+0x20>)
 8024680:	4298      	cmp	r0, r3
 8024682:	d005      	beq.n	8024690 <GetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8024684:	4b05      	ldr	r3, [pc, #20]	; (802469c <GetBandwidth+0x24>)
 8024686:	4298      	cmp	r0, r3
 8024688:	bf0c      	ite	eq
 802468a:	2002      	moveq	r0, #2
 802468c:	2000      	movne	r0, #0
 802468e:	4770      	bx	lr
    switch( BandwidthsEU868[drIndex] )
 8024690:	2001      	movs	r0, #1
    }
}
 8024692:	4770      	bx	lr
 8024694:	080277d8 	.word	0x080277d8
 8024698:	0003d090 	.word	0x0003d090
 802469c:	0007a120 	.word	0x0007a120

080246a0 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80246a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int8_t phyDr = DataratesEU868[datarate];
 80246a2:	4b11      	ldr	r3, [pc, #68]	; (80246e8 <GetTimeOnAir+0x48>)
 80246a4:	4403      	add	r3, r0
{
 80246a6:	4605      	mov	r5, r0
    int8_t phyDr = DataratesEU868[datarate];
 80246a8:	f993 2020 	ldrsb.w	r2, [r3, #32]
{
 80246ac:	460c      	mov	r4, r1
    uint32_t bandwidth = GetBandwidth( datarate );
 80246ae:	f7ff ffe3 	bl	8024678 <GetBandwidth>
 80246b2:	4b0e      	ldr	r3, [pc, #56]	; (80246ec <GetTimeOnAir+0x4c>)
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 80246b4:	2d07      	cmp	r5, #7
 80246b6:	b2e4      	uxtb	r4, r4
 80246b8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80246ba:	f04f 0301 	mov.w	r3, #1
    uint32_t bandwidth = GetBandwidth( datarate );
 80246be:	4601      	mov	r1, r0
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80246c0:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80246c4:	bf03      	ittte	eq
 80246c6:	2005      	moveq	r0, #5
 80246c8:	2300      	moveq	r3, #0
 80246ca:	e9cd 0300 	strdeq	r0, r3, [sp]
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80246ce:	2008      	movne	r0, #8
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80246d0:	bf0d      	iteet	eq
 80246d2:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80246d6:	2400      	movne	r4, #0
 80246d8:	e9cd 0400 	strdne	r0, r4, [sp]
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80246dc:	4342      	muleq	r2, r0
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80246de:	4618      	mov	r0, r3
 80246e0:	47b0      	blx	r6
    }
    return timeOnAir;
}
 80246e2:	b004      	add	sp, #16
 80246e4:	bd70      	pop	{r4, r5, r6, pc}
 80246e6:	bf00      	nop
 80246e8:	080277d8 	.word	0x080277d8
 80246ec:	08027928 	.word	0x08027928

080246f0 <VerifyRfFreq>:
{
 80246f0:	b538      	push	{r3, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 80246f2:	4b19      	ldr	r3, [pc, #100]	; (8024758 <VerifyRfFreq+0x68>)
 80246f4:	6a1b      	ldr	r3, [r3, #32]
{
 80246f6:	4605      	mov	r5, r0
 80246f8:	460c      	mov	r4, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 80246fa:	4798      	blx	r3
 80246fc:	b130      	cbz	r0, 802470c <VerifyRfFreq+0x1c>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80246fe:	4b17      	ldr	r3, [pc, #92]	; (802475c <VerifyRfFreq+0x6c>)
 8024700:	4a17      	ldr	r2, [pc, #92]	; (8024760 <VerifyRfFreq+0x70>)
 8024702:	442b      	add	r3, r5
 8024704:	4293      	cmp	r3, r2
 8024706:	d802      	bhi.n	802470e <VerifyRfFreq+0x1e>
        *band = 2;
 8024708:	2302      	movs	r3, #2
        *band = 3;
 802470a:	7023      	strb	r3, [r4, #0]
}
 802470c:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 802470e:	4b15      	ldr	r3, [pc, #84]	; (8024764 <VerifyRfFreq+0x74>)
 8024710:	4a15      	ldr	r2, [pc, #84]	; (8024768 <VerifyRfFreq+0x78>)
 8024712:	442b      	add	r3, r5
 8024714:	4293      	cmp	r3, r2
 8024716:	d801      	bhi.n	802471c <VerifyRfFreq+0x2c>
        *band = 0;
 8024718:	2300      	movs	r3, #0
 802471a:	e7f6      	b.n	802470a <VerifyRfFreq+0x1a>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 802471c:	4b13      	ldr	r3, [pc, #76]	; (802476c <VerifyRfFreq+0x7c>)
 802471e:	4a14      	ldr	r2, [pc, #80]	; (8024770 <VerifyRfFreq+0x80>)
 8024720:	442b      	add	r3, r5
 8024722:	4293      	cmp	r3, r2
 8024724:	d801      	bhi.n	802472a <VerifyRfFreq+0x3a>
        *band = 1;
 8024726:	2301      	movs	r3, #1
 8024728:	e7ef      	b.n	802470a <VerifyRfFreq+0x1a>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 802472a:	4b12      	ldr	r3, [pc, #72]	; (8024774 <VerifyRfFreq+0x84>)
 802472c:	4a12      	ldr	r2, [pc, #72]	; (8024778 <VerifyRfFreq+0x88>)
 802472e:	442b      	add	r3, r5
 8024730:	4293      	cmp	r3, r2
 8024732:	d801      	bhi.n	8024738 <VerifyRfFreq+0x48>
        *band = 5;
 8024734:	2305      	movs	r3, #5
 8024736:	e7e8      	b.n	802470a <VerifyRfFreq+0x1a>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8024738:	4b10      	ldr	r3, [pc, #64]	; (802477c <VerifyRfFreq+0x8c>)
 802473a:	4a11      	ldr	r2, [pc, #68]	; (8024780 <VerifyRfFreq+0x90>)
 802473c:	442b      	add	r3, r5
 802473e:	4293      	cmp	r3, r2
 8024740:	d801      	bhi.n	8024746 <VerifyRfFreq+0x56>
        *band = 3;
 8024742:	2303      	movs	r3, #3
 8024744:	e7e1      	b.n	802470a <VerifyRfFreq+0x1a>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8024746:	4b0f      	ldr	r3, [pc, #60]	; (8024784 <VerifyRfFreq+0x94>)
 8024748:	4a0f      	ldr	r2, [pc, #60]	; (8024788 <VerifyRfFreq+0x98>)
 802474a:	442b      	add	r3, r5
 802474c:	4293      	cmp	r3, r2
 802474e:	d801      	bhi.n	8024754 <VerifyRfFreq+0x64>
        *band = 4;
 8024750:	2304      	movs	r3, #4
 8024752:	e7da      	b.n	802470a <VerifyRfFreq+0x1a>
        return false;
 8024754:	2000      	movs	r0, #0
 8024756:	e7d9      	b.n	802470c <VerifyRfFreq+0x1c>
 8024758:	08027928 	.word	0x08027928
 802475c:	cc8faa40 	.word	0xcc8faa40
 8024760:	001e847f 	.word	0x001e847f
 8024764:	cc7125c0 	.word	0xcc7125c0
 8024768:	002dc6c0 	.word	0x002dc6c0
 802476c:	cc435eff 	.word	0xcc435eff
 8024770:	000927bf 	.word	0x000927bf
 8024774:	cc38b0a0 	.word	0xcc38b0a0
 8024778:	0007a120 	.word	0x0007a120
 802477c:	cc2e0240 	.word	0xcc2e0240
 8024780:	0003d090 	.word	0x0003d090
 8024784:	cc296e60 	.word	0xcc296e60
 8024788:	000493e0 	.word	0x000493e0

0802478c <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 802478c:	b507      	push	{r0, r1, r2, lr}
 802478e:	7802      	ldrb	r2, [r0, #0]
    PhyParam_t phyParam = { 0 };
 8024790:	2300      	movs	r3, #0
 8024792:	3a0b      	subs	r2, #11
 8024794:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 8024796:	2a2e      	cmp	r2, #46	; 0x2e
 8024798:	d85d      	bhi.n	8024856 <RegionEU868GetPhyParam+0xca>
 802479a:	e8df f002 	tbb	[pc, r2]
 802479e:	2220      	.short	0x2220
 80247a0:	34322b24 	.word	0x34322b24
 80247a4:	403d3a37 	.word	0x403d3a37
 80247a8:	4f5c4643 	.word	0x4f5c4643
 80247ac:	5553515c 	.word	0x5553515c
 80247b0:	595c5c57 	.word	0x595c5c57
 80247b4:	5c5c1860 	.word	0x5c5c1860
 80247b8:	5c5c5c5c 	.word	0x5c5c5c5c
 80247bc:	5c5c5c5c 	.word	0x5c5c5c5c
 80247c0:	4f5c5c5c 	.word	0x4f5c5c5c
 80247c4:	5c5c6962 	.word	0x5c5c6962
 80247c8:	6b5c694f 	.word	0x6b5c694f
 80247cc:	72          	.byte	0x72
 80247cd:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 80247ce:	f990 3001 	ldrsb.w	r3, [r0, #1]
    if( dr == minDr )
 80247d2:	b10b      	cbz	r3, 80247d8 <RegionEU868GetPhyParam+0x4c>
        nextLowerDr = dr - 1;
 80247d4:	3b01      	subs	r3, #1
 80247d6:	b2db      	uxtb	r3, r3
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 80247d8:	b25b      	sxtb	r3, r3
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
            break;
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80247da:	9300      	str	r3, [sp, #0]
            break;
 80247dc:	e03b      	b.n	8024856 <RegionEU868GetPhyParam+0xca>
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 80247de:	2340      	movs	r3, #64	; 0x40
 80247e0:	e7fb      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = EU868_ADR_ACK_DELAY;
 80247e2:	2320      	movs	r3, #32
 80247e4:	e7f9      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80247e6:	f990 2001 	ldrsb.w	r2, [r0, #1]
 80247ea:	4b28      	ldr	r3, [pc, #160]	; (802488c <RegionEU868GetPhyParam+0x100>)
 80247ec:	4413      	add	r3, r2
 80247ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80247f2:	e7f2      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80247f4:	f990 2001 	ldrsb.w	r2, [r0, #1]
 80247f8:	4b24      	ldr	r3, [pc, #144]	; (802488c <RegionEU868GetPhyParam+0x100>)
 80247fa:	4413      	add	r3, r2
 80247fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024800:	e7eb      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8024802:	2301      	movs	r3, #1
 8024804:	e7e9      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8024806:	f640 33b8 	movw	r3, #3000	; 0xbb8
 802480a:	e7e6      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = EU868_RECEIVE_DELAY1;
 802480c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024810:	e7e3      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8024812:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8024816:	e7e0      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8024818:	f241 3388 	movw	r3, #5000	; 0x1388
 802481c:	e7dd      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 802481e:	f241 7370 	movw	r3, #6000	; 0x1770
 8024822:	e7da      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8024824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024828:	e7d7      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 802482a:	4819      	ldr	r0, [pc, #100]	; (8024890 <RegionEU868GetPhyParam+0x104>)
 802482c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8024830:	f000 fc98 	bl	8025164 <randr>
 8024834:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 8024838:	9000      	str	r0, [sp, #0]
            break;
 802483a:	e00c      	b.n	8024856 <RegionEU868GetPhyParam+0xca>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 802483c:	4b15      	ldr	r3, [pc, #84]	; (8024894 <RegionEU868GetPhyParam+0x108>)
 802483e:	e7cc      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8024840:	4b15      	ldr	r3, [pc, #84]	; (8024898 <RegionEU868GetPhyParam+0x10c>)
 8024842:	e7ca      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8024844:	4b15      	ldr	r3, [pc, #84]	; (802489c <RegionEU868GetPhyParam+0x110>)
 8024846:	e7c8      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8024848:	2310      	movs	r3, #16
 802484a:	e7c6      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Channels = NvmCtx.Channels;
 802484c:	4b14      	ldr	r3, [pc, #80]	; (80248a0 <RegionEU868GetPhyParam+0x114>)
 802484e:	e7c4      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8024850:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8024854:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 8024856:	9800      	ldr	r0, [sp, #0]
 8024858:	b003      	add	sp, #12
 802485a:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 802485e:	4b11      	ldr	r3, [pc, #68]	; (80248a4 <RegionEU868GetPhyParam+0x118>)
 8024860:	e7f8      	b.n	8024854 <RegionEU868GetPhyParam+0xc8>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8024862:	f240 2211 	movw	r2, #529	; 0x211
 8024866:	f8ad 2000 	strh.w	r2, [sp]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 802486a:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 802486e:	e7f2      	b.n	8024856 <RegionEU868GetPhyParam+0xca>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8024870:	2303      	movs	r3, #3
 8024872:	e7b2      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8024874:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8024878:	4b04      	ldr	r3, [pc, #16]	; (802488c <RegionEU868GetPhyParam+0x100>)
 802487a:	4413      	add	r3, r2
 802487c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8024880:	e7ab      	b.n	80247da <RegionEU868GetPhyParam+0x4e>
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 8024882:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8024886:	f7ff fef7 	bl	8024678 <GetBandwidth>
 802488a:	e7d5      	b.n	8024838 <RegionEU868GetPhyParam+0xac>
 802488c:	080277d8 	.word	0x080277d8
 8024890:	fffffc18 	.word	0xfffffc18
 8024894:	33d3e608 	.word	0x33d3e608
 8024898:	20002394 	.word	0x20002394
 802489c:	20002396 	.word	0x20002396
 80248a0:	2000225c 	.word	0x2000225c
 80248a4:	4009999a 	.word	0x4009999a

080248a8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80248a8:	b513      	push	{r0, r1, r4, lr}
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 80248aa:	4a0a      	ldr	r2, [pc, #40]	; (80248d4 <RegionEU868SetBandTxDone+0x2c>)
 80248ac:	7803      	ldrb	r3, [r0, #0]
 80248ae:	210c      	movs	r1, #12
 80248b0:	fb01 2303 	mla	r3, r1, r3, r2
 80248b4:	7a5c      	ldrb	r4, [r3, #9]
 80248b6:	2314      	movs	r3, #20
 80248b8:	fb03 2404 	mla	r4, r3, r4, r2
 80248bc:	6903      	ldr	r3, [r0, #16]
 80248be:	9300      	str	r3, [sp, #0]
 80248c0:	68c3      	ldr	r3, [r0, #12]
 80248c2:	7842      	ldrb	r2, [r0, #1]
 80248c4:	6881      	ldr	r1, [r0, #8]
 80248c6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80248ca:	f7ff fcc2 	bl	8024252 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 80248ce:	b002      	add	sp, #8
 80248d0:	bd10      	pop	{r4, pc}
 80248d2:	bf00      	nop
 80248d4:	2000225c 	.word	0x2000225c

080248d8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80248d8:	b530      	push	{r4, r5, lr}
 80248da:	b09f      	sub	sp, #124	; 0x7c
 80248dc:	4604      	mov	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
 80248de:	2278      	movs	r2, #120	; 0x78
 80248e0:	2100      	movs	r1, #0
 80248e2:	4668      	mov	r0, sp
 80248e4:	f002 fbde 	bl	80270a4 <memset>
 80248e8:	2364      	movs	r3, #100	; 0x64
 80248ea:	f8ad 3000 	strh.w	r3, [sp]
 80248ee:	f8ad 3014 	strh.w	r3, [sp, #20]
 80248f2:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 80248f6:	7923      	ldrb	r3, [r4, #4]
 80248f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80248fc:	210a      	movs	r1, #10
 80248fe:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8024902:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 8024906:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 802490a:	2b03      	cmp	r3, #3
 802490c:	d827      	bhi.n	802495e <RegionEU868InitDefaults+0x86>
 802490e:	e8df f003 	tbb	[pc, r3]
 8024912:	2802      	.short	0x2802
 8024914:	3c33      	.short	0x3c33
    {
        case INIT_TYPE_DEFAULTS:
        {
            // Default bands
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8024916:	4c21      	ldr	r4, [pc, #132]	; (802499c <RegionEU868InitDefaults+0xc4>)
 8024918:	2278      	movs	r2, #120	; 0x78
 802491a:	4669      	mov	r1, sp
 802491c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8024920:	f000 fc3c 	bl	802519c <memcpy1>

            // Default channels
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8024924:	4b1e      	ldr	r3, [pc, #120]	; (80249a0 <RegionEU868InitDefaults+0xc8>)
 8024926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802492a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 802492e:	f103 020c 	add.w	r2, r3, #12
 8024932:	ca07      	ldmia	r2, {r0, r1, r2}
 8024934:	f104 050c 	add.w	r5, r4, #12
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8024938:	3318      	adds	r3, #24
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 802493a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 802493e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8024942:	f104 0518 	add.w	r5, r4, #24

            // Default ChannelsMask
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8024946:	2307      	movs	r3, #7
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8024948:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 802494c:	f8a4 313a 	strh.w	r3, [r4, #314]	; 0x13a

            // Update the channels mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8024950:	2201      	movs	r2, #1
 8024952:	f504 719d 	add.w	r1, r4, #314	; 0x13a
 8024956:	f504 709c 	add.w	r0, r4, #312	; 0x138
            // Reset Channels Rx1Frequency to default 0
            NvmCtx.Channels[0].Rx1Frequency = 0;
            NvmCtx.Channels[1].Rx1Frequency = 0;
            NvmCtx.Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 802495a:	f7ff fc6b 	bl	8024234 <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
 802495e:	b01f      	add	sp, #124	; 0x7c
 8024960:	bd30      	pop	{r4, r5, pc}
            NvmCtx.Channels[0].Rx1Frequency = 0;
 8024962:	480e      	ldr	r0, [pc, #56]	; (802499c <RegionEU868InitDefaults+0xc4>)
 8024964:	2300      	movs	r3, #0
 8024966:	6043      	str	r3, [r0, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 8024968:	6103      	str	r3, [r0, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 802496a:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 802496c:	f500 719d 	add.w	r1, r0, #314	; 0x13a
 8024970:	2201      	movs	r2, #1
 8024972:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8024976:	e7f0      	b.n	802495a <RegionEU868InitDefaults+0x82>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8024978:	4b08      	ldr	r3, [pc, #32]	; (802499c <RegionEU868InitDefaults+0xc4>)
 802497a:	f8b3 2138 	ldrh.w	r2, [r3, #312]	; 0x138
 802497e:	f8b3 113a 	ldrh.w	r1, [r3, #314]	; 0x13a
 8024982:	430a      	orrs	r2, r1
 8024984:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
            break;
 8024988:	e7e9      	b.n	802495e <RegionEU868InitDefaults+0x86>
            if( params->NvmCtx != 0 )
 802498a:	6821      	ldr	r1, [r4, #0]
 802498c:	2900      	cmp	r1, #0
 802498e:	d0e6      	beq.n	802495e <RegionEU868InitDefaults+0x86>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8024990:	4802      	ldr	r0, [pc, #8]	; (802499c <RegionEU868InitDefaults+0xc4>)
 8024992:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8024996:	f000 fc01 	bl	802519c <memcpy1>
}
 802499a:	e7e0      	b.n	802495e <RegionEU868InitDefaults+0x86>
 802499c:	2000225c 	.word	0x2000225c
 80249a0:	08027810 	.word	0x08027810

080249a4 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 80249a4:	f44f 739e 	mov.w	r3, #316	; 0x13c
 80249a8:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 80249aa:	4801      	ldr	r0, [pc, #4]	; (80249b0 <RegionEU868GetNvmCtx+0xc>)
 80249ac:	4770      	bx	lr
 80249ae:	bf00      	nop
 80249b0:	2000225c 	.word	0x2000225c

080249b4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80249b4:	b507      	push	{r0, r1, r2, lr}
 80249b6:	290f      	cmp	r1, #15
 80249b8:	d809      	bhi.n	80249ce <RegionEU868Verify+0x1a>
 80249ba:	e8df f001 	tbb	[pc, r1]
 80249be:	080c      	.short	0x080c
 80249c0:	1f080808 	.word	0x1f080808
 80249c4:	1f081f15 	.word	0x1f081f15
 80249c8:	0808081f 	.word	0x0808081f
 80249cc:	2108      	.short	0x2108
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80249ce:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
}
 80249d0:	b003      	add	sp, #12
 80249d2:	f85d fb04 	ldr.w	pc, [sp], #4
            uint8_t band = 0;
 80249d6:	2300      	movs	r3, #0
            return VerifyRfFreq( verify->Frequency, &band );
 80249d8:	f10d 0107 	add.w	r1, sp, #7
 80249dc:	6800      	ldr	r0, [r0, #0]
            uint8_t band = 0;
 80249de:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 80249e2:	f7ff fe85 	bl	80246f0 <VerifyRfFreq>
 80249e6:	e7f3      	b.n	80249d0 <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80249e8:	2205      	movs	r2, #5
 80249ea:	f990 0000 	ldrsb.w	r0, [r0]
 80249ee:	2100      	movs	r1, #0
 80249f0:	f7ff fbe0 	bl	80241b4 <RegionCommonValueInRange>
 80249f4:	3800      	subs	r0, #0
 80249f6:	bf18      	it	ne
 80249f8:	2001      	movne	r0, #1
 80249fa:	e7e9      	b.n	80249d0 <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80249fc:	2207      	movs	r2, #7
 80249fe:	e7f4      	b.n	80249ea <RegionEU868Verify+0x36>
            return EU868_DUTY_CYCLE_ENABLED;
 8024a00:	2001      	movs	r0, #1
 8024a02:	e7e5      	b.n	80249d0 <RegionEU868Verify+0x1c>

08024a04 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8024a04:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 8024a06:	7904      	ldrb	r4, [r0, #4]
 8024a08:	b11c      	cbz	r4, 8024a12 <RegionEU868ChanMaskSet+0xe>
 8024a0a:	2c01      	cmp	r4, #1
 8024a0c:	d008      	beq.n	8024a20 <RegionEU868ChanMaskSet+0x1c>
 8024a0e:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 8024a10:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8024a12:	6801      	ldr	r1, [r0, #0]
 8024a14:	4806      	ldr	r0, [pc, #24]	; (8024a30 <RegionEU868ChanMaskSet+0x2c>)
 8024a16:	2201      	movs	r2, #1
 8024a18:	f7ff fc0c 	bl	8024234 <RegionCommonChanMaskCopy>
    return true;
 8024a1c:	2001      	movs	r0, #1
            break;
 8024a1e:	e7f7      	b.n	8024a10 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8024a20:	6801      	ldr	r1, [r0, #0]
 8024a22:	4804      	ldr	r0, [pc, #16]	; (8024a34 <RegionEU868ChanMaskSet+0x30>)
 8024a24:	4622      	mov	r2, r4
 8024a26:	f7ff fc05 	bl	8024234 <RegionCommonChanMaskCopy>
    return true;
 8024a2a:	4620      	mov	r0, r4
            break;
 8024a2c:	e7f0      	b.n	8024a10 <RegionEU868ChanMaskSet+0xc>
 8024a2e:	bf00      	nop
 8024a30:	20002394 	.word	0x20002394
 8024a34:	20002396 	.word	0x20002396

08024a38 <RegionEU868ComputeRxWindowParameters>:
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8024a38:	2807      	cmp	r0, #7
{
 8024a3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8024a3e:	4605      	mov	r5, r0
 8024a40:	bfa8      	it	ge
 8024a42:	2507      	movge	r5, #7
{
 8024a44:	4606      	mov	r6, r0
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8024a46:	705d      	strb	r5, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8024a48:	4628      	mov	r0, r5
{
 8024a4a:	461c      	mov	r4, r3
 8024a4c:	460f      	mov	r7, r1
 8024a4e:	4690      	mov	r8, r2
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8024a50:	f7ff fe12 	bl	8024678 <GetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
 8024a54:	2e06      	cmp	r6, #6
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8024a56:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
 8024a58:	dd14      	ble.n	8024a84 <RegionEU868ComputeRxWindowParameters+0x4c>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8024a5a:	2032      	movs	r0, #50	; 0x32
 8024a5c:	f7ff fcf4 	bl	8024448 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8024a60:	4b0d      	ldr	r3, [pc, #52]	; (8024a98 <RegionEU868ComputeRxWindowParameters+0x60>)
 8024a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8024a64:	4605      	mov	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8024a66:	4798      	blx	r3
 8024a68:	f104 020c 	add.w	r2, r4, #12
 8024a6c:	3408      	adds	r4, #8
 8024a6e:	4603      	mov	r3, r0
 8024a70:	9201      	str	r2, [sp, #4]
 8024a72:	9400      	str	r4, [sp, #0]
 8024a74:	4642      	mov	r2, r8
 8024a76:	4639      	mov	r1, r7
 8024a78:	4628      	mov	r0, r5
 8024a7a:	f7ff fce9 	bl	8024450 <RegionCommonComputeRxWindowParameters>
}
 8024a7e:	b002      	add	sp, #8
 8024a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8024a84:	4b05      	ldr	r3, [pc, #20]	; (8024a9c <RegionEU868ComputeRxWindowParameters+0x64>)
 8024a86:	195a      	adds	r2, r3, r5
 8024a88:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8024a8c:	f892 0020 	ldrb.w	r0, [r2, #32]
 8024a90:	f7ff fcd2 	bl	8024438 <RegionCommonComputeSymbolTimeLoRa>
 8024a94:	e7e4      	b.n	8024a60 <RegionEU868ComputeRxWindowParameters+0x28>
 8024a96:	bf00      	nop
 8024a98:	08027928 	.word	0x08027928
 8024a9c:	080277d8 	.word	0x080277d8

08024aa0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8024aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t dr = rxConfig->Datarate;
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 8024aa4:	4e39      	ldr	r6, [pc, #228]	; (8024b8c <RegionEU868RxConfig+0xec>)
    int8_t dr = rxConfig->Datarate;
 8024aa6:	f990 7001 	ldrsb.w	r7, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 8024aaa:	6873      	ldr	r3, [r6, #4]
    uint32_t frequency = rxConfig->Frequency;
 8024aac:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 8024ab0:	b08d      	sub	sp, #52	; 0x34
 8024ab2:	4604      	mov	r4, r0
 8024ab4:	468a      	mov	sl, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 8024ab6:	4798      	blx	r3
 8024ab8:	46b0      	mov	r8, r6
 8024aba:	4605      	mov	r5, r0
 8024abc:	2800      	cmp	r0, #0
 8024abe:	d162      	bne.n	8024b86 <RegionEU868RxConfig+0xe6>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8024ac0:	7ce3      	ldrb	r3, [r4, #19]
 8024ac2:	b953      	cbnz	r3, 8024ada <RegionEU868RxConfig+0x3a>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8024ac4:	7821      	ldrb	r1, [r4, #0]
 8024ac6:	4a32      	ldr	r2, [pc, #200]	; (8024b90 <RegionEU868RxConfig+0xf0>)
 8024ac8:	230c      	movs	r3, #12
 8024aca:	434b      	muls	r3, r1
 8024acc:	18d1      	adds	r1, r2, r3
 8024ace:	f852 9003 	ldr.w	r9, [r2, r3]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8024ad2:	684b      	ldr	r3, [r1, #4]
 8024ad4:	2b00      	cmp	r3, #0
 8024ad6:	bf18      	it	ne
 8024ad8:	4699      	movne	r9, r3
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8024ada:	4e2e      	ldr	r6, [pc, #184]	; (8024b94 <RegionEU868RxConfig+0xf4>)
 8024adc:	19f3      	adds	r3, r6, r7

    Radio.SetChannel( frequency );
 8024ade:	4648      	mov	r0, r9
    phyDr = DataratesEU868[dr];
 8024ae0:	f993 b020 	ldrsb.w	fp, [r3, #32]
    Radio.SetChannel( frequency );
 8024ae4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8024ae8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8024aea:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8024aee:	68a0      	ldr	r0, [r4, #8]
 8024af0:	960b      	str	r6, [sp, #44]	; 0x2c
 8024af2:	469c      	mov	ip, r3
 8024af4:	2f07      	cmp	r7, #7
 8024af6:	7ca3      	ldrb	r3, [r4, #18]
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8024af8:	9309      	str	r3, [sp, #36]	; 0x24
    if( dr == DR_7 )
 8024afa:	d12d      	bne.n	8024b58 <RegionEU868RxConfig+0xb8>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8024afc:	2300      	movs	r3, #0
 8024afe:	2101      	movs	r1, #1
 8024b00:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8024b04:	4924      	ldr	r1, [pc, #144]	; (8024b98 <RegionEU868RxConfig+0xf8>)
 8024b06:	9306      	str	r3, [sp, #24]
 8024b08:	2205      	movs	r2, #5
 8024b0a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8024b0e:	e9cd 1200 	strd	r1, r2, [sp]
 8024b12:	b280      	uxth	r0, r0
 8024b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8024b18:	9002      	str	r0, [sp, #8]
 8024b1a:	9303      	str	r3, [sp, #12]
 8024b1c:	fb02 f20b 	mul.w	r2, r2, fp
 8024b20:	f24c 3150 	movw	r1, #50000	; 0xc350
 8024b24:	4618      	mov	r0, r3
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8024b26:	4666      	mov	r6, ip
 8024b28:	47b0      	blx	r6
    }

    if( rxConfig->RepeaterSupport == true )
 8024b2a:	7c63      	ldrb	r3, [r4, #17]
 8024b2c:	b333      	cbz	r3, 8024b7c <RegionEU868RxConfig+0xdc>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8024b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024b30:	443b      	add	r3, r7
 8024b32:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8024b36:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8024b3a:	310d      	adds	r1, #13
 8024b3c:	b2c9      	uxtb	r1, r1
 8024b3e:	4628      	mov	r0, r5
 8024b40:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8024b42:	7ce0      	ldrb	r0, [r4, #19]
 8024b44:	463a      	mov	r2, r7
 8024b46:	4649      	mov	r1, r9
 8024b48:	f7ff fd5a 	bl	8024600 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8024b4c:	f88a 7000 	strb.w	r7, [sl]
    return true;
 8024b50:	2001      	movs	r0, #1
}
 8024b52:	b00d      	add	sp, #52	; 0x34
 8024b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8024b58:	2100      	movs	r1, #0
 8024b5a:	2501      	movs	r5, #1
 8024b5c:	b280      	uxth	r0, r0
 8024b5e:	2308      	movs	r3, #8
 8024b60:	e9cd 1300 	strd	r1, r3, [sp]
 8024b64:	e9cd 1507 	strd	r1, r5, [sp, #28]
 8024b68:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8024b6c:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8024b70:	9002      	str	r0, [sp, #8]
 8024b72:	78a1      	ldrb	r1, [r4, #2]
 8024b74:	462b      	mov	r3, r5
 8024b76:	465a      	mov	r2, fp
 8024b78:	4628      	mov	r0, r5
 8024b7a:	e7d4      	b.n	8024b26 <RegionEU868RxConfig+0x86>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8024b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024b7e:	443b      	add	r3, r7
 8024b80:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8024b84:	e7d7      	b.n	8024b36 <RegionEU868RxConfig+0x96>
        return false;
 8024b86:	2000      	movs	r0, #0
 8024b88:	e7e3      	b.n	8024b52 <RegionEU868RxConfig+0xb2>
 8024b8a:	bf00      	nop
 8024b8c:	08027928 	.word	0x08027928
 8024b90:	2000225c 	.word	0x2000225c
 8024b94:	080277d8 	.word	0x080277d8
 8024b98:	00014585 	.word	0x00014585

08024b9c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8024b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8024ba0:	4b3a      	ldr	r3, [pc, #232]	; (8024c8c <RegionEU868TxConfig+0xf0>)
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8024ba2:	4f3b      	ldr	r7, [pc, #236]	; (8024c90 <RegionEU868TxConfig+0xf4>)
{
 8024ba4:	4604      	mov	r4, r0
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8024ba6:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8024baa:	4403      	add	r3, r0
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8024bac:	250c      	movs	r5, #12
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8024bae:	f993 b020 	ldrsb.w	fp, [r3, #32]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8024bb2:	7823      	ldrb	r3, [r4, #0]
 8024bb4:	fb05 7303 	mla	r3, r5, r3, r7
{
 8024bb8:	4692      	mov	sl, r2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8024bba:	7a5b      	ldrb	r3, [r3, #9]
 8024bbc:	2214      	movs	r2, #20
 8024bbe:	fb02 7303 	mla	r3, r2, r3, r7
{
 8024bc2:	b08f      	sub	sp, #60	; 0x3c
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8024bc4:	f993 90c2 	ldrsb.w	r9, [r3, #194]	; 0xc2
 8024bc8:	f994 3002 	ldrsb.w	r3, [r4, #2]
{
 8024bcc:	910b      	str	r1, [sp, #44]	; 0x2c
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8024bce:	4599      	cmp	r9, r3
 8024bd0:	bfb8      	it	lt
 8024bd2:	4699      	movlt	r9, r3
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8024bd4:	f7ff fd50 	bl	8024678 <GetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8024bd8:	edd4 0a02 	vldr	s1, [r4, #8]
 8024bdc:	ed94 0a01 	vldr	s0, [r4, #4]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8024be0:	900d      	str	r0, [sp, #52]	; 0x34
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8024be2:	4648      	mov	r0, r9
 8024be4:	f7ff fc5a 	bl	802449c <RegionCommonComputeTxPower>
 8024be8:	900c      	str	r0, [sp, #48]	; 0x30

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8024bea:	7820      	ldrb	r0, [r4, #0]
 8024bec:	4368      	muls	r0, r5
 8024bee:	4d29      	ldr	r5, [pc, #164]	; (8024c94 <RegionEU868TxConfig+0xf8>)
 8024bf0:	5838      	ldr	r0, [r7, r0]
 8024bf2:	68ea      	ldr	r2, [r5, #12]
 8024bf4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8024bf6:	f994 2001 	ldrsb.w	r2, [r4, #1]
 8024bfa:	69eb      	ldr	r3, [r5, #28]
 8024bfc:	2a07      	cmp	r2, #7
 8024bfe:	46a8      	mov	r8, r5
 8024c00:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8024c04:	f04f 0500 	mov.w	r5, #0
 8024c08:	469c      	mov	ip, r3
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8024c0a:	e9cd 5207 	strd	r5, r2, [sp, #28]
    if( txConfig->Datarate == DR_7 )
 8024c0e:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8024c12:	e9cd 5505 	strd	r5, r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 8024c16:	d12a      	bne.n	8024c6e <RegionEU868TxConfig+0xd2>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8024c18:	2201      	movs	r2, #1
 8024c1a:	e9cd 5203 	strd	r5, r2, [sp, #12]
 8024c1e:	2205      	movs	r2, #5
 8024c20:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8024c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8024c28:	fb02 f20b 	mul.w	r2, r2, fp
 8024c2c:	9200      	str	r2, [sp, #0]
 8024c2e:	4628      	mov	r0, r5
 8024c30:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8024c34:	4666      	mov	r6, ip
 8024c36:	47b0      	blx	r6
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8024c38:	7822      	ldrb	r2, [r4, #0]
 8024c3a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8024c3e:	230c      	movs	r3, #12
 8024c40:	4353      	muls	r3, r2
 8024c42:	58f8      	ldr	r0, [r7, r3]
 8024c44:	f7ff fd0a 	bl	802465c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8024c48:	89a1      	ldrh	r1, [r4, #12]
 8024c4a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8024c4e:	f7ff fd27 	bl	80246a0 <GetTimeOnAir>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8024c52:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8024c56:	f8ca 0000 	str.w	r0, [sl]
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8024c5a:	7b21      	ldrb	r1, [r4, #12]
 8024c5c:	4628      	mov	r0, r5
 8024c5e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8024c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    return true;
}
 8024c62:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 8024c64:	f883 9000 	strb.w	r9, [r3]
}
 8024c68:	b00f      	add	sp, #60	; 0x3c
 8024c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8024c6e:	2601      	movs	r6, #1
 8024c70:	2208      	movs	r2, #8
 8024c72:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8024c76:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8024c7a:	f8cd b000 	str.w	fp, [sp]
 8024c7e:	462a      	mov	r2, r5
 8024c80:	4630      	mov	r0, r6
 8024c82:	4665      	mov	r5, ip
 8024c84:	47a8      	blx	r5
        modem = MODEM_LORA;
 8024c86:	4635      	mov	r5, r6
 8024c88:	e7d6      	b.n	8024c38 <RegionEU868TxConfig+0x9c>
 8024c8a:	bf00      	nop
 8024c8c:	080277d8 	.word	0x080277d8
 8024c90:	2000225c 	.word	0x2000225c
 8024c94:	08027928 	.word	0x08027928

08024c98 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8024c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024c9c:	b08c      	sub	sp, #48	; 0x30
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8024c9e:	2400      	movs	r4, #0
{
 8024ca0:	4605      	mov	r5, r0
 8024ca2:	4689      	mov	r9, r1
 8024ca4:	4690      	mov	r8, r2
 8024ca6:	461f      	mov	r7, r3
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8024ca8:	9402      	str	r4, [sp, #8]
 8024caa:	f8ad 400c 	strh.w	r4, [sp, #12]
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8024cae:	f8ad 4006 	strh.w	r4, [sp, #6]
    uint8_t status = 0x07;
 8024cb2:	2607      	movs	r6, #7
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
                    {
                        chMask |= 1 << i;
 8024cb4:	f04f 0a01 	mov.w	sl, #1
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8024cb8:	7a2b      	ldrb	r3, [r5, #8]
 8024cba:	42a3      	cmp	r3, r4
 8024cbc:	d906      	bls.n	8024ccc <RegionEU868LinkAdrReq+0x34>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8024cbe:	6868      	ldr	r0, [r5, #4]
 8024cc0:	a902      	add	r1, sp, #8
 8024cc2:	4420      	add	r0, r4
 8024cc4:	f7ff fb5e 	bl	8024384 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8024cc8:	2800      	cmp	r0, #0
 8024cca:	d150      	bne.n	8024d6e <RegionEU868LinkAdrReq+0xd6>
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8024ccc:	7aab      	ldrb	r3, [r5, #10]
 8024cce:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8024cd2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8024cd6:	f88d 3016 	strb.w	r3, [sp, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8024cda:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8024cde:	f88d 3017 	strb.w	r3, [sp, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8024ce2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8024ce6:	f88d 3018 	strb.w	r3, [sp, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8024cea:	7aeb      	ldrb	r3, [r5, #11]
 8024cec:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8024cf0:	7b2b      	ldrb	r3, [r5, #12]
 8024cf2:	f88d 301a 	strb.w	r3, [sp, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8024cf6:	7b6b      	ldrb	r3, [r5, #13]
 8024cf8:	f88d 301b 	strb.w	r3, [sp, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8024cfc:	2310      	movs	r3, #16
 8024cfe:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8024d02:	f10d 0306 	add.w	r3, sp, #6
 8024d06:	9308      	str	r3, [sp, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8024d08:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8024d0c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8024d10:	2307      	movs	r3, #7
 8024d12:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8024d16:	682b      	ldr	r3, [r5, #0]
    linkAdrVerifyParams.Status = status;
 8024d18:	f88d 6014 	strb.w	r6, [sp, #20]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8024d1c:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8024d1e:	4e30      	ldr	r6, [pc, #192]	; (8024de0 <RegionEU868LinkAdrReq+0x148>)
 8024d20:	960a      	str	r6, [sp, #40]	; 0x28

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8024d22:	ab02      	add	r3, sp, #8
 8024d24:	f10d 020a 	add.w	r2, sp, #10
 8024d28:	f10d 0109 	add.w	r1, sp, #9
 8024d2c:	a804      	add	r0, sp, #16
 8024d2e:	f7ff fb43 	bl	80243b8 <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8024d32:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8024d34:	4605      	mov	r5, r0
    if( status == 0x07 )
 8024d36:	d109      	bne.n	8024d4c <RegionEU868LinkAdrReq+0xb4>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8024d38:	2202      	movs	r2, #2
 8024d3a:	2100      	movs	r1, #0
 8024d3c:	f506 709c 	add.w	r0, r6, #312	; 0x138
 8024d40:	f000 fa40 	bl	80251c4 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8024d44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8024d48:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8024d4c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8024d50:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 8024d54:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8024d58:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 8024d5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8024d60:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 8024d62:	9b14      	ldr	r3, [sp, #80]	; 0x50

    return status;
}
 8024d64:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 8024d66:	701c      	strb	r4, [r3, #0]
}
 8024d68:	b00c      	add	sp, #48	; 0x30
 8024d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8024d6e:	f89d c00b 	ldrb.w	ip, [sp, #11]
        bytesProcessed += nextIndex;
 8024d72:	4404      	add	r4, r0
        chMask = linkAdrParams.ChMask;
 8024d74:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8024d78:	f8ad 0006 	strh.w	r0, [sp, #6]
        bytesProcessed += nextIndex;
 8024d7c:	b2e4      	uxtb	r4, r4
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8024d7e:	f1bc 0f00 	cmp.w	ip, #0
 8024d82:	d11a      	bne.n	8024dba <RegionEU868LinkAdrReq+0x122>
 8024d84:	b300      	cbz	r0, 8024dc8 <RegionEU868LinkAdrReq+0x130>
{
 8024d86:	2200      	movs	r2, #0
 8024d88:	4915      	ldr	r1, [pc, #84]	; (8024de0 <RegionEU868LinkAdrReq+0x148>)
 8024d8a:	4696      	mov	lr, r2
 8024d8c:	2607      	movs	r6, #7
                if( linkAdrParams.ChMaskCtrl == 6 )
 8024d8e:	f1bc 0f06 	cmp.w	ip, #6
 8024d92:	d11b      	bne.n	8024dcc <RegionEU868LinkAdrReq+0x134>
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8024d94:	680b      	ldr	r3, [r1, #0]
 8024d96:	b12b      	cbz	r3, 8024da4 <RegionEU868LinkAdrReq+0x10c>
                        chMask |= 1 << i;
 8024d98:	fa0a f302 	lsl.w	r3, sl, r2
 8024d9c:	4318      	orrs	r0, r3
 8024d9e:	b280      	uxth	r0, r0
 8024da0:	f04f 0e01 	mov.w	lr, #1
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8024da4:	3201      	adds	r2, #1
 8024da6:	2a10      	cmp	r2, #16
 8024da8:	f101 010c 	add.w	r1, r1, #12
 8024dac:	d1ef      	bne.n	8024d8e <RegionEU868LinkAdrReq+0xf6>
 8024dae:	f1be 0f00 	cmp.w	lr, #0
 8024db2:	d081      	beq.n	8024cb8 <RegionEU868LinkAdrReq+0x20>
 8024db4:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024db8:	e77e      	b.n	8024cb8 <RegionEU868LinkAdrReq+0x20>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8024dba:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8024dbe:	2b04      	cmp	r3, #4
 8024dc0:	d902      	bls.n	8024dc8 <RegionEU868LinkAdrReq+0x130>
 8024dc2:	f1bc 0f06 	cmp.w	ip, #6
 8024dc6:	d0de      	beq.n	8024d86 <RegionEU868LinkAdrReq+0xee>
            status &= 0xFE; // Channel mask KO
 8024dc8:	2606      	movs	r6, #6
 8024dca:	e775      	b.n	8024cb8 <RegionEU868LinkAdrReq+0x20>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8024dcc:	fa40 f302 	asr.w	r3, r0, r2
 8024dd0:	07db      	lsls	r3, r3, #31
 8024dd2:	d5e7      	bpl.n	8024da4 <RegionEU868LinkAdrReq+0x10c>
 8024dd4:	680b      	ldr	r3, [r1, #0]
                        status &= 0xFE; // Channel mask KO
 8024dd6:	2b00      	cmp	r3, #0
 8024dd8:	bf08      	it	eq
 8024dda:	2606      	moveq	r6, #6
 8024ddc:	e7e2      	b.n	8024da4 <RegionEU868LinkAdrReq+0x10c>
 8024dde:	bf00      	nop
 8024de0:	2000225c 	.word	0x2000225c

08024de4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8024de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0x07;
    uint8_t band = 0;
 8024de6:	2600      	movs	r6, #0
{
 8024de8:	4605      	mov	r5, r0

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8024dea:	f10d 0107 	add.w	r1, sp, #7
 8024dee:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 8024df0:	f88d 6007 	strb.w	r6, [sp, #7]
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8024df4:	f7ff fc7c 	bl	80246f0 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8024df8:	2207      	movs	r2, #7
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8024dfa:	42b0      	cmp	r0, r6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8024dfc:	4631      	mov	r1, r6
 8024dfe:	f995 0000 	ldrsb.w	r0, [r5]
        status &= 0xFE; // Channel frequency KO
 8024e02:	bf14      	ite	ne
 8024e04:	2407      	movne	r4, #7
 8024e06:	2406      	moveq	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8024e08:	f7ff f9d4 	bl	80241b4 <RegionCommonValueInRange>
 8024e0c:	b908      	cbnz	r0, 8024e12 <RegionEU868RxParamSetupReq+0x2e>
    {
        status &= 0xFD; // Datarate KO
 8024e0e:	f004 0405 	and.w	r4, r4, #5
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8024e12:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8024e16:	2205      	movs	r2, #5
 8024e18:	2100      	movs	r1, #0
 8024e1a:	f7ff f9cb 	bl	80241b4 <RegionCommonValueInRange>
 8024e1e:	b908      	cbnz	r0, 8024e24 <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8024e20:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    }

    return status;
}
 8024e24:	4620      	mov	r0, r4
 8024e26:	b002      	add	sp, #8
 8024e28:	bd70      	pop	{r4, r5, r6, pc}

08024e2a <RegionEU868TxParamSetupReq>:
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    return -1;
}
 8024e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024e2e:	4770      	bx	lr

08024e30 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8024e30:	b513      	push	{r0, r1, r4, lr}
 8024e32:	4604      	mov	r4, r0
    uint8_t status = 0x03;
    uint8_t band = 0;
 8024e34:	2300      	movs	r3, #0

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8024e36:	f10d 0107 	add.w	r1, sp, #7
 8024e3a:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 8024e3c:	f88d 3007 	strb.w	r3, [sp, #7]
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8024e40:	f7ff fc56 	bl	80246f0 <VerifyRfFreq>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8024e44:	7821      	ldrb	r1, [r4, #0]
 8024e46:	4a0a      	ldr	r2, [pc, #40]	; (8024e70 <RegionEU868DlChannelReq+0x40>)
 8024e48:	230c      	movs	r3, #12
 8024e4a:	434b      	muls	r3, r1
 8024e4c:	18d1      	adds	r1, r2, r3
 8024e4e:	58d3      	ldr	r3, [r2, r3]
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8024e50:	2800      	cmp	r0, #0
        status &= 0xFE;
 8024e52:	bf14      	ite	ne
 8024e54:	2003      	movne	r0, #3
 8024e56:	2002      	moveq	r0, #2
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8024e58:	b91b      	cbnz	r3, 8024e62 <RegionEU868DlChannelReq+0x32>
    {
        status &= 0xFD;
 8024e5a:	f000 0001 	and.w	r0, r0, #1
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 8024e5e:	b002      	add	sp, #8
 8024e60:	bd10      	pop	{r4, pc}
    if( status == 0x03 )
 8024e62:	2803      	cmp	r0, #3
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8024e64:	bf06      	itte	eq
 8024e66:	6863      	ldreq	r3, [r4, #4]
 8024e68:	604b      	streq	r3, [r1, #4]
 8024e6a:	2002      	movne	r0, #2
 8024e6c:	e7f7      	b.n	8024e5e <RegionEU868DlChannelReq+0x2e>
 8024e6e:	bf00      	nop
 8024e70:	2000225c 	.word	0x2000225c

08024e74 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 8024e74:	4770      	bx	lr
	...

08024e78 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8024e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8024e7c:	4d33      	ldr	r5, [pc, #204]	; (8024f4c <RegionEU868NextChannel+0xd4>)
{
 8024e7e:	b094      	sub	sp, #80	; 0x50
 8024e80:	4604      	mov	r4, r0
 8024e82:	460e      	mov	r6, r1
 8024e84:	4690      	mov	r8, r2
    uint8_t nbEnabledChannels = 0;
 8024e86:	2100      	movs	r1, #0
    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8024e88:	2201      	movs	r2, #1
 8024e8a:	f505 709c 	add.w	r0, r5, #312	; 0x138
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8024e8e:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8024e92:	e9cd 1105 	strd	r1, r1, [sp, #20]
{
 8024e96:	461f      	mov	r7, r3
    uint8_t nbEnabledChannels = 0;
 8024e98:	f88d 100a 	strb.w	r1, [sp, #10]
    uint8_t nbRestrictedChannels = 0;
 8024e9c:	f88d 100b 	strb.w	r1, [sp, #11]
    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8024ea0:	f7ff f9aa 	bl	80241f8 <RegionCommonCountChannels>
 8024ea4:	b928      	cbnz	r0, 8024eb2 <RegionEU868NextChannel+0x3a>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8024ea6:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
 8024eaa:	f043 0307 	orr.w	r3, r3, #7
 8024eae:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 8024eb2:	4827      	ldr	r0, [pc, #156]	; (8024f50 <RegionEU868NextChannel+0xd8>)
    countChannelsParams.Channels = NvmCtx.Channels;
    countChannelsParams.Bands = NvmCtx.Bands;
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8024eb4:	4a27      	ldr	r2, [pc, #156]	; (8024f54 <RegionEU868NextChannel+0xdc>)
 8024eb6:	920b      	str	r2, [sp, #44]	; 0x2c
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8024eb8:	6822      	ldr	r2, [r4, #0]
 8024eba:	920c      	str	r2, [sp, #48]	; 0x30
    countChannelsParams.Channels = NvmCtx.Channels;
 8024ebc:	e9cd 0508 	strd	r0, r5, [sp, #32]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8024ec0:	6862      	ldr	r2, [r4, #4]
    countChannelsParams.Joined = nextChanParams->Joined;
 8024ec2:	7a63      	ldrb	r3, [r4, #9]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8024ec4:	920d      	str	r2, [sp, #52]	; 0x34
    countChannelsParams.Bands = NvmCtx.Bands;
 8024ec6:	3878      	subs	r0, #120	; 0x78
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8024ec8:	7aa2      	ldrb	r2, [r4, #10]
    countChannelsParams.Bands = NvmCtx.Bands;
 8024eca:	900a      	str	r0, [sp, #40]	; 0x28
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8024ecc:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    countChannelsParams.Joined = nextChanParams->Joined;
 8024ed0:	f88d 301c 	strb.w	r3, [sp, #28]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8024ed4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8024ed8:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8024edc:	f88d 301d 	strb.w	r3, [sp, #29]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8024ee0:	2206      	movs	r2, #6
 8024ee2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8024ee6:	aa0f      	add	r2, sp, #60	; 0x3c
 8024ee8:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8024eec:	7d22      	ldrb	r2, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8024eee:	8ae1      	ldrh	r1, [r4, #22]
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8024ef0:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8024ef4:	4618      	mov	r0, r3
 8024ef6:	f7ff fbd3 	bl	80246a0 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8024efa:	ab07      	add	r3, sp, #28
 8024efc:	9313      	str	r3, [sp, #76]	; 0x4c

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8024efe:	f10d 030b 	add.w	r3, sp, #11
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8024f02:	9012      	str	r0, [sp, #72]	; 0x48
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8024f04:	9300      	str	r3, [sp, #0]
 8024f06:	f8cd 8004 	str.w	r8, [sp, #4]
 8024f0a:	f10d 030a 	add.w	r3, sp, #10
 8024f0e:	aa03      	add	r2, sp, #12
 8024f10:	4639      	mov	r1, r7
 8024f12:	a80c      	add	r0, sp, #48	; 0x30
 8024f14:	f7ff fb2f 	bl	8024576 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8024f18:	4604      	mov	r4, r0
 8024f1a:	b968      	cbnz	r0, 8024f38 <RegionEU868NextChannel+0xc0>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8024f1c:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8024f20:	3901      	subs	r1, #1
 8024f22:	f000 f91f 	bl	8025164 <randr>
 8024f26:	ab14      	add	r3, sp, #80	; 0x50
 8024f28:	4418      	add	r0, r3
 8024f2a:	f810 3c44 	ldrb.w	r3, [r0, #-68]
 8024f2e:	7033      	strb	r3, [r6, #0]
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    }
    return status;
}
 8024f30:	4620      	mov	r0, r4
 8024f32:	b014      	add	sp, #80	; 0x50
 8024f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8024f38:	280c      	cmp	r0, #12
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8024f3a:	bf02      	ittt	eq
 8024f3c:	f8b5 3138 	ldrheq.w	r3, [r5, #312]	; 0x138
 8024f40:	f043 0307 	orreq.w	r3, r3, #7
 8024f44:	f8a5 3138 	strheq.w	r3, [r5, #312]	; 0x138
 8024f48:	e7f2      	b.n	8024f30 <RegionEU868NextChannel+0xb8>
 8024f4a:	bf00      	nop
 8024f4c:	2000225c 	.word	0x2000225c
 8024f50:	20002394 	.word	0x20002394
 8024f54:	00070010 	.word	0x00070010

08024f58 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8024f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t band = 0;
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8024f5a:	7906      	ldrb	r6, [r0, #4]
    uint8_t band = 0;
 8024f5c:	2700      	movs	r7, #0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8024f5e:	2e02      	cmp	r6, #2
{
 8024f60:	4605      	mov	r5, r0
    uint8_t band = 0;
 8024f62:	f88d 7007 	strb.w	r7, [sp, #7]
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8024f66:	d802      	bhi.n	8024f6e <RegionEU868ChannelAdd+0x16>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8024f68:	2006      	movs	r0, #6

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
    NvmCtx.Channels[id].Band = band;
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
 8024f6a:	b003      	add	sp, #12
 8024f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( id >= EU868_MAX_NB_CHANNELS )
 8024f6e:	2e0f      	cmp	r6, #15
 8024f70:	d82d      	bhi.n	8024fce <RegionEU868ChannelAdd+0x76>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8024f72:	6803      	ldr	r3, [r0, #0]
 8024f74:	7a18      	ldrb	r0, [r3, #8]
 8024f76:	f340 0003 	sbfx	r0, r0, #0, #4
 8024f7a:	2207      	movs	r2, #7
 8024f7c:	4639      	mov	r1, r7
 8024f7e:	b240      	sxtb	r0, r0
 8024f80:	f7ff f918 	bl	80241b4 <RegionCommonValueInRange>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8024f84:	682b      	ldr	r3, [r5, #0]
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8024f86:	4604      	mov	r4, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8024f88:	7a18      	ldrb	r0, [r3, #8]
 8024f8a:	f340 1003 	sbfx	r0, r0, #4, #4
 8024f8e:	2207      	movs	r2, #7
 8024f90:	4639      	mov	r1, r7
 8024f92:	b240      	sxtb	r0, r0
 8024f94:	f7ff f90e 	bl	80241b4 <RegionCommonValueInRange>
 8024f98:	b1b8      	cbz	r0, 8024fca <RegionEU868ChannelAdd+0x72>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8024f9a:	fab4 f484 	clz	r4, r4
 8024f9e:	0964      	lsrs	r4, r4, #5
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8024fa0:	6828      	ldr	r0, [r5, #0]
 8024fa2:	7a03      	ldrb	r3, [r0, #8]
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8024fa4:	6800      	ldr	r0, [r0, #0]
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8024fa6:	f343 0203 	sbfx	r2, r3, #0, #4
 8024faa:	f343 1303 	sbfx	r3, r3, #4, #4
 8024fae:	b252      	sxtb	r2, r2
 8024fb0:	b25b      	sxtb	r3, r3
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8024fb2:	f10d 0107 	add.w	r1, sp, #7
        drInvalid = true;
 8024fb6:	429a      	cmp	r2, r3
 8024fb8:	bfc8      	it	gt
 8024fba:	2401      	movgt	r4, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8024fbc:	f7ff fb98 	bl	80246f0 <VerifyRfFreq>
 8024fc0:	b948      	cbnz	r0, 8024fd6 <RegionEU868ChannelAdd+0x7e>
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8024fc2:	2c00      	cmp	r4, #0
 8024fc4:	d1d0      	bne.n	8024f68 <RegionEU868ChannelAdd+0x10>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8024fc6:	2004      	movs	r0, #4
 8024fc8:	e7cf      	b.n	8024f6a <RegionEU868ChannelAdd+0x12>
        drInvalid = true;
 8024fca:	2401      	movs	r4, #1
 8024fcc:	e7e8      	b.n	8024fa0 <RegionEU868ChannelAdd+0x48>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8024fce:	2003      	movs	r0, #3
 8024fd0:	e7cb      	b.n	8024f6a <RegionEU868ChannelAdd+0x12>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8024fd2:	2005      	movs	r0, #5
 8024fd4:	e7c9      	b.n	8024f6a <RegionEU868ChannelAdd+0x12>
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8024fd6:	2c00      	cmp	r4, #0
 8024fd8:	d1fb      	bne.n	8024fd2 <RegionEU868ChannelAdd+0x7a>
    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8024fda:	4f0c      	ldr	r7, [pc, #48]	; (802500c <RegionEU868ChannelAdd+0xb4>)
 8024fdc:	6829      	ldr	r1, [r5, #0]
 8024fde:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8024fe2:	220c      	movs	r2, #12
 8024fe4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8024fe8:	f000 f8d8 	bl	802519c <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8024fec:	230c      	movs	r3, #12
 8024fee:	fb03 7306 	mla	r3, r3, r6, r7
 8024ff2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8024ff6:	725a      	strb	r2, [r3, #9]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8024ff8:	2301      	movs	r3, #1
 8024ffa:	fa03 f606 	lsl.w	r6, r3, r6
 8024ffe:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8025002:	431e      	orrs	r6, r3
 8025004:	f8a7 6138 	strh.w	r6, [r7, #312]	; 0x138
    return LORAMAC_STATUS_OK;
 8025008:	4620      	mov	r0, r4
 802500a:	e7ae      	b.n	8024f6a <RegionEU868ChannelAdd+0x12>
 802500c:	2000225c 	.word	0x2000225c

08025010 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8025010:	b410      	push	{r4}
    uint8_t id = channelRemove->ChannelId;
 8025012:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8025014:	2902      	cmp	r1, #2
 8025016:	d90e      	bls.n	8025036 <RegionEU868ChannelsRemove+0x26>
    {
        return false;
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8025018:	4809      	ldr	r0, [pc, #36]	; (8025040 <RegionEU868ChannelsRemove+0x30>)
 802501a:	230c      	movs	r3, #12
 802501c:	434b      	muls	r3, r1
 802501e:	18c4      	adds	r4, r0, r3
 8025020:	2200      	movs	r2, #0
 8025022:	50c2      	str	r2, [r0, r3]
 8025024:	e9c4 2201 	strd	r2, r2, [r4, #4]

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8025028:	f500 709c 	add.w	r0, r0, #312	; 0x138
}
 802502c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8025030:	2210      	movs	r2, #16
 8025032:	f7ff b8c8 	b.w	80241c6 <RegionCommonChanDisable>
}
 8025036:	2000      	movs	r0, #0
 8025038:	f85d 4b04 	ldr.w	r4, [sp], #4
 802503c:	4770      	bx	lr
 802503e:	bf00      	nop
 8025040:	2000225c 	.word	0x2000225c

08025044 <RegionEU868ApplyCFList>:
{
 8025044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025048:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 802504a:	2350      	movs	r3, #80	; 0x50
 802504c:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8025050:	7903      	ldrb	r3, [r0, #4]
 8025052:	2b10      	cmp	r3, #16
{
 8025054:	4607      	mov	r7, r0
    if( applyCFList->Size != 16 )
 8025056:	d130      	bne.n	80250ba <RegionEU868ApplyCFList+0x76>
    if( applyCFList->Payload[15] != 0 )
 8025058:	6803      	ldr	r3, [r0, #0]
 802505a:	7bdd      	ldrb	r5, [r3, #15]
 802505c:	bb6d      	cbnz	r5, 80250ba <RegionEU868ApplyCFList+0x76>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 802505e:	2403      	movs	r4, #3
            newChannel.Frequency = 0;
 8025060:	46a8      	mov	r8, r5
            newChannel.Frequency *= 100;
 8025062:	2664      	movs	r6, #100	; 0x64
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8025064:	2c07      	cmp	r4, #7
 8025066:	d814      	bhi.n	8025092 <RegionEU868ApplyCFList+0x4e>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8025068:	683a      	ldr	r2, [r7, #0]
 802506a:	5d53      	ldrb	r3, [r2, r5]
 802506c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 802506e:	442a      	add	r2, r5
 8025070:	7851      	ldrb	r1, [r2, #1]
 8025072:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8025076:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8025078:	7892      	ldrb	r2, [r2, #2]
 802507a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 802507e:	4373      	muls	r3, r6
            newChannel.Rx1Frequency = 0;
 8025080:	e9cd 3803 	strd	r3, r8, [sp, #12]
        if( newChannel.Frequency != 0 )
 8025084:	b963      	cbnz	r3, 80250a0 <RegionEU868ApplyCFList+0x5c>
            RegionEU868ChannelsRemove( &channelRemove );
 8025086:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 8025088:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 802508c:	f7ff ffc0 	bl	8025010 <RegionEU868ChannelsRemove>
 8025090:	e00d      	b.n	80250ae <RegionEU868ApplyCFList+0x6a>
            newChannel.Frequency = 0;
 8025092:	f8cd 800c 	str.w	r8, [sp, #12]
            newChannel.DrRange.Value = 0;
 8025096:	f88d 8014 	strb.w	r8, [sp, #20]
            newChannel.Rx1Frequency = 0;
 802509a:	f8cd 8010 	str.w	r8, [sp, #16]
        if( newChannel.Frequency != 0 )
 802509e:	e7f2      	b.n	8025086 <RegionEU868ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 80250a0:	ab03      	add	r3, sp, #12
            RegionEU868ChannelAdd( &channelAdd );
 80250a2:	a801      	add	r0, sp, #4
            channelAdd.NewChannel = &newChannel;
 80250a4:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 80250a6:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 80250aa:	f7ff ff55 	bl	8024f58 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80250ae:	3401      	adds	r4, #1
 80250b0:	b2e4      	uxtb	r4, r4
 80250b2:	2c10      	cmp	r4, #16
 80250b4:	f105 0503 	add.w	r5, r5, #3
 80250b8:	d1d4      	bne.n	8025064 <RegionEU868ApplyCFList+0x20>
}
 80250ba:	b006      	add	sp, #24
 80250bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080250c0 <RegionEU868NewChannelReq>:
{
 80250c0:	b507      	push	{r0, r1, r2, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 80250c2:	6802      	ldr	r2, [r0, #0]
 80250c4:	7903      	ldrb	r3, [r0, #4]
 80250c6:	6811      	ldr	r1, [r2, #0]
 80250c8:	b949      	cbnz	r1, 80250de <RegionEU868NewChannelReq+0x1e>
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80250ca:	4668      	mov	r0, sp
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80250cc:	f88d 3000 	strb.w	r3, [sp]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80250d0:	f7ff ff9e 	bl	8025010 <RegionEU868ChannelsRemove>
 80250d4:	b980      	cbnz	r0, 80250f8 <RegionEU868NewChannelReq+0x38>
            status &= 0xFC;
 80250d6:	2000      	movs	r0, #0
}
 80250d8:	b003      	add	sp, #12
 80250da:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80250de:	4668      	mov	r0, sp
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80250e0:	9200      	str	r2, [sp, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80250e2:	f88d 3004 	strb.w	r3, [sp, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80250e6:	f7ff ff37 	bl	8024f58 <RegionEU868ChannelAdd>
 80250ea:	2806      	cmp	r0, #6
 80250ec:	d8f3      	bhi.n	80250d6 <RegionEU868NewChannelReq+0x16>
 80250ee:	4b03      	ldr	r3, [pc, #12]	; (80250fc <RegionEU868NewChannelReq+0x3c>)
 80250f0:	4418      	add	r0, r3
 80250f2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80250f6:	e7ef      	b.n	80250d8 <RegionEU868NewChannelReq+0x18>
    uint8_t status = 0x03;
 80250f8:	2003      	movs	r0, #3
 80250fa:	e7ed      	b.n	80250d8 <RegionEU868NewChannelReq+0x18>
 80250fc:	080277d8 	.word	0x080277d8

08025100 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8025100:	b570      	push	{r4, r5, r6, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8025102:	7801      	ldrb	r1, [r0, #0]
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8025104:	4a0f      	ldr	r2, [pc, #60]	; (8025144 <RegionEU868SetContinuousWave+0x44>)
 8025106:	230c      	movs	r3, #12
 8025108:	434b      	muls	r3, r1
 802510a:	18d1      	adds	r1, r2, r3
 802510c:	58d5      	ldr	r5, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 802510e:	7a4b      	ldrb	r3, [r1, #9]
 8025110:	2114      	movs	r1, #20
{
 8025112:	4604      	mov	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8025114:	fb01 2303 	mla	r3, r1, r3, r2

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8025118:	edd4 0a02 	vldr	s1, [r4, #8]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 802511c:	f993 00c2 	ldrsb.w	r0, [r3, #194]	; 0xc2
 8025120:	f994 3002 	ldrsb.w	r3, [r4, #2]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8025124:	ed94 0a01 	vldr	s0, [r4, #4]
 8025128:	4298      	cmp	r0, r3
 802512a:	bfb8      	it	lt
 802512c:	4618      	movlt	r0, r3
 802512e:	f7ff f9b5 	bl	802449c <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8025132:	4b05      	ldr	r3, [pc, #20]	; (8025148 <RegionEU868SetContinuousWave+0x48>)
 8025134:	89a2      	ldrh	r2, [r4, #12]
 8025136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8025138:	4601      	mov	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 802513a:	4628      	mov	r0, r5
}
 802513c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8025140:	4718      	bx	r3
 8025142:	bf00      	nop
 8025144:	2000225c 	.word	0x2000225c
 8025148:	08027928 	.word	0x08027928

0802514c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
 802514c:	1a88      	subs	r0, r1, r2
 802514e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 8025150:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8025154:	b2c0      	uxtb	r0, r0
 8025156:	4770      	bx	lr

08025158 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 8025158:	4b01      	ldr	r3, [pc, #4]	; (8025160 <srand1+0x8>)
 802515a:	6018      	str	r0, [r3, #0]
}
 802515c:	4770      	bx	lr
 802515e:	bf00      	nop
 8025160:	20001204 	.word	0x20001204

08025164 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8025164:	4a0b      	ldr	r2, [pc, #44]	; (8025194 <randr+0x30>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8025166:	b530      	push	{r4, r5, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8025168:	6813      	ldr	r3, [r2, #0]
 802516a:	4d0b      	ldr	r5, [pc, #44]	; (8025198 <randr+0x34>)
 802516c:	f243 0439 	movw	r4, #12345	; 0x3039
 8025170:	fb05 4303 	mla	r3, r5, r3, r4
 8025174:	6013      	str	r3, [r2, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8025176:	1a09      	subs	r1, r1, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8025178:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802517c:	fbb3 f2f2 	udiv	r2, r3, r2
 8025180:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8025184:	3101      	adds	r1, #1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8025186:	1a9b      	subs	r3, r3, r2
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8025188:	fb93 f2f1 	sdiv	r2, r3, r1
 802518c:	fb01 3312 	mls	r3, r1, r2, r3
}
 8025190:	4418      	add	r0, r3
 8025192:	bd30      	pop	{r4, r5, pc}
 8025194:	20001204 	.word	0x20001204
 8025198:	41c64e6d 	.word	0x41c64e6d

0802519c <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 802519c:	3801      	subs	r0, #1
 802519e:	440a      	add	r2, r1
 80251a0:	4291      	cmp	r1, r2
 80251a2:	d100      	bne.n	80251a6 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 80251a4:	4770      	bx	lr
        *dst++ = *src++;
 80251a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80251aa:	f800 3f01 	strb.w	r3, [r0, #1]!
 80251ae:	e7f7      	b.n	80251a0 <memcpy1+0x4>

080251b0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
    while( size-- )
 80251b0:	4410      	add	r0, r2
 80251b2:	440a      	add	r2, r1
 80251b4:	4291      	cmp	r1, r2
 80251b6:	d100      	bne.n	80251ba <memcpyr+0xa>
    {
        *dst-- = *src++;
    }
}
 80251b8:	4770      	bx	lr
        *dst-- = *src++;
 80251ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80251be:	f800 3d01 	strb.w	r3, [r0, #-1]!
 80251c2:	e7f7      	b.n	80251b4 <memcpyr+0x4>

080251c4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 80251c4:	4402      	add	r2, r0
 80251c6:	4290      	cmp	r0, r2
 80251c8:	d100      	bne.n	80251cc <memset1+0x8>
    {
        *dst++ = value;
    }
}
 80251ca:	4770      	bx	lr
        *dst++ = value;
 80251cc:	f800 1b01 	strb.w	r1, [r0], #1
 80251d0:	e7f9      	b.n	80251c6 <memset1+0x2>
	...

080251d4 <SX1276GetStatus>:
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
}
 80251d4:	4b01      	ldr	r3, [pc, #4]	; (80251dc <SX1276GetStatus+0x8>)
 80251d6:	7918      	ldrb	r0, [r3, #4]
 80251d8:	4770      	bx	lr
 80251da:	bf00      	nop
 80251dc:	20002abc 	.word	0x20002abc

080251e0 <GetFskBandwidthRegValue>:
{
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 80251e0:	b510      	push	{r4, lr}
 80251e2:	4b09      	ldr	r3, [pc, #36]	; (8025208 <GetFskBandwidthRegValue+0x28>)
 80251e4:	2200      	movs	r2, #0
 80251e6:	4619      	mov	r1, r3
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80251e8:	681c      	ldr	r4, [r3, #0]
 80251ea:	4284      	cmp	r4, r0
 80251ec:	d806      	bhi.n	80251fc <GetFskBandwidthRegValue+0x1c>
 80251ee:	689c      	ldr	r4, [r3, #8]
 80251f0:	4284      	cmp	r4, r0
 80251f2:	d903      	bls.n	80251fc <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 80251f4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80251f8:	7910      	ldrb	r0, [r2, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 80251fa:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80251fc:	3201      	adds	r2, #1
 80251fe:	2a15      	cmp	r2, #21
 8025200:	f103 0308 	add.w	r3, r3, #8
 8025204:	d1f0      	bne.n	80251e8 <GetFskBandwidthRegValue+0x8>
    while( 1 );
 8025206:	e7fe      	b.n	8025206 <GetFskBandwidthRegValue+0x26>
 8025208:	0802783c 	.word	0x0802783c

0802520c <SX1276GetTimeOnAir>:
{
 802520c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802520e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8025212:	f89d c018 	ldrb.w	ip, [sp, #24]
 8025216:	f89d 401c 	ldrb.w	r4, [sp, #28]
 802521a:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
 802521e:	b140      	cbz	r0, 8025232 <SX1276GetTimeOnAir+0x26>
 8025220:	2801      	cmp	r0, #1
 8025222:	d019      	beq.n	8025258 <SX1276GetTimeOnAir+0x4c>
 8025224:	2201      	movs	r2, #1
 8025226:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
 8025228:	4413      	add	r3, r2
 802522a:	1e58      	subs	r0, r3, #1
 802522c:	fbb0 f0f2 	udiv	r0, r0, r2
}
 8025230:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 8025232:	f1bc 0f00 	cmp.w	ip, #0
 8025236:	bf0c      	ite	eq
 8025238:	2308      	moveq	r3, #8
 802523a:	2300      	movne	r3, #0
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 802523c:	2d00      	cmp	r5, #0
    return ( preambleLen << 3 ) +
 802523e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
               ( ( crcOn == true ) ? 2 : 0 ) 
 8025242:	bf14      	ite	ne
 8025244:	2502      	movne	r5, #2
 8025246:	2500      	moveq	r5, #0
           ( ( fixLen == false ) ? 8 : 0 ) +
 8025248:	3318      	adds	r3, #24
               ( 0 ) + // Address filter size
 802524a:	4425      	add	r5, r4
             ( syncWordLength << 3 ) +
 802524c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8025250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8025254:	436b      	muls	r3, r5
        break;
 8025256:	e7e7      	b.n	8025228 <SX1276GetTimeOnAir+0x1c>
    int32_t crDenom           = coderate + 4;
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8025258:	1f50      	subs	r0, r2, #5
 802525a:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 802525c:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8025260:	d802      	bhi.n	8025268 <SX1276GetTimeOnAir+0x5c>
    {
        if( preambleLen < 12 )
 8025262:	2e0c      	cmp	r6, #12
 8025264:	bf38      	it	cc
 8025266:	260c      	movcc	r6, #12
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8025268:	2900      	cmp	r1, #0
 802526a:	d137      	bne.n	80252dc <SX1276GetTimeOnAir+0xd0>
 802526c:	f1a2 070b 	sub.w	r7, r2, #11
 8025270:	2f01      	cmp	r7, #1
 8025272:	bf8c      	ite	hi
 8025274:	2700      	movhi	r7, #0
 8025276:	2701      	movls	r7, #1
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
                            ( crcOn ? 16 : 0 ) -
 8025278:	2d00      	cmp	r5, #0
 802527a:	bf14      	ite	ne
 802527c:	2510      	movne	r5, #16
 802527e:	2500      	moveq	r5, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8025280:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 8025284:	f1bc 0f00 	cmp.w	ip, #0
                            ( crcOn ? 16 : 0 ) -
 8025288:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
                            ( fixLen ? 0 : 20 );
 802528c:	bf14      	ite	ne
 802528e:	2400      	movne	r4, #0
 8025290:	2414      	moveq	r4, #20

    if( datarate <= 6 )
 8025292:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
 8025294:	442c      	add	r4, r5
 8025296:	ea4f 0082 	mov.w	r0, r2, lsl #2
 802529a:	f1a2 0502 	sub.w	r5, r2, #2
    if( datarate <= 6 )
 802529e:	d902      	bls.n	80252a6 <SX1276GetTimeOnAir+0x9a>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 80252a0:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 80252a2:	b107      	cbz	r7, 80252a6 <SX1276GetTimeOnAir+0x9a>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80252a4:	00a8      	lsls	r0, r5, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80252a6:	2c00      	cmp	r4, #0
 80252a8:	bfac      	ite	ge
 80252aa:	1904      	addge	r4, r0, r4
 80252ac:	1c04      	addlt	r4, r0, #0
 80252ae:	3c01      	subs	r4, #1

    if( datarate <= 6 )
 80252b0:	2a06      	cmp	r2, #6
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80252b2:	fb94 f4f0 	sdiv	r4, r4, r0
 80252b6:	fb03 6304 	mla	r3, r3, r4, r6
    int32_t intermediate =
 80252ba:	bf8c      	ite	hi
 80252bc:	330c      	addhi	r3, #12
    {
        intermediate += 2;
 80252be:	330e      	addls	r3, #14
    switch( bw )
 80252c0:	2902      	cmp	r1, #2
 80252c2:	d814      	bhi.n	80252ee <SX1276GetTimeOnAir+0xe2>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80252c4:	009b      	lsls	r3, r3, #2
 80252c6:	3301      	adds	r3, #1
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 80252c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80252cc:	40ab      	lsls	r3, r5
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 80252ce:	4353      	muls	r3, r2
 80252d0:	4a07      	ldr	r2, [pc, #28]	; (80252f0 <SX1276GetTimeOnAir+0xe4>)
 80252d2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80252d6:	f8d1 20b0 	ldr.w	r2, [r1, #176]	; 0xb0
 80252da:	e7a5      	b.n	8025228 <SX1276GetTimeOnAir+0x1c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80252dc:	2901      	cmp	r1, #1
 80252de:	d104      	bne.n	80252ea <SX1276GetTimeOnAir+0xde>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80252e0:	f1a2 000c 	sub.w	r0, r2, #12
 80252e4:	4247      	negs	r7, r0
 80252e6:	4147      	adcs	r7, r0
 80252e8:	e7c6      	b.n	8025278 <SX1276GetTimeOnAir+0x6c>
    bool    lowDatareOptimize = false;
 80252ea:	2700      	movs	r7, #0
 80252ec:	e7c4      	b.n	8025278 <SX1276GetTimeOnAir+0x6c>
    return ( numerator + denominator - 1 ) / denominator;
 80252ee:	deff      	udf	#255	; 0xff
 80252f0:	0802783c 	.word	0x0802783c

080252f4 <SX1276GetWakeupTime>:
{
 80252f4:	b508      	push	{r3, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 80252f6:	f7f5 f861 	bl	801a3bc <SX1276MB1LAS_RADIO_GetWakeUpTime>
}
 80252fa:	3002      	adds	r0, #2
 80252fc:	bd08      	pop	{r3, pc}

080252fe <SX1276WriteBuffer>:
{
 80252fe:	b570      	push	{r4, r5, r6, lr}
 8025300:	4606      	mov	r6, r0
    Sx_Board_ChipSelect( 0 );
 8025302:	2000      	movs	r0, #0
{
 8025304:	460c      	mov	r4, r1
 8025306:	4615      	mov	r5, r2
    Sx_Board_ChipSelect( 0 );
 8025308:	f7f5 f976 	bl	801a5f8 <SX1276MB1LAS_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 802530c:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 8025310:	b280      	uxth	r0, r0
 8025312:	f7f5 f962 	bl	801a5da <SX1276MB1LAS_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8025316:	4425      	add	r5, r4
 8025318:	42ac      	cmp	r4, r5
 802531a:	d104      	bne.n	8025326 <SX1276WriteBuffer+0x28>
}
 802531c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_ChipSelect( 1 );
 8025320:	2001      	movs	r0, #1
 8025322:	f7f5 b969 	b.w	801a5f8 <SX1276MB1LAS_RADIO_ChipSelect>
        Sx_Board_SendRecv( buffer[i] );
 8025326:	f814 0b01 	ldrb.w	r0, [r4], #1
 802532a:	f7f5 f956 	bl	801a5da <SX1276MB1LAS_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 802532e:	e7f3      	b.n	8025318 <SX1276WriteBuffer+0x1a>

08025330 <SX1276Write>:
{
 8025330:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
 8025332:	2201      	movs	r2, #1
{
 8025334:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8025338:	f10d 0107 	add.w	r1, sp, #7
 802533c:	f7ff ffdf 	bl	80252fe <SX1276WriteBuffer>
}
 8025340:	b003      	add	sp, #12
 8025342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08025348 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8025348:	4b10      	ldr	r3, [pc, #64]	; (802538c <SX1276SetChannel+0x44>)
{
 802534a:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
 802534c:	6098      	str	r0, [r3, #8]
    SX_FREQ_TO_CHANNEL( channel, freq );
 802534e:	f643 5309 	movw	r3, #15625	; 0x3d09
 8025352:	f641 6484 	movw	r4, #7812	; 0x1e84
 8025356:	fbb0 f2f3 	udiv	r2, r0, r3
 802535a:	fb03 0012 	mls	r0, r3, r2, r0
 802535e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8025362:	fbb4 f4f3 	udiv	r4, r4, r3
 8025366:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 802536a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 802536e:	2006      	movs	r0, #6
 8025370:	f7ff ffde 	bl	8025330 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8025374:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8025378:	2007      	movs	r0, #7
 802537a:	f7ff ffd9 	bl	8025330 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 802537e:	b2e1      	uxtb	r1, r4
 8025380:	2008      	movs	r0, #8
}
 8025382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8025386:	f7ff bfd3 	b.w	8025330 <SX1276Write>
 802538a:	bf00      	nop
 802538c:	20002abc 	.word	0x20002abc

08025390 <SX1276ReadBuffer>:
{
 8025390:	b570      	push	{r4, r5, r6, lr}
 8025392:	4606      	mov	r6, r0
    Sx_Board_ChipSelect( 0 );
 8025394:	2000      	movs	r0, #0
{
 8025396:	460c      	mov	r4, r1
 8025398:	4615      	mov	r5, r2
    Sx_Board_ChipSelect( 0 );
 802539a:	f7f5 f92d 	bl	801a5f8 <SX1276MB1LAS_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 802539e:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80253a2:	f7f5 f91a 	bl	801a5da <SX1276MB1LAS_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 80253a6:	4425      	add	r5, r4
 80253a8:	42ac      	cmp	r4, r5
 80253aa:	d104      	bne.n	80253b6 <SX1276ReadBuffer+0x26>
}
 80253ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Sx_Board_ChipSelect( 1 );
 80253b0:	2001      	movs	r0, #1
 80253b2:	f7f5 b921 	b.w	801a5f8 <SX1276MB1LAS_RADIO_ChipSelect>
        buffer[i] = Sx_Board_SendRecv( 0 );
 80253b6:	2000      	movs	r0, #0
 80253b8:	f7f5 f90f 	bl	801a5da <SX1276MB1LAS_RADIO_SendRecv>
 80253bc:	f804 0b01 	strb.w	r0, [r4], #1
    for( i = 0; i < size; i++ )
 80253c0:	e7f2      	b.n	80253a8 <SX1276ReadBuffer+0x18>

080253c2 <SX1276Read>:
{
 80253c2:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 80253c4:	2201      	movs	r2, #1
 80253c6:	f10d 0107 	add.w	r1, sp, #7
 80253ca:	f7ff ffe1 	bl	8025390 <SX1276ReadBuffer>
}
 80253ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80253d2:	b003      	add	sp, #12
 80253d4:	f85d fb04 	ldr.w	pc, [sp], #4

080253d8 <RxChainCalibration>:
{
 80253d8:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80253da:	2009      	movs	r0, #9
 80253dc:	f7ff fff1 	bl	80253c2 <SX1276Read>
 80253e0:	4605      	mov	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80253e2:	2006      	movs	r0, #6
 80253e4:	f7ff ffed 	bl	80253c2 <SX1276Read>
 80253e8:	4604      	mov	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80253ea:	2007      	movs	r0, #7
 80253ec:	f7ff ffe9 	bl	80253c2 <SX1276Read>
 80253f0:	0203      	lsls	r3, r0, #8
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80253f2:	2008      	movs	r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80253f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80253f8:	f7ff ffe3 	bl	80253c2 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80253fc:	4304      	orrs	r4, r0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80253fe:	b2c3      	uxtb	r3, r0
 8025400:	f643 5009 	movw	r0, #15625	; 0x3d09
 8025404:	4343      	muls	r3, r0
 8025406:	0a24      	lsrs	r4, r4, #8
 8025408:	3380      	adds	r3, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
 802540a:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 802540c:	4344      	muls	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 802540e:	2009      	movs	r0, #9
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8025410:	eb04 2413 	add.w	r4, r4, r3, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8025414:	f7ff ff8c 	bl	8025330 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8025418:	203b      	movs	r0, #59	; 0x3b
 802541a:	f7ff ffd2 	bl	80253c2 <SX1276Read>
 802541e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8025422:	b2c1      	uxtb	r1, r0
 8025424:	203b      	movs	r0, #59	; 0x3b
 8025426:	f7ff ff83 	bl	8025330 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 802542a:	203b      	movs	r0, #59	; 0x3b
 802542c:	f7ff ffc9 	bl	80253c2 <SX1276Read>
 8025430:	0682      	lsls	r2, r0, #26
 8025432:	d4fa      	bmi.n	802542a <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8025434:	480c      	ldr	r0, [pc, #48]	; (8025468 <RxChainCalibration+0x90>)
 8025436:	f7ff ff87 	bl	8025348 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 802543a:	203b      	movs	r0, #59	; 0x3b
 802543c:	f7ff ffc1 	bl	80253c2 <SX1276Read>
 8025440:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8025444:	b2c1      	uxtb	r1, r0
 8025446:	203b      	movs	r0, #59	; 0x3b
 8025448:	f7ff ff72 	bl	8025330 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 802544c:	203b      	movs	r0, #59	; 0x3b
 802544e:	f7ff ffb8 	bl	80253c2 <SX1276Read>
 8025452:	0683      	lsls	r3, r0, #26
 8025454:	d4fa      	bmi.n	802544c <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8025456:	4629      	mov	r1, r5
 8025458:	2009      	movs	r0, #9
 802545a:	f7ff ff69 	bl	8025330 <SX1276Write>
    SX1276SetChannel( initialFreq );
 802545e:	4620      	mov	r0, r4
}
 8025460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SX1276SetChannel( initialFreq );
 8025464:	f7ff bf70 	b.w	8025348 <SX1276SetChannel>
 8025468:	33bca100 	.word	0x33bca100

0802546c <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 802546c:	4b04      	ldr	r3, [pc, #16]	; (8025480 <SX1276OnDio4Irq+0x14>)
 802546e:	795a      	ldrb	r2, [r3, #5]
 8025470:	b92a      	cbnz	r2, 802547e <SX1276OnDio4Irq+0x12>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8025472:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8025476:	b912      	cbnz	r2, 802547e <SX1276OnDio4Irq+0x12>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8025478:	2201      	movs	r2, #1
 802547a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 802547e:	4770      	bx	lr
 8025480:	20002abc 	.word	0x20002abc

08025484 <SX1276OnDio3Irq>:
{
 8025484:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8025486:	4b11      	ldr	r3, [pc, #68]	; (80254cc <SX1276OnDio3Irq+0x48>)
 8025488:	795e      	ldrb	r6, [r3, #5]
 802548a:	2e01      	cmp	r6, #1
 802548c:	d11c      	bne.n	80254c8 <SX1276OnDio3Irq+0x44>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 802548e:	2012      	movs	r0, #18
 8025490:	f7ff ff97 	bl	80253c2 <SX1276Read>
 8025494:	f010 0401 	ands.w	r4, r0, #1
 8025498:	4d0d      	ldr	r5, [pc, #52]	; (80254d0 <SX1276OnDio3Irq+0x4c>)
 802549a:	d00b      	beq.n	80254b4 <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 802549c:	2105      	movs	r1, #5
 802549e:	2012      	movs	r0, #18
 80254a0:	f7ff ff46 	bl	8025330 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80254a4:	682b      	ldr	r3, [r5, #0]
 80254a6:	b17b      	cbz	r3, 80254c8 <SX1276OnDio3Irq+0x44>
 80254a8:	699b      	ldr	r3, [r3, #24]
 80254aa:	b16b      	cbz	r3, 80254c8 <SX1276OnDio3Irq+0x44>
                RadioEvents->CadDone( true );
 80254ac:	4630      	mov	r0, r6
}
 80254ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
 80254b2:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80254b4:	2104      	movs	r1, #4
 80254b6:	2012      	movs	r0, #18
 80254b8:	f7ff ff3a 	bl	8025330 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80254bc:	682b      	ldr	r3, [r5, #0]
 80254be:	b11b      	cbz	r3, 80254c8 <SX1276OnDio3Irq+0x44>
 80254c0:	699b      	ldr	r3, [r3, #24]
 80254c2:	b10b      	cbz	r3, 80254c8 <SX1276OnDio3Irq+0x44>
                RadioEvents->CadDone( false );
 80254c4:	4620      	mov	r0, r4
 80254c6:	e7f2      	b.n	80254ae <SX1276OnDio3Irq+0x2a>
}
 80254c8:	bd70      	pop	{r4, r5, r6, pc}
 80254ca:	bf00      	nop
 80254cc:	20002abc 	.word	0x20002abc
 80254d0:	20002398 	.word	0x20002398

080254d4 <SX1276OnDio2Irq>:
{
 80254d4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80254d6:	4c2c      	ldr	r4, [pc, #176]	; (8025588 <SX1276OnDio2Irq+0xb4>)
 80254d8:	7925      	ldrb	r5, [r4, #4]
 80254da:	2d01      	cmp	r5, #1
 80254dc:	d002      	beq.n	80254e4 <SX1276OnDio2Irq+0x10>
 80254de:	2d02      	cmp	r5, #2
 80254e0:	d048      	beq.n	8025574 <SX1276OnDio2Irq+0xa0>
}
 80254e2:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80254e4:	7963      	ldrb	r3, [r4, #5]
 80254e6:	b1cb      	cbz	r3, 802551c <SX1276OnDio2Irq+0x48>
 80254e8:	2b01      	cmp	r3, #1
 80254ea:	d1fa      	bne.n	80254e2 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80254ec:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80254f0:	2b00      	cmp	r3, #0
 80254f2:	d0f6      	beq.n	80254e2 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80254f4:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80254f6:	2012      	movs	r0, #18
 80254f8:	f7ff ff1a 	bl	8025330 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80254fc:	4b23      	ldr	r3, [pc, #140]	; (802558c <SX1276OnDio2Irq+0xb8>)
 80254fe:	681b      	ldr	r3, [r3, #0]
 8025500:	2b00      	cmp	r3, #0
 8025502:	d0ee      	beq.n	80254e2 <SX1276OnDio2Irq+0xe>
 8025504:	695c      	ldr	r4, [r3, #20]
 8025506:	2c00      	cmp	r4, #0
 8025508:	d0eb      	beq.n	80254e2 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 802550a:	201c      	movs	r0, #28
 802550c:	f7ff ff59 	bl	80253c2 <SX1276Read>
 8025510:	4623      	mov	r3, r4
 8025512:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
 8025516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 802551a:	4718      	bx	r3
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 802551c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8025520:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8025524:	2b00      	cmp	r3, #0
 8025526:	d1dc      	bne.n	80254e2 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8025528:	4819      	ldr	r0, [pc, #100]	; (8025590 <SX1276OnDio2Irq+0xbc>)
 802552a:	f001 fbdb 	bl	8026ce4 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 802552e:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8025530:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8025534:	f7ff ff45 	bl	80253c2 <SX1276Read>
 8025538:	0840      	lsrs	r0, r0, #1
 802553a:	4240      	negs	r0, r0
 802553c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8025540:	201b      	movs	r0, #27
 8025542:	f7ff ff3e 	bl	80253c2 <SX1276Read>
 8025546:	4605      	mov	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8025548:	201c      	movs	r0, #28
 802554a:	f7ff ff3a 	bl	80253c2 <SX1276Read>
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 802554e:	f643 5209 	movw	r2, #15625	; 0x3d09
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8025552:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8025556:	b2c3      	uxtb	r3, r0
 8025558:	4353      	muls	r3, r2
 802555a:	0a2d      	lsrs	r5, r5, #8
 802555c:	4355      	muls	r5, r2
 802555e:	3380      	adds	r3, #128	; 0x80
 8025560:	eb05 2313 	add.w	r3, r5, r3, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8025564:	200c      	movs	r0, #12
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8025566:	6363      	str	r3, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8025568:	f7ff ff2b 	bl	80253c2 <SX1276Read>
 802556c:	0940      	lsrs	r0, r0, #5
 802556e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 8025572:	e7b6      	b.n	80254e2 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8025574:	7963      	ldrb	r3, [r4, #5]
 8025576:	2b01      	cmp	r3, #1
 8025578:	d1b3      	bne.n	80254e2 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 802557a:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 802557e:	2b00      	cmp	r3, #0
 8025580:	d0af      	beq.n	80254e2 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8025582:	4629      	mov	r1, r5
 8025584:	e7b7      	b.n	80254f6 <SX1276OnDio2Irq+0x22>
 8025586:	bf00      	nop
 8025588:	20002abc 	.word	0x20002abc
 802558c:	20002398 	.word	0x20002398
 8025590:	20002aa4 	.word	0x20002aa4

08025594 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8025594:	b508      	push	{r3, lr}
      Sx_Board_SetXO( SET ); 
 8025596:	2001      	movs	r0, #1
 8025598:	f7f4 ff12 	bl	801a3c0 <SX1276MB1LAS_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 802559c:	2001      	movs	r0, #1
 802559e:	f7f4 ffe5 	bl	801a56c <SX1276MB1LAS_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80255a2:	2001      	movs	r0, #1
 80255a4:	f7ff ff0d 	bl	80253c2 <SX1276Read>
 80255a8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80255ac:	f040 0105 	orr.w	r1, r0, #5
}
 80255b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80255b4:	2001      	movs	r0, #1
 80255b6:	f7ff bebb 	b.w	8025330 <SX1276Write>

080255ba <SX1276SetOpMode>:
{
 80255ba:	b538      	push	{r3, r4, r5, lr}
    if( opMode == RF_OPMODE_SLEEP )
 80255bc:	4604      	mov	r4, r0
 80255be:	b978      	cbnz	r0, 80255e0 <SX1276SetOpMode+0x26>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80255c0:	2001      	movs	r0, #1
 80255c2:	f7ff fefe 	bl	80253c2 <SX1276Read>
 80255c6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 80255ca:	2001      	movs	r0, #1
 80255cc:	f7ff feb0 	bl	8025330 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 80255d0:	4620      	mov	r0, r4
 80255d2:	f7f4 ffcb 	bl	801a56c <SX1276MB1LAS_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 80255d6:	4620      	mov	r0, r4
}
 80255d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      Sx_Board_SetXO( RESET ); 
 80255dc:	f7f4 bef0 	b.w	801a3c0 <SX1276MB1LAS_RADIO_SetXO>
    else if ( opMode == RF_OPMODE_RECEIVER )
 80255e0:	2805      	cmp	r0, #5
 80255e2:	d103      	bne.n	80255ec <SX1276SetOpMode+0x32>
}
 80255e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80255e8:	f7ff bfd4 	b.w	8025594 <SX1276SetOpMode.part.0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 80255ec:	2009      	movs	r0, #9
 80255ee:	f7ff fee8 	bl	80253c2 <SX1276Read>
 80255f2:	4605      	mov	r5, r0
      Sx_Board_SetXO( SET ); 
 80255f4:	2001      	movs	r0, #1
 80255f6:	f7f4 fee3 	bl	801a3c0 <SX1276MB1LAS_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80255fa:	062b      	lsls	r3, r5, #24
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 80255fc:	bf4c      	ite	mi
 80255fe:	2003      	movmi	r0, #3
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 8025600:	2002      	movpl	r0, #2
 8025602:	f7f4 ffb3 	bl	801a56c <SX1276MB1LAS_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8025606:	2001      	movs	r0, #1
 8025608:	f7ff fedb 	bl	80253c2 <SX1276Read>
 802560c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025610:	ea40 0104 	orr.w	r1, r0, r4
}
 8025614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8025618:	2001      	movs	r0, #1
 802561a:	f7ff be89 	b.w	8025330 <SX1276Write>
	...

08025620 <SX1276SetSleep>:
{
 8025620:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8025622:	4809      	ldr	r0, [pc, #36]	; (8025648 <SX1276SetSleep+0x28>)
 8025624:	f001 fb5e 	bl	8026ce4 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8025628:	4808      	ldr	r0, [pc, #32]	; (802564c <SX1276SetSleep+0x2c>)
 802562a:	f001 fb5b 	bl	8026ce4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 802562e:	4808      	ldr	r0, [pc, #32]	; (8025650 <SX1276SetSleep+0x30>)
 8025630:	f001 fb58 	bl	8026ce4 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8025634:	2000      	movs	r0, #0
 8025636:	f7ff ffc0 	bl	80255ba <SX1276SetOpMode>
    Sx_Board_SetXO( RESET );
 802563a:	2000      	movs	r0, #0
 802563c:	f7f4 fec0 	bl	801a3c0 <SX1276MB1LAS_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 8025640:	4b04      	ldr	r3, [pc, #16]	; (8025654 <SX1276SetSleep+0x34>)
 8025642:	2200      	movs	r2, #0
 8025644:	711a      	strb	r2, [r3, #4]
}
 8025646:	bd08      	pop	{r3, pc}
 8025648:	20002b24 	.word	0x20002b24
 802564c:	20002a8c 	.word	0x20002a8c
 8025650:	20002aa4 	.word	0x20002aa4
 8025654:	20002abc 	.word	0x20002abc

08025658 <SX1276SetStby>:
{
 8025658:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 802565a:	4808      	ldr	r0, [pc, #32]	; (802567c <SX1276SetStby+0x24>)
 802565c:	f001 fb42 	bl	8026ce4 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8025660:	4807      	ldr	r0, [pc, #28]	; (8025680 <SX1276SetStby+0x28>)
 8025662:	f001 fb3f 	bl	8026ce4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8025666:	4807      	ldr	r0, [pc, #28]	; (8025684 <SX1276SetStby+0x2c>)
 8025668:	f001 fb3c 	bl	8026ce4 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 802566c:	2001      	movs	r0, #1
 802566e:	f7ff ffa4 	bl	80255ba <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8025672:	4b05      	ldr	r3, [pc, #20]	; (8025688 <SX1276SetStby+0x30>)
 8025674:	2200      	movs	r2, #0
 8025676:	711a      	strb	r2, [r3, #4]
}
 8025678:	bd08      	pop	{r3, pc}
 802567a:	bf00      	nop
 802567c:	20002b24 	.word	0x20002b24
 8025680:	20002a8c 	.word	0x20002a8c
 8025684:	20002aa4 	.word	0x20002aa4
 8025688:	20002abc 	.word	0x20002abc

0802568c <SX1276SetRx>:
{
 802568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 802568e:	4c7c      	ldr	r4, [pc, #496]	; (8025880 <SX1276SetRx+0x1f4>)
{
 8025690:	4607      	mov	r7, r0
    TimerStop( &TxTimeoutTimer );
 8025692:	487c      	ldr	r0, [pc, #496]	; (8025884 <SX1276SetRx+0x1f8>)
 8025694:	f001 fb26 	bl	8026ce4 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 8025698:	7965      	ldrb	r5, [r4, #5]
 802569a:	b325      	cbz	r5, 80256e6 <SX1276SetRx+0x5a>
 802569c:	2d01      	cmp	r5, #1
 802569e:	d046      	beq.n	802572e <SX1276SetRx+0xa2>
 80256a0:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 80256a2:	4879      	ldr	r0, [pc, #484]	; (8025888 <SX1276SetRx+0x1fc>)
 80256a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80256a8:	2100      	movs	r1, #0
 80256aa:	f001 fcfb 	bl	80270a4 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 80256ae:	2301      	movs	r3, #1
 80256b0:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 80256b2:	b137      	cbz	r7, 80256c2 <SX1276SetRx+0x36>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80256b4:	4875      	ldr	r0, [pc, #468]	; (802588c <SX1276SetRx+0x200>)
 80256b6:	4639      	mov	r1, r7
 80256b8:	f001 fb9e 	bl	8026df8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80256bc:	4873      	ldr	r0, [pc, #460]	; (802588c <SX1276SetRx+0x200>)
 80256be:	f001 fb61 	bl	8026d84 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80256c2:	7963      	ldrb	r3, [r4, #5]
 80256c4:	2b00      	cmp	r3, #0
 80256c6:	f040 80cf 	bne.w	8025868 <SX1276SetRx+0x1dc>
    else if ( opMode == RF_OPMODE_RECEIVER )
 80256ca:	f7ff ff63 	bl	8025594 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 80256ce:	2e00      	cmp	r6, #0
 80256d0:	f040 80d4 	bne.w	802587c <SX1276SetRx+0x1f0>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80256d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80256d6:	486e      	ldr	r0, [pc, #440]	; (8025890 <SX1276SetRx+0x204>)
 80256d8:	f001 fb8e 	bl	8026df8 <UTIL_TIMER_SetPeriod>
}
 80256dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            TimerStart( &RxTimeoutSyncWord );
 80256e0:	486b      	ldr	r0, [pc, #428]	; (8025890 <SX1276SetRx+0x204>)
 80256e2:	f001 bb4f 	b.w	8026d84 <UTIL_TIMER_Start>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80256e6:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80256e8:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80256ec:	f7ff fe69 	bl	80253c2 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80256f0:	f000 0003 	and.w	r0, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80256f4:	f040 010c 	orr.w	r1, r0, #12
 80256f8:	2040      	movs	r0, #64	; 0x40
 80256fa:	f7ff fe19 	bl	8025330 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80256fe:	2041      	movs	r0, #65	; 0x41
 8025700:	f7ff fe5f 	bl	80253c2 <SX1276Read>
 8025704:	f060 003e 	orn	r0, r0, #62	; 0x3e
 8025708:	b2c1      	uxtb	r1, r0
 802570a:	2041      	movs	r0, #65	; 0x41
 802570c:	f7ff fe10 	bl	8025330 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8025710:	2035      	movs	r0, #53	; 0x35
 8025712:	f7ff fe56 	bl	80253c2 <SX1276Read>
 8025716:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 802571a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 802571e:	211e      	movs	r1, #30
 8025720:	200d      	movs	r0, #13
 8025722:	f7ff fe05 	bl	8025330 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8025726:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8025728:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 802572a:	8765      	strh	r5, [r4, #58]	; 0x3a
        break;
 802572c:	e7b9      	b.n	80256a2 <SX1276SetRx+0x16>
            if( SX1276.Settings.LoRa.IqInverted == true )
 802572e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8025732:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8025734:	b32b      	cbz	r3, 8025782 <SX1276SetRx+0xf6>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8025736:	f7ff fe44 	bl	80253c2 <SX1276Read>
 802573a:	f040 0041 	orr.w	r0, r0, #65	; 0x41
 802573e:	b2c1      	uxtb	r1, r0
 8025740:	2033      	movs	r0, #51	; 0x33
 8025742:	f7ff fdf5 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8025746:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8025748:	203b      	movs	r0, #59	; 0x3b
 802574a:	f7ff fdf1 	bl	8025330 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 802574e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8025750:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8025752:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8025756:	d876      	bhi.n	8025846 <SX1276SetRx+0x1ba>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8025758:	f7ff fe33 	bl	80253c2 <SX1276Read>
 802575c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8025760:	2031      	movs	r0, #49	; 0x31
 8025762:	f7ff fde5 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8025766:	2100      	movs	r1, #0
 8025768:	2030      	movs	r0, #48	; 0x30
 802576a:	f7ff fde1 	bl	8025330 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 802576e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8025770:	2b08      	cmp	r3, #8
 8025772:	d81b      	bhi.n	80257ac <SX1276SetRx+0x120>
 8025774:	e8df f003 	tbb	[pc, r3]
 8025778:	473e3510 	.word	0x473e3510
 802577c:	62625950 	.word	0x62625950
 8025780:	62          	.byte	0x62
 8025781:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8025782:	f7ff fe1e 	bl	80253c2 <SX1276Read>
 8025786:	f000 00be 	and.w	r0, r0, #190	; 0xbe
 802578a:	f040 0101 	orr.w	r1, r0, #1
 802578e:	2033      	movs	r0, #51	; 0x33
 8025790:	f7ff fdce 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8025794:	211d      	movs	r1, #29
 8025796:	e7d7      	b.n	8025748 <SX1276SetRx+0xbc>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8025798:	202f      	movs	r0, #47	; 0x2f
 802579a:	2148      	movs	r1, #72	; 0x48
 802579c:	f7ff fdc8 	bl	8025330 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80257a0:	68a0      	ldr	r0, [r4, #8]
 80257a2:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 80257a6:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80257a8:	f7ff fdce 	bl	8025348 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80257ac:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80257b0:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80257b4:	2b00      	cmp	r3, #0
 80257b6:	d04d      	beq.n	8025854 <SX1276SetRx+0x1c8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80257b8:	211d      	movs	r1, #29
 80257ba:	2011      	movs	r0, #17
 80257bc:	f7ff fdb8 	bl	8025330 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80257c0:	2040      	movs	r0, #64	; 0x40
 80257c2:	f7ff fdfe 	bl	80253c2 <SX1276Read>
 80257c6:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80257ca:	2040      	movs	r0, #64	; 0x40
 80257cc:	f7ff fdb0 	bl	8025330 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 80257d0:	2100      	movs	r1, #0
 80257d2:	200f      	movs	r0, #15
 80257d4:	f7ff fdac 	bl	8025330 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80257d8:	2100      	movs	r1, #0
 80257da:	200d      	movs	r0, #13
 80257dc:	f7ff fda8 	bl	8025330 <SX1276Write>
        break;
 80257e0:	e75f      	b.n	80256a2 <SX1276SetRx+0x16>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80257e2:	202f      	movs	r0, #47	; 0x2f
 80257e4:	2144      	movs	r1, #68	; 0x44
 80257e6:	f7ff fda3 	bl	8025330 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80257ea:	68a0      	ldr	r0, [r4, #8]
 80257ec:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 80257f0:	3034      	adds	r0, #52	; 0x34
 80257f2:	e7d9      	b.n	80257a8 <SX1276SetRx+0x11c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80257f4:	202f      	movs	r0, #47	; 0x2f
 80257f6:	2144      	movs	r1, #68	; 0x44
 80257f8:	f7ff fd9a 	bl	8025330 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80257fc:	68a0      	ldr	r0, [r4, #8]
 80257fe:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8025802:	3004      	adds	r0, #4
 8025804:	e7d0      	b.n	80257a8 <SX1276SetRx+0x11c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8025806:	202f      	movs	r0, #47	; 0x2f
 8025808:	2144      	movs	r1, #68	; 0x44
 802580a:	f7ff fd91 	bl	8025330 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 802580e:	68a0      	ldr	r0, [r4, #8]
 8025810:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8025814:	305e      	adds	r0, #94	; 0x5e
 8025816:	e7c7      	b.n	80257a8 <SX1276SetRx+0x11c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8025818:	202f      	movs	r0, #47	; 0x2f
 802581a:	2144      	movs	r1, #68	; 0x44
 802581c:	f7ff fd88 	bl	8025330 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8025820:	68a0      	ldr	r0, [r4, #8]
 8025822:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8025826:	3012      	adds	r0, #18
 8025828:	e7be      	b.n	80257a8 <SX1276SetRx+0x11c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 802582a:	202f      	movs	r0, #47	; 0x2f
 802582c:	2144      	movs	r1, #68	; 0x44
 802582e:	f7ff fd7f 	bl	8025330 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8025832:	68a0      	ldr	r0, [r4, #8]
 8025834:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8025838:	30c6      	adds	r0, #198	; 0xc6
 802583a:	e7b5      	b.n	80257a8 <SX1276SetRx+0x11c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 802583c:	2140      	movs	r1, #64	; 0x40
 802583e:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8025840:	f7ff fd76 	bl	8025330 <SX1276Write>
 8025844:	e7b2      	b.n	80257ac <SX1276SetRx+0x120>
 8025846:	f7ff fdbc 	bl	80253c2 <SX1276Read>
 802584a:	f060 007f 	orn	r0, r0, #127	; 0x7f
 802584e:	b2c1      	uxtb	r1, r0
 8025850:	2031      	movs	r0, #49	; 0x31
 8025852:	e7f5      	b.n	8025840 <SX1276SetRx+0x1b4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8025854:	211f      	movs	r1, #31
 8025856:	2011      	movs	r0, #17
 8025858:	f7ff fd6a 	bl	8025330 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 802585c:	2040      	movs	r0, #64	; 0x40
 802585e:	f7ff fdb0 	bl	80253c2 <SX1276Read>
 8025862:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8025866:	e7b0      	b.n	80257ca <SX1276SetRx+0x13e>
        if( rxContinuous == true )
 8025868:	b11e      	cbz	r6, 8025872 <SX1276SetRx+0x1e6>
}
 802586a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802586e:	f7ff be91 	b.w	8025594 <SX1276SetOpMode.part.0>
 8025872:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8025876:	2006      	movs	r0, #6
 8025878:	f7ff be9f 	b.w	80255ba <SX1276SetOpMode>
}
 802587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802587e:	bf00      	nop
 8025880:	20002abc 	.word	0x20002abc
 8025884:	20002a8c 	.word	0x20002a8c
 8025888:	2000239c 	.word	0x2000239c
 802588c:	20002b24 	.word	0x20002b24
 8025890:	20002aa4 	.word	0x20002aa4

08025894 <SX1276StartCad>:
{
 8025894:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 8025896:	4c0c      	ldr	r4, [pc, #48]	; (80258c8 <SX1276StartCad+0x34>)
 8025898:	7963      	ldrb	r3, [r4, #5]
 802589a:	2b01      	cmp	r3, #1
 802589c:	d112      	bne.n	80258c4 <SX1276StartCad+0x30>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 802589e:	21fa      	movs	r1, #250	; 0xfa
 80258a0:	2011      	movs	r0, #17
 80258a2:	f7ff fd45 	bl	8025330 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80258a6:	2040      	movs	r0, #64	; 0x40
 80258a8:	f7ff fd8b 	bl	80253c2 <SX1276Read>
 80258ac:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 80258b0:	2040      	movs	r0, #64	; 0x40
 80258b2:	f7ff fd3d 	bl	8025330 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 80258b6:	2303      	movs	r3, #3
 80258b8:	7123      	strb	r3, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80258ba:	2007      	movs	r0, #7
}
 80258bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80258c0:	f7ff be7b 	b.w	80255ba <SX1276SetOpMode>
}
 80258c4:	bd10      	pop	{r4, pc}
 80258c6:	bf00      	nop
 80258c8:	20002abc 	.word	0x20002abc

080258cc <SX1276ReadRssi>:
{
 80258cc:	b508      	push	{r3, lr}
    switch( modem )
 80258ce:	b120      	cbz	r0, 80258da <SX1276ReadRssi+0xe>
 80258d0:	2801      	cmp	r0, #1
 80258d2:	d00a      	beq.n	80258ea <SX1276ReadRssi+0x1e>
 80258d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80258d8:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80258da:	2011      	movs	r0, #17
 80258dc:	f7ff fd71 	bl	80253c2 <SX1276Read>
 80258e0:	f3c0 0047 	ubfx	r0, r0, #1, #8
 80258e4:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80258e6:	b200      	sxth	r0, r0
 80258e8:	e7f6      	b.n	80258d8 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80258ea:	4b07      	ldr	r3, [pc, #28]	; (8025908 <SX1276ReadRssi+0x3c>)
 80258ec:	689a      	ldr	r2, [r3, #8]
 80258ee:	4b07      	ldr	r3, [pc, #28]	; (802590c <SX1276ReadRssi+0x40>)
 80258f0:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80258f2:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80258f6:	d903      	bls.n	8025900 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80258f8:	f7ff fd63 	bl	80253c2 <SX1276Read>
 80258fc:	389d      	subs	r0, #157	; 0x9d
 80258fe:	e7f2      	b.n	80258e6 <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8025900:	f7ff fd5f 	bl	80253c2 <SX1276Read>
 8025904:	38a4      	subs	r0, #164	; 0xa4
 8025906:	e7ee      	b.n	80258e6 <SX1276ReadRssi+0x1a>
 8025908:	20002abc 	.word	0x20002abc
 802590c:	1f4add40 	.word	0x1f4add40

08025910 <SX1276SetModem>:
{
 8025910:	b510      	push	{r4, lr}
 8025912:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8025914:	2001      	movs	r0, #1
 8025916:	f7ff fd54 	bl	80253c2 <SX1276Read>
        SX1276.Settings.Modem = MODEM_LORA;
 802591a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
 802591e:	42a0      	cmp	r0, r4
 8025920:	4b16      	ldr	r3, [pc, #88]	; (802597c <SX1276SetModem+0x6c>)
 8025922:	d101      	bne.n	8025928 <SX1276SetModem+0x18>
 8025924:	7158      	strb	r0, [r3, #5]
}
 8025926:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
 8025928:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
 802592a:	715c      	strb	r4, [r3, #5]
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 802592c:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
 8025930:	d013      	beq.n	802595a <SX1276SetModem+0x4a>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8025932:	f7ff fe42 	bl	80255ba <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8025936:	2001      	movs	r0, #1
 8025938:	f7ff fd43 	bl	80253c2 <SX1276Read>
 802593c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8025940:	2001      	movs	r0, #1
 8025942:	f7ff fcf5 	bl	8025330 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8025946:	2100      	movs	r1, #0
 8025948:	2040      	movs	r0, #64	; 0x40
 802594a:	f7ff fcf1 	bl	8025330 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 802594e:	2130      	movs	r1, #48	; 0x30
}
 8025950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8025954:	2041      	movs	r0, #65	; 0x41
 8025956:	f7ff bceb 	b.w	8025330 <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 802595a:	f7ff fe2e 	bl	80255ba <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 802595e:	4620      	mov	r0, r4
 8025960:	f7ff fd2f 	bl	80253c2 <SX1276Read>
 8025964:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8025968:	b2c1      	uxtb	r1, r0
 802596a:	4620      	mov	r0, r4
 802596c:	f7ff fce0 	bl	8025330 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8025970:	2100      	movs	r1, #0
 8025972:	2040      	movs	r0, #64	; 0x40
 8025974:	f7ff fcdc 	bl	8025330 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8025978:	2100      	movs	r1, #0
 802597a:	e7e9      	b.n	8025950 <SX1276SetModem+0x40>
 802597c:	20002abc 	.word	0x20002abc

08025980 <SX1276Init>:
{
 8025980:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RadioEvents = events;
 8025982:	4b20      	ldr	r3, [pc, #128]	; (8025a04 <SX1276Init+0x84>)
 8025984:	4d20      	ldr	r5, [pc, #128]	; (8025a08 <SX1276Init+0x88>)
 8025986:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8025988:	2400      	movs	r4, #0
 802598a:	4b20      	ldr	r3, [pc, #128]	; (8025a0c <SX1276Init+0x8c>)
 802598c:	4820      	ldr	r0, [pc, #128]	; (8025a10 <SX1276Init+0x90>)
 802598e:	9400      	str	r4, [sp, #0]
 8025990:	4622      	mov	r2, r4
 8025992:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8025996:	f001 f947 	bl	8026c28 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 802599a:	4b1c      	ldr	r3, [pc, #112]	; (8025a0c <SX1276Init+0x8c>)
 802599c:	481d      	ldr	r0, [pc, #116]	; (8025a14 <SX1276Init+0x94>)
 802599e:	9400      	str	r4, [sp, #0]
 80259a0:	4622      	mov	r2, r4
 80259a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80259a6:	f001 f93f 	bl	8026c28 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80259aa:	4b18      	ldr	r3, [pc, #96]	; (8025a0c <SX1276Init+0x8c>)
 80259ac:	481a      	ldr	r0, [pc, #104]	; (8025a18 <SX1276Init+0x98>)
 80259ae:	9400      	str	r4, [sp, #0]
 80259b0:	4622      	mov	r2, r4
 80259b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80259b6:	f001 f937 	bl	8026c28 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 80259ba:	2001      	movs	r0, #1
 80259bc:	f7f4 fd00 	bl	801a3c0 <SX1276MB1LAS_RADIO_SetXO>
    Sx_Board_Reset();
 80259c0:	f7f4 fde6 	bl	801a590 <SX1276MB1LAS_RADIO_Reset>
    RxChainCalibration( );
 80259c4:	f7ff fd08 	bl	80253d8 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80259c8:	4620      	mov	r0, r4
 80259ca:	f7ff fdf6 	bl	80255ba <SX1276SetOpMode>
    Sx_Board_IoIrqInit( DioIrq );
 80259ce:	4813      	ldr	r0, [pc, #76]	; (8025a1c <SX1276Init+0x9c>)
 80259d0:	f7f4 fd92 	bl	801a4f8 <SX1276MB1LAS_RADIO_IoIrqInit>
        SX1276SetModem( RadioRegsInit[i].Modem );
 80259d4:	7828      	ldrb	r0, [r5, #0]
 80259d6:	f7ff ff9b 	bl	8025910 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80259da:	3401      	adds	r4, #1
 80259dc:	78a9      	ldrb	r1, [r5, #2]
 80259de:	7868      	ldrb	r0, [r5, #1]
 80259e0:	f7ff fca6 	bl	8025330 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80259e4:	2c10      	cmp	r4, #16
 80259e6:	f105 0503 	add.w	r5, r5, #3
 80259ea:	d1f3      	bne.n	80259d4 <SX1276Init+0x54>
    SX1276SetModem( MODEM_FSK );
 80259ec:	2000      	movs	r0, #0
 80259ee:	f7ff ff8f 	bl	8025910 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 80259f2:	4b0b      	ldr	r3, [pc, #44]	; (8025a20 <SX1276Init+0xa0>)
 80259f4:	2200      	movs	r2, #0
 80259f6:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 80259f8:	f7f4 fce0 	bl	801a3bc <SX1276MB1LAS_RADIO_GetWakeUpTime>
}
 80259fc:	3002      	adds	r0, #2
 80259fe:	b003      	add	sp, #12
 8025a00:	bd30      	pop	{r4, r5, pc}
 8025a02:	bf00      	nop
 8025a04:	20002398 	.word	0x20002398
 8025a08:	080278f8 	.word	0x080278f8
 8025a0c:	080261d9 	.word	0x080261d9
 8025a10:	20002a8c 	.word	0x20002a8c
 8025a14:	20002b24 	.word	0x20002b24
 8025a18:	20002aa4 	.word	0x20002aa4
 8025a1c:	20001208 	.word	0x20001208
 8025a20:	20002abc 	.word	0x20002abc

08025a24 <SX1276IsChannelFree>:
{
 8025a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025a26:	4616      	mov	r6, r2
 8025a28:	461c      	mov	r4, r3
 8025a2a:	460d      	mov	r5, r1
 8025a2c:	4607      	mov	r7, r0
    SX1276SetSleep( );
 8025a2e:	f7ff fdf7 	bl	8025620 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 8025a32:	2000      	movs	r0, #0
 8025a34:	f7ff ff6c 	bl	8025910 <SX1276SetModem>
    SX1276SetChannel( freq );
 8025a38:	4638      	mov	r0, r7
 8025a3a:	f7ff fc85 	bl	8025348 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8025a3e:	4628      	mov	r0, r5
 8025a40:	f7ff fbce 	bl	80251e0 <GetFskBandwidthRegValue>
 8025a44:	4601      	mov	r1, r0
 8025a46:	9001      	str	r0, [sp, #4]
 8025a48:	2012      	movs	r0, #18
 8025a4a:	f7ff fc71 	bl	8025330 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8025a4e:	9901      	ldr	r1, [sp, #4]
 8025a50:	2013      	movs	r0, #19
 8025a52:	f7ff fc6d 	bl	8025330 <SX1276Write>
    else if ( opMode == RF_OPMODE_RECEIVER )
 8025a56:	f7ff fd9d 	bl	8025594 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 8025a5a:	2001      	movs	r0, #1
 8025a5c:	f7f4 fa7f 	bl	8019f5e <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8025a60:	f001 f8fc 	bl	8026c5c <UTIL_TIMER_GetCurrentTime>
 8025a64:	4605      	mov	r5, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8025a66:	4628      	mov	r0, r5
 8025a68:	f001 f902 	bl	8026c70 <UTIL_TIMER_GetElapsedTime>
 8025a6c:	42a0      	cmp	r0, r4
 8025a6e:	d305      	bcc.n	8025a7c <SX1276IsChannelFree+0x58>
    bool status = true;
 8025a70:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8025a72:	f7ff fdd5 	bl	8025620 <SX1276SetSleep>
}
 8025a76:	4620      	mov	r0, r4
 8025a78:	b003      	add	sp, #12
 8025a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 8025a7c:	2000      	movs	r0, #0
 8025a7e:	f7ff ff25 	bl	80258cc <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8025a82:	42b0      	cmp	r0, r6
 8025a84:	ddef      	ble.n	8025a66 <SX1276IsChannelFree+0x42>
            status = false;
 8025a86:	2400      	movs	r4, #0
 8025a88:	e7f3      	b.n	8025a72 <SX1276IsChannelFree+0x4e>

08025a8a <SX1276Random>:
{
 8025a8a:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8025a8c:	2001      	movs	r0, #1
 8025a8e:	f7ff ff3f 	bl	8025910 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8025a92:	21ff      	movs	r1, #255	; 0xff
 8025a94:	2011      	movs	r0, #17
 8025a96:	f7ff fc4b 	bl	8025330 <SX1276Write>
    else if ( opMode == RF_OPMODE_RECEIVER )
 8025a9a:	f7ff fd7b 	bl	8025594 <SX1276SetOpMode.part.0>
    for( i = 0; i < 32; i++ )
 8025a9e:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 8025aa0:	4625      	mov	r5, r4
        RADIO_DELAY_MS( 1 );
 8025aa2:	2001      	movs	r0, #1
 8025aa4:	f7f4 fa5b 	bl	8019f5e <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8025aa8:	202c      	movs	r0, #44	; 0x2c
 8025aaa:	f7ff fc8a 	bl	80253c2 <SX1276Read>
 8025aae:	f000 0001 	and.w	r0, r0, #1
 8025ab2:	40a0      	lsls	r0, r4
 8025ab4:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
 8025ab6:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8025ab8:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
 8025abc:	d1f1      	bne.n	8025aa2 <SX1276Random+0x18>
    SX1276SetSleep( );
 8025abe:	f7ff fdaf 	bl	8025620 <SX1276SetSleep>
}
 8025ac2:	4628      	mov	r0, r5
 8025ac4:	bd38      	pop	{r3, r4, r5, pc}
	...

08025ac8 <SX1276SetRxConfig>:
{
 8025ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025acc:	ed2d 8b02 	vpush	{d8}
 8025ad0:	b087      	sub	sp, #28
 8025ad2:	4699      	mov	r9, r3
 8025ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025ad6:	9301      	str	r3, [sp, #4]
 8025ad8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8025adc:	9300      	str	r3, [sp, #0]
 8025ade:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8025ae2:	9302      	str	r3, [sp, #8]
 8025ae4:	4683      	mov	fp, r0
 8025ae6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8025aea:	9303      	str	r3, [sp, #12]
 8025aec:	460c      	mov	r4, r1
 8025aee:	4690      	mov	r8, r2
 8025af0:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8025af4:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8025af8:	9204      	str	r2, [sp, #16]
 8025afa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8025afe:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8025b02:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8025b06:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
 8025b0a:	9105      	str	r1, [sp, #20]
    SX1276SetModem( modem );
 8025b0c:	f7ff ff00 	bl	8025910 <SX1276SetModem>
    switch( modem )
 8025b10:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8025b14:	f1bb 0f00 	cmp.w	fp, #0
 8025b18:	d009      	beq.n	8025b2e <SX1276SetRxConfig+0x66>
 8025b1a:	f1bb 0f01 	cmp.w	fp, #1
 8025b1e:	9905      	ldr	r1, [sp, #20]
 8025b20:	f000 808d 	beq.w	8025c3e <SX1276SetRxConfig+0x176>
}
 8025b24:	b007      	add	sp, #28
 8025b26:	ecbd 8b02 	vpop	{d8}
 8025b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8025b2e:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8025dcc <SX1276SetRxConfig+0x304>
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8025b32:	9901      	ldr	r1, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 8025b34:	f8cb 801c 	str.w	r8, [fp, #28]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8025b38:	f88b 2025 	strb.w	r2, [fp, #37]	; 0x25
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8025b3c:	f88b 3026 	strb.w	r3, [fp, #38]	; 0x26
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8025b40:	4640      	mov	r0, r8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8025b42:	f8cb 4014 	str.w	r4, [fp, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8025b46:	f8cb 1018 	str.w	r1, [fp, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8025b4a:	f88b 5022 	strb.w	r5, [fp, #34]	; 0x22
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8025b4e:	f88b 7023 	strb.w	r7, [fp, #35]	; 0x23
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8025b52:	f88b a024 	strb.w	sl, [fp, #36]	; 0x24
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8025b56:	f8ab 6020 	strh.w	r6, [fp, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8025b5a:	f7f2 fdbb 	bl	80186d4 <__aeabi_ui2d>
 8025b5e:	4680      	mov	r8, r0
 8025b60:	4602      	mov	r2, r0
 8025b62:	460b      	mov	r3, r1
 8025b64:	4689      	mov	r9, r1
 8025b66:	2000      	movs	r0, #0
 8025b68:	4995      	ldr	r1, [pc, #596]	; (8025dc0 <SX1276SetRxConfig+0x2f8>)
 8025b6a:	f7f2 ff57 	bl	8018a1c <__aeabi_ddiv>
 8025b6e:	4b95      	ldr	r3, [pc, #596]	; (8025dc4 <SX1276SetRxConfig+0x2fc>)
 8025b70:	2200      	movs	r2, #0
 8025b72:	f7f2 fe29 	bl	80187c8 <__aeabi_dmul>
 8025b76:	ec41 0b18 	vmov	d8, r0, r1
 8025b7a:	9800      	ldr	r0, [sp, #0]
 8025b7c:	f7f2 fdba 	bl	80186f4 <__aeabi_i2d>
 8025b80:	4602      	mov	r2, r0
 8025b82:	460b      	mov	r3, r1
 8025b84:	ec51 0b18 	vmov	r0, r1, d8
 8025b88:	f7f2 fe1e 	bl	80187c8 <__aeabi_dmul>
 8025b8c:	4b8e      	ldr	r3, [pc, #568]	; (8025dc8 <SX1276SetRxConfig+0x300>)
 8025b8e:	2200      	movs	r2, #0
 8025b90:	f7f2 fe1a 	bl	80187c8 <__aeabi_dmul>
 8025b94:	f7f3 f8da 	bl	8018d4c <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8025b98:	4642      	mov	r2, r8
 8025b9a:	464b      	mov	r3, r9
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8025b9c:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8025ba0:	a185      	add	r1, pc, #532	; (adr r1, 8025db8 <SX1276SetRxConfig+0x2f0>)
 8025ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025ba6:	f7f2 ff39 	bl	8018a1c <__aeabi_ddiv>
 8025baa:	f7f3 f8cf 	bl	8018d4c <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8025bae:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8025bb2:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8025bb6:	2002      	movs	r0, #2
 8025bb8:	f7ff fbba 	bl	8025330 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8025bbc:	fa5f f188 	uxtb.w	r1, r8
 8025bc0:	2003      	movs	r0, #3
 8025bc2:	f7ff fbb5 	bl	8025330 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8025bc6:	4620      	mov	r0, r4
 8025bc8:	f7ff fb0a 	bl	80251e0 <GetFskBandwidthRegValue>
 8025bcc:	4601      	mov	r1, r0
 8025bce:	2012      	movs	r0, #18
 8025bd0:	f7ff fbae 	bl	8025330 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8025bd4:	9801      	ldr	r0, [sp, #4]
 8025bd6:	f7ff fb03 	bl	80251e0 <GetFskBandwidthRegValue>
 8025bda:	4601      	mov	r1, r0
 8025bdc:	2013      	movs	r0, #19
 8025bde:	f7ff fba7 	bl	8025330 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8025be2:	0a31      	lsrs	r1, r6, #8
 8025be4:	2025      	movs	r0, #37	; 0x25
 8025be6:	f7ff fba3 	bl	8025330 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8025bea:	b2f1      	uxtb	r1, r6
 8025bec:	2026      	movs	r0, #38	; 0x26
 8025bee:	f7ff fb9f 	bl	8025330 <SX1276Write>
            if( fixLen == 1 )
 8025bf2:	b315      	cbz	r5, 8025c3a <SX1276SetRxConfig+0x172>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8025bf4:	4639      	mov	r1, r7
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8025bf6:	2032      	movs	r0, #50	; 0x32
 8025bf8:	f7ff fb9a 	bl	8025330 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8025bfc:	2030      	movs	r0, #48	; 0x30
 8025bfe:	f7ff fbe0 	bl	80253c2 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8025c02:	2d00      	cmp	r5, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8025c04:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8025c08:	bf14      	ite	ne
 8025c0a:	2300      	movne	r3, #0
 8025c0c:	f06f 037f 	mvneq.w	r3, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8025c10:	ea40 110a 	orr.w	r1, r0, sl, lsl #4
 8025c14:	4319      	orrs	r1, r3
            SX1276Write( REG_PACKETCONFIG1,
 8025c16:	b2c9      	uxtb	r1, r1
 8025c18:	2030      	movs	r0, #48	; 0x30
 8025c1a:	f7ff fb89 	bl	8025330 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8025c1e:	2031      	movs	r0, #49	; 0x31
 8025c20:	f7ff fbcf 	bl	80253c2 <SX1276Read>
 8025c24:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8025c28:	b2c1      	uxtb	r1, r0
 8025c2a:	2031      	movs	r0, #49	; 0x31
}
 8025c2c:	b007      	add	sp, #28
 8025c2e:	ecbd 8b02 	vpop	{d8}
 8025c32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8025c36:	f7ff bb7b 	b.w	8025330 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8025c3a:	21ff      	movs	r1, #255	; 0xff
 8025c3c:	e7db      	b.n	8025bf6 <SX1276SetRxConfig+0x12e>
            if( bandwidth > 2 )
 8025c3e:	2c02      	cmp	r4, #2
 8025c40:	d900      	bls.n	8025c44 <SX1276SetRxConfig+0x17c>
                while( 1 );
 8025c42:	e7fe      	b.n	8025c42 <SX1276SetRxConfig+0x17a>
            bandwidth += 7;
 8025c44:	f104 0b07 	add.w	fp, r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8025c48:	4c60      	ldr	r4, [pc, #384]	; (8025dcc <SX1276SetRxConfig+0x304>)
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8025c4a:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8025c4e:	9902      	ldr	r1, [sp, #8]
 8025c50:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8025c54:	4641      	mov	r1, r8
 8025c56:	2906      	cmp	r1, #6
 8025c58:	bf38      	it	cc
 8025c5a:	2106      	movcc	r1, #6
 8025c5c:	290c      	cmp	r1, #12
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8025c5e:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 8025c62:	460a      	mov	r2, r1
 8025c64:	bf28      	it	cs
 8025c66:	220c      	movcs	r2, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8025c68:	f1bb 0f07 	cmp.w	fp, #7
            SX1276.Settings.LoRa.Datarate = datarate;
 8025c6c:	e9c4 b811 	strd	fp, r8, [r4, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8025c70:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8025c74:	f8a4 604e 	strh.w	r6, [r4, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8025c78:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8025c7c:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8025c80:	f884 a052 	strb.w	sl, [r4, #82]	; 0x52
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8025c84:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8025c88:	d177      	bne.n	8025d7a <SX1276SetRxConfig+0x2b2>
 8025c8a:	f1a2 030b 	sub.w	r3, r2, #11
 8025c8e:	2b01      	cmp	r3, #1
 8025c90:	bf8c      	ite	hi
 8025c92:	2300      	movhi	r3, #0
 8025c94:	2301      	movls	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8025c96:	201d      	movs	r0, #29
 8025c98:	9201      	str	r2, [sp, #4]
 8025c9a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8025c9e:	f7ff fb90 	bl	80253c2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8025ca2:	ea45 0149 	orr.w	r1, r5, r9, lsl #1
 8025ca6:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 8025caa:	b2c9      	uxtb	r1, r1
 8025cac:	201d      	movs	r0, #29
 8025cae:	f7ff fb3f 	bl	8025330 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8025cb2:	201e      	movs	r0, #30
 8025cb4:	f7ff fb85 	bl	80253c2 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8025cb8:	9b00      	ldr	r3, [sp, #0]
            SX1276Write( REG_LR_MODEMCONFIG2,
 8025cba:	9a01      	ldr	r2, [sp, #4]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8025cbc:	f3c3 2101 	ubfx	r1, r3, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8025cc0:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
 8025cc4:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8025cc8:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
 8025ccc:	4301      	orrs	r1, r0
 8025cce:	b2c9      	uxtb	r1, r1
 8025cd0:	201e      	movs	r0, #30
 8025cd2:	f7ff fb2d 	bl	8025330 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8025cd6:	2026      	movs	r0, #38	; 0x26
 8025cd8:	f7ff fb73 	bl	80253c2 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8025cdc:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8025ce0:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8025ce4:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8025ce8:	b2c9      	uxtb	r1, r1
 8025cea:	2026      	movs	r0, #38	; 0x26
 8025cec:	f7ff fb20 	bl	8025330 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8025cf0:	f89d 1000 	ldrb.w	r1, [sp]
 8025cf4:	201f      	movs	r0, #31
 8025cf6:	f7ff fb1b 	bl	8025330 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8025cfa:	0a31      	lsrs	r1, r6, #8
 8025cfc:	2020      	movs	r0, #32
 8025cfe:	f7ff fb17 	bl	8025330 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8025d02:	b2f1      	uxtb	r1, r6
 8025d04:	2021      	movs	r0, #33	; 0x21
 8025d06:	f7ff fb13 	bl	8025330 <SX1276Write>
            if( fixLen == 1 )
 8025d0a:	b11d      	cbz	r5, 8025d14 <SX1276SetRxConfig+0x24c>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8025d0c:	4639      	mov	r1, r7
 8025d0e:	2022      	movs	r0, #34	; 0x22
 8025d10:	f7ff fb0e 	bl	8025330 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8025d14:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8025d18:	b16b      	cbz	r3, 8025d36 <SX1276SetRxConfig+0x26e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8025d1a:	2044      	movs	r0, #68	; 0x44
 8025d1c:	f7ff fb51 	bl	80253c2 <SX1276Read>
 8025d20:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8025d24:	b2c1      	uxtb	r1, r0
 8025d26:	2044      	movs	r0, #68	; 0x44
 8025d28:	f7ff fb02 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8025d2c:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 8025d30:	2024      	movs	r0, #36	; 0x24
 8025d32:	f7ff fafd 	bl	8025330 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8025d36:	f1bb 0f09 	cmp.w	fp, #9
 8025d3a:	d12d      	bne.n	8025d98 <SX1276SetRxConfig+0x2d0>
 8025d3c:	68a2      	ldr	r2, [r4, #8]
 8025d3e:	4b24      	ldr	r3, [pc, #144]	; (8025dd0 <SX1276SetRxConfig+0x308>)
 8025d40:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8025d42:	f04f 0102 	mov.w	r1, #2
 8025d46:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8025d4a:	d921      	bls.n	8025d90 <SX1276SetRxConfig+0x2c8>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8025d4c:	f7ff faf0 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8025d50:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8025d52:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8025d54:	f7ff faec 	bl	8025330 <SX1276Write>
            if( datarate == 6 )
 8025d58:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8025d5c:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 8025d60:	d81d      	bhi.n	8025d9e <SX1276SetRxConfig+0x2d6>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8025d62:	f7ff fb2e 	bl	80253c2 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8025d66:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8025d6a:	f040 0105 	orr.w	r1, r0, #5
 8025d6e:	2031      	movs	r0, #49	; 0x31
 8025d70:	f7ff fade 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8025d74:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8025d76:	2037      	movs	r0, #55	; 0x37
 8025d78:	e758      	b.n	8025c2c <SX1276SetRxConfig+0x164>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8025d7a:	f1bb 0f08 	cmp.w	fp, #8
 8025d7e:	d105      	bne.n	8025d8c <SX1276SetRxConfig+0x2c4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8025d80:	f1b8 0f0b 	cmp.w	r8, #11
 8025d84:	bf94      	ite	ls
 8025d86:	2300      	movls	r3, #0
 8025d88:	2301      	movhi	r3, #1
 8025d8a:	e784      	b.n	8025c96 <SX1276SetRxConfig+0x1ce>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8025d8c:	2300      	movs	r3, #0
 8025d8e:	e782      	b.n	8025c96 <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8025d90:	f7ff face 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8025d94:	217f      	movs	r1, #127	; 0x7f
 8025d96:	e7dc      	b.n	8025d52 <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8025d98:	2103      	movs	r1, #3
 8025d9a:	2036      	movs	r0, #54	; 0x36
 8025d9c:	e7da      	b.n	8025d54 <SX1276SetRxConfig+0x28c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8025d9e:	f7ff fb10 	bl	80253c2 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8025da2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8025da6:	f040 0103 	orr.w	r1, r0, #3
 8025daa:	2031      	movs	r0, #49	; 0x31
 8025dac:	f7ff fac0 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8025db0:	210a      	movs	r1, #10
 8025db2:	e7e0      	b.n	8025d76 <SX1276SetRxConfig+0x2ae>
 8025db4:	f3af 8000 	nop.w
 8025db8:	00000000 	.word	0x00000000
 8025dbc:	417e8480 	.word	0x417e8480
 8025dc0:	3ff00000 	.word	0x3ff00000
 8025dc4:	40200000 	.word	0x40200000
 8025dc8:	408f4000 	.word	0x408f4000
 8025dcc:	20002abc 	.word	0x20002abc
 8025dd0:	1f4add40 	.word	0x1f4add40
 8025dd4:	00000000 	.word	0x00000000

08025dd8 <SX1276SetTxConfig>:
{
 8025dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ddc:	b089      	sub	sp, #36	; 0x24
 8025dde:	461e      	mov	r6, r3
 8025de0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8025de4:	9301      	str	r3, [sp, #4]
 8025de6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8025dea:	9302      	str	r3, [sp, #8]
 8025dec:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8025df0:	9306      	str	r3, [sp, #24]
 8025df2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8025df6:	9303      	str	r3, [sp, #12]
 8025df8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025dfa:	9304      	str	r3, [sp, #16]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8025dfc:	4bbe      	ldr	r3, [pc, #760]	; (80260f8 <SX1276SetTxConfig+0x320>)
{
 8025dfe:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8025e02:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8025e06:	f89d 7054 	ldrb.w	r7, [sp, #84]	; 0x54
 8025e0a:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8025e0e:	9200      	str	r2, [sp, #0]
 8025e10:	4682      	mov	sl, r0
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8025e12:	7918      	ldrb	r0, [r3, #4]
 8025e14:	2801      	cmp	r0, #1
{
 8025e16:	460c      	mov	r4, r1
 8025e18:	469b      	mov	fp, r3
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8025e1a:	d108      	bne.n	8025e2e <SX1276SetTxConfig+0x56>
 8025e1c:	f1ba 0f00 	cmp.w	sl, #0
 8025e20:	d105      	bne.n	8025e2e <SX1276SetTxConfig+0x56>
 8025e22:	9005      	str	r0, [sp, #20]
        SX1276SetSleep( );
 8025e24:	f7ff fbfc 	bl	8025620 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8025e28:	9805      	ldr	r0, [sp, #20]
 8025e2a:	f7f4 f898 	bl	8019f5e <HAL_Delay>
    SX1276SetModem( modem );
 8025e2e:	4650      	mov	r0, sl
 8025e30:	f7ff fd6e 	bl	8025910 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 8025e34:	2009      	movs	r0, #9
 8025e36:	f7ff fac4 	bl	80253c2 <SX1276Read>
 8025e3a:	9005      	str	r0, [sp, #20]
    paDac = SX1276Read( REG_PADAC );
 8025e3c:	204d      	movs	r0, #77	; 0x4d
 8025e3e:	f7ff fac0 	bl	80253c2 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8025e42:	49ad      	ldr	r1, [pc, #692]	; (80260f8 <SX1276SetTxConfig+0x320>)
    paDac = SX1276Read( REG_PADAC );
 8025e44:	9007      	str	r0, [sp, #28]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8025e46:	6888      	ldr	r0, [r1, #8]
 8025e48:	f7f4 fb88 	bl	801a55c <SX1276MB1LAS_RADIO_GetPaSelect>
 8025e4c:	9a07      	ldr	r2, [sp, #28]
 8025e4e:	b368      	cbz	r0, 8025eac <SX1276SetTxConfig+0xd4>
 8025e50:	3802      	subs	r0, #2
 8025e52:	b2c0      	uxtb	r0, r0
    uint8_t board_config = 0;
 8025e54:	2802      	cmp	r0, #2
 8025e56:	bf34      	ite	cc
 8025e58:	2080      	movcc	r0, #128	; 0x80
 8025e5a:	2000      	movcs	r0, #0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8025e5c:	9b05      	ldr	r3, [sp, #20]
 8025e5e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8025e62:	4301      	orrs	r1, r0
 8025e64:	b249      	sxtb	r1, r1
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8025e66:	2900      	cmp	r1, #0
 8025e68:	da2e      	bge.n	8025ec8 <SX1276SetTxConfig+0xf0>
        if( power > 17 )
 8025e6a:	2c11      	cmp	r4, #17
 8025e6c:	f021 010f 	bic.w	r1, r1, #15
 8025e70:	dd20      	ble.n	8025eb4 <SX1276SetTxConfig+0xdc>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8025e72:	2c14      	cmp	r4, #20
 8025e74:	4620      	mov	r0, r4
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8025e76:	f042 0207 	orr.w	r2, r2, #7
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8025e7a:	bfa8      	it	ge
 8025e7c:	2014      	movge	r0, #20
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8025e7e:	b2d2      	uxtb	r2, r2
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8025e80:	3805      	subs	r0, #5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8025e82:	4301      	orrs	r1, r0
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8025e84:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8025e86:	2009      	movs	r0, #9
 8025e88:	9205      	str	r2, [sp, #20]
 8025e8a:	f7ff fa51 	bl	8025330 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8025e8e:	9a05      	ldr	r2, [sp, #20]
 8025e90:	204d      	movs	r0, #77	; 0x4d
 8025e92:	4611      	mov	r1, r2
 8025e94:	f7ff fa4c 	bl	8025330 <SX1276Write>
    switch( modem )
 8025e98:	f1ba 0f00 	cmp.w	sl, #0
 8025e9c:	d024      	beq.n	8025ee8 <SX1276SetTxConfig+0x110>
 8025e9e:	f1ba 0f01 	cmp.w	sl, #1
 8025ea2:	f000 8085 	beq.w	8025fb0 <SX1276SetTxConfig+0x1d8>
}
 8025ea6:	b009      	add	sp, #36	; 0x24
 8025ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 8025eac:	2c0f      	cmp	r4, #15
 8025eae:	bfa8      	it	ge
 8025eb0:	2080      	movge	r0, #128	; 0x80
 8025eb2:	e7d3      	b.n	8025e5c <SX1276SetTxConfig+0x84>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8025eb4:	2c02      	cmp	r4, #2
 8025eb6:	4620      	mov	r0, r4
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8025eb8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8025ebc:	bfb8      	it	lt
 8025ebe:	2002      	movlt	r0, #2
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8025ec0:	f042 0204 	orr.w	r2, r2, #4
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8025ec4:	3802      	subs	r0, #2
 8025ec6:	e7dc      	b.n	8025e82 <SX1276SetTxConfig+0xaa>
        if( power > 0 )
 8025ec8:	2c00      	cmp	r4, #0
 8025eca:	dd06      	ble.n	8025eda <SX1276SetTxConfig+0x102>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8025ecc:	2c0f      	cmp	r4, #15
 8025ece:	4621      	mov	r1, r4
 8025ed0:	bfa8      	it	ge
 8025ed2:	210f      	movge	r1, #15
 8025ed4:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8025ed8:	e7d4      	b.n	8025e84 <SX1276SetTxConfig+0xac>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8025eda:	f06f 0103 	mvn.w	r1, #3
 8025ede:	42a1      	cmp	r1, r4
 8025ee0:	bfb8      	it	lt
 8025ee2:	4621      	movlt	r1, r4
 8025ee4:	3104      	adds	r1, #4
 8025ee6:	e7cd      	b.n	8025e84 <SX1276SetTxConfig+0xac>
            SX1276.Settings.Fsk.Fdev = fdev;
 8025ee8:	9b00      	ldr	r3, [sp, #0]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8025eea:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.Fsk.Power = power;
 8025eec:	f88b 400c 	strb.w	r4, [fp, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8025ef0:	e9cb 3604 	strd	r3, r6, [fp, #16]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8025ef4:	9b03      	ldr	r3, [sp, #12]
 8025ef6:	f88b 3025 	strb.w	r3, [fp, #37]	; 0x25
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8025efa:	9b04      	ldr	r3, [sp, #16]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8025efc:	f88b 5024 	strb.w	r5, [fp, #36]	; 0x24
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8025f00:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
            SX1276.Settings.Fsk.Datarate = datarate;
 8025f04:	f8cb 801c 	str.w	r8, [fp, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8025f08:	f8ab 9020 	strh.w	r9, [fp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8025f0c:	f88b 7022 	strb.w	r7, [fp, #34]	; 0x22
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8025f10:	f7f2 fbe0 	bl	80186d4 <__aeabi_ui2d>
 8025f14:	a374      	add	r3, pc, #464	; (adr r3, 80260e8 <SX1276SetTxConfig+0x310>)
 8025f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f1a:	f7f2 fd7f 	bl	8018a1c <__aeabi_ddiv>
 8025f1e:	f7f2 ff15 	bl	8018d4c <__aeabi_d2uiz>
 8025f22:	b284      	uxth	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8025f24:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8025f28:	2004      	movs	r0, #4
 8025f2a:	f7ff fa01 	bl	8025330 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8025f2e:	b2e1      	uxtb	r1, r4
 8025f30:	2005      	movs	r0, #5
 8025f32:	f7ff f9fd 	bl	8025330 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8025f36:	4640      	mov	r0, r8
 8025f38:	f7f2 fbcc 	bl	80186d4 <__aeabi_ui2d>
 8025f3c:	4602      	mov	r2, r0
 8025f3e:	460b      	mov	r3, r1
 8025f40:	a16b      	add	r1, pc, #428	; (adr r1, 80260f0 <SX1276SetTxConfig+0x318>)
 8025f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025f46:	f7f2 fd69 	bl	8018a1c <__aeabi_ddiv>
 8025f4a:	f7f2 feff 	bl	8018d4c <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8025f4e:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8025f52:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8025f54:	2002      	movs	r0, #2
 8025f56:	f7ff f9eb 	bl	8025330 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8025f5a:	b2e1      	uxtb	r1, r4
 8025f5c:	2003      	movs	r0, #3
 8025f5e:	f7ff f9e7 	bl	8025330 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8025f62:	ea4f 2119 	mov.w	r1, r9, lsr #8
 8025f66:	2025      	movs	r0, #37	; 0x25
 8025f68:	f7ff f9e2 	bl	8025330 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8025f6c:	fa5f f189 	uxtb.w	r1, r9
 8025f70:	2026      	movs	r0, #38	; 0x26
 8025f72:	f7ff f9dd 	bl	8025330 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8025f76:	2030      	movs	r0, #48	; 0x30
 8025f78:	f7ff fa23 	bl	80253c2 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8025f7c:	2f00      	cmp	r7, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8025f7e:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8025f82:	bf14      	ite	ne
 8025f84:	2100      	movne	r1, #0
 8025f86:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8025f8a:	ea40 1505 	orr.w	r5, r0, r5, lsl #4
 8025f8e:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 8025f90:	b2c9      	uxtb	r1, r1
 8025f92:	2030      	movs	r0, #48	; 0x30
 8025f94:	f7ff f9cc 	bl	8025330 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8025f98:	2031      	movs	r0, #49	; 0x31
 8025f9a:	f7ff fa12 	bl	80253c2 <SX1276Read>
 8025f9e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8025fa2:	b2c1      	uxtb	r1, r0
 8025fa4:	2031      	movs	r0, #49	; 0x31
}
 8025fa6:	b009      	add	sp, #36	; 0x24
 8025fa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8025fac:	f7ff b9c0 	b.w	8025330 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
 8025fb0:	4b51      	ldr	r3, [pc, #324]	; (80260f8 <SX1276SetTxConfig+0x320>)
            if( bandwidth > 2 )
 8025fb2:	2e02      	cmp	r6, #2
            SX1276.Settings.LoRa.Power = power;
 8025fb4:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
            if( bandwidth > 2 )
 8025fb8:	461c      	mov	r4, r3
 8025fba:	d900      	bls.n	8025fbe <SX1276SetTxConfig+0x1e6>
                while( 1 );
 8025fbc:	e7fe      	b.n	8025fbc <SX1276SetTxConfig+0x1e4>
            bandwidth += 7;
 8025fbe:	3607      	adds	r6, #7
            SX1276.Settings.LoRa.Datarate = datarate;
 8025fc0:	e9c3 6811 	strd	r6, r8, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8025fc4:	9b01      	ldr	r3, [sp, #4]
 8025fc6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8025fca:	f1b8 0f06 	cmp.w	r8, #6
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8025fce:	9b02      	ldr	r3, [sp, #8]
 8025fd0:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8025fd4:	46c2      	mov	sl, r8
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8025fd6:	9b06      	ldr	r3, [sp, #24]
 8025fd8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8025fdc:	bf38      	it	cc
 8025fde:	f04f 0a06 	movcc.w	sl, #6
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8025fe2:	9b03      	ldr	r3, [sp, #12]
 8025fe4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8025fe8:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8025fec:	9b04      	ldr	r3, [sp, #16]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8025fee:	f8a4 904e 	strh.w	r9, [r4, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8025ff2:	bf28      	it	cs
 8025ff4:	f04f 0a0c 	movcs.w	sl, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8025ff8:	2e07      	cmp	r6, #7
            SX1276.Settings.LoRa.FixLen = fixLen;
 8025ffa:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8025ffe:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8026002:	65a3      	str	r3, [r4, #88]	; 0x58
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8026004:	d158      	bne.n	80260b8 <SX1276SetTxConfig+0x2e0>
 8026006:	f1aa 030b 	sub.w	r3, sl, #11
 802600a:	2b01      	cmp	r3, #1
 802600c:	bf8c      	ite	hi
 802600e:	2300      	movhi	r3, #0
 8026010:	2301      	movls	r3, #1
 8026012:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8026016:	9b02      	ldr	r3, [sp, #8]
 8026018:	b16b      	cbz	r3, 8026036 <SX1276SetTxConfig+0x25e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 802601a:	2044      	movs	r0, #68	; 0x44
 802601c:	f7ff f9d1 	bl	80253c2 <SX1276Read>
 8026020:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8026024:	b2c1      	uxtb	r1, r0
 8026026:	2044      	movs	r0, #68	; 0x44
 8026028:	f7ff f982 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 802602c:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 8026030:	2024      	movs	r0, #36	; 0x24
 8026032:	f7ff f97d 	bl	8025330 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8026036:	201d      	movs	r0, #29
 8026038:	f7ff f9c3 	bl	80253c2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 802603c:	9b01      	ldr	r3, [sp, #4]
 802603e:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
 8026042:	ea47 1106 	orr.w	r1, r7, r6, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 8026046:	b2c9      	uxtb	r1, r1
 8026048:	201d      	movs	r0, #29
 802604a:	f7ff f971 	bl	8025330 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 802604e:	201e      	movs	r0, #30
 8026050:	f7ff f9b7 	bl	80253c2 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8026054:	00ad      	lsls	r5, r5, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
 8026056:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
 802605a:	ea45 150a 	orr.w	r5, r5, sl, lsl #4
 802605e:	4305      	orrs	r5, r0
 8026060:	b2e9      	uxtb	r1, r5
 8026062:	201e      	movs	r0, #30
 8026064:	f7ff f964 	bl	8025330 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8026068:	2026      	movs	r0, #38	; 0x26
 802606a:	f7ff f9aa 	bl	80253c2 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 802606e:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8026072:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8026076:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 802607a:	b2c9      	uxtb	r1, r1
 802607c:	2026      	movs	r0, #38	; 0x26
 802607e:	f7ff f957 	bl	8025330 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8026082:	ea4f 2119 	mov.w	r1, r9, lsr #8
 8026086:	2020      	movs	r0, #32
 8026088:	f7ff f952 	bl	8025330 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 802608c:	2021      	movs	r0, #33	; 0x21
 802608e:	fa5f f189 	uxtb.w	r1, r9
 8026092:	f7ff f94d 	bl	8025330 <SX1276Write>
            if( datarate == 6 )
 8026096:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 802609a:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 802609e:	d815      	bhi.n	80260cc <SX1276SetTxConfig+0x2f4>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80260a0:	f7ff f98f 	bl	80253c2 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80260a4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80260a8:	f040 0105 	orr.w	r1, r0, #5
 80260ac:	2031      	movs	r0, #49	; 0x31
 80260ae:	f7ff f93f 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80260b2:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80260b4:	2037      	movs	r0, #55	; 0x37
 80260b6:	e776      	b.n	8025fa6 <SX1276SetTxConfig+0x1ce>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80260b8:	2e08      	cmp	r6, #8
 80260ba:	d105      	bne.n	80260c8 <SX1276SetTxConfig+0x2f0>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80260bc:	f1b8 0f0b 	cmp.w	r8, #11
 80260c0:	bf94      	ite	ls
 80260c2:	2300      	movls	r3, #0
 80260c4:	2301      	movhi	r3, #1
 80260c6:	e7a4      	b.n	8026012 <SX1276SetTxConfig+0x23a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80260c8:	2300      	movs	r3, #0
 80260ca:	e7a2      	b.n	8026012 <SX1276SetTxConfig+0x23a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80260cc:	f7ff f979 	bl	80253c2 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80260d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80260d4:	f040 0103 	orr.w	r1, r0, #3
 80260d8:	2031      	movs	r0, #49	; 0x31
 80260da:	f7ff f929 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80260de:	210a      	movs	r1, #10
 80260e0:	e7e8      	b.n	80260b4 <SX1276SetTxConfig+0x2dc>
 80260e2:	bf00      	nop
 80260e4:	f3af 8000 	nop.w
 80260e8:	00000000 	.word	0x00000000
 80260ec:	404e8480 	.word	0x404e8480
 80260f0:	00000000 	.word	0x00000000
 80260f4:	417e8480 	.word	0x417e8480
 80260f8:	20002abc 	.word	0x20002abc

080260fc <SX1276SetTxContinuousWave>:
{
 80260fc:	b530      	push	{r4, r5, lr}
 80260fe:	b08d      	sub	sp, #52	; 0x34
    uint32_t timeout = ( uint32_t )time * 1000;
 8026100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026104:	fb03 f402 	mul.w	r4, r3, r2
{
 8026108:	910b      	str	r1, [sp, #44]	; 0x2c
    SX1276SetChannel( freq );
 802610a:	f7ff f91d 	bl	8025348 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 802610e:	2300      	movs	r3, #0
 8026110:	2205      	movs	r2, #5
 8026112:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8026116:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 802611a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 802611e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8026122:	9303      	str	r3, [sp, #12]
 8026124:	4618      	mov	r0, r3
 8026126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026128:	9200      	str	r2, [sp, #0]
 802612a:	9408      	str	r4, [sp, #32]
 802612c:	461a      	mov	r2, r3
 802612e:	f7ff fe53 	bl	8025dd8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8026132:	2031      	movs	r0, #49	; 0x31
 8026134:	f7ff f945 	bl	80253c2 <SX1276Read>
 8026138:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 802613c:	2031      	movs	r0, #49	; 0x31
 802613e:	f7ff f8f7 	bl	8025330 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8026142:	4d0c      	ldr	r5, [pc, #48]	; (8026174 <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8026144:	21f0      	movs	r1, #240	; 0xf0
 8026146:	2040      	movs	r0, #64	; 0x40
 8026148:	f7ff f8f2 	bl	8025330 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 802614c:	21a0      	movs	r1, #160	; 0xa0
 802614e:	2041      	movs	r0, #65	; 0x41
 8026150:	f7ff f8ee 	bl	8025330 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8026154:	4621      	mov	r1, r4
 8026156:	4628      	mov	r0, r5
 8026158:	f000 fe4e 	bl	8026df8 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 802615c:	4b06      	ldr	r3, [pc, #24]	; (8026178 <SX1276SetTxContinuousWave+0x7c>)
 802615e:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
 8026160:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8026162:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8026164:	f000 fe0e 	bl	8026d84 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8026168:	2003      	movs	r0, #3
}
 802616a:	b00d      	add	sp, #52	; 0x34
 802616c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8026170:	f7ff ba23 	b.w	80255ba <SX1276SetOpMode>
 8026174:	20002a8c 	.word	0x20002a8c
 8026178:	20002abc 	.word	0x20002abc

0802617c <SX1276SetMaxPayloadLength>:
{
 802617c:	b513      	push	{r0, r1, r4, lr}
 802617e:	4604      	mov	r4, r0
 8026180:	9101      	str	r1, [sp, #4]
    SX1276SetModem( modem );
 8026182:	f7ff fbc5 	bl	8025910 <SX1276SetModem>
    switch( modem )
 8026186:	9901      	ldr	r1, [sp, #4]
 8026188:	b11c      	cbz	r4, 8026192 <SX1276SetMaxPayloadLength+0x16>
 802618a:	2c01      	cmp	r4, #1
 802618c:	d00c      	beq.n	80261a8 <SX1276SetMaxPayloadLength+0x2c>
}
 802618e:	b002      	add	sp, #8
 8026190:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8026192:	4b06      	ldr	r3, [pc, #24]	; (80261ac <SX1276SetMaxPayloadLength+0x30>)
 8026194:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8026198:	2b00      	cmp	r3, #0
 802619a:	d1f8      	bne.n	802618e <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 802619c:	2032      	movs	r0, #50	; 0x32
}
 802619e:	b002      	add	sp, #8
 80261a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80261a4:	f7ff b8c4 	b.w	8025330 <SX1276Write>
 80261a8:	2023      	movs	r0, #35	; 0x23
 80261aa:	e7f8      	b.n	802619e <SX1276SetMaxPayloadLength+0x22>
 80261ac:	20002abc 	.word	0x20002abc

080261b0 <SX1276SetPublicNetwork>:
{
 80261b0:	b510      	push	{r4, lr}
 80261b2:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 80261b4:	2001      	movs	r0, #1
 80261b6:	f7ff fbab 	bl	8025910 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80261ba:	4b06      	ldr	r3, [pc, #24]	; (80261d4 <SX1276SetPublicNetwork+0x24>)
 80261bc:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
    if( enable == true )
 80261c0:	b12c      	cbz	r4, 80261ce <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80261c2:	2134      	movs	r1, #52	; 0x34
}
 80261c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80261c8:	2039      	movs	r0, #57	; 0x39
 80261ca:	f7ff b8b1 	b.w	8025330 <SX1276Write>
 80261ce:	2112      	movs	r1, #18
 80261d0:	e7f8      	b.n	80261c4 <SX1276SetPublicNetwork+0x14>
 80261d2:	bf00      	nop
 80261d4:	20002abc 	.word	0x20002abc

080261d8 <SX1276OnTimeoutIrq>:
{
 80261d8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80261da:	4c2a      	ldr	r4, [pc, #168]	; (8026284 <SX1276OnTimeoutIrq+0xac>)
 80261dc:	7923      	ldrb	r3, [r4, #4]
 80261de:	2b01      	cmp	r3, #1
 80261e0:	4626      	mov	r6, r4
 80261e2:	d002      	beq.n	80261ea <SX1276OnTimeoutIrq+0x12>
 80261e4:	2b02      	cmp	r3, #2
 80261e6:	d028      	beq.n	802623a <SX1276OnTimeoutIrq+0x62>
}
 80261e8:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80261ea:	7963      	ldrb	r3, [r4, #5]
 80261ec:	b9b3      	cbnz	r3, 802621c <SX1276OnTimeoutIrq+0x44>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80261ee:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80261f0:	210b      	movs	r1, #11
 80261f2:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80261f4:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80261f6:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80261f8:	f7ff f89a 	bl	8025330 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80261fc:	2110      	movs	r1, #16
 80261fe:	203f      	movs	r0, #63	; 0x3f
 8026200:	f7ff f896 	bl	8025330 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8026204:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8026208:	b193      	cbz	r3, 8026230 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 802620a:	200d      	movs	r0, #13
 802620c:	f7ff f8d9 	bl	80253c2 <SX1276Read>
 8026210:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8026214:	b2c1      	uxtb	r1, r0
 8026216:	200d      	movs	r0, #13
 8026218:	f7ff f88a 	bl	8025330 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 802621c:	4b1a      	ldr	r3, [pc, #104]	; (8026288 <SX1276OnTimeoutIrq+0xb0>)
 802621e:	681b      	ldr	r3, [r3, #0]
 8026220:	2b00      	cmp	r3, #0
 8026222:	d0e1      	beq.n	80261e8 <SX1276OnTimeoutIrq+0x10>
 8026224:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8026226:	2b00      	cmp	r3, #0
 8026228:	d0de      	beq.n	80261e8 <SX1276OnTimeoutIrq+0x10>
}
 802622a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
 802622e:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 8026230:	4816      	ldr	r0, [pc, #88]	; (802628c <SX1276OnTimeoutIrq+0xb4>)
                SX1276.Settings.State = RF_IDLE;
 8026232:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8026234:	f000 fd56 	bl	8026ce4 <UTIL_TIMER_Stop>
 8026238:	e7f0      	b.n	802621c <SX1276OnTimeoutIrq+0x44>
    Sx_Board_Reset();
 802623a:	f7f4 f9a9 	bl	801a590 <SX1276MB1LAS_RADIO_Reset>
        RxChainCalibration( );
 802623e:	f7ff f8cb 	bl	80253d8 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8026242:	2000      	movs	r0, #0
 8026244:	f7ff f9b9 	bl	80255ba <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8026248:	4c11      	ldr	r4, [pc, #68]	; (8026290 <SX1276OnTimeoutIrq+0xb8>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 802624a:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
 802624c:	7820      	ldrb	r0, [r4, #0]
 802624e:	f7ff fb5f 	bl	8025910 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8026252:	3501      	adds	r5, #1
 8026254:	78a1      	ldrb	r1, [r4, #2]
 8026256:	7860      	ldrb	r0, [r4, #1]
 8026258:	f7ff f86a 	bl	8025330 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 802625c:	2d10      	cmp	r5, #16
 802625e:	f104 0403 	add.w	r4, r4, #3
 8026262:	d1f3      	bne.n	802624c <SX1276OnTimeoutIrq+0x74>
        SX1276SetModem( MODEM_FSK );
 8026264:	2000      	movs	r0, #0
 8026266:	f7ff fb53 	bl	8025910 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 802626a:	f896 005c 	ldrb.w	r0, [r6, #92]	; 0x5c
 802626e:	f7ff ff9f 	bl	80261b0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8026272:	2300      	movs	r3, #0
 8026274:	7133      	strb	r3, [r6, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8026276:	4b04      	ldr	r3, [pc, #16]	; (8026288 <SX1276OnTimeoutIrq+0xb0>)
 8026278:	681b      	ldr	r3, [r3, #0]
 802627a:	2b00      	cmp	r3, #0
 802627c:	d0b4      	beq.n	80261e8 <SX1276OnTimeoutIrq+0x10>
 802627e:	685b      	ldr	r3, [r3, #4]
 8026280:	e7d1      	b.n	8026226 <SX1276OnTimeoutIrq+0x4e>
 8026282:	bf00      	nop
 8026284:	20002abc 	.word	0x20002abc
 8026288:	20002398 	.word	0x20002398
 802628c:	20002aa4 	.word	0x20002aa4
 8026290:	080278f8 	.word	0x080278f8

08026294 <SX1276Send>:
{
 8026294:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
 8026296:	4c5e      	ldr	r4, [pc, #376]	; (8026410 <SX1276Send+0x17c>)
{
 8026298:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 802629c:	7963      	ldrb	r3, [r4, #5]
{
 802629e:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
 80262a0:	b1cb      	cbz	r3, 80262d6 <SX1276Send+0x42>
 80262a2:	2b01      	cmp	r3, #1
 80262a4:	d043      	beq.n	802632e <SX1276Send+0x9a>
 80262a6:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
 80262a8:	485a      	ldr	r0, [pc, #360]	; (8026414 <SX1276Send+0x180>)
 80262aa:	f000 fd1b 	bl	8026ce4 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80262ae:	485a      	ldr	r0, [pc, #360]	; (8026418 <SX1276Send+0x184>)
 80262b0:	4629      	mov	r1, r5
 80262b2:	f000 fda1 	bl	8026df8 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 80262b6:	7963      	ldrb	r3, [r4, #5]
 80262b8:	2b00      	cmp	r3, #0
 80262ba:	d074      	beq.n	80263a6 <SX1276Send+0x112>
 80262bc:	2b01      	cmp	r3, #1
 80262be:	f000 808a 	beq.w	80263d6 <SX1276Send+0x142>
    SX1276.Settings.State = RF_TX_RUNNING;
 80262c2:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 80262c4:	4854      	ldr	r0, [pc, #336]	; (8026418 <SX1276Send+0x184>)
    SX1276.Settings.State = RF_TX_RUNNING;
 80262c6:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 80262c8:	f000 fd5c 	bl	8026d84 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80262cc:	2003      	movs	r0, #3
 80262ce:	f7ff f974 	bl	80255ba <SX1276SetOpMode>
}
 80262d2:	b003      	add	sp, #12
 80262d4:	bd30      	pop	{r4, r5, pc}
            if( SX1276.Settings.Fsk.FixLen == false )
 80262d6:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
            SX1276.Settings.FskPacketHandler.Size = size;
 80262da:	f89d 1007 	ldrb.w	r1, [sp, #7]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80262de:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80262e0:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 80262e2:	b9c0      	cbnz	r0, 8026316 <SX1276Send+0x82>
    SX1276WriteBuffer( 0, buffer, size );
 80262e4:	2201      	movs	r2, #1
 80262e6:	f10d 0107 	add.w	r1, sp, #7
 80262ea:	f7ff f808 	bl	80252fe <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 80262ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80262f2:	1e53      	subs	r3, r2, #1
 80262f4:	2b3f      	cmp	r3, #63	; 0x3f
 80262f6:	d812      	bhi.n	802631e <SX1276Send+0x8a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80262f8:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 80262fc:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8026300:	4629      	mov	r1, r5
 8026302:	2000      	movs	r0, #0
 8026304:	f7fe fffb 	bl	80252fe <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8026308:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 802630a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 802630e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8026310:	4413      	add	r3, r2
 8026312:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 8026314:	e7c8      	b.n	80262a8 <SX1276Send+0x14>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8026316:	2032      	movs	r0, #50	; 0x32
 8026318:	f7ff f80a 	bl	8025330 <SX1276Write>
 802631c:	e7e7      	b.n	80262ee <SX1276Send+0x5a>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 802631e:	483f      	ldr	r0, [pc, #252]	; (802641c <SX1276Send+0x188>)
 8026320:	4629      	mov	r1, r5
 8026322:	f000 fbc9 	bl	8026ab8 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8026326:	2320      	movs	r3, #32
 8026328:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 802632c:	e7e6      	b.n	80262fc <SX1276Send+0x68>
            if( SX1276.Settings.LoRa.IqInverted == true )
 802632e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8026332:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8026334:	b363      	cbz	r3, 8026390 <SX1276Send+0xfc>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8026336:	f7ff f844 	bl	80253c2 <SX1276Read>
 802633a:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 802633e:	2033      	movs	r0, #51	; 0x33
 8026340:	f7fe fff6 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8026344:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8026346:	203b      	movs	r0, #59	; 0x3b
 8026348:	f7fe fff2 	bl	8025330 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 802634c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8026350:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8026354:	2022      	movs	r0, #34	; 0x22
 8026356:	f7fe ffeb 	bl	8025330 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 802635a:	2100      	movs	r1, #0
 802635c:	200e      	movs	r0, #14
 802635e:	f7fe ffe7 	bl	8025330 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8026362:	2100      	movs	r1, #0
 8026364:	200d      	movs	r0, #13
 8026366:	f7fe ffe3 	bl	8025330 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 802636a:	2001      	movs	r0, #1
 802636c:	f7ff f829 	bl	80253c2 <SX1276Read>
 8026370:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8026374:	d104      	bne.n	8026380 <SX1276Send+0xec>
                SX1276SetStby( );
 8026376:	f7ff f96f 	bl	8025658 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 802637a:	2001      	movs	r0, #1
 802637c:	f7f3 fdef 	bl	8019f5e <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 8026380:	4629      	mov	r1, r5
 8026382:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026386:	2000      	movs	r0, #0
 8026388:	f7fe ffb9 	bl	80252fe <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 802638c:	6da5      	ldr	r5, [r4, #88]	; 0x58
        break;
 802638e:	e78b      	b.n	80262a8 <SX1276Send+0x14>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8026390:	f7ff f817 	bl	80253c2 <SX1276Read>
 8026394:	f000 00be 	and.w	r0, r0, #190	; 0xbe
 8026398:	f040 0101 	orr.w	r1, r0, #1
 802639c:	2033      	movs	r0, #51	; 0x33
 802639e:	f7fe ffc7 	bl	8025330 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80263a2:	211d      	movs	r1, #29
 80263a4:	e7cf      	b.n	8026346 <SX1276Send+0xb2>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80263a6:	2040      	movs	r0, #64	; 0x40
 80263a8:	f7ff f80b 	bl	80253c2 <SX1276Read>
 80263ac:	f000 0103 	and.w	r1, r0, #3
 80263b0:	2040      	movs	r0, #64	; 0x40
 80263b2:	f7fe ffbd 	bl	8025330 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80263b6:	2041      	movs	r0, #65	; 0x41
 80263b8:	f7ff f803 	bl	80253c2 <SX1276Read>
 80263bc:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 80263c0:	2041      	movs	r0, #65	; 0x41
 80263c2:	f7fe ffb5 	bl	8025330 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80263c6:	2035      	movs	r0, #53	; 0x35
 80263c8:	f7fe fffb 	bl	80253c2 <SX1276Read>
 80263cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80263d0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        break;
 80263d4:	e775      	b.n	80262c2 <SX1276Send+0x2e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80263d6:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80263da:	b173      	cbz	r3, 80263fa <SX1276Send+0x166>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80263dc:	21f5      	movs	r1, #245	; 0xf5
 80263de:	2011      	movs	r0, #17
 80263e0:	f7fe ffa6 	bl	8025330 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80263e4:	2040      	movs	r0, #64	; 0x40
 80263e6:	f7fe ffec 	bl	80253c2 <SX1276Read>
 80263ea:	f000 0033 	and.w	r0, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80263ee:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80263f2:	2040      	movs	r0, #64	; 0x40
 80263f4:	f7fe ff9c 	bl	8025330 <SX1276Write>
 80263f8:	e763      	b.n	80262c2 <SX1276Send+0x2e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80263fa:	21f7      	movs	r1, #247	; 0xf7
 80263fc:	2011      	movs	r0, #17
 80263fe:	f7fe ff97 	bl	8025330 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8026402:	2040      	movs	r0, #64	; 0x40
 8026404:	f7fe ffdd 	bl	80253c2 <SX1276Read>
 8026408:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 802640c:	e7ef      	b.n	80263ee <SX1276Send+0x15a>
 802640e:	bf00      	nop
 8026410:	20002abc 	.word	0x20002abc
 8026414:	20002b24 	.word	0x20002b24
 8026418:	20002a8c 	.word	0x20002a8c
 802641c:	2000239c 	.word	0x2000239c

08026420 <SX1276OnDio1Irq>:
{
 8026420:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8026422:	4c3b      	ldr	r4, [pc, #236]	; (8026510 <SX1276OnDio1Irq+0xf0>)
 8026424:	7926      	ldrb	r6, [r4, #4]
 8026426:	2e01      	cmp	r6, #1
 8026428:	4625      	mov	r5, r4
 802642a:	d002      	beq.n	8026432 <SX1276OnDio1Irq+0x12>
 802642c:	2e02      	cmp	r6, #2
 802642e:	d04f      	beq.n	80264d0 <SX1276OnDio1Irq+0xb0>
}
 8026430:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8026432:	7963      	ldrb	r3, [r4, #5]
 8026434:	b1c3      	cbz	r3, 8026468 <SX1276OnDio1Irq+0x48>
 8026436:	2b01      	cmp	r3, #1
 8026438:	d1fa      	bne.n	8026430 <SX1276OnDio1Irq+0x10>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 802643a:	f7f4 f8e7 	bl	801a60c <SX1276MB1LAS_RADIO_GetDio1PinState>
 802643e:	2800      	cmp	r0, #0
 8026440:	d0f6      	beq.n	8026430 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 8026442:	4834      	ldr	r0, [pc, #208]	; (8026514 <SX1276OnDio1Irq+0xf4>)
 8026444:	f000 fc4e 	bl	8026ce4 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8026448:	2180      	movs	r1, #128	; 0x80
 802644a:	2012      	movs	r0, #18
 802644c:	f7fe ff70 	bl	8025330 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8026450:	2300      	movs	r3, #0
 8026452:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8026454:	4b30      	ldr	r3, [pc, #192]	; (8026518 <SX1276OnDio1Irq+0xf8>)
 8026456:	681b      	ldr	r3, [r3, #0]
 8026458:	2b00      	cmp	r3, #0
 802645a:	d0e9      	beq.n	8026430 <SX1276OnDio1Irq+0x10>
 802645c:	68db      	ldr	r3, [r3, #12]
 802645e:	2b00      	cmp	r3, #0
 8026460:	d0e6      	beq.n	8026430 <SX1276OnDio1Irq+0x10>
}
 8026462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
 8026466:	4718      	bx	r3
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8026468:	f7f4 f8d0 	bl	801a60c <SX1276MB1LAS_RADIO_GetDio1PinState>
 802646c:	2800      	cmp	r0, #0
 802646e:	d0df      	beq.n	8026430 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
 8026470:	482a      	ldr	r0, [pc, #168]	; (802651c <SX1276OnDio1Irq+0xfc>)
 8026472:	f000 fc37 	bl	8026ce4 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8026476:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8026478:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 802647a:	4313      	orrs	r3, r2
 802647c:	b29b      	uxth	r3, r3
 802647e:	b93b      	cbnz	r3, 8026490 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8026480:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 8026484:	b9c8      	cbnz	r0, 80264ba <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 8026486:	4632      	mov	r2, r6
 8026488:	f104 013a 	add.w	r1, r4, #58	; 0x3a
 802648c:	f7fe ff80 	bl	8025390 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8026490:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
 8026492:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 8026494:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8026498:	4921      	ldr	r1, [pc, #132]	; (8026520 <SX1276OnDio1Irq+0x100>)
 802649a:	1a12      	subs	r2, r2, r0
 802649c:	429a      	cmp	r2, r3
 802649e:	4401      	add	r1, r0
 80264a0:	db10      	blt.n	80264c4 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80264a2:	1e5a      	subs	r2, r3, #1
    SX1276ReadBuffer( 0, buffer, size );
 80264a4:	b2d2      	uxtb	r2, r2
 80264a6:	2000      	movs	r0, #0
 80264a8:	f7fe ff72 	bl	8025390 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80264ac:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80264ae:	1e5a      	subs	r2, r3, #1
 80264b0:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80264b4:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80264b6:	87ab      	strh	r3, [r5, #60]	; 0x3c
 80264b8:	e7ba      	b.n	8026430 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80264ba:	2032      	movs	r0, #50	; 0x32
 80264bc:	f7fe ff81 	bl	80253c2 <SX1276Read>
 80264c0:	8760      	strh	r0, [r4, #58]	; 0x3a
 80264c2:	e7e5      	b.n	8026490 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 80264c4:	b2d2      	uxtb	r2, r2
 80264c6:	2000      	movs	r0, #0
 80264c8:	f7fe ff62 	bl	8025390 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80264cc:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 80264ce:	e7f2      	b.n	80264b6 <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 80264d0:	7965      	ldrb	r5, [r4, #5]
 80264d2:	2d00      	cmp	r5, #0
 80264d4:	d1ac      	bne.n	8026430 <SX1276OnDio1Irq+0x10>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 80264d6:	f7f4 f899 	bl	801a60c <SX1276MB1LAS_RADIO_GetDio1PinState>
 80264da:	2801      	cmp	r0, #1
 80264dc:	d0a8      	beq.n	8026430 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80264de:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80264e0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80264e2:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80264e6:	490e      	ldr	r1, [pc, #56]	; (8026520 <SX1276OnDio1Irq+0x100>)
 80264e8:	1a1b      	subs	r3, r3, r0
 80264ea:	4293      	cmp	r3, r2
 80264ec:	4401      	add	r1, r0
 80264ee:	dd08      	ble.n	8026502 <SX1276OnDio1Irq+0xe2>
    SX1276WriteBuffer( 0, buffer, size );
 80264f0:	4628      	mov	r0, r5
 80264f2:	f7fe ff04 	bl	80252fe <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80264f6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80264fa:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80264fc:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80264fe:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8026500:	e796      	b.n	8026430 <SX1276OnDio1Irq+0x10>
    SX1276WriteBuffer( 0, buffer, size );
 8026502:	b2da      	uxtb	r2, r3
 8026504:	4628      	mov	r0, r5
 8026506:	f7fe fefa 	bl	80252fe <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 802650a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 802650c:	e7f7      	b.n	80264fe <SX1276OnDio1Irq+0xde>
 802650e:	bf00      	nop
 8026510:	20002abc 	.word	0x20002abc
 8026514:	20002b24 	.word	0x20002b24
 8026518:	20002398 	.word	0x20002398
 802651c:	20002aa4 	.word	0x20002aa4
 8026520:	2000239c 	.word	0x2000239c

08026524 <SX1276OnDio0Irq>:
{
 8026524:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8026526:	4e85      	ldr	r6, [pc, #532]	; (802673c <SX1276OnDio0Irq+0x218>)
    volatile uint8_t irqFlags = 0;
 8026528:	2300      	movs	r3, #0
 802652a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 802652e:	7933      	ldrb	r3, [r6, #4]
 8026530:	2b01      	cmp	r3, #1
 8026532:	4634      	mov	r4, r6
 8026534:	d004      	beq.n	8026540 <SX1276OnDio0Irq+0x1c>
 8026536:	2b02      	cmp	r3, #2
 8026538:	f000 80ed 	beq.w	8026716 <SX1276OnDio0Irq+0x1f2>
}
 802653c:	b002      	add	sp, #8
 802653e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8026540:	7973      	ldrb	r3, [r6, #5]
 8026542:	b333      	cbz	r3, 8026592 <SX1276OnDio0Irq+0x6e>
 8026544:	2b01      	cmp	r3, #1
 8026546:	d1f9      	bne.n	802653c <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8026548:	2140      	movs	r1, #64	; 0x40
 802654a:	2012      	movs	r0, #18
 802654c:	f7fe fef0 	bl	8025330 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8026550:	2012      	movs	r0, #18
 8026552:	f7fe ff36 	bl	80253c2 <SX1276Read>
 8026556:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 802655a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802655e:	4d78      	ldr	r5, [pc, #480]	; (8026740 <SX1276OnDio0Irq+0x21c>)
 8026560:	f013 0f20 	tst.w	r3, #32
 8026564:	f000 8086 	beq.w	8026674 <SX1276OnDio0Irq+0x150>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8026568:	2120      	movs	r1, #32
 802656a:	2012      	movs	r0, #18
 802656c:	f7fe fee0 	bl	8025330 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8026570:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
 8026574:	b903      	cbnz	r3, 8026578 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 8026576:	7133      	strb	r3, [r6, #4]
                        TimerStop( &RxTimeoutTimer );
 8026578:	4872      	ldr	r0, [pc, #456]	; (8026744 <SX1276OnDio0Irq+0x220>)
 802657a:	f000 fbb3 	bl	8026ce4 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 802657e:	682b      	ldr	r3, [r5, #0]
 8026580:	2b00      	cmp	r3, #0
 8026582:	d0db      	beq.n	802653c <SX1276OnDio0Irq+0x18>
 8026584:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8026586:	2b00      	cmp	r3, #0
 8026588:	d0d8      	beq.n	802653c <SX1276OnDio0Irq+0x18>
}
 802658a:	b002      	add	sp, #8
 802658c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
 8026590:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
 8026592:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8026596:	4d6a      	ldr	r5, [pc, #424]	; (8026740 <SX1276OnDio0Irq+0x21c>)
 8026598:	b373      	cbz	r3, 80265f8 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 802659a:	203f      	movs	r0, #63	; 0x3f
 802659c:	f7fe ff11 	bl	80253c2 <SX1276Read>
 80265a0:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80265a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80265a8:	079b      	lsls	r3, r3, #30
 80265aa:	d425      	bmi.n	80265f8 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80265ac:	210b      	movs	r1, #11
 80265ae:	203e      	movs	r0, #62	; 0x3e
 80265b0:	f7fe febe 	bl	8025330 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80265b4:	2110      	movs	r1, #16
 80265b6:	203f      	movs	r0, #63	; 0x3f
 80265b8:	f7fe feba 	bl	8025330 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80265bc:	4861      	ldr	r0, [pc, #388]	; (8026744 <SX1276OnDio0Irq+0x220>)
 80265be:	f000 fb91 	bl	8026ce4 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80265c2:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
 80265c6:	b96e      	cbnz	r6, 80265e4 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 80265c8:	485f      	ldr	r0, [pc, #380]	; (8026748 <SX1276OnDio0Irq+0x224>)
 80265ca:	f000 fb8b 	bl	8026ce4 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 80265ce:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80265d0:	682b      	ldr	r3, [r5, #0]
 80265d2:	b113      	cbz	r3, 80265da <SX1276OnDio0Irq+0xb6>
 80265d4:	691b      	ldr	r3, [r3, #16]
 80265d6:	b103      	cbz	r3, 80265da <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 80265d8:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80265da:	2300      	movs	r3, #0
 80265dc:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80265de:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80265e0:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 80265e2:	e7ab      	b.n	802653c <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80265e4:	200d      	movs	r0, #13
 80265e6:	f7fe feec 	bl	80253c2 <SX1276Read>
 80265ea:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80265ee:	b2c1      	uxtb	r1, r0
 80265f0:	200d      	movs	r0, #13
 80265f2:	f7fe fe9d 	bl	8025330 <SX1276Write>
 80265f6:	e7eb      	b.n	80265d0 <SX1276OnDio0Irq+0xac>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80265f8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80265fa:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80265fc:	4e53      	ldr	r6, [pc, #332]	; (802674c <SX1276OnDio0Irq+0x228>)
 80265fe:	ea52 0301 	orrs.w	r3, r2, r1
 8026602:	d109      	bne.n	8026618 <SX1276OnDio0Irq+0xf4>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8026604:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 8026608:	bb28      	cbnz	r0, 8026656 <SX1276OnDio0Irq+0x132>
    SX1276ReadBuffer( 0, buffer, size );
 802660a:	4951      	ldr	r1, [pc, #324]	; (8026750 <SX1276OnDio0Irq+0x22c>)
 802660c:	2201      	movs	r2, #1
 802660e:	f7fe febf 	bl	8025390 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8026612:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8026614:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8026618:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 802661a:	b2d2      	uxtb	r2, r2
 802661c:	4431      	add	r1, r6
 802661e:	2000      	movs	r0, #0
 8026620:	f7fe feb6 	bl	8025390 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8026624:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8026626:	4847      	ldr	r0, [pc, #284]	; (8026744 <SX1276OnDio0Irq+0x220>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8026628:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 802662a:	f000 fb5b 	bl	8026ce4 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 802662e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8026632:	b9ab      	cbnz	r3, 8026660 <SX1276OnDio0Irq+0x13c>
                    TimerStop( &RxTimeoutSyncWord );
 8026634:	4844      	ldr	r0, [pc, #272]	; (8026748 <SX1276OnDio0Irq+0x224>)
                    SX1276.Settings.State = RF_IDLE;
 8026636:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8026638:	f000 fb54 	bl	8026ce4 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 802663c:	682b      	ldr	r3, [r5, #0]
 802663e:	2b00      	cmp	r3, #0
 8026640:	d0cb      	beq.n	80265da <SX1276OnDio0Irq+0xb6>
 8026642:	689d      	ldr	r5, [r3, #8]
 8026644:	2d00      	cmp	r5, #0
 8026646:	d0c8      	beq.n	80265da <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8026648:	f994 2032 	ldrsb.w	r2, [r4, #50]	; 0x32
 802664c:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 802664e:	483f      	ldr	r0, [pc, #252]	; (802674c <SX1276OnDio0Irq+0x228>)
 8026650:	2300      	movs	r3, #0
 8026652:	47a8      	blx	r5
 8026654:	e7c1      	b.n	80265da <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8026656:	2032      	movs	r0, #50	; 0x32
 8026658:	f7fe feb3 	bl	80253c2 <SX1276Read>
 802665c:	8760      	strh	r0, [r4, #58]	; 0x3a
 802665e:	e7d8      	b.n	8026612 <SX1276OnDio0Irq+0xee>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8026660:	200d      	movs	r0, #13
 8026662:	f7fe feae 	bl	80253c2 <SX1276Read>
 8026666:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 802666a:	b2c1      	uxtb	r1, r0
 802666c:	200d      	movs	r0, #13
 802666e:	f7fe fe5f 	bl	8025330 <SX1276Write>
 8026672:	e7e3      	b.n	802663c <SX1276OnDio0Irq+0x118>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8026674:	2019      	movs	r0, #25
 8026676:	f7fe fea4 	bl	80253c2 <SX1276Read>
 802667a:	b240      	sxtb	r0, r0
 802667c:	3002      	adds	r0, #2
 802667e:	1080      	asrs	r0, r0, #2
 8026680:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8026684:	201a      	movs	r0, #26
 8026686:	f7fe fe9c 	bl	80253c2 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 802668a:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 802668e:	4931      	ldr	r1, [pc, #196]	; (8026754 <SX1276OnDio0Irq+0x230>)
 8026690:	f340 120b 	sbfx	r2, r0, #4, #12
 8026694:	2b00      	cmp	r3, #0
 8026696:	b292      	uxth	r2, r2
 8026698:	b280      	uxth	r0, r0
 802669a:	da36      	bge.n	802670a <SX1276OnDio0Irq+0x1e6>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 802669c:	68b6      	ldr	r6, [r6, #8]
 802669e:	b29b      	uxth	r3, r3
 80266a0:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80266a2:	bf8c      	ite	hi
 80266a4:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80266a6:	3ba4      	subls	r3, #164	; 0xa4
 80266a8:	4418      	add	r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80266aa:	4410      	add	r0, r2
 80266ac:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80266b0:	2013      	movs	r0, #19
 80266b2:	f7fe fe86 	bl	80253c2 <SX1276Read>
 80266b6:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80266ba:	2010      	movs	r0, #16
 80266bc:	f7fe fe81 	bl	80253c2 <SX1276Read>
 80266c0:	4601      	mov	r1, r0
 80266c2:	200d      	movs	r0, #13
 80266c4:	f7fe fe34 	bl	8025330 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 80266c8:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 80266cc:	491f      	ldr	r1, [pc, #124]	; (802674c <SX1276OnDio0Irq+0x228>)
 80266ce:	2000      	movs	r0, #0
 80266d0:	f7fe fe5e 	bl	8025390 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80266d4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80266d8:	b903      	cbnz	r3, 80266dc <SX1276OnDio0Irq+0x1b8>
                        SX1276.Settings.State = RF_IDLE;
 80266da:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80266dc:	4819      	ldr	r0, [pc, #100]	; (8026744 <SX1276OnDio0Irq+0x220>)
 80266de:	f000 fb01 	bl	8026ce4 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80266e2:	682b      	ldr	r3, [r5, #0]
 80266e4:	2b00      	cmp	r3, #0
 80266e6:	f43f af29 	beq.w	802653c <SX1276OnDio0Irq+0x18>
 80266ea:	689d      	ldr	r5, [r3, #8]
 80266ec:	2d00      	cmp	r5, #0
 80266ee:	f43f af25 	beq.w	802653c <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80266f2:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 80266f6:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 80266fa:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 80266fe:	4813      	ldr	r0, [pc, #76]	; (802674c <SX1276OnDio0Irq+0x228>)
 8026700:	46ac      	mov	ip, r5
}
 8026702:	b002      	add	sp, #8
 8026704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8026708:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 802670a:	68b3      	ldr	r3, [r6, #8]
 802670c:	428b      	cmp	r3, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 802670e:	bf8c      	ite	hi
 8026710:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8026712:	38a4      	subls	r0, #164	; 0xa4
 8026714:	e7c9      	b.n	80266aa <SX1276OnDio0Irq+0x186>
            TimerStop( &TxTimeoutTimer );
 8026716:	4810      	ldr	r0, [pc, #64]	; (8026758 <SX1276OnDio0Irq+0x234>)
 8026718:	f000 fae4 	bl	8026ce4 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 802671c:	7973      	ldrb	r3, [r6, #5]
 802671e:	2b01      	cmp	r3, #1
 8026720:	d103      	bne.n	802672a <SX1276OnDio0Irq+0x206>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8026722:	2108      	movs	r1, #8
 8026724:	2012      	movs	r0, #18
 8026726:	f7fe fe03 	bl	8025330 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 802672a:	2300      	movs	r3, #0
 802672c:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 802672e:	4b04      	ldr	r3, [pc, #16]	; (8026740 <SX1276OnDio0Irq+0x21c>)
 8026730:	681b      	ldr	r3, [r3, #0]
 8026732:	2b00      	cmp	r3, #0
 8026734:	f43f af02 	beq.w	802653c <SX1276OnDio0Irq+0x18>
 8026738:	681b      	ldr	r3, [r3, #0]
 802673a:	e724      	b.n	8026586 <SX1276OnDio0Irq+0x62>
 802673c:	20002abc 	.word	0x20002abc
 8026740:	20002398 	.word	0x20002398
 8026744:	20002b24 	.word	0x20002b24
 8026748:	20002aa4 	.word	0x20002aa4
 802674c:	2000239c 	.word	0x2000239c
 8026750:	20002af6 	.word	0x20002af6
 8026754:	1f4add40 	.word	0x1f4add40
 8026758:	20002a8c 	.word	0x20002a8c

0802675c <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 802675c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802675e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8026762:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8026764:	4b14      	ldr	r3, [pc, #80]	; (80267b8 <TRACE_AllocateBufer+0x5c>)
 8026766:	8a5c      	ldrh	r4, [r3, #18]
 8026768:	8a1a      	ldrh	r2, [r3, #16]
 802676a:	4294      	cmp	r4, r2
 802676c:	d113      	bne.n	8026796 <TRACE_AllocateBufer+0x3a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 802676e:	f5c4 7200 	rsb	r2, r4, #512	; 0x200
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8026772:	b292      	uxth	r2, r2
 8026774:	4290      	cmp	r0, r2
 8026776:	d306      	bcc.n	8026786 <TRACE_AllocateBufer+0x2a>
 8026778:	4284      	cmp	r4, r0
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 802677a:	d918      	bls.n	80267ae <TRACE_AllocateBufer+0x52>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 802677c:	2201      	movs	r2, #1
 802677e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8026780:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8026782:	801c      	strh	r4, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8026784:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8026786:	8a5a      	ldrh	r2, [r3, #18]
 8026788:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 802678a:	4410      	add	r0, r2
 802678c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8026790:	8258      	strh	r0, [r3, #18]
    ret = 0;
 8026792:	2000      	movs	r0, #0
 8026794:	e00d      	b.n	80267b2 <TRACE_AllocateBufer+0x56>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8026796:	d906      	bls.n	80267a6 <TRACE_AllocateBufer+0x4a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8026798:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 802679c:	b2ad      	uxth	r5, r5
 802679e:	4285      	cmp	r5, r0
 80267a0:	d8f1      	bhi.n	8026786 <TRACE_AllocateBufer+0x2a>
 80267a2:	4282      	cmp	r2, r0
 80267a4:	e7e9      	b.n	802677a <TRACE_AllocateBufer+0x1e>
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80267a6:	1b12      	subs	r2, r2, r4
  if (freesize > Size)
 80267a8:	b292      	uxth	r2, r2
 80267aa:	4282      	cmp	r2, r0
 80267ac:	d8eb      	bhi.n	8026786 <TRACE_AllocateBufer+0x2a>
  int16_t ret = -1;
 80267ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80267b2:	f386 8810 	msr	PRIMASK, r6
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 80267b6:	bd70      	pop	{r4, r5, r6, pc}
 80267b8:	2000249c 	.word	0x2000249c

080267bc <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80267bc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80267c0:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80267c2:	4a03      	ldr	r2, [pc, #12]	; (80267d0 <TRACE_Lock+0x14>)
 80267c4:	8ad3      	ldrh	r3, [r2, #22]
 80267c6:	3301      	adds	r3, #1
 80267c8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80267ca:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80267ce:	4770      	bx	lr
 80267d0:	2000249c 	.word	0x2000249c

080267d4 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80267d4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80267d8:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80267da:	4a03      	ldr	r2, [pc, #12]	; (80267e8 <TRACE_UnLock+0x14>)
 80267dc:	8ad3      	ldrh	r3, [r2, #22]
 80267de:	3b01      	subs	r3, #1
 80267e0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80267e2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80267e6:	4770      	bx	lr
 80267e8:	2000249c 	.word	0x2000249c

080267ec <UTIL_ADV_TRACE_Init>:
{
 80267ec:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80267ee:	4c09      	ldr	r4, [pc, #36]	; (8026814 <UTIL_ADV_TRACE_Init+0x28>)
 80267f0:	2218      	movs	r2, #24
 80267f2:	4620      	mov	r0, r4
 80267f4:	2100      	movs	r1, #0
 80267f6:	f000 f969 	bl	8026acc <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80267fa:	f104 0018 	add.w	r0, r4, #24
 80267fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026802:	2100      	movs	r1, #0
 8026804:	f000 f962 	bl	8026acc <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8026808:	4b03      	ldr	r3, [pc, #12]	; (8026818 <UTIL_ADV_TRACE_Init+0x2c>)
 802680a:	4804      	ldr	r0, [pc, #16]	; (802681c <UTIL_ADV_TRACE_Init+0x30>)
 802680c:	681b      	ldr	r3, [r3, #0]
}
 802680e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8026812:	4718      	bx	r3
 8026814:	2000249c 	.word	0x2000249c
 8026818:	08027250 	.word	0x08027250
 802681c:	08026991 	.word	0x08026991

08026820 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 8026820:	4b01      	ldr	r3, [pc, #4]	; (8026828 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8026822:	6058      	str	r0, [r3, #4]
}
 8026824:	4770      	bx	lr
 8026826:	bf00      	nop
 8026828:	2000249c 	.word	0x2000249c

0802682c <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 802682c:	4b01      	ldr	r3, [pc, #4]	; (8026834 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 802682e:	7218      	strb	r0, [r3, #8]
}
 8026830:	4770      	bx	lr
 8026832:	bf00      	nop
 8026834:	2000249c 	.word	0x2000249c

08026838 <TRACE_Send>:
{
 8026838:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802683a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 802683e:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8026840:	4c1c      	ldr	r4, [pc, #112]	; (80268b4 <TRACE_Send+0x7c>)
  if(TRACE_IsLocked() == 0u)
 8026842:	8ae0      	ldrh	r0, [r4, #22]
 8026844:	2800      	cmp	r0, #0
 8026846:	d12f      	bne.n	80268a8 <TRACE_Send+0x70>
    TRACE_Lock();
 8026848:	f7ff ffb8 	bl	80267bc <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 802684c:	8a26      	ldrh	r6, [r4, #16]
 802684e:	8a62      	ldrh	r2, [r4, #18]
 8026850:	4296      	cmp	r6, r2
 8026852:	d027      	beq.n	80268a4 <TRACE_Send+0x6c>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8026854:	78a1      	ldrb	r1, [r4, #2]
 8026856:	2901      	cmp	r1, #1
 8026858:	d111      	bne.n	802687e <TRACE_Send+0x46>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 802685a:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 802685c:	8020      	strh	r0, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 802685e:	1b9b      	subs	r3, r3, r6
 8026860:	b29b      	uxth	r3, r3
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8026862:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8026864:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8026866:	70a1      	strb	r1, [r4, #2]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 8026868:	b95b      	cbnz	r3, 8026882 <TRACE_Send+0x4a>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 802686a:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 802686c:	8223      	strh	r3, [r4, #16]
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 802686e:	8a23      	ldrh	r3, [r4, #16]
 8026870:	429a      	cmp	r2, r3
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8026872:	bf8c      	ite	hi
 8026874:	1ad3      	subhi	r3, r2, r3
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8026876:	f5c3 7300 	rsbls	r3, r3, #512	; 0x200
 802687a:	82a3      	strh	r3, [r4, #20]
 802687c:	e001      	b.n	8026882 <TRACE_Send+0x4a>
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 802687e:	2900      	cmp	r1, #0
 8026880:	d0f5      	beq.n	802686e <TRACE_Send+0x36>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8026882:	8a23      	ldrh	r3, [r4, #16]
 8026884:	480c      	ldr	r0, [pc, #48]	; (80268b8 <TRACE_Send+0x80>)
 8026886:	4418      	add	r0, r3
 8026888:	9001      	str	r0, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802688a:	f385 8810 	msr	PRIMASK, r5
      UTIL_ADV_TRACE_PreSendHook(); 
 802688e:	f7f3 fb5a 	bl	8019f46 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8026892:	4b0a      	ldr	r3, [pc, #40]	; (80268bc <TRACE_Send+0x84>)
 8026894:	9801      	ldr	r0, [sp, #4]
 8026896:	68db      	ldr	r3, [r3, #12]
 8026898:	8aa1      	ldrh	r1, [r4, #20]
 802689a:	9301      	str	r3, [sp, #4]
}
 802689c:	b002      	add	sp, #8
 802689e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80268a2:	4718      	bx	r3
      TRACE_UnLock();
 80268a4:	f7ff ff96 	bl	80267d4 <TRACE_UnLock>
 80268a8:	f385 8810 	msr	PRIMASK, r5
}
 80268ac:	2000      	movs	r0, #0
 80268ae:	b002      	add	sp, #8
 80268b0:	bd70      	pop	{r4, r5, r6, pc}
 80268b2:	bf00      	nop
 80268b4:	2000249c 	.word	0x2000249c
 80268b8:	200024b4 	.word	0x200024b4
 80268bc:	08027250 	.word	0x08027250

080268c0 <UTIL_ADV_TRACE_COND_FSend>:
{
 80268c0:	b408      	push	{r3}
 80268c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80268c4:	4c2f      	ldr	r4, [pc, #188]	; (8026984 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
{
 80268c6:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 80268c8:	2300      	movs	r3, #0
 80268ca:	f8ad 3000 	strh.w	r3, [sp]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80268ce:	7a23      	ldrb	r3, [r4, #8]
{
 80268d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80268d2:	4283      	cmp	r3, r0
 80268d4:	d34f      	bcc.n	8026976 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80268d6:	68e3      	ldr	r3, [r4, #12]
 80268d8:	ea31 0303 	bics.w	r3, r1, r3
 80268dc:	d14e      	bne.n	802697c <UTIL_ADV_TRACE_COND_FSend+0xbc>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80268de:	6863      	ldr	r3, [r4, #4]
 80268e0:	b11b      	cbz	r3, 80268ea <UTIL_ADV_TRACE_COND_FSend+0x2a>
 80268e2:	b112      	cbz	r2, 80268ea <UTIL_ADV_TRACE_COND_FSend+0x2a>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80268e4:	4669      	mov	r1, sp
 80268e6:	a802      	add	r0, sp, #8
 80268e8:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80268ea:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80268ec:	462a      	mov	r2, r5
 80268ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80268f2:	4825      	ldr	r0, [pc, #148]	; (8026988 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
  va_start( vaArgs, strFormat);
 80268f4:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80268f6:	f000 fa97 	bl	8026e28 <tiny_vsnprintf_like>
  TRACE_Lock();
 80268fa:	f7ff ff5f 	bl	80267bc <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80268fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8026902:	4418      	add	r0, r3
 8026904:	f10d 0102 	add.w	r1, sp, #2
 8026908:	b280      	uxth	r0, r0
 802690a:	f7ff ff27 	bl	802675c <TRACE_AllocateBufer>
 802690e:	3001      	adds	r0, #1
 8026910:	d02c      	beq.n	802696c <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 8026912:	2200      	movs	r2, #0
 8026914:	f8bd 3000 	ldrh.w	r3, [sp]
 8026918:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 802691c:	4616      	mov	r6, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 802691e:	f10d 0c08 	add.w	ip, sp, #8
 8026922:	b290      	uxth	r0, r2
 8026924:	fa17 f182 	uxtah	r1, r7, r2
    for (idx = 0u; idx < timestamp_size; idx++)
 8026928:	4283      	cmp	r3, r0
 802692a:	b289      	uxth	r1, r1
 802692c:	d817      	bhi.n	802695e <UTIL_ADV_TRACE_COND_FSend+0x9e>
 802692e:	443b      	add	r3, r7
 8026930:	b29b      	uxth	r3, r3
 8026932:	b10e      	cbz	r6, 8026938 <UTIL_ADV_TRACE_COND_FSend+0x78>
 8026934:	f8ad 3002 	strh.w	r3, [sp, #2]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8026938:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 802693c:	4c13      	ldr	r4, [pc, #76]	; (802698c <UTIL_ADV_TRACE_COND_FSend+0xcc>)
 802693e:	9b01      	ldr	r3, [sp, #4]
 8026940:	462a      	mov	r2, r5
 8026942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8026946:	4420      	add	r0, r4
 8026948:	f000 fa6e 	bl	8026e28 <tiny_vsnprintf_like>
    TRACE_UnLock();
 802694c:	f7ff ff42 	bl	80267d4 <TRACE_UnLock>
    return TRACE_Send();
 8026950:	f7ff ff72 	bl	8026838 <TRACE_Send>
}
 8026954:	b006      	add	sp, #24
 8026956:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802695a:	b001      	add	sp, #4
 802695c:	4770      	bx	lr
      ADV_TRACE_Buffer[writepos] = buf[idx];
 802695e:	4421      	add	r1, r4
 8026960:	f812 000c 	ldrb.w	r0, [r2, ip]
 8026964:	7608      	strb	r0, [r1, #24]
    for (idx = 0u; idx < timestamp_size; idx++)
 8026966:	3201      	adds	r2, #1
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8026968:	2601      	movs	r6, #1
 802696a:	e7da      	b.n	8026922 <UTIL_ADV_TRACE_COND_FSend+0x62>
  TRACE_UnLock();
 802696c:	f7ff ff32 	bl	80267d4 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8026970:	f06f 0002 	mvn.w	r0, #2
 8026974:	e7ee      	b.n	8026954 <UTIL_ADV_TRACE_COND_FSend+0x94>
    return UTIL_ADV_TRACE_GIVEUP;
 8026976:	f06f 0004 	mvn.w	r0, #4
 802697a:	e7eb      	b.n	8026954 <UTIL_ADV_TRACE_COND_FSend+0x94>
    return UTIL_ADV_TRACE_REGIONMASKED;
 802697c:	f06f 0005 	mvn.w	r0, #5
 8026980:	e7e8      	b.n	8026954 <UTIL_ADV_TRACE_COND_FSend+0x94>
 8026982:	bf00      	nop
 8026984:	2000249c 	.word	0x2000249c
 8026988:	200026b4 	.word	0x200026b4
 802698c:	200024b4 	.word	0x200024b4

08026990 <TRACE_TxCpltCallback>:
{ 
 8026990:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026992:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8026996:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8026998:	4b21      	ldr	r3, [pc, #132]	; (8026a20 <TRACE_TxCpltCallback+0x90>)
 802699a:	789a      	ldrb	r2, [r3, #2]
 802699c:	2a02      	cmp	r2, #2
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 802699e:	bf1d      	ittte	ne
 80269a0:	8a1a      	ldrhne	r2, [r3, #16]
 80269a2:	8a99      	ldrhne	r1, [r3, #20]
 80269a4:	1852      	addne	r2, r2, r1
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80269a6:	2200      	moveq	r2, #0
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80269a8:	bf18      	it	ne
 80269aa:	f3c2 0208 	ubfxne	r2, r2, #0, #9
 80269ae:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80269b0:	8a1d      	ldrh	r5, [r3, #16]
 80269b2:	8a59      	ldrh	r1, [r3, #18]
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80269b4:	bf08      	it	eq
 80269b6:	709a      	strbeq	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80269b8:	428d      	cmp	r5, r1
 80269ba:	d027      	beq.n	8026a0c <TRACE_TxCpltCallback+0x7c>
 80269bc:	8ada      	ldrh	r2, [r3, #22]
 80269be:	2a01      	cmp	r2, #1
 80269c0:	d124      	bne.n	8026a0c <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80269c2:	7898      	ldrb	r0, [r3, #2]
 80269c4:	2801      	cmp	r0, #1
 80269c6:	d112      	bne.n	80269ee <TRACE_TxCpltCallback+0x5e>
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80269c8:	881a      	ldrh	r2, [r3, #0]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80269ca:	2002      	movs	r0, #2
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80269cc:	1b52      	subs	r2, r2, r5
 80269ce:	b292      	uxth	r2, r2
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80269d0:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 80269d2:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80269d4:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 80269d6:	8018      	strh	r0, [r3, #0]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 80269d8:	b95a      	cbnz	r2, 80269f2 <TRACE_TxCpltCallback+0x62>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80269da:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80269dc:	821a      	strh	r2, [r3, #16]
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80269de:	8a1a      	ldrh	r2, [r3, #16]
 80269e0:	4291      	cmp	r1, r2
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80269e2:	bf8c      	ite	hi
 80269e4:	1a8a      	subhi	r2, r1, r2
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80269e6:	f5c2 7200 	rsbls	r2, r2, #512	; 0x200
 80269ea:	829a      	strh	r2, [r3, #20]
 80269ec:	e001      	b.n	80269f2 <TRACE_TxCpltCallback+0x62>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80269ee:	2800      	cmp	r0, #0
 80269f0:	d0f5      	beq.n	80269de <TRACE_TxCpltCallback+0x4e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80269f2:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 80269f6:	4a0b      	ldr	r2, [pc, #44]	; (8026a24 <TRACE_TxCpltCallback+0x94>)
 80269f8:	8a18      	ldrh	r0, [r3, #16]
 80269fa:	8a99      	ldrh	r1, [r3, #20]
 80269fc:	4b0a      	ldr	r3, [pc, #40]	; (8026a28 <TRACE_TxCpltCallback+0x98>)
 80269fe:	4418      	add	r0, r3
 8026a00:	68d3      	ldr	r3, [r2, #12]
 8026a02:	9301      	str	r3, [sp, #4]
}
 8026a04:	b003      	add	sp, #12
 8026a06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 8026a0a:	4718      	bx	r3
    UTIL_ADV_TRACE_PostSendHook();      
 8026a0c:	f7f3 fa9f 	bl	8019f4e <UTIL_ADV_TRACE_PostSendHook>
 8026a10:	f384 8810 	msr	PRIMASK, r4
}
 8026a14:	b003      	add	sp, #12
 8026a16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TRACE_UnLock();
 8026a1a:	f7ff bedb 	b.w	80267d4 <TRACE_UnLock>
 8026a1e:	bf00      	nop
 8026a20:	2000249c 	.word	0x2000249c
 8026a24:	08027250 	.word	0x08027250
 8026a28:	200024b4 	.word	0x200024b4

08026a2c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8026a2c:	4b02      	ldr	r3, [pc, #8]	; (8026a38 <UTIL_LPM_Init+0xc>)
 8026a2e:	2200      	movs	r2, #0
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8026a30:	e9c3 2200 	strd	r2, r2, [r3]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8026a34:	4770      	bx	lr
 8026a36:	bf00      	nop
 8026a38:	200027b4 	.word	0x200027b4

08026a3c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8026a3c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026a3e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8026a42:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8026a44:	b141      	cbz	r1, 8026a58 <UTIL_LPM_SetStopMode+0x1c>
 8026a46:	2901      	cmp	r1, #1
 8026a48:	d103      	bne.n	8026a52 <UTIL_LPM_SetStopMode+0x16>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8026a4a:	4a06      	ldr	r2, [pc, #24]	; (8026a64 <UTIL_LPM_SetStopMode+0x28>)
 8026a4c:	6813      	ldr	r3, [r2, #0]
 8026a4e:	4318      	orrs	r0, r3
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8026a50:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026a52:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8026a56:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 8026a58:	4a02      	ldr	r2, [pc, #8]	; (8026a64 <UTIL_LPM_SetStopMode+0x28>)
 8026a5a:	6813      	ldr	r3, [r2, #0]
 8026a5c:	ea23 0000 	bic.w	r0, r3, r0
 8026a60:	e7f6      	b.n	8026a50 <UTIL_LPM_SetStopMode+0x14>
 8026a62:	bf00      	nop
 8026a64:	200027b4 	.word	0x200027b4

08026a68 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8026a68:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026a6a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8026a6e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8026a70:	b141      	cbz	r1, 8026a84 <UTIL_LPM_SetOffMode+0x1c>
 8026a72:	2901      	cmp	r1, #1
 8026a74:	d103      	bne.n	8026a7e <UTIL_LPM_SetOffMode+0x16>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8026a76:	4a06      	ldr	r2, [pc, #24]	; (8026a90 <UTIL_LPM_SetOffMode+0x28>)
 8026a78:	6853      	ldr	r3, [r2, #4]
 8026a7a:	4318      	orrs	r0, r3
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8026a7c:	6050      	str	r0, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026a7e:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8026a82:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8026a84:	4a02      	ldr	r2, [pc, #8]	; (8026a90 <UTIL_LPM_SetOffMode+0x28>)
 8026a86:	6853      	ldr	r3, [r2, #4]
 8026a88:	ea23 0000 	bic.w	r0, r3, r0
 8026a8c:	e7f6      	b.n	8026a7c <UTIL_LPM_SetOffMode+0x14>
 8026a8e:	bf00      	nop
 8026a90:	200027b4 	.word	0x200027b4

08026a94 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026a94:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8026a98:	b672      	cpsid	i
{
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8026a9a:	4b06      	ldr	r3, [pc, #24]	; (8026ab4 <UTIL_LPM_GetMode+0x20>)
 8026a9c:	6819      	ldr	r1, [r3, #0]
 8026a9e:	b939      	cbnz	r1, 8026ab0 <UTIL_LPM_GetMode+0x1c>
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8026aa0:	685b      	ldr	r3, [r3, #4]
 8026aa2:	2b00      	cmp	r3, #0
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 8026aa4:	bf14      	ite	ne
 8026aa6:	2001      	movne	r0, #1
 8026aa8:	2002      	moveq	r0, #2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026aaa:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 8026aae:	4770      	bx	lr
    mode_selected = UTIL_LPM_SLEEPMODE;
 8026ab0:	2000      	movs	r0, #0
 8026ab2:	e7fa      	b.n	8026aaa <UTIL_LPM_GetMode+0x16>
 8026ab4:	200027b4 	.word	0x200027b4

08026ab8 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8026ab8:	3801      	subs	r0, #1
 8026aba:	440a      	add	r2, r1
 8026abc:	4291      	cmp	r1, r2
 8026abe:	d100      	bne.n	8026ac2 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 8026ac0:	4770      	bx	lr
        *dst8++ = *src8++;
 8026ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026ac6:	f800 3f01 	strb.w	r3, [r0, #1]!
 8026aca:	e7f7      	b.n	8026abc <UTIL_MEM_cpy_8+0x4>

08026acc <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8026acc:	4402      	add	r2, r0
 8026ace:	4290      	cmp	r0, r2
 8026ad0:	d100      	bne.n	8026ad4 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
  }
}
 8026ad2:	4770      	bx	lr
    *dst8++ = value;
 8026ad4:	f800 1b01 	strb.w	r1, [r0], #1
 8026ad8:	e7f9      	b.n	8026ace <UTIL_MEM_set_8+0x2>

08026ada <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8026ada:	b082      	sub	sp, #8
 8026adc:	b082      	sub	sp, #8
 8026ade:	f10d 0c08 	add.w	ip, sp, #8
 8026ae2:	e90c 0006 	stmdb	ip, {r1, r2}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 8026ae6:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8026ae8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 8026aec:	9303      	str	r3, [sp, #12]
  c.Seconds = a.Seconds + b.Seconds;
 8026aee:	4413      	add	r3, r2
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8026af0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8026af4:	440a      	add	r2, r1
 8026af6:	b291      	uxth	r1, r2
 8026af8:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 8026afa:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 8026afe:	bfa2      	ittt	ge
 8026b00:	f5a1 727a 	subge.w	r2, r1, #1000	; 0x3e8
    c.Seconds++;
 8026b04:	3301      	addge	r3, #1
    c.SubSeconds -= 1000;
 8026b06:	b212      	sxthge	r2, r2
  }
  return c;
 8026b08:	6003      	str	r3, [r0, #0]
 8026b0a:	8082      	strh	r2, [r0, #4]
}
 8026b0c:	b002      	add	sp, #8
 8026b0e:	b002      	add	sp, #8
 8026b10:	4770      	bx	lr

08026b12 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8026b12:	b082      	sub	sp, #8
 8026b14:	b082      	sub	sp, #8
 8026b16:	f10d 0c08 	add.w	ip, sp, #8
 8026b1a:	e90c 0006 	stmdb	ip, {r1, r2}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 8026b1e:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8026b20:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 8026b24:	9303      	str	r3, [sp, #12]
  c.Seconds = a.Seconds - b.Seconds;
 8026b26:	1ad3      	subs	r3, r2, r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8026b28:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8026b2c:	1a52      	subs	r2, r2, r1
 8026b2e:	b291      	uxth	r1, r2
 8026b30:	b212      	sxth	r2, r2
  if( c.SubSeconds < 0 )
 8026b32:	2a00      	cmp	r2, #0
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 8026b34:	bfbe      	ittt	lt
 8026b36:	f501 727a 	addlt.w	r2, r1, #1000	; 0x3e8
    c.Seconds--;
 8026b3a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
    c.SubSeconds += 1000;
 8026b3e:	b212      	sxthlt	r2, r2
  }
  return c;
 8026b40:	6003      	str	r3, [r0, #0]
 8026b42:	8082      	strh	r2, [r0, #4]
}
 8026b44:	b002      	add	sp, #8
 8026b46:	b002      	add	sp, #8
 8026b48:	4770      	bx	lr
	...

08026b4c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8026b4c:	b530      	push	{r4, r5, lr}
 8026b4e:	b085      	sub	sp, #20
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8026b50:	4d11      	ldr	r5, [pc, #68]	; (8026b98 <SysTimeSet+0x4c>)
{
 8026b52:	466b      	mov	r3, sp
 8026b54:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8026b58:	2300      	movs	r3, #0
 8026b5a:	9302      	str	r3, [sp, #8]
 8026b5c:	f8ad 300c 	strh.w	r3, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8026b60:	a803      	add	r0, sp, #12
 8026b62:	692b      	ldr	r3, [r5, #16]
 8026b64:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 8026b66:	9b00      	ldr	r3, [sp, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8026b68:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8026b6c:	9002      	str	r0, [sp, #8]
  c.Seconds = a.Seconds - b.Seconds;
 8026b6e:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8026b70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8026b74:	1ae4      	subs	r4, r4, r3
 8026b76:	b2a3      	uxth	r3, r4
 8026b78:	b224      	sxth	r4, r4
  if( c.SubSeconds < 0 )
 8026b7a:	2c00      	cmp	r4, #0
    c.SubSeconds += 1000;
 8026b7c:	bfbe      	ittt	lt
 8026b7e:	f503 747a 	addlt.w	r4, r3, #1000	; 0x3e8
    c.Seconds--;
 8026b82:	f100 30ff 	addlt.w	r0, r0, #4294967295	; 0xffffffff
    c.SubSeconds += 1000;
 8026b86:	b224      	sxthlt	r4, r4

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8026b88:	682b      	ldr	r3, [r5, #0]
 8026b8a:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8026b8c:	68ab      	ldr	r3, [r5, #8]
 8026b8e:	4620      	mov	r0, r4
 8026b90:	4798      	blx	r3
}
 8026b92:	b005      	add	sp, #20
 8026b94:	bd30      	pop	{r4, r5, pc}
 8026b96:	bf00      	nop
 8026b98:	08027210 	.word	0x08027210

08026b9c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8026b9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8026b9e:	4e11      	ldr	r6, [pc, #68]	; (8026be4 <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8026ba0:	2300      	movs	r3, #0
{
 8026ba2:	4605      	mov	r5, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8026ba4:	9300      	str	r3, [sp, #0]
 8026ba6:	f8ad 3004 	strh.w	r3, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8026baa:	a801      	add	r0, sp, #4
 8026bac:	6933      	ldr	r3, [r6, #16]
 8026bae:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8026bb0:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8026bb2:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8026bb4:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8026bb6:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8026bb8:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8026bba:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 8026bbc:	9b00      	ldr	r3, [sp, #0]
 8026bbe:	4418      	add	r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8026bc0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8026bc4:	4423      	add	r3, r4
 8026bc6:	b29a      	uxth	r2, r3
 8026bc8:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 8026bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c.Seconds++;
 8026bce:	bfa2      	ittt	ge
 8026bd0:	3001      	addge	r0, #1
    c.SubSeconds -= 1000;
 8026bd2:	f5a2 737a 	subge.w	r3, r2, #1000	; 0x3e8
 8026bd6:	b21b      	sxthge	r3, r3

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 8026bd8:	6028      	str	r0, [r5, #0]
}
 8026bda:	4628      	mov	r0, r5
  return sysTime;
 8026bdc:	80ab      	strh	r3, [r5, #4]
}
 8026bde:	b002      	add	sp, #8
 8026be0:	bd70      	pop	{r4, r5, r6, pc}
 8026be2:	bf00      	nop
 8026be4:	08027210 	.word	0x08027210

08026be8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8026be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8026bea:	2300      	movs	r3, #0
 8026bec:	9300      	str	r3, [sp, #0]
 8026bee:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8026bf2:	4b07      	ldr	r3, [pc, #28]	; (8026c10 <SysTimeGetMcuTime+0x28>)
{
 8026bf4:	4604      	mov	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8026bf6:	691b      	ldr	r3, [r3, #16]
 8026bf8:	a801      	add	r0, sp, #4
 8026bfa:	4798      	blx	r3
 8026bfc:	466d      	mov	r5, sp
 8026bfe:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 8026c00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026c04:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8026c08:	4620      	mov	r0, r4
 8026c0a:	b003      	add	sp, #12
 8026c0c:	bd30      	pop	{r4, r5, pc}
 8026c0e:	bf00      	nop
 8026c10:	08027210 	.word	0x08027210

08026c14 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8026c14:	4b02      	ldr	r3, [pc, #8]	; (8026c20 <UTIL_TIMER_Init+0xc>)
 8026c16:	2200      	movs	r2, #0
 8026c18:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8026c1a:	4b02      	ldr	r3, [pc, #8]	; (8026c24 <UTIL_TIMER_Init+0x10>)
 8026c1c:	681b      	ldr	r3, [r3, #0]
 8026c1e:	4718      	bx	r3
 8026c20:	200027bc 	.word	0x200027bc
 8026c24:	08027224 	.word	0x08027224

08026c28 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8026c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c2a:	4604      	mov	r4, r0
 8026c2c:	4617      	mov	r7, r2
 8026c2e:	4608      	mov	r0, r1
 8026c30:	461e      	mov	r6, r3
  if((TimerObject != NULL) && (Callback != NULL))
 8026c32:	b17c      	cbz	r4, 8026c54 <UTIL_TIMER_Create+0x2c>
 8026c34:	b173      	cbz	r3, 8026c54 <UTIL_TIMER_Create+0x2c>
  {
    TimerObject->Timestamp = 0U;
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8026c36:	4b08      	ldr	r3, [pc, #32]	; (8026c58 <UTIL_TIMER_Create+0x30>)
    TimerObject->Timestamp = 0U;
 8026c38:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8026c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    TimerObject->Timestamp = 0U;
 8026c3c:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8026c3e:	4798      	blx	r3
    TimerObject->IsPending = 0U;
    TimerObject->IsRunning = 0U;
    TimerObject->IsReloadStopped = 0U;
    TimerObject->Callback = Callback;
    TimerObject->argument = Argument;
 8026c40:	9b06      	ldr	r3, [sp, #24]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8026c42:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8026c44:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 8026c46:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8026c48:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8026c4a:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8026c4c:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8026c4e:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8026c50:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8026c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8026c54:	2001      	movs	r0, #1
 8026c56:	e7fc      	b.n	8026c52 <UTIL_TIMER_Create+0x2a>
 8026c58:	08027224 	.word	0x08027224

08026c5c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8026c5c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8026c5e:	4c03      	ldr	r4, [pc, #12]	; (8026c6c <UTIL_TIMER_GetCurrentTime+0x10>)
 8026c60:	69e3      	ldr	r3, [r4, #28]
 8026c62:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8026c64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
}
 8026c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return  UTIL_TimerDriver.Tick2ms(now);
 8026c6a:	4718      	bx	r3
 8026c6c:	08027224 	.word	0x08027224

08026c70 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8026c70:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8026c72:	4d06      	ldr	r5, [pc, #24]	; (8026c8c <UTIL_TIMER_GetElapsedTime+0x1c>)
 8026c74:	69eb      	ldr	r3, [r5, #28]
{
 8026c76:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8026c78:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8026c7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8026c7c:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8026c7e:	4630      	mov	r0, r6
 8026c80:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8026c82:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8026c84:	1a20      	subs	r0, r4, r0
}
 8026c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8026c8a:	4718      	bx	r3
 8026c8c:	08027224 	.word	0x08027224

08026c90 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8026c90:	4b05      	ldr	r3, [pc, #20]	; (8026ca8 <TimerExists+0x18>)
 8026c92:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8026c94:	b90b      	cbnz	r3, 8026c9a <TimerExists+0xa>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 8026c96:	4618      	mov	r0, r3
 8026c98:	4770      	bx	lr
    if( cur == TimerObject )
 8026c9a:	4283      	cmp	r3, r0
 8026c9c:	d001      	beq.n	8026ca2 <TimerExists+0x12>
    cur = cur->Next;
 8026c9e:	695b      	ldr	r3, [r3, #20]
 8026ca0:	e7f8      	b.n	8026c94 <TimerExists+0x4>
      return true;
 8026ca2:	2001      	movs	r0, #1
}
 8026ca4:	4770      	bx	lr
 8026ca6:	bf00      	nop
 8026ca8:	200027bc 	.word	0x200027bc

08026cac <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8026cac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8026cb0:	4d0b      	ldr	r5, [pc, #44]	; (8026ce0 <TimerSetTimeout+0x34>)
 8026cb2:	6a2b      	ldr	r3, [r5, #32]
{
 8026cb4:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8026cb6:	4798      	blx	r3
  TimerObject->IsPending = 1;
 8026cb8:	2301      	movs	r3, #1

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8026cba:	69af      	ldr	r7, [r5, #24]
  TimerObject->IsPending = 1;
 8026cbc:	7223      	strb	r3, [r4, #8]
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8026cbe:	f8d4 8000 	ldr.w	r8, [r4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8026cc2:	4606      	mov	r6, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8026cc4:	47b8      	blx	r7
 8026cc6:	4430      	add	r0, r6
 8026cc8:	4580      	cmp	r8, r0
 8026cca:	d202      	bcs.n	8026cd2 <TimerSetTimeout+0x26>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8026ccc:	47b8      	blx	r7
 8026cce:	4430      	add	r0, r6
 8026cd0:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8026cd2:	68ab      	ldr	r3, [r5, #8]
 8026cd4:	6820      	ldr	r0, [r4, #0]
 8026cd6:	9301      	str	r3, [sp, #4]
}
 8026cd8:	b002      	add	sp, #8
 8026cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8026cde:	4718      	bx	r3
 8026ce0:	08027224 	.word	0x08027224

08026ce4 <UTIL_TIMER_Stop>:
{
 8026ce4:	b570      	push	{r4, r5, r6, lr}
  if (NULL != TimerObject)
 8026ce6:	b320      	cbz	r0, 8026d32 <UTIL_TIMER_Stop+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026ce8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8026cec:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8026cee:	4d12      	ldr	r5, [pc, #72]	; (8026d38 <UTIL_TIMER_Stop+0x54>)
 8026cf0:	682b      	ldr	r3, [r5, #0]
    TimerObject->IsReloadStopped = 1U;
 8026cf2:	2201      	movs	r2, #1
 8026cf4:	7282      	strb	r2, [r0, #10]
    if(NULL != TimerListHead)
 8026cf6:	b153      	cbz	r3, 8026d0e <UTIL_TIMER_Stop+0x2a>
      TimerObject->IsRunning = 0U;
 8026cf8:	2200      	movs	r2, #0
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8026cfa:	4298      	cmp	r0, r3
      TimerObject->IsRunning = 0U;
 8026cfc:	7242      	strb	r2, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8026cfe:	d10f      	bne.n	8026d20 <UTIL_TIMER_Stop+0x3c>
 8026d00:	6944      	ldr	r4, [r0, #20]
          TimerListHead->IsPending = 0;
 8026d02:	7202      	strb	r2, [r0, #8]
          if( TimerListHead->Next != NULL )
 8026d04:	b13c      	cbz	r4, 8026d16 <UTIL_TIMER_Stop+0x32>
            TimerSetTimeout( TimerListHead );
 8026d06:	4620      	mov	r0, r4
            TimerListHead = TimerListHead->Next;
 8026d08:	602c      	str	r4, [r5, #0]
            TimerSetTimeout( TimerListHead );
 8026d0a:	f7ff ffcf 	bl	8026cac <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026d0e:	f386 8810 	msr	PRIMASK, r6
}
 8026d12:	2000      	movs	r0, #0
}
 8026d14:	bd70      	pop	{r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 8026d16:	4b09      	ldr	r3, [pc, #36]	; (8026d3c <UTIL_TIMER_Stop+0x58>)
 8026d18:	68db      	ldr	r3, [r3, #12]
 8026d1a:	4798      	blx	r3
            TimerListHead = NULL;
 8026d1c:	602c      	str	r4, [r5, #0]
 8026d1e:	e7f6      	b.n	8026d0e <UTIL_TIMER_Stop+0x2a>
            cur = cur->Next;
 8026d20:	461a      	mov	r2, r3
 8026d22:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 8026d24:	2b00      	cmp	r3, #0
 8026d26:	d0f2      	beq.n	8026d0e <UTIL_TIMER_Stop+0x2a>
          if( cur == TimerObject )
 8026d28:	4298      	cmp	r0, r3
 8026d2a:	d1f9      	bne.n	8026d20 <UTIL_TIMER_Stop+0x3c>
            if( cur->Next != NULL )
 8026d2c:	6943      	ldr	r3, [r0, #20]
              prev->Next = cur;
 8026d2e:	6153      	str	r3, [r2, #20]
 8026d30:	e7ed      	b.n	8026d0e <UTIL_TIMER_Stop+0x2a>
    ret = UTIL_TIMER_INVALID_PARAM;
 8026d32:	2001      	movs	r0, #1
 8026d34:	e7ee      	b.n	8026d14 <UTIL_TIMER_Stop+0x30>
 8026d36:	bf00      	nop
 8026d38:	200027bc 	.word	0x200027bc
 8026d3c:	08027224 	.word	0x08027224

08026d40 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8026d40:	4b09      	ldr	r3, [pc, #36]	; (8026d68 <TimerInsertTimer+0x28>)
{
 8026d42:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8026d44:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8026d46:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 8026d48:	6959      	ldr	r1, [r3, #20]
 8026d4a:	b911      	cbnz	r1, 8026d52 <TimerInsertTimer+0x12>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8026d4c:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 8026d4e:	6141      	str	r1, [r0, #20]
 8026d50:	e008      	b.n	8026d64 <TimerInsertTimer+0x24>
    if( TimerObject->Timestamp  > next->Timestamp )
 8026d52:	6804      	ldr	r4, [r0, #0]
 8026d54:	6811      	ldr	r1, [r2, #0]
 8026d56:	428c      	cmp	r4, r1
 8026d58:	d902      	bls.n	8026d60 <TimerInsertTimer+0x20>
        next = next->Next;
 8026d5a:	4613      	mov	r3, r2
 8026d5c:	6952      	ldr	r2, [r2, #20]
 8026d5e:	e7f3      	b.n	8026d48 <TimerInsertTimer+0x8>
        cur->Next = TimerObject;
 8026d60:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 8026d62:	6142      	str	r2, [r0, #20]
}
 8026d64:	bd10      	pop	{r4, pc}
 8026d66:	bf00      	nop
 8026d68:	200027bc 	.word	0x200027bc

08026d6c <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8026d6c:	4b04      	ldr	r3, [pc, #16]	; (8026d80 <TimerInsertNewHeadTimer+0x14>)
 8026d6e:	681a      	ldr	r2, [r3, #0]

  if( cur != NULL )
 8026d70:	b10a      	cbz	r2, 8026d76 <TimerInsertNewHeadTimer+0xa>
  {
    cur->IsPending = 0;
 8026d72:	2100      	movs	r1, #0
 8026d74:	7211      	strb	r1, [r2, #8]
  }

  TimerObject->Next = cur;
 8026d76:	6142      	str	r2, [r0, #20]
  TimerListHead = TimerObject;
 8026d78:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8026d7a:	f7ff bf97 	b.w	8026cac <TimerSetTimeout>
 8026d7e:	bf00      	nop
 8026d80:	200027bc 	.word	0x200027bc

08026d84 <UTIL_TIMER_Start>:
{
 8026d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8026d88:	4604      	mov	r4, r0
 8026d8a:	2800      	cmp	r0, #0
 8026d8c:	d02d      	beq.n	8026dea <UTIL_TIMER_Start+0x66>
 8026d8e:	f7ff ff7f 	bl	8026c90 <TimerExists>
 8026d92:	bb50      	cbnz	r0, 8026dea <UTIL_TIMER_Start+0x66>
 8026d94:	7a65      	ldrb	r5, [r4, #9]
 8026d96:	bb45      	cbnz	r5, 8026dea <UTIL_TIMER_Start+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026d98:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8026d9c:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8026d9e:	4e14      	ldr	r6, [pc, #80]	; (8026df0 <UTIL_TIMER_Start+0x6c>)
    ticks = TimerObject->ReloadValue;
 8026da0:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8026da2:	6a33      	ldr	r3, [r6, #32]
 8026da4:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 8026da6:	4287      	cmp	r7, r0
 8026da8:	bf2c      	ite	cs
 8026daa:	6027      	strcs	r7, [r4, #0]
 8026dac:	6020      	strcc	r0, [r4, #0]
    if( TimerListHead == NULL )
 8026dae:	4f11      	ldr	r7, [pc, #68]	; (8026df4 <UTIL_TIMER_Start+0x70>)
    TimerObject->IsReloadStopped = 0U;
 8026db0:	72a5      	strb	r5, [r4, #10]
    TimerObject->IsPending = 0U;
 8026db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8026db6:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
 8026db8:	683b      	ldr	r3, [r7, #0]
 8026dba:	b94b      	cbnz	r3, 8026dd0 <UTIL_TIMER_Start+0x4c>
      UTIL_TimerDriver.SetTimerContext();
 8026dbc:	6933      	ldr	r3, [r6, #16]
 8026dbe:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8026dc0:	4620      	mov	r0, r4
        TimerInsertNewHeadTimer( TimerObject);
 8026dc2:	f7ff ffd3 	bl	8026d6c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026dc6:	f388 8810 	msr	PRIMASK, r8
}
 8026dca:	4628      	mov	r0, r5
 8026dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8026dd0:	69b3      	ldr	r3, [r6, #24]
 8026dd2:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8026dd4:	6823      	ldr	r3, [r4, #0]
 8026dd6:	4418      	add	r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8026dd8:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 8026dda:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8026ddc:	681b      	ldr	r3, [r3, #0]
 8026dde:	4298      	cmp	r0, r3
        TimerInsertNewHeadTimer( TimerObject);
 8026de0:	4620      	mov	r0, r4
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8026de2:	d3ee      	bcc.n	8026dc2 <UTIL_TIMER_Start+0x3e>
        TimerInsertTimer( TimerObject);
 8026de4:	f7ff ffac 	bl	8026d40 <TimerInsertTimer>
 8026de8:	e7ed      	b.n	8026dc6 <UTIL_TIMER_Start+0x42>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8026dea:	2501      	movs	r5, #1
 8026dec:	e7ed      	b.n	8026dca <UTIL_TIMER_Start+0x46>
 8026dee:	bf00      	nop
 8026df0:	08027224 	.word	0x08027224
 8026df4:	200027bc 	.word	0x200027bc

08026df8 <UTIL_TIMER_SetPeriod>:
{
 8026df8:	b510      	push	{r4, lr}
 8026dfa:	4604      	mov	r4, r0
 8026dfc:	4608      	mov	r0, r1
  if(NULL == TimerObject)
 8026dfe:	b17c      	cbz	r4, 8026e20 <UTIL_TIMER_SetPeriod+0x28>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8026e00:	4b08      	ldr	r3, [pc, #32]	; (8026e24 <UTIL_TIMER_SetPeriod+0x2c>)
 8026e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026e04:	4798      	blx	r3
 8026e06:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8026e08:	4620      	mov	r0, r4
 8026e0a:	f7ff ff41 	bl	8026c90 <TimerExists>
 8026e0e:	b140      	cbz	r0, 8026e22 <UTIL_TIMER_SetPeriod+0x2a>
      (void)UTIL_TIMER_Stop(TimerObject);
 8026e10:	4620      	mov	r0, r4
 8026e12:	f7ff ff67 	bl	8026ce4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8026e16:	4620      	mov	r0, r4
}
 8026e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ret = UTIL_TIMER_Start(TimerObject);
 8026e1c:	f7ff bfb2 	b.w	8026d84 <UTIL_TIMER_Start>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8026e20:	2001      	movs	r0, #1
}
 8026e22:	bd10      	pop	{r4, pc}
 8026e24:	08027224 	.word	0x08027224

08026e28 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8026e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e2c:	b099      	sub	sp, #100	; 0x64

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8026e2e:	2900      	cmp	r1, #0
{
 8026e30:	4683      	mov	fp, r0
  if (size <= 0)
 8026e32:	9105      	str	r1, [sp, #20]
 8026e34:	f340 8109 	ble.w	802704a <tiny_vsnprintf_like+0x222>
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8026e38:	4604      	mov	r4, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8026e3a:	f04f 0920 	mov.w	r9, #32
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8026e3e:	9905      	ldr	r1, [sp, #20]
 8026e40:	7815      	ldrb	r5, [r2, #0]
 8026e42:	eba4 000b 	sub.w	r0, r4, fp
 8026e46:	3901      	subs	r1, #1
 8026e48:	b925      	cbnz	r5, 8026e54 <tiny_vsnprintf_like+0x2c>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 8026e4a:	2300      	movs	r3, #0
 8026e4c:	7023      	strb	r3, [r4, #0]
  return str - buf;
}
 8026e4e:	b019      	add	sp, #100	; 0x64
 8026e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    CHECK_STR_SIZE(buf, str, size);
 8026e54:	4288      	cmp	r0, r1
 8026e56:	daf8      	bge.n	8026e4a <tiny_vsnprintf_like+0x22>
    if (*fmt != '%')
 8026e58:	2d25      	cmp	r5, #37	; 0x25
 8026e5a:	d004      	beq.n	8026e66 <tiny_vsnprintf_like+0x3e>
      *str++ = *fmt;
 8026e5c:	f804 5b01 	strb.w	r5, [r4], #1
      continue;
 8026e60:	4616      	mov	r6, r2
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8026e62:	1c72      	adds	r2, r6, #1
 8026e64:	e7eb      	b.n	8026e3e <tiny_vsnprintf_like+0x16>
    if (*fmt == '0')
 8026e66:	f892 e001 	ldrb.w	lr, [r2, #1]
 8026e6a:	1c56      	adds	r6, r2, #1
 8026e6c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8026e70:	4250      	negs	r0, r2
 8026e72:	4150      	adcs	r0, r2
    if (is_digit(*fmt))
 8026e74:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8026e78:	2a09      	cmp	r2, #9
 8026e7a:	d828      	bhi.n	8026ece <tiny_vsnprintf_like+0xa6>
 8026e7c:	4637      	mov	r7, r6
  int i = 0;
 8026e7e:	2500      	movs	r5, #0
 8026e80:	463e      	mov	r6, r7
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8026e82:	f817 2b01 	ldrb.w	r2, [r7], #1
 8026e86:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8026e8a:	f1bc 0f09 	cmp.w	ip, #9
 8026e8e:	d919      	bls.n	8026ec4 <tiny_vsnprintf_like+0x9c>
    switch (*fmt)
 8026e90:	7832      	ldrb	r2, [r6, #0]
 8026e92:	2a69      	cmp	r2, #105	; 0x69
 8026e94:	f000 8097 	beq.w	8026fc6 <tiny_vsnprintf_like+0x19e>
 8026e98:	d81c      	bhi.n	8026ed4 <tiny_vsnprintf_like+0xac>
 8026e9a:	2a63      	cmp	r2, #99	; 0x63
 8026e9c:	d028      	beq.n	8026ef0 <tiny_vsnprintf_like+0xc8>
 8026e9e:	2a64      	cmp	r2, #100	; 0x64
 8026ea0:	f000 8091 	beq.w	8026fc6 <tiny_vsnprintf_like+0x19e>
 8026ea4:	2a58      	cmp	r2, #88	; 0x58
 8026ea6:	d059      	beq.n	8026f5c <tiny_vsnprintf_like+0x134>
        if (*fmt != '%') *str++ = '%';
 8026ea8:	2a25      	cmp	r2, #37	; 0x25
 8026eaa:	d119      	bne.n	8026ee0 <tiny_vsnprintf_like+0xb8>
        if (*fmt)
 8026eac:	7832      	ldrb	r2, [r6, #0]
 8026eae:	2a00      	cmp	r2, #0
 8026eb0:	f000 808d 	beq.w	8026fce <tiny_vsnprintf_like+0x1a6>
          *str++ = *fmt;
 8026eb4:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8026eb8:	eba4 020b 	sub.w	r2, r4, fp
 8026ebc:	428a      	cmp	r2, r1
 8026ebe:	f280 8084 	bge.w	8026fca <tiny_vsnprintf_like+0x1a2>
 8026ec2:	e7ce      	b.n	8026e62 <tiny_vsnprintf_like+0x3a>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8026ec4:	260a      	movs	r6, #10
 8026ec6:	fb06 2505 	mla	r5, r6, r5, r2
 8026eca:	3d30      	subs	r5, #48	; 0x30
 8026ecc:	e7d8      	b.n	8026e80 <tiny_vsnprintf_like+0x58>
    field_width = -1;
 8026ece:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8026ed2:	e7dd      	b.n	8026e90 <tiny_vsnprintf_like+0x68>
    switch (*fmt)
 8026ed4:	2a75      	cmp	r2, #117	; 0x75
 8026ed6:	d078      	beq.n	8026fca <tiny_vsnprintf_like+0x1a2>
 8026ed8:	2a78      	cmp	r2, #120	; 0x78
 8026eda:	d041      	beq.n	8026f60 <tiny_vsnprintf_like+0x138>
 8026edc:	2a73      	cmp	r2, #115	; 0x73
 8026ede:	d01c      	beq.n	8026f1a <tiny_vsnprintf_like+0xf2>
        if (*fmt != '%') *str++ = '%';
 8026ee0:	2225      	movs	r2, #37	; 0x25
 8026ee2:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8026ee6:	eba4 020b 	sub.w	r2, r4, fp
 8026eea:	428a      	cmp	r2, r1
 8026eec:	da6d      	bge.n	8026fca <tiny_vsnprintf_like+0x1a2>
 8026eee:	e7dd      	b.n	8026eac <tiny_vsnprintf_like+0x84>
 8026ef0:	1e61      	subs	r1, r4, #1
    switch (*fmt)
 8026ef2:	462a      	mov	r2, r5
          while (--field_width > 0) *str++ = ' ';
 8026ef4:	3a01      	subs	r2, #1
 8026ef6:	2a00      	cmp	r2, #0
 8026ef8:	dc0c      	bgt.n	8026f14 <tiny_vsnprintf_like+0xec>
 8026efa:	2d00      	cmp	r5, #0
 8026efc:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8026f00:	bfd8      	it	le
 8026f02:	2200      	movle	r2, #0
 8026f04:	4422      	add	r2, r4
        *str++ = (unsigned char) va_arg(args, int);
 8026f06:	f853 1b04 	ldr.w	r1, [r3], #4
 8026f0a:	7011      	strb	r1, [r2, #0]
 8026f0c:	bfd8      	it	le
 8026f0e:	2501      	movle	r5, #1
 8026f10:	442c      	add	r4, r5
        continue;
 8026f12:	e7a6      	b.n	8026e62 <tiny_vsnprintf_like+0x3a>
          while (--field_width > 0) *str++ = ' ';
 8026f14:	f801 9f01 	strb.w	r9, [r1, #1]!
 8026f18:	e7ec      	b.n	8026ef4 <tiny_vsnprintf_like+0xcc>
        s = va_arg(args, char *);
 8026f1a:	4698      	mov	r8, r3
        if (!s) s = "<NULL>";
 8026f1c:	4b4c      	ldr	r3, [pc, #304]	; (8027050 <tiny_vsnprintf_like+0x228>)
        s = va_arg(args, char *);
 8026f1e:	f858 7b04 	ldr.w	r7, [r8], #4
        if (!s) s = "<NULL>";
 8026f22:	2f00      	cmp	r7, #0
 8026f24:	bf08      	it	eq
 8026f26:	461f      	moveq	r7, r3
        len = strlen(s);
 8026f28:	4638      	mov	r0, r7
 8026f2a:	f7f1 fa89 	bl	8018440 <strlen>
          while (len < field_width--) *str++ = ' ';
 8026f2e:	4623      	mov	r3, r4
 8026f30:	1961      	adds	r1, r4, r5
 8026f32:	1aca      	subs	r2, r1, r3
 8026f34:	4290      	cmp	r0, r2
 8026f36:	db0a      	blt.n	8026f4e <tiny_vsnprintf_like+0x126>
 8026f38:	1a2b      	subs	r3, r5, r0
 8026f3a:	4285      	cmp	r5, r0
 8026f3c:	bfb8      	it	lt
 8026f3e:	2300      	movlt	r3, #0
 8026f40:	441c      	add	r4, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 8026f42:	2300      	movs	r3, #0
 8026f44:	4283      	cmp	r3, r0
 8026f46:	db05      	blt.n	8026f54 <tiny_vsnprintf_like+0x12c>
 8026f48:	4404      	add	r4, r0
        s = va_arg(args, char *);
 8026f4a:	4643      	mov	r3, r8
 8026f4c:	e789      	b.n	8026e62 <tiny_vsnprintf_like+0x3a>
          while (len < field_width--) *str++ = ' ';
 8026f4e:	f803 9b01 	strb.w	r9, [r3], #1
 8026f52:	e7ee      	b.n	8026f32 <tiny_vsnprintf_like+0x10a>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8026f54:	5cfa      	ldrb	r2, [r7, r3]
 8026f56:	54e2      	strb	r2, [r4, r3]
 8026f58:	3301      	adds	r3, #1
 8026f5a:	e7f3      	b.n	8026f44 <tiny_vsnprintf_like+0x11c>
        flags |= UPPERCASE;
 8026f5c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    switch (*fmt)
 8026f60:	2710      	movs	r7, #16
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8026f62:	eba4 020b 	sub.w	r2, r4, fp
 8026f66:	9302      	str	r3, [sp, #8]
 8026f68:	1a8b      	subs	r3, r1, r2
 8026f6a:	9301      	str	r3, [sp, #4]
 8026f6c:	9b02      	ldr	r3, [sp, #8]
  char *dig = lower_digits;
 8026f6e:	4a39      	ldr	r2, [pc, #228]	; (8027054 <tiny_vsnprintf_like+0x22c>)
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8026f70:	f853 1b04 	ldr.w	r1, [r3], #4
 8026f74:	9302      	str	r3, [sp, #8]
  char *dig = lower_digits;
 8026f76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026f7a:	4b37      	ldr	r3, [pc, #220]	; (8027058 <tiny_vsnprintf_like+0x230>)
 8026f7c:	bf08      	it	eq
 8026f7e:	4613      	moveq	r3, r2
  c = (type & ZEROPAD) ? '0' : ' ';
 8026f80:	f1be 0f30 	cmp.w	lr, #48	; 0x30
  char *dig = lower_digits;
 8026f84:	9303      	str	r3, [sp, #12]
  c = (type & ZEROPAD) ? '0' : ' ';
 8026f86:	bf0c      	ite	eq
 8026f88:	2330      	moveq	r3, #48	; 0x30
 8026f8a:	2320      	movne	r3, #32
 8026f8c:	9304      	str	r3, [sp, #16]
  if (type & SIGN)
 8026f8e:	0783      	lsls	r3, r0, #30
 8026f90:	d51f      	bpl.n	8026fd2 <tiny_vsnprintf_like+0x1aa>
    if (num < 0)
 8026f92:	2900      	cmp	r1, #0
 8026f94:	da1d      	bge.n	8026fd2 <tiny_vsnprintf_like+0x1aa>
      num = -num;
 8026f96:	4249      	negs	r1, r1
      size--;
 8026f98:	3d01      	subs	r5, #1
      sign = '-';
 8026f9a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    while (num != 0)
 8026f9e:	ab07      	add	r3, sp, #28
 8026fa0:	461a      	mov	r2, r3
  i = 0;
 8026fa2:	2000      	movs	r0, #0
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8026fa4:	4688      	mov	r8, r1
 8026fa6:	9b03      	ldr	r3, [sp, #12]
 8026fa8:	fbb1 f1f7 	udiv	r1, r1, r7
 8026fac:	fb07 8a11 	mls	sl, r7, r1, r8
    while (num != 0)
 8026fb0:	4547      	cmp	r7, r8
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8026fb2:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8026fb6:	4613      	mov	r3, r2
 8026fb8:	f100 0001 	add.w	r0, r0, #1
 8026fbc:	f803 ab01 	strb.w	sl, [r3], #1
 8026fc0:	461a      	mov	r2, r3
    while (num != 0)
 8026fc2:	d9ef      	bls.n	8026fa4 <tiny_vsnprintf_like+0x17c>
 8026fc4:	e00e      	b.n	8026fe4 <tiny_vsnprintf_like+0x1bc>
        flags |= SIGN;
 8026fc6:	f040 0002 	orr.w	r0, r0, #2
    base = 10;
 8026fca:	270a      	movs	r7, #10
 8026fcc:	e7c9      	b.n	8026f62 <tiny_vsnprintf_like+0x13a>
          --fmt;
 8026fce:	3e01      	subs	r6, #1
        CHECK_STR_SIZE(buf, str, size);
 8026fd0:	e747      	b.n	8026e62 <tiny_vsnprintf_like+0x3a>
  if (num == 0)
 8026fd2:	b111      	cbz	r1, 8026fda <tiny_vsnprintf_like+0x1b2>
 8026fd4:	f04f 0c00 	mov.w	ip, #0
 8026fd8:	e7e1      	b.n	8026f9e <tiny_vsnprintf_like+0x176>
    tmp[i++] = '0';
 8026fda:	2030      	movs	r0, #48	; 0x30
 8026fdc:	f88d 001c 	strb.w	r0, [sp, #28]
 8026fe0:	468c      	mov	ip, r1
 8026fe2:	2001      	movs	r0, #1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8026fe4:	f1be 0f30 	cmp.w	lr, #48	; 0x30
  size -= precision;
 8026fe8:	eba5 0500 	sub.w	r5, r5, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8026fec:	d110      	bne.n	8027010 <tiny_vsnprintf_like+0x1e8>
  if (sign) ASSIGN_STR(sign);
 8026fee:	f1bc 0f00 	cmp.w	ip, #0
 8026ff2:	d028      	beq.n	8027046 <tiny_vsnprintf_like+0x21e>
 8026ff4:	9b01      	ldr	r3, [sp, #4]
 8026ff6:	f804 cb01 	strb.w	ip, [r4], #1
 8026ffa:	3b01      	subs	r3, #1
 8026ffc:	9301      	str	r3, [sp, #4]
 8026ffe:	d122      	bne.n	8027046 <tiny_vsnprintf_like+0x21e>
 8027000:	9b02      	ldr	r3, [sp, #8]
 8027002:	e72e      	b.n	8026e62 <tiny_vsnprintf_like+0x3a>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8027004:	9b01      	ldr	r3, [sp, #4]
 8027006:	f804 9b01 	strb.w	r9, [r4], #1
 802700a:	3b01      	subs	r3, #1
 802700c:	9301      	str	r3, [sp, #4]
 802700e:	d0f7      	beq.n	8027000 <tiny_vsnprintf_like+0x1d8>
 8027010:	2d00      	cmp	r5, #0
 8027012:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8027016:	dcf5      	bgt.n	8027004 <tiny_vsnprintf_like+0x1dc>
 8027018:	e7e9      	b.n	8026fee <tiny_vsnprintf_like+0x1c6>
  while (size-- > 0) ASSIGN_STR(c);
 802701a:	9b04      	ldr	r3, [sp, #16]
 802701c:	f804 3b01 	strb.w	r3, [r4], #1
 8027020:	9b01      	ldr	r3, [sp, #4]
 8027022:	3b01      	subs	r3, #1
 8027024:	9301      	str	r3, [sp, #4]
 8027026:	d0eb      	beq.n	8027000 <tiny_vsnprintf_like+0x1d8>
 8027028:	1b29      	subs	r1, r5, r4
 802702a:	2900      	cmp	r1, #0
 802702c:	dcf5      	bgt.n	802701a <tiny_vsnprintf_like+0x1f2>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 802702e:	9b01      	ldr	r3, [sp, #4]
 8027030:	4423      	add	r3, r4
 8027032:	461a      	mov	r2, r3
 8027034:	3801      	subs	r0, #1
 8027036:	d3e3      	bcc.n	8027000 <tiny_vsnprintf_like+0x1d8>
 8027038:	ab07      	add	r3, sp, #28
 802703a:	5c19      	ldrb	r1, [r3, r0]
 802703c:	f804 1b01 	strb.w	r1, [r4], #1
 8027040:	4294      	cmp	r4, r2
 8027042:	d1f7      	bne.n	8027034 <tiny_vsnprintf_like+0x20c>
 8027044:	e7dc      	b.n	8027000 <tiny_vsnprintf_like+0x1d8>
 8027046:	4425      	add	r5, r4
 8027048:	e7ee      	b.n	8027028 <tiny_vsnprintf_like+0x200>
    return 0;
 802704a:	2000      	movs	r0, #0
 802704c:	e6ff      	b.n	8026e4e <tiny_vsnprintf_like+0x26>
 802704e:	bf00      	nop
 8027050:	08028176 	.word	0x08028176
 8027054:	080281a2 	.word	0x080281a2
 8027058:	0802817d 	.word	0x0802817d

0802705c <__libc_init_array>:
 802705c:	b570      	push	{r4, r5, r6, lr}
 802705e:	4d0d      	ldr	r5, [pc, #52]	; (8027094 <__libc_init_array+0x38>)
 8027060:	4c0d      	ldr	r4, [pc, #52]	; (8027098 <__libc_init_array+0x3c>)
 8027062:	1b64      	subs	r4, r4, r5
 8027064:	10a4      	asrs	r4, r4, #2
 8027066:	2600      	movs	r6, #0
 8027068:	42a6      	cmp	r6, r4
 802706a:	d109      	bne.n	8027080 <__libc_init_array+0x24>
 802706c:	4d0b      	ldr	r5, [pc, #44]	; (802709c <__libc_init_array+0x40>)
 802706e:	4c0c      	ldr	r4, [pc, #48]	; (80270a0 <__libc_init_array+0x44>)
 8027070:	f000 f8a2 	bl	80271b8 <_init>
 8027074:	1b64      	subs	r4, r4, r5
 8027076:	10a4      	asrs	r4, r4, #2
 8027078:	2600      	movs	r6, #0
 802707a:	42a6      	cmp	r6, r4
 802707c:	d105      	bne.n	802708a <__libc_init_array+0x2e>
 802707e:	bd70      	pop	{r4, r5, r6, pc}
 8027080:	f855 3b04 	ldr.w	r3, [r5], #4
 8027084:	4798      	blx	r3
 8027086:	3601      	adds	r6, #1
 8027088:	e7ee      	b.n	8027068 <__libc_init_array+0xc>
 802708a:	f855 3b04 	ldr.w	r3, [r5], #4
 802708e:	4798      	blx	r3
 8027090:	3601      	adds	r6, #1
 8027092:	e7f2      	b.n	802707a <__libc_init_array+0x1e>
 8027094:	080281d0 	.word	0x080281d0
 8027098:	080281d0 	.word	0x080281d0
 802709c:	080281d0 	.word	0x080281d0
 80270a0:	080281d4 	.word	0x080281d4

080270a4 <memset>:
 80270a4:	4402      	add	r2, r0
 80270a6:	4603      	mov	r3, r0
 80270a8:	4293      	cmp	r3, r2
 80270aa:	d100      	bne.n	80270ae <memset+0xa>
 80270ac:	4770      	bx	lr
 80270ae:	f803 1b01 	strb.w	r1, [r3], #1
 80270b2:	e7f9      	b.n	80270a8 <memset+0x4>
 80270b4:	0000      	movs	r0, r0
	...

080270b8 <floor>:
 80270b8:	ec51 0b10 	vmov	r0, r1, d0
 80270bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80270c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80270c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80270c8:	2e13      	cmp	r6, #19
 80270ca:	ee10 5a10 	vmov	r5, s0
 80270ce:	ee10 8a10 	vmov	r8, s0
 80270d2:	460c      	mov	r4, r1
 80270d4:	dc32      	bgt.n	802713c <floor+0x84>
 80270d6:	2e00      	cmp	r6, #0
 80270d8:	da14      	bge.n	8027104 <floor+0x4c>
 80270da:	a333      	add	r3, pc, #204	; (adr r3, 80271a8 <floor+0xf0>)
 80270dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270e0:	f7f1 f9bc 	bl	801845c <__adddf3>
 80270e4:	2200      	movs	r2, #0
 80270e6:	2300      	movs	r3, #0
 80270e8:	f7f1 fdfe 	bl	8018ce8 <__aeabi_dcmpgt>
 80270ec:	b138      	cbz	r0, 80270fe <floor+0x46>
 80270ee:	2c00      	cmp	r4, #0
 80270f0:	da57      	bge.n	80271a2 <floor+0xea>
 80270f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80270f6:	431d      	orrs	r5, r3
 80270f8:	d001      	beq.n	80270fe <floor+0x46>
 80270fa:	4c2d      	ldr	r4, [pc, #180]	; (80271b0 <floor+0xf8>)
 80270fc:	2500      	movs	r5, #0
 80270fe:	4621      	mov	r1, r4
 8027100:	4628      	mov	r0, r5
 8027102:	e025      	b.n	8027150 <floor+0x98>
 8027104:	4f2b      	ldr	r7, [pc, #172]	; (80271b4 <floor+0xfc>)
 8027106:	4137      	asrs	r7, r6
 8027108:	ea01 0307 	and.w	r3, r1, r7
 802710c:	4303      	orrs	r3, r0
 802710e:	d01f      	beq.n	8027150 <floor+0x98>
 8027110:	a325      	add	r3, pc, #148	; (adr r3, 80271a8 <floor+0xf0>)
 8027112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027116:	f7f1 f9a1 	bl	801845c <__adddf3>
 802711a:	2200      	movs	r2, #0
 802711c:	2300      	movs	r3, #0
 802711e:	f7f1 fde3 	bl	8018ce8 <__aeabi_dcmpgt>
 8027122:	2800      	cmp	r0, #0
 8027124:	d0eb      	beq.n	80270fe <floor+0x46>
 8027126:	2c00      	cmp	r4, #0
 8027128:	bfbe      	ittt	lt
 802712a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802712e:	fa43 f606 	asrlt.w	r6, r3, r6
 8027132:	19a4      	addlt	r4, r4, r6
 8027134:	ea24 0407 	bic.w	r4, r4, r7
 8027138:	2500      	movs	r5, #0
 802713a:	e7e0      	b.n	80270fe <floor+0x46>
 802713c:	2e33      	cmp	r6, #51	; 0x33
 802713e:	dd0b      	ble.n	8027158 <floor+0xa0>
 8027140:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8027144:	d104      	bne.n	8027150 <floor+0x98>
 8027146:	ee10 2a10 	vmov	r2, s0
 802714a:	460b      	mov	r3, r1
 802714c:	f7f1 f986 	bl	801845c <__adddf3>
 8027150:	ec41 0b10 	vmov	d0, r0, r1
 8027154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027158:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802715c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8027160:	fa23 f707 	lsr.w	r7, r3, r7
 8027164:	4207      	tst	r7, r0
 8027166:	d0f3      	beq.n	8027150 <floor+0x98>
 8027168:	a30f      	add	r3, pc, #60	; (adr r3, 80271a8 <floor+0xf0>)
 802716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802716e:	f7f1 f975 	bl	801845c <__adddf3>
 8027172:	2200      	movs	r2, #0
 8027174:	2300      	movs	r3, #0
 8027176:	f7f1 fdb7 	bl	8018ce8 <__aeabi_dcmpgt>
 802717a:	2800      	cmp	r0, #0
 802717c:	d0bf      	beq.n	80270fe <floor+0x46>
 802717e:	2c00      	cmp	r4, #0
 8027180:	da02      	bge.n	8027188 <floor+0xd0>
 8027182:	2e14      	cmp	r6, #20
 8027184:	d103      	bne.n	802718e <floor+0xd6>
 8027186:	3401      	adds	r4, #1
 8027188:	ea25 0507 	bic.w	r5, r5, r7
 802718c:	e7b7      	b.n	80270fe <floor+0x46>
 802718e:	2301      	movs	r3, #1
 8027190:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8027194:	fa03 f606 	lsl.w	r6, r3, r6
 8027198:	4435      	add	r5, r6
 802719a:	4545      	cmp	r5, r8
 802719c:	bf38      	it	cc
 802719e:	18e4      	addcc	r4, r4, r3
 80271a0:	e7f2      	b.n	8027188 <floor+0xd0>
 80271a2:	2500      	movs	r5, #0
 80271a4:	462c      	mov	r4, r5
 80271a6:	e7aa      	b.n	80270fe <floor+0x46>
 80271a8:	8800759c 	.word	0x8800759c
 80271ac:	7e37e43c 	.word	0x7e37e43c
 80271b0:	bff00000 	.word	0xbff00000
 80271b4:	000fffff 	.word	0x000fffff

080271b8 <_init>:
 80271b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80271ba:	bf00      	nop
 80271bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80271be:	bc08      	pop	{r3}
 80271c0:	469e      	mov	lr, r3
 80271c2:	4770      	bx	lr

080271c4 <_fini>:
 80271c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80271c6:	bf00      	nop
 80271c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80271ca:	bc08      	pop	{r3}
 80271cc:	469e      	mov	lr, r3
 80271ce:	4770      	bx	lr
